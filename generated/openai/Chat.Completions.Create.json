{
  "moduleName": "OpenAI / Chat / Completions / Create",
  "version": "0.0.0",
  "description": "Creates a model response for the given chat conversation.",
  "keywords": [],
  "cacheMode": "always",
  "evalMode": "manual",
  "params": {
    "auth": {
      "schema": {
        "type": "string",
        "description": "OpenAI API key.\n"
      },
      "advanced": false,
      "hideValue": false
    },
    "betaAccess": {
      "schema": {
        "type": "string",
        "default": "assistants=v2",
        "description": "Adds OpenAI-Beta for access to new and experimental features."
      },
      "advanced": true,
      "hideValue": false
    },
    "messages": {
      "schema": {
        "type": "array",
        "items": {
          "type": "any"
        },
        "description": "A list of messages comprising the conversation so far."
      },
      "advanced": false,
      "hideValue": false
    },
    "model": {
      "schema": {
        "type": "string",
        "default": "gpt-4o",
        "description": "ID of the model to use."
      },
      "advanced": false,
      "hideValue": false
    },
    "frequencyPenalty": {
      "schema": {
        "type": "number",
        "default": "0",
        "minimum": -2,
        "maximum": 2,
        "optional": true,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.\n"
      },
      "advanced": true,
      "hideValue": false
    },
    "logitBias": {
      "schema": {
        "type": "any",
        "optional": true,
        "description": "Modify the likelihood of specified tokens appearing in the completion. Accepts a JSON object that maps tokens (specified by their token ID in the tokenizer) to an associated bias value from -100 to 100. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token.\n"
      },
      "advanced": true,
      "hideValue": true
    },
    "logprobs": {
      "schema": {
        "type": "boolean",
        "default": "false",
        "optional": true,
        "description": "Whether to return log probabilities of the output tokens or not. If true, returns the log probabilities of each output token returned in the `content` of `message`."
      },
      "advanced": true,
      "hideValue": false
    },
    "topLogprobs": {
      "schema": {
        "type": "number",
        "minimum": 0,
        "maximum": 20,
        "optional": true,
        "description": "An integer between 0 and 20 specifying the number of most likely tokens to return at each token position, each with an associated log probability. `logprobs` must be set to `true` if this parameter is used."
      },
      "advanced": true,
      "hideValue": false
    },
    "maxTokens": {
      "schema": {
        "type": "number",
        "optional": true,
        "description": "The maximum number of tokens that can be generated in the chat completion.\nThe total length of input tokens and generated tokens is limited by the model's context length.\n"
      },
      "advanced": true,
      "hideValue": false
    },
    "n": {
      "schema": {
        "type": "number",
        "default": "1",
        "minimum": 1,
        "maximum": 128,
        "optional": true,
        "description": "How many chat completion choices to generate for each input message. Note that you will be charged based on the number of generated tokens across all of the choices. Keep `n` as `1` to minimize costs."
      },
      "advanced": true,
      "hideValue": false
    },
    "presencePenalty": {
      "schema": {
        "type": "number",
        "default": "0",
        "minimum": -2,
        "maximum": 2,
        "optional": true,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.\n"
      },
      "advanced": true,
      "hideValue": false
    },
    "responseFormat": {
      "schema": {
        "type": "any",
        "optional": true,
        "description": "An object specifying the format that the model must output. Compatible with GPT-4 Turbo and all GPT-3.5 Turbo models newer than `gpt-3.5-turbo-1106`.\nSetting to `{ \"type\": \"json_object\" }` enables JSON mode, which guarantees the message the model generates is valid JSON.\n**Important:** when using JSON mode, you **must** also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly \"stuck\" request. Also note that the message content may be partially cut off if `finish_reason=\"length\"`, which indicates the generation exceeded `max_tokens` or the conversation exceeded the max context length.\n"
      },
      "advanced": true,
      "hideValue": true
    },
    "seed": {
      "schema": {
        "type": "number",
        "minimum": -9223372036854776000,
        "maximum": 9223372036854776000,
        "optional": true,
        "description": "This feature is in Beta.\nIf specified, our system will make a best effort to sample deterministically, such that repeated requests with the same `seed` and parameters should return the same result.\nDeterminism is not guaranteed, and you should refer to the `system_fingerprint` response parameter to monitor changes in the backend.\n"
      },
      "advanced": true,
      "hideValue": false
    },
    "serviceTier": {
      "schema": {
        "type": "string",
        "enum": [
          "auto",
          "default"
        ],
        "optional": true,
        "description": "Specifies the latency tier to use for processing the request. This parameter is relevant for customers subscribed to the scale tier service:\n  - If set to 'auto', the system will utilize scale tier credits until they are exhausted.\n  - If set to 'default', the request will be processed using the default service tier with a lower uptime SLA and no latency guarentee.\n  - When not set, the default behavior is 'auto'.\n\n  When this parameter is set, the response body will include the `service_tier` utilized.\n"
      },
      "advanced": true,
      "hideValue": false
    },
    "stop": {
      "schema": {
        "type": "any",
        "optional": true,
        "description": "Up to 4 sequences where the API will stop generating further tokens.\n"
      },
      "advanced": true,
      "hideValue": true
    },
    "temperature": {
      "schema": {
        "type": "number",
        "default": "1",
        "minimum": 0,
        "maximum": 2,
        "optional": true,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or `top_p` but not both.\n"
      },
      "advanced": true,
      "hideValue": false
    },
    "topP": {
      "schema": {
        "type": "number",
        "default": "1",
        "minimum": 0,
        "maximum": 1,
        "optional": true,
        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or `temperature` but not both.\n"
      },
      "advanced": true,
      "hideValue": false
    },
    "tools": {
      "schema": {
        "type": "array",
        "items": {
          "type": "any"
        },
        "optional": true,
        "description": "A list of tools the model may call. Currently, only functions are supported as a tool. Use this to provide a list of functions the model may generate JSON inputs for. A max of 128 functions are supported.\n"
      },
      "advanced": true,
      "hideValue": false
    },
    "toolChoice": {
      "schema": {
        "type": "any",
        "optional": true,
        "description": "Controls which (if any) tool is called by the model.\n`none` means the model will not call any tool and instead generates a message.\n`auto` means the model can pick between generating a message or calling one or more tools.\n`required` means the model must call one or more tools.\nSpecifying a particular tool via `{\"type\": \"function\", \"function\": {\"name\": \"my_function\"}}` forces the model to call that tool.\n\n`none` is the default when no tools are present. `auto` is the default if tools are present.\n"
      },
      "advanced": true,
      "hideValue": true
    },
    "parallelToolCalls": {
      "schema": {
        "type": "boolean",
        "optional": true,
        "description": "Whether to enable parallel function calling during tool use."
      },
      "advanced": true,
      "hideValue": false
    },
    "user": {
      "schema": {
        "type": "string",
        "optional": true,
        "description": "A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse.\n"
      },
      "advanced": true,
      "hideValue": false
    },
    "functionCall": {
      "schema": {
        "type": "any",
        "optional": true,
        "description": "Deprecated in favor of `tool_choice`.\n\nControls which (if any) function is called by the model.\n`none` means the model will not call a function and instead generates a message.\n`auto` means the model can pick between generating a message or calling a function.\nSpecifying a particular function via `{\"name\": \"my_function\"}` forces the model to call that function.\n\n`none` is the default when no functions are present. `auto` is the default if functions are present.\n"
      },
      "advanced": true,
      "hideValue": true
    },
    "functions": {
      "schema": {
        "type": "array",
        "items": {
          "type": "any"
        },
        "optional": true,
        "description": "Deprecated in favor of `tools`.\n\nA list of functions the model may generate JSON inputs for.\n"
      },
      "advanced": true,
      "hideValue": false
    }
  },
  "result": {
    "schema": {
      "type": "any"
    },
    "async": true
  },
  "attributes": {
    "externalDocs": "https://platform.openai.com/docs/api-reference",
    "codeHash": "bb432283620ffa0ee43dd394bc3c7df5a14d2752f9d46943fed4cd86207f11a2"
  }
}