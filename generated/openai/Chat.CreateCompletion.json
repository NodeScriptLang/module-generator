{
  "moduleName": "OpenAI / Chat / Create Completion",
  "version": "0.0.0",
  "description": "Creates a model response for the given chat conversation. Learn more in the\n[text generation](/docs/guides/text-generation), [vision](/docs/guides/vision),\nand [audio](/docs/guides/audio) guides.\n\nParameter support can differ depending on the model used to generate the\nresponse, particularly for newer reasoning models. Parameters that are only\nsupported for reasoning models are noted below. For the current state of \nunsupported parameters in reasoning models, \n[refer to the reasoning guide](/docs/guides/reasoning).\n",
  "keywords": [],
  "cacheMode": "always",
  "evalMode": "manual",
  "params": {
    "auth": {
      "schema": {
        "type": "string",
        "description": "OpenAI API key.\n"
      },
      "advanced": false,
      "hideValue": false
    },
    "betaAccess": {
      "schema": {
        "type": "string",
        "default": "assistants=v2",
        "description": "Adds OpenAI-Beta for access to new and experimental features."
      },
      "advanced": true,
      "hideValue": false
    },
    "messages": {
      "schema": {
        "type": "array",
        "items": {
          "type": "any"
        },
        "description": "A list of messages comprising the conversation so far. Depending on the\n[model](/docs/models) you use, different message types (modalities) are\nsupported, like [text](/docs/guides/text-generation),\n[images](/docs/guides/vision), and [audio](/docs/guides/audio).\n"
      },
      "advanced": false,
      "hideValue": false
    },
    "model": {
      "schema": {
        "type": "any",
        "description": "ID of the model to use. See the [model endpoint compatibility](/docs/models#model-endpoint-compatibility) table for details on which models work with the Chat API."
      },
      "advanced": false,
      "hideValue": true
    },
    "store": {
      "schema": {
        "type": "boolean",
        "default": "false",
        "optional": true,
        "description": "Whether or not to store the output of this chat completion request for \nuse in our [model distillation](/docs/guides/distillation) or\n[evals](/docs/guides/evals) products.\n"
      },
      "advanced": true,
      "hideValue": false
    },
    "reasoningEffort": {
      "schema": {
        "type": "string",
        "default": "medium",
        "enum": [
          "low",
          "medium",
          "high"
        ],
        "optional": true,
        "description": "**o1 models only** \n\nConstrains effort on reasoning for \n[reasoning models](https://platform.openai.com/docs/guides/reasoning).\nCurrently supported values are `low`, `medium`, and `high`. Reducing\nreasoning effort can result in faster responses and fewer tokens used\non reasoning in a response.\n"
      },
      "advanced": true,
      "hideValue": false
    },
    "metadata": {
      "schema": {
        "type": "any",
        "optional": true,
        "description": "Set of 16 key-value pairs that can be attached to an object. This can be\nuseful for storing additional information about the object in a structured\nformat, and querying for objects via API or the dashboard. \n\nKeys are strings with a maximum length of 64 characters. Values are strings\nwith a maximum length of 512 characters.\n"
      },
      "advanced": true,
      "hideValue": true
    },
    "frequencyPenalty": {
      "schema": {
        "type": "number",
        "default": "0",
        "minimum": -2,
        "maximum": 2,
        "optional": true,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on\ntheir existing frequency in the text so far, decreasing the model's\nlikelihood to repeat the same line verbatim.\n"
      },
      "advanced": true,
      "hideValue": false
    },
    "logitBias": {
      "schema": {
        "type": "any",
        "optional": true,
        "description": "Modify the likelihood of specified tokens appearing in the completion.\n\nAccepts a JSON object that maps tokens (specified by their token ID in the\ntokenizer) to an associated bias value from -100 to 100. Mathematically,\nthe bias is added to the logits generated by the model prior to sampling.\nThe exact effect will vary per model, but values between -1 and 1 should\ndecrease or increase likelihood of selection; values like -100 or 100\nshould result in a ban or exclusive selection of the relevant token.\n"
      },
      "advanced": true,
      "hideValue": true
    },
    "logprobs": {
      "schema": {
        "type": "boolean",
        "default": "false",
        "optional": true,
        "description": "Whether to return log probabilities of the output tokens or not. If true,\nreturns the log probabilities of each output token returned in the\n`content` of `message`.\n"
      },
      "advanced": true,
      "hideValue": false
    },
    "topLogprobs": {
      "schema": {
        "type": "number",
        "minimum": 0,
        "maximum": 20,
        "optional": true,
        "description": "An integer between 0 and 20 specifying the number of most likely tokens to\nreturn at each token position, each with an associated log probability.\n`logprobs` must be set to `true` if this parameter is used.\n"
      },
      "advanced": true,
      "hideValue": false
    },
    "maxTokens": {
      "schema": {
        "type": "number",
        "optional": true,
        "description": "The maximum number of [tokens](/tokenizer) that can be generated in the\nchat completion. This value can be used to control\n[costs](https://openai.com/api/pricing/) for text generated via API.\n\nThis value is now deprecated in favor of `max_completion_tokens`, and is\nnot compatible with [o1 series models](/docs/guides/reasoning).\n"
      },
      "advanced": true,
      "hideValue": false
    },
    "maxCompletionTokens": {
      "schema": {
        "type": "number",
        "optional": true,
        "description": "An upper bound for the number of tokens that can be generated for a completion, including visible output tokens and [reasoning tokens](/docs/guides/reasoning).\n"
      },
      "advanced": true,
      "hideValue": false
    },
    "n": {
      "schema": {
        "type": "number",
        "default": "1",
        "minimum": 1,
        "maximum": 128,
        "optional": true,
        "description": "How many chat completion choices to generate for each input message. Note that you will be charged based on the number of generated tokens across all of the choices. Keep `n` as `1` to minimize costs."
      },
      "advanced": true,
      "hideValue": false
    },
    "modalities": {
      "schema": {
        "type": "array",
        "items": {
          "type": "any"
        },
        "optional": true,
        "description": "Output types that you would like the model to generate for this request.\nMost models are capable of generating text, which is the default:\n\n`[\"text\"]`\n\nThe `gpt-4o-audio-preview` model can also be used to [generate audio](/docs/guides/audio). To\nrequest that this model generate both text and audio responses, you can\nuse:\n\n`[\"text\", \"audio\"]`\n"
      },
      "advanced": true,
      "hideValue": false
    },
    "prediction": {
      "schema": {
        "type": "any",
        "optional": true,
        "description": "Configuration for a [Predicted Output](/docs/guides/predicted-outputs),\nwhich can greatly improve response times when large parts of the model\nresponse are known ahead of time. This is most common when you are\nregenerating a file with only minor changes to most of the content.\n"
      },
      "advanced": true,
      "hideValue": true
    },
    "audio": {
      "schema": {
        "type": "any",
        "optional": true,
        "description": "Parameters for audio output. Required when audio output is requested with\n`modalities: [\"audio\"]`. [Learn more](/docs/guides/audio).\n"
      },
      "advanced": true,
      "hideValue": true
    },
    "presencePenalty": {
      "schema": {
        "type": "number",
        "default": "0",
        "minimum": -2,
        "maximum": 2,
        "optional": true,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on\nwhether they appear in the text so far, increasing the model's likelihood\nto talk about new topics.\n"
      },
      "advanced": true,
      "hideValue": false
    },
    "responseFormat": {
      "schema": {
        "type": "any",
        "optional": true,
        "description": "An object specifying the format that the model must output.\n\nSetting to `{ \"type\": \"json_schema\", \"json_schema\": {...} }` enables\nStructured Outputs which ensures the model will match your supplied JSON\nschema. Learn more in the [Structured Outputs\nguide](/docs/guides/structured-outputs).\n\nSetting to `{ \"type\": \"json_object\" }` enables JSON mode, which ensures\nthe message the model generates is valid JSON.\n\n**Important:** when using JSON mode, you **must** also instruct the model\nto produce JSON yourself via a system or user message. Without this, the\nmodel may generate an unending stream of whitespace until the generation\nreaches the token limit, resulting in a long-running and seemingly \"stuck\"\nrequest. Also note that the message content may be partially cut off if\n`finish_reason=\"length\"`, which indicates the generation exceeded\n`max_tokens` or the conversation exceeded the max context length.\n"
      },
      "advanced": true,
      "hideValue": true
    },
    "seed": {
      "schema": {
        "type": "number",
        "optional": true,
        "description": "This feature is in Beta.\nIf specified, our system will make a best effort to sample deterministically, such that repeated requests with the same `seed` and parameters should return the same result.\nDeterminism is not guaranteed, and you should refer to the `system_fingerprint` response parameter to monitor changes in the backend.\n"
      },
      "advanced": true,
      "hideValue": false
    },
    "serviceTier": {
      "schema": {
        "type": "string",
        "default": "auto",
        "enum": [
          "auto",
          "default"
        ],
        "optional": true,
        "description": "Specifies the latency tier to use for processing the request. This parameter is relevant for customers subscribed to the scale tier service:\n  - If set to 'auto', and the Project is Scale tier enabled, the system will utilize scale tier credits until they are exhausted.\n  - If set to 'auto', and the Project is not Scale tier enabled, the request will be processed using the default service tier with a lower uptime SLA and no latency guarantee.\n  - If set to 'default', the request will be processed using the default service tier with a lower uptime SLA and no latency guarantee.\n  - When not set, the default behavior is 'auto'.\n"
      },
      "advanced": true,
      "hideValue": false
    },
    "stop": {
      "schema": {
        "type": "any",
        "optional": true,
        "description": "Up to 4 sequences where the API will stop generating further tokens.\n"
      },
      "advanced": true,
      "hideValue": true
    },
    "stream": {
      "schema": {
        "type": "boolean",
        "default": "false",
        "optional": true,
        "description": "If set, partial message deltas will be sent, like in ChatGPT. Tokens will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available, with the stream terminated by a `data: [DONE]` message. [Example Python code](https://cookbook.openai.com/examples/how_to_stream_completions).\n"
      },
      "advanced": true,
      "hideValue": false
    },
    "streamOptions": {
      "schema": {
        "type": "any",
        "optional": true,
        "description": "Options for streaming response. Only set this when you set `stream: true`.\n"
      },
      "advanced": true,
      "hideValue": true
    },
    "temperature": {
      "schema": {
        "type": "number",
        "default": "1",
        "minimum": 0,
        "maximum": 2,
        "optional": true,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.\nWe generally recommend altering this or `top_p` but not both.\n"
      },
      "advanced": true,
      "hideValue": false
    },
    "topP": {
      "schema": {
        "type": "number",
        "default": "1",
        "minimum": 0,
        "maximum": 1,
        "optional": true,
        "description": "An alternative to sampling with temperature, called nucleus sampling,\nwhere the model considers the results of the tokens with top_p probability\nmass. So 0.1 means only the tokens comprising the top 10% probability mass\nare considered.\n\nWe generally recommend altering this or `temperature` but not both.\n"
      },
      "advanced": true,
      "hideValue": false
    },
    "tools": {
      "schema": {
        "type": "array",
        "items": {
          "type": "any"
        },
        "optional": true,
        "description": "A list of tools the model may call. Currently, only functions are supported as a tool. Use this to provide a list of functions the model may generate JSON inputs for. A max of 128 functions are supported.\n"
      },
      "advanced": true,
      "hideValue": false
    },
    "toolChoice": {
      "schema": {
        "type": "any",
        "optional": true,
        "description": "Controls which (if any) tool is called by the model.\n`none` means the model will not call any tool and instead generates a message.\n`auto` means the model can pick between generating a message or calling one or more tools.\n`required` means the model must call one or more tools.\nSpecifying a particular tool via `{\"type\": \"function\", \"function\": {\"name\": \"my_function\"}}` forces the model to call that tool.\n\n`none` is the default when no tools are present. `auto` is the default if tools are present.\n"
      },
      "advanced": true,
      "hideValue": true
    },
    "parallelToolCalls": {
      "schema": {
        "type": "boolean",
        "default": "true",
        "optional": true,
        "description": "Whether to enable [parallel function calling](/docs/guides/function-calling#configuring-parallel-function-calling) during tool use."
      },
      "advanced": true,
      "hideValue": false
    },
    "user": {
      "schema": {
        "type": "string",
        "optional": true,
        "description": "A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices#end-user-ids).\n"
      },
      "advanced": true,
      "hideValue": false
    },
    "functionCall": {
      "schema": {
        "type": "any",
        "optional": true,
        "description": "Deprecated in favor of `tool_choice`.\n\nControls which (if any) function is called by the model.\n\n`none` means the model will not call a function and instead generates a\nmessage.\n\n`auto` means the model can pick between generating a message or calling a\nfunction.\n\nSpecifying a particular function via `{\"name\": \"my_function\"}` forces the\nmodel to call that function.\n\n`none` is the default when no functions are present. `auto` is the default\nif functions are present.\n"
      },
      "advanced": true,
      "hideValue": true
    },
    "functions": {
      "schema": {
        "type": "array",
        "items": {
          "type": "any"
        },
        "optional": true,
        "description": "Deprecated in favor of `tools`.\n\nA list of functions the model may generate JSON inputs for.\n"
      },
      "advanced": true,
      "hideValue": false
    }
  },
  "result": {
    "schema": {
      "type": "any"
    },
    "async": true
  },
  "attributes": {
    "externalDocs": "",
    "codeHash": "9f93e22f55bd832eab798f9a905d051d453c80f82626cf811c46871685b174d2"
  }
}