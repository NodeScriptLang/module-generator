id: bigquery
displayName: BigQuery
workspaceId:
  development: VpXPs0nntyHqNR6s
  production: 7hrP0fGEU5pLPGtf
baseUrl: https://bigquery.googleapis.com/bigquery/v2
description: A data platform for customers to create, manage, share and query data.
commonParams:
  - paramName: accessToken
    paramKey: Authorization
    prefix: Bearer
    in: header
    description: OAuth 2 access token. Most APIs require `https://www.googleapis.com/auth/cloud-platform` scope. Google Auth / Service Account Token can be used to obtain a valid access token.
    required: false
    advanced: false
  # NOTE: API keys are not supported by BigQuery API v2
  # - paramName: apiKey
  #   paramKey: key
  #   in: query
  #   description: API key can be generated in Google Developer Console in APIs & Services section. Leave blank if OAuth access token is used.
  #   required: false
modules:
  - moduleName: Projects / List
    method: get
    path: /projects
    description: Lists all projects to which you have been granted any project role.
    externalDocs: ""
    params:
      - paramName: maxResults
        description: Maximum number of results to return
        paramKey: maxResults
        in: query
        schema:
          type: number
        required: false
      - paramName: pageToken
        description: Page token, returned by a previous call, to request the next page
          of results
        paramKey: pageToken
        in: query
        schema:
          type: string
        required: false
  - moduleName: Datasets / List
    method: get
    path: /projects/{projectId}/datasets
    description: Lists all datasets in the specified project to which you have been
      granted the READER dataset role.
    externalDocs: ""
    params:
      - paramName: projectId
        description: Project ID of the datasets to be listed
        paramKey: projectId
        in: path
        schema:
          type: string
        required: true
      - paramName: all
        description: Whether to list all datasets, including hidden ones
        paramKey: all
        in: query
        schema:
          type: boolean
        required: false
      - paramName: filter
        description: 'An expression for filtering the results of the request by label.
          The syntax is "labels.<name>[:<value>]". Multiple filters can be ANDed
          together by connecting with a space. Example:
          "labels.department:receiving labels.active". See Filtering datasets
          using labels for details.'
        paramKey: filter
        in: query
        schema:
          type: string
        required: false
      - paramName: maxResults
        description: The maximum number of results to return
        paramKey: maxResults
        in: query
        schema:
          type: number
        required: false
      - paramName: pageToken
        description: Page token, returned by a previous call, to request the next page
          of results
        paramKey: pageToken
        in: query
        schema:
          type: string
        required: false
  - moduleName: Datasets / Create
    method: post
    path: /projects/{projectId}/datasets
    description: Creates a new empty dataset.
    externalDocs: ""
    params:
      - paramName: projectId
        description: Project ID of the new dataset
        paramKey: projectId
        in: path
        schema:
          type: string
        required: true
      - paramName: access
        description: "[Optional] An array of objects that define dataset access for one
          or more entities. You can set this property when inserting or updating
          a dataset in order to control who is allowed to access the data. If
          unspecified at dataset creation time, BigQuery adds default dataset
          access for the following entities: access.specialGroup:
          projectReaders; access.role: READER; access.specialGroup:
          projectWriters; access.role: WRITER; access.specialGroup:
          projectOwners; access.role: OWNER; access.userByEmail: [dataset
          creator email]; access.role: OWNER;"
        paramKey: access
        in: body
        schema:
          type: array
          items:
            type: any
        required: false
      - paramName: creationTime
        description: "[Output-only] The time when this dataset was created, in
          milliseconds since the epoch."
        paramKey: creationTime
        in: body
        schema:
          type: string
        required: false
      - paramName: datasetReference
        description: ""
        paramKey: datasetReference
        in: body
        schema:
          type: any
        required: false
      - paramName: defaultCollation
        description: "[Output-only] The default collation of the dataset."
        paramKey: defaultCollation
        in: body
        schema:
          type: string
        required: false
      - paramName: defaultEncryptionConfiguration
        description: ""
        paramKey: defaultEncryptionConfiguration
        in: body
        schema:
          type: any
        required: false
      - paramName: defaultPartitionExpirationMs
        description: "[Optional] The default partition expiration for all partitioned
          tables in the dataset, in milliseconds. Once this property is set, all
          newly-created partitioned tables in the dataset will have an
          expirationMs property in the timePartitioning settings set to this
          value, and changing the value will only affect new tables, not
          existing ones. The storage in a partition will have an expiration time
          of its partition time plus this value. Setting this property overrides
          the use of defaultTableExpirationMs for partitioned tables: only one
          of defaultTableExpirationMs and defaultPartitionExpirationMs will be
          used for any new partitioned table. If you provide an explicit
          timePartitioning.expirationMs when creating or updating a partitioned
          table, that value takes precedence over the default partition
          expiration time indicated by this property."
        paramKey: defaultPartitionExpirationMs
        in: body
        schema:
          type: string
        required: false
      - paramName: defaultRoundingMode
        description: "[Output-only] The default rounding mode of the dataset."
        paramKey: defaultRoundingMode
        in: body
        schema:
          type: string
        required: false
      - paramName: defaultTableExpirationMs
        description: "[Optional] The default lifetime of all tables in the dataset, in
          milliseconds. The minimum value is 3600000 milliseconds (one hour).
          Once this property is set, all newly-created tables in the dataset
          will have an expirationTime property set to the creation time plus the
          value in this property, and changing the value will only affect new
          tables, not existing ones. When the expirationTime for a given table
          is reached, that table will be deleted automatically. If a table's
          expirationTime is modified or removed before the table expires, or if
          you provide an explicit expirationTime when creating a table, that
          value takes precedence over the default expiration time indicated by
          this property."
        paramKey: defaultTableExpirationMs
        in: body
        schema:
          type: string
        required: false
      - paramName: description
        description: "[Optional] A user-friendly description of the dataset."
        paramKey: description
        in: body
        schema:
          type: string
        required: false
      - paramName: etag
        description: "[Output-only] A hash of the resource."
        paramKey: etag
        in: body
        schema:
          type: string
        required: false
      - paramName: friendlyName
        description: "[Optional] A descriptive name for the dataset."
        paramKey: friendlyName
        in: body
        schema:
          type: string
        required: false
      - paramName: id
        description: "[Output-only] The fully-qualified unique name of the dataset in
          the format projectId:datasetId. The dataset name without the project
          name is given in the datasetId field. When creating a new dataset,
          leave this field blank, and instead specify the datasetId field."
        paramKey: id
        in: body
        schema:
          type: string
        required: false
      - paramName: isCaseInsensitive
        description: "[Optional] Indicates if table names are case insensitive in the
          dataset."
        paramKey: isCaseInsensitive
        in: body
        schema:
          type: boolean
        required: false
      - paramName: kind
        description: "[Output-only] The resource type."
        paramKey: kind
        in: body
        schema:
          type: string
          default: bigquery#dataset
        required: false
      - paramName: labels
        description: The labels associated with this dataset. You can use these to
          organize and group your datasets. You can set this property when
          inserting or updating a dataset. See Creating and Updating Dataset
          Labels for more information.
        paramKey: labels
        in: body
        schema:
          type: any
        required: false
      - paramName: lastModifiedTime
        description: "[Output-only] The date when this dataset or any of its tables was
          last modified, in milliseconds since the epoch."
        paramKey: lastModifiedTime
        in: body
        schema:
          type: string
        required: false
      - paramName: location
        description: The geographic location where the dataset should reside. The
          default value is US. See details at
          https://cloud.google.com/bigquery/docs/locations.
        paramKey: location
        in: body
        schema:
          type: string
        required: false
      - paramName: maxTimeTravelHours
        description: "[Optional] Number of hours for the max time travel for all tables
          in the dataset."
        paramKey: maxTimeTravelHours
        in: body
        schema:
          type: string
        required: false
      - paramName: satisfiesPzs
        description: "[Output-only] Reserved for future use."
        paramKey: satisfiesPzs
        in: body
        schema:
          type: boolean
        required: false
      - paramName: selfLink
        description: "[Output-only] A URL that can be used to access the resource again.
          You can use this URL in Get or Update requests to the resource."
        paramKey: selfLink
        in: body
        schema:
          type: string
        required: false
      - paramName: storageBillingModel
        description: "[Optional] Storage billing model to be used for all tables in the
          dataset. Can be set to PHYSICAL. Default is LOGICAL."
        paramKey: storageBillingModel
        in: body
        schema:
          type: string
        required: false
      - paramName: tags
        description: "[Optional]The tags associated with this dataset. Tag keys are
          globally unique."
        paramKey: tags
        in: body
        schema:
          type: array
          items:
            type: any
        required: false
    requestBodyType: json
  - moduleName: Datasets / Delete
    method: delete
    path: /projects/{projectId}/datasets/{datasetId}
    description: Deletes the dataset specified by the datasetId value. Before you
      can delete a dataset, you must delete all its tables, either manually or
      by specifying deleteContents. Immediately after deletion, you can create
      another dataset with the same name.
    externalDocs: ""
    params:
      - paramName: projectId
        description: Project ID of the dataset being deleted
        paramKey: projectId
        in: path
        schema:
          type: string
        required: true
      - paramName: datasetId
        description: Dataset ID of dataset being deleted
        paramKey: datasetId
        in: path
        schema:
          type: string
        required: true
      - paramName: deleteContents
        description: If True, delete all the tables in the dataset. If False and the
          dataset contains tables, the request will fail. Default is False
        paramKey: deleteContents
        in: query
        schema:
          type: boolean
        required: false
  - moduleName: Datasets / Get
    method: get
    path: /projects/{projectId}/datasets/{datasetId}
    description: Returns the dataset specified by datasetID.
    externalDocs: ""
    params:
      - paramName: projectId
        description: Project ID of the requested dataset
        paramKey: projectId
        in: path
        schema:
          type: string
        required: true
      - paramName: datasetId
        description: Dataset ID of the requested dataset
        paramKey: datasetId
        in: path
        schema:
          type: string
        required: true
  - moduleName: Datasets / Update
    method: patch
    path: /projects/{projectId}/datasets/{datasetId}
    description: Updates information in an existing dataset. The update method
      replaces the entire dataset resource, whereas the patch method only
      replaces fields that are provided in the submitted dataset resource. This
      method supports patch semantics.
    externalDocs: ""
    params:
      - paramName: projectId
        description: Project ID of the dataset being updated
        paramKey: projectId
        in: path
        schema:
          type: string
        required: true
      - paramName: datasetId
        description: Dataset ID of the dataset being updated
        paramKey: datasetId
        in: path
        schema:
          type: string
        required: true
      - paramName: access
        description: "[Optional] An array of objects that define dataset access for one
          or more entities. You can set this property when inserting or updating
          a dataset in order to control who is allowed to access the data. If
          unspecified at dataset creation time, BigQuery adds default dataset
          access for the following entities: access.specialGroup:
          projectReaders; access.role: READER; access.specialGroup:
          projectWriters; access.role: WRITER; access.specialGroup:
          projectOwners; access.role: OWNER; access.userByEmail: [dataset
          creator email]; access.role: OWNER;"
        paramKey: access
        in: body
        schema:
          type: array
          items:
            type: any
        required: false
      - paramName: creationTime
        description: "[Output-only] The time when this dataset was created, in
          milliseconds since the epoch."
        paramKey: creationTime
        in: body
        schema:
          type: string
        required: false
      - paramName: datasetReference
        description: ""
        paramKey: datasetReference
        in: body
        schema:
          type: any
        required: false
      - paramName: defaultCollation
        description: "[Output-only] The default collation of the dataset."
        paramKey: defaultCollation
        in: body
        schema:
          type: string
        required: false
      - paramName: defaultEncryptionConfiguration
        description: ""
        paramKey: defaultEncryptionConfiguration
        in: body
        schema:
          type: any
        required: false
      - paramName: defaultPartitionExpirationMs
        description: "[Optional] The default partition expiration for all partitioned
          tables in the dataset, in milliseconds. Once this property is set, all
          newly-created partitioned tables in the dataset will have an
          expirationMs property in the timePartitioning settings set to this
          value, and changing the value will only affect new tables, not
          existing ones. The storage in a partition will have an expiration time
          of its partition time plus this value. Setting this property overrides
          the use of defaultTableExpirationMs for partitioned tables: only one
          of defaultTableExpirationMs and defaultPartitionExpirationMs will be
          used for any new partitioned table. If you provide an explicit
          timePartitioning.expirationMs when creating or updating a partitioned
          table, that value takes precedence over the default partition
          expiration time indicated by this property."
        paramKey: defaultPartitionExpirationMs
        in: body
        schema:
          type: string
        required: false
      - paramName: defaultRoundingMode
        description: "[Output-only] The default rounding mode of the dataset."
        paramKey: defaultRoundingMode
        in: body
        schema:
          type: string
        required: false
      - paramName: defaultTableExpirationMs
        description: "[Optional] The default lifetime of all tables in the dataset, in
          milliseconds. The minimum value is 3600000 milliseconds (one hour).
          Once this property is set, all newly-created tables in the dataset
          will have an expirationTime property set to the creation time plus the
          value in this property, and changing the value will only affect new
          tables, not existing ones. When the expirationTime for a given table
          is reached, that table will be deleted automatically. If a table's
          expirationTime is modified or removed before the table expires, or if
          you provide an explicit expirationTime when creating a table, that
          value takes precedence over the default expiration time indicated by
          this property."
        paramKey: defaultTableExpirationMs
        in: body
        schema:
          type: string
        required: false
      - paramName: description
        description: "[Optional] A user-friendly description of the dataset."
        paramKey: description
        in: body
        schema:
          type: string
        required: false
      - paramName: etag
        description: "[Output-only] A hash of the resource."
        paramKey: etag
        in: body
        schema:
          type: string
        required: false
      - paramName: friendlyName
        description: "[Optional] A descriptive name for the dataset."
        paramKey: friendlyName
        in: body
        schema:
          type: string
        required: false
      - paramName: id
        description: "[Output-only] The fully-qualified unique name of the dataset in
          the format projectId:datasetId. The dataset name without the project
          name is given in the datasetId field. When creating a new dataset,
          leave this field blank, and instead specify the datasetId field."
        paramKey: id
        in: body
        schema:
          type: string
        required: false
      - paramName: isCaseInsensitive
        description: "[Optional] Indicates if table names are case insensitive in the
          dataset."
        paramKey: isCaseInsensitive
        in: body
        schema:
          type: boolean
        required: false
      - paramName: kind
        description: "[Output-only] The resource type."
        paramKey: kind
        in: body
        schema:
          type: string
          default: bigquery#dataset
        required: false
      - paramName: labels
        description: The labels associated with this dataset. You can use these to
          organize and group your datasets. You can set this property when
          inserting or updating a dataset. See Creating and Updating Dataset
          Labels for more information.
        paramKey: labels
        in: body
        schema:
          type: any
        required: false
      - paramName: lastModifiedTime
        description: "[Output-only] The date when this dataset or any of its tables was
          last modified, in milliseconds since the epoch."
        paramKey: lastModifiedTime
        in: body
        schema:
          type: string
        required: false
      - paramName: location
        description: The geographic location where the dataset should reside. The
          default value is US. See details at
          https://cloud.google.com/bigquery/docs/locations.
        paramKey: location
        in: body
        schema:
          type: string
        required: false
      - paramName: maxTimeTravelHours
        description: "[Optional] Number of hours for the max time travel for all tables
          in the dataset."
        paramKey: maxTimeTravelHours
        in: body
        schema:
          type: string
        required: false
      - paramName: satisfiesPzs
        description: "[Output-only] Reserved for future use."
        paramKey: satisfiesPzs
        in: body
        schema:
          type: boolean
        required: false
      - paramName: selfLink
        description: "[Output-only] A URL that can be used to access the resource again.
          You can use this URL in Get or Update requests to the resource."
        paramKey: selfLink
        in: body
        schema:
          type: string
        required: false
      - paramName: storageBillingModel
        description: "[Optional] Storage billing model to be used for all tables in the
          dataset. Can be set to PHYSICAL. Default is LOGICAL."
        paramKey: storageBillingModel
        in: body
        schema:
          type: string
        required: false
      - paramName: tags
        description: "[Optional]The tags associated with this dataset. Tag keys are
          globally unique."
        paramKey: tags
        in: body
        schema:
          type: array
          items:
            type: any
        required: false
    requestBodyType: json
  - moduleName: Datasets / Replace
    method: put
    path: /projects/{projectId}/datasets/{datasetId}
    description: Updates information in an existing dataset. The update method
      replaces the entire dataset resource, whereas the patch method only
      replaces fields that are provided in the submitted dataset resource.
    externalDocs: ""
    params:
      - paramName: projectId
        description: Project ID of the dataset being updated
        paramKey: projectId
        in: path
        schema:
          type: string
        required: true
      - paramName: datasetId
        description: Dataset ID of the dataset being updated
        paramKey: datasetId
        in: path
        schema:
          type: string
        required: true
      - paramName: access
        description: "[Optional] An array of objects that define dataset access for one
          or more entities. You can set this property when inserting or updating
          a dataset in order to control who is allowed to access the data. If
          unspecified at dataset creation time, BigQuery adds default dataset
          access for the following entities: access.specialGroup:
          projectReaders; access.role: READER; access.specialGroup:
          projectWriters; access.role: WRITER; access.specialGroup:
          projectOwners; access.role: OWNER; access.userByEmail: [dataset
          creator email]; access.role: OWNER;"
        paramKey: access
        in: body
        schema:
          type: array
          items:
            type: any
        required: false
      - paramName: creationTime
        description: "[Output-only] The time when this dataset was created, in
          milliseconds since the epoch."
        paramKey: creationTime
        in: body
        schema:
          type: string
        required: false
      - paramName: datasetReference
        description: ""
        paramKey: datasetReference
        in: body
        schema:
          type: any
        required: false
      - paramName: defaultCollation
        description: "[Output-only] The default collation of the dataset."
        paramKey: defaultCollation
        in: body
        schema:
          type: string
        required: false
      - paramName: defaultEncryptionConfiguration
        description: ""
        paramKey: defaultEncryptionConfiguration
        in: body
        schema:
          type: any
        required: false
      - paramName: defaultPartitionExpirationMs
        description: "[Optional] The default partition expiration for all partitioned
          tables in the dataset, in milliseconds. Once this property is set, all
          newly-created partitioned tables in the dataset will have an
          expirationMs property in the timePartitioning settings set to this
          value, and changing the value will only affect new tables, not
          existing ones. The storage in a partition will have an expiration time
          of its partition time plus this value. Setting this property overrides
          the use of defaultTableExpirationMs for partitioned tables: only one
          of defaultTableExpirationMs and defaultPartitionExpirationMs will be
          used for any new partitioned table. If you provide an explicit
          timePartitioning.expirationMs when creating or updating a partitioned
          table, that value takes precedence over the default partition
          expiration time indicated by this property."
        paramKey: defaultPartitionExpirationMs
        in: body
        schema:
          type: string
        required: false
      - paramName: defaultRoundingMode
        description: "[Output-only] The default rounding mode of the dataset."
        paramKey: defaultRoundingMode
        in: body
        schema:
          type: string
        required: false
      - paramName: defaultTableExpirationMs
        description: "[Optional] The default lifetime of all tables in the dataset, in
          milliseconds. The minimum value is 3600000 milliseconds (one hour).
          Once this property is set, all newly-created tables in the dataset
          will have an expirationTime property set to the creation time plus the
          value in this property, and changing the value will only affect new
          tables, not existing ones. When the expirationTime for a given table
          is reached, that table will be deleted automatically. If a table's
          expirationTime is modified or removed before the table expires, or if
          you provide an explicit expirationTime when creating a table, that
          value takes precedence over the default expiration time indicated by
          this property."
        paramKey: defaultTableExpirationMs
        in: body
        schema:
          type: string
        required: false
      - paramName: description
        description: "[Optional] A user-friendly description of the dataset."
        paramKey: description
        in: body
        schema:
          type: string
        required: false
      - paramName: etag
        description: "[Output-only] A hash of the resource."
        paramKey: etag
        in: body
        schema:
          type: string
        required: false
      - paramName: friendlyName
        description: "[Optional] A descriptive name for the dataset."
        paramKey: friendlyName
        in: body
        schema:
          type: string
        required: false
      - paramName: id
        description: "[Output-only] The fully-qualified unique name of the dataset in
          the format projectId:datasetId. The dataset name without the project
          name is given in the datasetId field. When creating a new dataset,
          leave this field blank, and instead specify the datasetId field."
        paramKey: id
        in: body
        schema:
          type: string
        required: false
      - paramName: isCaseInsensitive
        description: "[Optional] Indicates if table names are case insensitive in the
          dataset."
        paramKey: isCaseInsensitive
        in: body
        schema:
          type: boolean
        required: false
      - paramName: kind
        description: "[Output-only] The resource type."
        paramKey: kind
        in: body
        schema:
          type: string
          default: bigquery#dataset
        required: false
      - paramName: labels
        description: The labels associated with this dataset. You can use these to
          organize and group your datasets. You can set this property when
          inserting or updating a dataset. See Creating and Updating Dataset
          Labels for more information.
        paramKey: labels
        in: body
        schema:
          type: any
        required: false
      - paramName: lastModifiedTime
        description: "[Output-only] The date when this dataset or any of its tables was
          last modified, in milliseconds since the epoch."
        paramKey: lastModifiedTime
        in: body
        schema:
          type: string
        required: false
      - paramName: location
        description: The geographic location where the dataset should reside. The
          default value is US. See details at
          https://cloud.google.com/bigquery/docs/locations.
        paramKey: location
        in: body
        schema:
          type: string
        required: false
      - paramName: maxTimeTravelHours
        description: "[Optional] Number of hours for the max time travel for all tables
          in the dataset."
        paramKey: maxTimeTravelHours
        in: body
        schema:
          type: string
        required: false
      - paramName: satisfiesPzs
        description: "[Output-only] Reserved for future use."
        paramKey: satisfiesPzs
        in: body
        schema:
          type: boolean
        required: false
      - paramName: selfLink
        description: "[Output-only] A URL that can be used to access the resource again.
          You can use this URL in Get or Update requests to the resource."
        paramKey: selfLink
        in: body
        schema:
          type: string
        required: false
      - paramName: storageBillingModel
        description: "[Optional] Storage billing model to be used for all tables in the
          dataset. Can be set to PHYSICAL. Default is LOGICAL."
        paramKey: storageBillingModel
        in: body
        schema:
          type: string
        required: false
      - paramName: tags
        description: "[Optional]The tags associated with this dataset. Tag keys are
          globally unique."
        paramKey: tags
        in: body
        schema:
          type: array
          items:
            type: any
        required: false
    requestBodyType: json
  - moduleName: Models / List
    method: get
    path: /projects/{projectId}/datasets/{datasetId}/models
    description: Lists all models in the specified dataset. Requires the READER
      dataset role. After retrieving the list of models, you can get information
      about a particular model by calling the models.get method.
    externalDocs: ""
    params:
      - paramName: projectId
        description: Required. Project ID of the models to list.
        paramKey: projectId
        in: path
        schema:
          type: string
        required: true
      - paramName: datasetId
        description: Required. Dataset ID of the models to list.
        paramKey: datasetId
        in: path
        schema:
          type: string
        required: true
      - paramName: maxResults
        description: The maximum number of results to return in a single response page.
          Leverage the page tokens to iterate through the entire collection.
        paramKey: maxResults
        in: query
        schema:
          type: number
        required: false
      - paramName: pageToken
        description: Page token, returned by a previous call to request the next page of
          results
        paramKey: pageToken
        in: query
        schema:
          type: string
        required: false
  - moduleName: Models / Delete
    method: delete
    path: /projects/{projectId}/datasets/{datasetId}/models/{modelId}
    description: Deletes the model specified by modelId from the dataset.
    externalDocs: ""
    params:
      - paramName: projectId
        description: Required. Project ID of the model to delete.
        paramKey: projectId
        in: path
        schema:
          type: string
        required: true
      - paramName: datasetId
        description: Required. Dataset ID of the model to delete.
        paramKey: datasetId
        in: path
        schema:
          type: string
        required: true
      - paramName: modelId
        description: Required. Model ID of the model to delete.
        paramKey: modelId
        in: path
        schema:
          type: string
        required: true
  - moduleName: Models / Get
    method: get
    path: /projects/{projectId}/datasets/{datasetId}/models/{modelId}
    description: Gets the specified model resource by model ID.
    externalDocs: ""
    params:
      - paramName: projectId
        description: Required. Project ID of the requested model.
        paramKey: projectId
        in: path
        schema:
          type: string
        required: true
      - paramName: datasetId
        description: Required. Dataset ID of the requested model.
        paramKey: datasetId
        in: path
        schema:
          type: string
        required: true
      - paramName: modelId
        description: Required. Model ID of the requested model.
        paramKey: modelId
        in: path
        schema:
          type: string
        required: true
  - moduleName: Models / Update
    method: patch
    path: /projects/{projectId}/datasets/{datasetId}/models/{modelId}
    description: Patch specific fields in the specified model.
    externalDocs: ""
    params:
      - paramName: projectId
        description: Required. Project ID of the model to patch.
        paramKey: projectId
        in: path
        schema:
          type: string
        required: true
      - paramName: datasetId
        description: Required. Dataset ID of the model to patch.
        paramKey: datasetId
        in: path
        schema:
          type: string
        required: true
      - paramName: modelId
        description: Required. Model ID of the model to patch.
        paramKey: modelId
        in: path
        schema:
          type: string
        required: true
      - paramName: bestTrialId
        description: The best trial_id across all training runs.
        paramKey: bestTrialId
        in: body
        schema:
          type: string
        required: false
      - paramName: creationTime
        description: Output only. The time when this model was created, in millisecs
          since the epoch.
        paramKey: creationTime
        in: body
        schema:
          type: string
        required: false
      - paramName: defaultTrialId
        description: Output only. The default trial_id to use in TVFs when the trial_id
          is not passed in. For single-objective [hyperparameter
          tuning](/bigquery-ml/docs/reference/standard-sql/bigqueryml-syntax-hp-tuning-overview)
          models, this is the best trial ID. For multi-objective [hyperparameter
          tuning](/bigquery-ml/docs/reference/standard-sql/bigqueryml-syntax-hp-tuning-overview)
          models, this is the smallest trial ID among all Pareto optimal trials.
        paramKey: defaultTrialId
        in: body
        schema:
          type: string
        required: false
      - paramName: description
        description: Optional. A user-friendly description of this model.
        paramKey: description
        in: body
        schema:
          type: string
        required: false
      - paramName: encryptionConfiguration
        description: ""
        paramKey: encryptionConfiguration
        in: body
        schema:
          type: any
        required: false
      - paramName: etag
        description: Output only. A hash of this resource.
        paramKey: etag
        in: body
        schema:
          type: string
        required: false
      - paramName: expirationTime
        description: Optional. The time when this model expires, in milliseconds since
          the epoch. If not present, the model will persist indefinitely.
          Expired models will be deleted and their storage reclaimed. The
          defaultTableExpirationMs property of the encapsulating dataset can be
          used to set a default expirationTime on newly created models.
        paramKey: expirationTime
        in: body
        schema:
          type: string
        required: false
      - paramName: featureColumns
        description: Output only. Input feature columns that were used to train this model.
        paramKey: featureColumns
        in: body
        schema:
          type: array
          items:
            type: any
        required: false
      - paramName: friendlyName
        description: Optional. A descriptive name for this model.
        paramKey: friendlyName
        in: body
        schema:
          type: string
        required: false
      - paramName: hparamSearchSpaces
        description: Hyperparameter search spaces. These should be a subset of
          training_options.
        paramKey: hparamSearchSpaces
        in: body
        schema:
          type: any
        required: false
      - paramName: hparamTrials
        description: Output only. Trials of a [hyperparameter
          tuning](/bigquery-ml/docs/reference/standard-sql/bigqueryml-syntax-hp-tuning-overview)
          model sorted by trial_id.
        paramKey: hparamTrials
        in: body
        schema:
          type: array
          items:
            type: any
        required: false
      - paramName: labelColumns
        description: Output only. Label columns that were used to train this model. The
          output of the model will have a "predicted_" prefix to these columns.
        paramKey: labelColumns
        in: body
        schema:
          type: array
          items:
            type: any
        required: false
      - paramName: labels
        description: The labels associated with this model. You can use these to
          organize and group your models. Label keys and values can be no longer
          than 63 characters, can only contain lowercase letters, numeric
          characters, underscores and dashes. International characters are
          allowed. Label values are optional. Label keys must start with a
          letter and each label in the list must have a different key.
        paramKey: labels
        in: body
        schema:
          type: any
        required: false
      - paramName: lastModifiedTime
        description: Output only. The time when this model was last modified, in
          millisecs since the epoch.
        paramKey: lastModifiedTime
        in: body
        schema:
          type: string
        required: false
      - paramName: location
        description: Output only. The geographic location where the model resides. This
          value is inherited from the dataset.
        paramKey: location
        in: body
        schema:
          type: string
        required: false
      - paramName: modelReference
        description: ""
        paramKey: modelReference
        in: body
        schema:
          type: any
        required: false
      - paramName: modelType
        description: Output only. Type of the model resource.
        paramKey: modelType
        in: body
        schema:
          type: string
          enum:
            - MODEL_TYPE_UNSPECIFIED
            - LINEAR_REGRESSION
            - LOGISTIC_REGRESSION
            - KMEANS
            - MATRIX_FACTORIZATION
            - DNN_CLASSIFIER
            - TENSORFLOW
            - DNN_REGRESSOR
            - BOOSTED_TREE_REGRESSOR
            - BOOSTED_TREE_CLASSIFIER
            - ARIMA
            - AUTOML_REGRESSOR
            - AUTOML_CLASSIFIER
            - PCA
            - DNN_LINEAR_COMBINED_CLASSIFIER
            - DNN_LINEAR_COMBINED_REGRESSOR
            - AUTOENCODER
            - ARIMA_PLUS
            - RANDOM_FOREST_REGRESSOR
            - RANDOM_FOREST_CLASSIFIER
        required: false
      - paramName: optimalTrialIds
        description: Output only. For single-objective [hyperparameter
          tuning](/bigquery-ml/docs/reference/standard-sql/bigqueryml-syntax-hp-tuning-overview)
          models, it only contains the best trial. For multi-objective
          [hyperparameter
          tuning](/bigquery-ml/docs/reference/standard-sql/bigqueryml-syntax-hp-tuning-overview)
          models, it contains all Pareto optimal trials sorted by trial_id.
        paramKey: optimalTrialIds
        in: body
        schema:
          type: array
          items:
            type: any
        required: false
      - paramName: trainingRuns
        description: Information for all training runs in increasing order of start_time.
        paramKey: trainingRuns
        in: body
        schema:
          type: array
          items:
            type: any
        required: false
    requestBodyType: json
  - moduleName: Routines / List
    method: get
    path: /projects/{projectId}/datasets/{datasetId}/routines
    description: Lists all routines in the specified dataset. Requires the READER
      dataset role.
    externalDocs: ""
    params:
      - paramName: projectId
        description: Required. Project ID of the routines to list
        paramKey: projectId
        in: path
        schema:
          type: string
        required: true
      - paramName: datasetId
        description: Required. Dataset ID of the routines to list
        paramKey: datasetId
        in: path
        schema:
          type: string
        required: true
      - paramName: filter
        description: 'If set, then only the Routines matching this filter are returned.
          The current supported form is either "routine_type:" or
          "routineType:", where is a RoutineType enum. Example:
          "routineType:SCALAR_FUNCTION".'
        paramKey: filter
        in: query
        schema:
          type: string
        required: false
      - paramName: maxResults
        description: The maximum number of results to return in a single response page.
          Leverage the page tokens to iterate through the entire collection.
        paramKey: maxResults
        in: query
        schema:
          type: number
        required: false
      - paramName: pageToken
        description: Page token, returned by a previous call, to request the next page
          of results
        paramKey: pageToken
        in: query
        schema:
          type: string
        required: false
      - paramName: readMask
        description: "If set, then only the Routine fields in the field mask, as well as
          project_id, dataset_id and routine_id, are returned in the response.
          If unset, then the following Routine fields are returned: etag,
          project_id, dataset_id, routine_id, routine_type, creation_time,
          last_modified_time, and language."
        paramKey: readMask
        in: query
        schema:
          type: string
        required: false
  - moduleName: Routines / Create
    method: post
    path: /projects/{projectId}/datasets/{datasetId}/routines
    description: Creates a new routine in the dataset.
    externalDocs: ""
    params:
      - paramName: projectId
        description: Required. Project ID of the new routine
        paramKey: projectId
        in: path
        schema:
          type: string
        required: true
      - paramName: datasetId
        description: Required. Dataset ID of the new routine
        paramKey: datasetId
        in: path
        schema:
          type: string
        required: true
      - paramName: arguments
        description: Optional.
        paramKey: arguments
        in: body
        schema:
          type: array
          items:
            type: any
        required: false
      - paramName: creationTime
        description: Output only. The time when this routine was created, in
          milliseconds since the epoch.
        paramKey: creationTime
        in: body
        schema:
          type: string
        required: false
      - paramName: definitionBody
        description: "Required. The body of the routine. For functions, this is the
          expression in the AS clause. If language=SQL, it is the substring
          inside (but excluding) the parentheses. For example, for the function
          created with the following statement: `CREATE FUNCTION JoinLines(x
          string, y string) as (concat(x, \"\\n\", y))` The definition_body is
          `concat(x, \"\\n\", y)` (\\n is not replaced with linebreak). If
          language=JAVASCRIPT, it is the evaluated string in the AS clause. For
          example, for the function created with the following statement:
          `CREATE FUNCTION f() RETURNS STRING LANGUAGE js AS 'return
          \"\\n\";\\n'` The definition_body is `return \"\\n\";\\n` Note that
          both \\n are replaced with linebreaks."
        paramKey: definitionBody
        in: body
        schema:
          type: string
        required: false
      - paramName: description
        description: Optional. The description of the routine, if defined.
        paramKey: description
        in: body
        schema:
          type: string
        required: false
      - paramName: determinismLevel
        description: Optional. The determinism level of the JavaScript UDF, if defined.
        paramKey: determinismLevel
        in: body
        schema:
          type: string
          enum:
            - DETERMINISM_LEVEL_UNSPECIFIED
            - DETERMINISTIC
            - NOT_DETERMINISTIC
        required: false
      - paramName: etag
        description: Output only. A hash of this resource.
        paramKey: etag
        in: body
        schema:
          type: string
        required: false
      - paramName: importedLibraries
        description: Optional. If language = "JAVASCRIPT", this field stores the path of
          the imported JAVASCRIPT libraries.
        paramKey: importedLibraries
        in: body
        schema:
          type: array
          items:
            type: any
        required: false
      - paramName: language
        description: Optional. Defaults to "SQL" if remote_function_options field is
          absent, not set otherwise.
        paramKey: language
        in: body
        schema:
          type: string
          enum:
            - LANGUAGE_UNSPECIFIED
            - SQL
            - JAVASCRIPT
            - PYTHON
            - JAVA
            - SCALA
        required: false
      - paramName: lastModifiedTime
        description: Output only. The time when this routine was last modified, in
          milliseconds since the epoch.
        paramKey: lastModifiedTime
        in: body
        schema:
          type: string
        required: false
      - paramName: remoteFunctionOptions
        description: Options for a remote user-defined function.
        paramKey: remoteFunctionOptions
        in: body
        schema:
          type: any
        required: false
      - paramName: returnTableType
        description: A table type
        paramKey: returnTableType
        in: body
        schema:
          type: any
        required: false
      - paramName: returnType
        description: ""
        paramKey: returnType
        in: body
        schema:
          type: any
        required: false
      - paramName: routineReference
        description: ""
        paramKey: routineReference
        in: body
        schema:
          type: any
        required: false
      - paramName: routineType
        description: Required. The type of routine.
        paramKey: routineType
        in: body
        schema:
          type: string
          enum:
            - ROUTINE_TYPE_UNSPECIFIED
            - SCALAR_FUNCTION
            - PROCEDURE
            - TABLE_VALUED_FUNCTION
        required: false
      - paramName: sparkOptions
        description: Options for a user-defined Spark routine.
        paramKey: sparkOptions
        in: body
        schema:
          type: any
        required: false
      - paramName: strictMode
        description: Optional. Can be set for procedures only. If true (default), the
          definition body will be validated in the creation and the updates of
          the procedure. For procedures with an argument of ANY TYPE, the
          definition body validtion is not supported at creation/update time,
          and thus this field must be set to false explicitly.
        paramKey: strictMode
        in: body
        schema:
          type: boolean
        required: false
    requestBodyType: json
  - moduleName: Routines / Delete
    method: delete
    path: /projects/{projectId}/datasets/{datasetId}/routines/{routineId}
    description: Deletes the routine specified by routineId from the dataset.
    externalDocs: ""
    params:
      - paramName: projectId
        description: Required. Project ID of the routine to delete
        paramKey: projectId
        in: path
        schema:
          type: string
        required: true
      - paramName: datasetId
        description: Required. Dataset ID of the routine to delete
        paramKey: datasetId
        in: path
        schema:
          type: string
        required: true
      - paramName: routineId
        description: Required. Routine ID of the routine to delete
        paramKey: routineId
        in: path
        schema:
          type: string
        required: true
  - moduleName: Routines / Get
    method: get
    path: /projects/{projectId}/datasets/{datasetId}/routines/{routineId}
    description: Gets the specified routine resource by routine ID.
    externalDocs: ""
    params:
      - paramName: projectId
        description: Required. Project ID of the requested routine
        paramKey: projectId
        in: path
        schema:
          type: string
        required: true
      - paramName: datasetId
        description: Required. Dataset ID of the requested routine
        paramKey: datasetId
        in: path
        schema:
          type: string
        required: true
      - paramName: routineId
        description: Required. Routine ID of the requested routine
        paramKey: routineId
        in: path
        schema:
          type: string
        required: true
      - paramName: readMask
        description: If set, only the Routine fields in the field mask are returned in
          the response. If unset, all Routine fields are returned.
        paramKey: readMask
        in: query
        schema:
          type: string
        required: false
  - moduleName: Routines / Replace
    method: put
    path: /projects/{projectId}/datasets/{datasetId}/routines/{routineId}
    description: Updates information in an existing routine. The update method
      replaces the entire Routine resource.
    externalDocs: ""
    params:
      - paramName: projectId
        description: Required. Project ID of the routine to update
        paramKey: projectId
        in: path
        schema:
          type: string
        required: true
      - paramName: datasetId
        description: Required. Dataset ID of the routine to update
        paramKey: datasetId
        in: path
        schema:
          type: string
        required: true
      - paramName: routineId
        description: Required. Routine ID of the routine to update
        paramKey: routineId
        in: path
        schema:
          type: string
        required: true
      - paramName: arguments
        description: Optional.
        paramKey: arguments
        in: body
        schema:
          type: array
          items:
            type: any
        required: false
      - paramName: creationTime
        description: Output only. The time when this routine was created, in
          milliseconds since the epoch.
        paramKey: creationTime
        in: body
        schema:
          type: string
        required: false
      - paramName: definitionBody
        description: "Required. The body of the routine. For functions, this is the
          expression in the AS clause. If language=SQL, it is the substring
          inside (but excluding) the parentheses. For example, for the function
          created with the following statement: `CREATE FUNCTION JoinLines(x
          string, y string) as (concat(x, \"\\n\", y))` The definition_body is
          `concat(x, \"\\n\", y)` (\\n is not replaced with linebreak). If
          language=JAVASCRIPT, it is the evaluated string in the AS clause. For
          example, for the function created with the following statement:
          `CREATE FUNCTION f() RETURNS STRING LANGUAGE js AS 'return
          \"\\n\";\\n'` The definition_body is `return \"\\n\";\\n` Note that
          both \\n are replaced with linebreaks."
        paramKey: definitionBody
        in: body
        schema:
          type: string
        required: false
      - paramName: description
        description: Optional. The description of the routine, if defined.
        paramKey: description
        in: body
        schema:
          type: string
        required: false
      - paramName: determinismLevel
        description: Optional. The determinism level of the JavaScript UDF, if defined.
        paramKey: determinismLevel
        in: body
        schema:
          type: string
          enum:
            - DETERMINISM_LEVEL_UNSPECIFIED
            - DETERMINISTIC
            - NOT_DETERMINISTIC
        required: false
      - paramName: etag
        description: Output only. A hash of this resource.
        paramKey: etag
        in: body
        schema:
          type: string
        required: false
      - paramName: importedLibraries
        description: Optional. If language = "JAVASCRIPT", this field stores the path of
          the imported JAVASCRIPT libraries.
        paramKey: importedLibraries
        in: body
        schema:
          type: array
          items:
            type: any
        required: false
      - paramName: language
        description: Optional. Defaults to "SQL" if remote_function_options field is
          absent, not set otherwise.
        paramKey: language
        in: body
        schema:
          type: string
          enum:
            - LANGUAGE_UNSPECIFIED
            - SQL
            - JAVASCRIPT
            - PYTHON
            - JAVA
            - SCALA
        required: false
      - paramName: lastModifiedTime
        description: Output only. The time when this routine was last modified, in
          milliseconds since the epoch.
        paramKey: lastModifiedTime
        in: body
        schema:
          type: string
        required: false
      - paramName: remoteFunctionOptions
        description: Options for a remote user-defined function.
        paramKey: remoteFunctionOptions
        in: body
        schema:
          type: any
        required: false
      - paramName: returnTableType
        description: A table type
        paramKey: returnTableType
        in: body
        schema:
          type: any
        required: false
      - paramName: returnType
        description: ""
        paramKey: returnType
        in: body
        schema:
          type: any
        required: false
      - paramName: routineReference
        description: ""
        paramKey: routineReference
        in: body
        schema:
          type: any
        required: false
      - paramName: routineType
        description: Required. The type of routine.
        paramKey: routineType
        in: body
        schema:
          type: string
          enum:
            - ROUTINE_TYPE_UNSPECIFIED
            - SCALAR_FUNCTION
            - PROCEDURE
            - TABLE_VALUED_FUNCTION
        required: false
      - paramName: sparkOptions
        description: Options for a user-defined Spark routine.
        paramKey: sparkOptions
        in: body
        schema:
          type: any
        required: false
      - paramName: strictMode
        description: Optional. Can be set for procedures only. If true (default), the
          definition body will be validated in the creation and the updates of
          the procedure. For procedures with an argument of ANY TYPE, the
          definition body validtion is not supported at creation/update time,
          and thus this field must be set to false explicitly.
        paramKey: strictMode
        in: body
        schema:
          type: boolean
        required: false
    requestBodyType: json
  - moduleName: Tables / List
    method: get
    path: /projects/{projectId}/datasets/{datasetId}/tables
    description: Lists all tables in the specified dataset. Requires the READER
      dataset role.
    externalDocs: ""
    params:
      - paramName: projectId
        description: Project ID of the tables to list
        paramKey: projectId
        in: path
        schema:
          type: string
        required: true
      - paramName: datasetId
        description: Dataset ID of the tables to list
        paramKey: datasetId
        in: path
        schema:
          type: string
        required: true
      - paramName: maxResults
        description: Maximum number of results to return
        paramKey: maxResults
        in: query
        schema:
          type: number
        required: false
      - paramName: pageToken
        description: Page token, returned by a previous call, to request the next page
          of results
        paramKey: pageToken
        in: query
        schema:
          type: string
        required: false
  - moduleName: Tables / Create
    method: post
    path: /projects/{projectId}/datasets/{datasetId}/tables
    description: Creates a new, empty table in the dataset.
    externalDocs: ""
    params:
      - paramName: projectId
        description: Project ID of the new table
        paramKey: projectId
        in: path
        schema:
          type: string
        required: true
      - paramName: datasetId
        description: Dataset ID of the new table
        paramKey: datasetId
        in: path
        schema:
          type: string
        required: true
      - paramName: cloneDefinition
        description: ""
        paramKey: cloneDefinition
        in: body
        schema:
          type: any
        required: false
      - paramName: clustering
        description: ""
        paramKey: clustering
        in: body
        schema:
          type: any
        required: false
      - paramName: creationTime
        description: "[Output-only] The time when this table was created, in
          milliseconds since the epoch."
        paramKey: creationTime
        in: body
        schema:
          type: string
        required: false
      - paramName: defaultCollation
        description: "[Output-only] The default collation of the table."
        paramKey: defaultCollation
        in: body
        schema:
          type: string
        required: false
      - paramName: defaultRoundingMode
        description: "[Output-only] The default rounding mode of the table."
        paramKey: defaultRoundingMode
        in: body
        schema:
          type: string
        required: false
      - paramName: description
        description: "[Optional] A user-friendly description of this table."
        paramKey: description
        in: body
        schema:
          type: string
        required: false
      - paramName: encryptionConfiguration
        description: ""
        paramKey: encryptionConfiguration
        in: body
        schema:
          type: any
        required: false
      - paramName: etag
        description: "[Output-only] A hash of the table metadata. Used to ensure there
          were no concurrent modifications to the resource when attempting an
          update. Not guaranteed to change when the table contents or the fields
          numRows, numBytes, numLongTermBytes or lastModifiedTime change."
        paramKey: etag
        in: body
        schema:
          type: string
        required: false
      - paramName: expirationTime
        description: "[Optional] The time when this table expires, in milliseconds since
          the epoch. If not present, the table will persist indefinitely.
          Expired tables will be deleted and their storage reclaimed. The
          defaultTableExpirationMs property of the encapsulating dataset can be
          used to set a default expirationTime on newly created tables."
        paramKey: expirationTime
        in: body
        schema:
          type: string
        required: false
      - paramName: externalDataConfiguration
        description: ""
        paramKey: externalDataConfiguration
        in: body
        schema:
          type: any
        required: false
      - paramName: friendlyName
        description: "[Optional] A descriptive name for this table."
        paramKey: friendlyName
        in: body
        schema:
          type: string
        required: false
      - paramName: id
        description: "[Output-only] An opaque ID uniquely identifying the table."
        paramKey: id
        in: body
        schema:
          type: string
        required: false
      - paramName: kind
        description: "[Output-only] The type of the resource."
        paramKey: kind
        in: body
        schema:
          type: string
          default: bigquery#table
        required: false
      - paramName: labels
        description: The labels associated with this table. You can use these to
          organize and group your tables. Label keys and values can be no longer
          than 63 characters, can only contain lowercase letters, numeric
          characters, underscores and dashes. International characters are
          allowed. Label values are optional. Label keys must start with a
          letter and each label in the list must have a different key.
        paramKey: labels
        in: body
        schema:
          type: any
        required: false
      - paramName: lastModifiedTime
        description: "[Output-only] The time when this table was last modified, in
          milliseconds since the epoch."
        paramKey: lastModifiedTime
        in: body
        schema:
          type: string
        required: false
      - paramName: location
        description: "[Output-only] The geographic location where the table resides.
          This value is inherited from the dataset."
        paramKey: location
        in: body
        schema:
          type: string
        required: false
      - paramName: materializedView
        description: ""
        paramKey: materializedView
        in: body
        schema:
          type: any
        required: false
      - paramName: maxStaleness
        description: "[Optional] Max staleness of data that could be returned when table
          or materialized view is queried (formatted as Google SQL Interval
          type)."
        paramKey: maxStaleness
        in: body
        schema:
          type: string
        required: false
      - paramName: model
        description: ""
        paramKey: model
        in: body
        schema:
          type: any
        required: false
      - paramName: numBytes
        description: "[Output-only] The size of this table in bytes, excluding any data
          in the streaming buffer."
        paramKey: numBytes
        in: body
        schema:
          type: string
        required: false
      - paramName: numLongTermBytes
        description: '[Output-only] The number of bytes in the table that are considered
          "long-term storage".'
        paramKey: numLongTermBytes
        in: body
        schema:
          type: string
        required: false
      - paramName: numPhysicalBytes
        description: "[Output-only] [TrustedTester] The physical size of this table in
          bytes, excluding any data in the streaming buffer. This includes
          compression and storage used for time travel."
        paramKey: numPhysicalBytes
        in: body
        schema:
          type: string
        required: false
      - paramName: numRows
        description: "[Output-only] The number of rows of data in this table, excluding
          any data in the streaming buffer."
        paramKey: numRows
        in: body
        schema:
          type: string
        required: false
      - paramName: numActiveLogicalBytes
        description: "[Output-only] Number of logical bytes that are less than 90 days old."
        paramKey: num_active_logical_bytes
        in: body
        schema:
          type: string
        required: false
      - paramName: numActivePhysicalBytes
        description: "[Output-only] Number of physical bytes less than 90 days old. This
          data is not kept in real time, and might be delayed by a few seconds
          to a few minutes."
        paramKey: num_active_physical_bytes
        in: body
        schema:
          type: string
        required: false
      - paramName: numLongTermLogicalBytes
        description: "[Output-only] Number of logical bytes that are more than 90 days old."
        paramKey: num_long_term_logical_bytes
        in: body
        schema:
          type: string
        required: false
      - paramName: numLongTermPhysicalBytes
        description: "[Output-only] Number of physical bytes more than 90 days old. This
          data is not kept in real time, and might be delayed by a few seconds
          to a few minutes."
        paramKey: num_long_term_physical_bytes
        in: body
        schema:
          type: string
        required: false
      - paramName: numPartitions
        description: "[Output-only] The number of partitions present in the table or
          materialized view. This data is not kept in real time, and might be
          delayed by a few seconds to a few minutes."
        paramKey: num_partitions
        in: body
        schema:
          type: string
        required: false
      - paramName: numTimeTravelPhysicalBytes
        description: "[Output-only] Number of physical bytes used by time travel storage
          (deleted or changed data). This data is not kept in real time, and
          might be delayed by a few seconds to a few minutes."
        paramKey: num_time_travel_physical_bytes
        in: body
        schema:
          type: string
        required: false
      - paramName: numTotalLogicalBytes
        description: "[Output-only] Total number of logical bytes in the table or
          materialized view."
        paramKey: num_total_logical_bytes
        in: body
        schema:
          type: string
        required: false
      - paramName: numTotalPhysicalBytes
        description: "[Output-only] The physical size of this table in bytes. This also
          includes storage used for time travel. This data is not kept in real
          time, and might be delayed by a few seconds to a few minutes."
        paramKey: num_total_physical_bytes
        in: body
        schema:
          type: string
        required: false
      - paramName: rangePartitioning
        description: ""
        paramKey: rangePartitioning
        in: body
        schema:
          type: any
        required: false
      - paramName: requirePartitionFilter
        description: "[Optional] If set to true, queries over this table require a
          partition filter that can be used for partition elimination to be
          specified."
        paramKey: requirePartitionFilter
        in: body
        schema:
          type: boolean
          default: false
        required: false
      - paramName: schema
        description: ""
        paramKey: schema
        in: body
        schema:
          type: any
        required: false
      - paramName: selfLink
        description: "[Output-only] A URL that can be used to access this resource again."
        paramKey: selfLink
        in: body
        schema:
          type: string
        required: false
      - paramName: snapshotDefinition
        description: ""
        paramKey: snapshotDefinition
        in: body
        schema:
          type: any
        required: false
      - paramName: streamingBuffer
        description: ""
        paramKey: streamingBuffer
        in: body
        schema:
          type: any
        required: false
      - paramName: tableReference
        description: ""
        paramKey: tableReference
        in: body
        schema:
          type: any
        required: false
      - paramName: timePartitioning
        description: ""
        paramKey: timePartitioning
        in: body
        schema:
          type: any
        required: false
      - paramName: type
        description: "[Output-only] Describes the table type. The following values are
          supported: TABLE: A normal BigQuery table. VIEW: A virtual table
          defined by a SQL query. SNAPSHOT: An immutable, read-only table that
          is a copy of another table. [TrustedTester] MATERIALIZED_VIEW: SQL
          query whose result is persisted. EXTERNAL: A table that references
          data stored in an external storage system, such as Google Cloud
          Storage. The default value is TABLE."
        paramKey: type
        in: body
        schema:
          type: string
        required: false
      - paramName: view
        description: ""
        paramKey: view
        in: body
        schema:
          type: any
        required: false
    requestBodyType: json
  - moduleName: Tables / Delete
    method: delete
    path: /projects/{projectId}/datasets/{datasetId}/tables/{tableId}
    description: Deletes the table specified by tableId from the dataset. If the
      table contains data, all the data will be deleted.
    externalDocs: ""
    params:
      - paramName: projectId
        description: Project ID of the table to delete
        paramKey: projectId
        in: path
        schema:
          type: string
        required: true
      - paramName: datasetId
        description: Dataset ID of the table to delete
        paramKey: datasetId
        in: path
        schema:
          type: string
        required: true
      - paramName: tableId
        description: Table ID of the table to delete
        paramKey: tableId
        in: path
        schema:
          type: string
        required: true
  - moduleName: Tables / Get
    method: get
    path: /projects/{projectId}/datasets/{datasetId}/tables/{tableId}
    description: Gets the specified table resource by table ID. This method does not
      return the data in the table, it only returns the table resource, which
      describes the structure of this table.
    externalDocs: ""
    params:
      - paramName: projectId
        description: Project ID of the requested table
        paramKey: projectId
        in: path
        schema:
          type: string
        required: true
      - paramName: datasetId
        description: Dataset ID of the requested table
        paramKey: datasetId
        in: path
        schema:
          type: string
        required: true
      - paramName: tableId
        description: Table ID of the requested table
        paramKey: tableId
        in: path
        schema:
          type: string
        required: true
      - paramName: selectedFields
        description: List of fields to return (comma-separated). If unspecified, all
          fields are returned
        paramKey: selectedFields
        in: query
        schema:
          type: string
        required: false
      - paramName: view
        description: Specifies the view that determines which table information is
          returned. By default, basic table information and storage statistics
          (STORAGE_STATS) are returned.
        paramKey: view
        in: query
        schema:
          type: string
          enum:
            - BASIC
            - FULL
            - STORAGE_STATS
            - TABLE_METADATA_VIEW_UNSPECIFIED
        required: false
  - moduleName: Tables / Update
    method: patch
    path: /projects/{projectId}/datasets/{datasetId}/tables/{tableId}
    description: Updates information in an existing table. The update method
      replaces the entire table resource, whereas the patch method only replaces
      fields that are provided in the submitted table resource. This method
      supports patch semantics.
    externalDocs: ""
    params:
      - paramName: projectId
        description: Project ID of the table to update
        paramKey: projectId
        in: path
        schema:
          type: string
        required: true
      - paramName: datasetId
        description: Dataset ID of the table to update
        paramKey: datasetId
        in: path
        schema:
          type: string
        required: true
      - paramName: tableId
        description: Table ID of the table to update
        paramKey: tableId
        in: path
        schema:
          type: string
        required: true
      - paramName: autodetectSchema
        description: When true will autodetect schema, else will keep original schema
        paramKey: autodetect_schema
        in: query
        schema:
          type: boolean
        required: false
      - paramName: cloneDefinition
        description: ""
        paramKey: cloneDefinition
        in: body
        schema:
          type: any
        required: false
      - paramName: clustering
        description: ""
        paramKey: clustering
        in: body
        schema:
          type: any
        required: false
      - paramName: creationTime
        description: "[Output-only] The time when this table was created, in
          milliseconds since the epoch."
        paramKey: creationTime
        in: body
        schema:
          type: string
        required: false
      - paramName: defaultCollation
        description: "[Output-only] The default collation of the table."
        paramKey: defaultCollation
        in: body
        schema:
          type: string
        required: false
      - paramName: defaultRoundingMode
        description: "[Output-only] The default rounding mode of the table."
        paramKey: defaultRoundingMode
        in: body
        schema:
          type: string
        required: false
      - paramName: description
        description: "[Optional] A user-friendly description of this table."
        paramKey: description
        in: body
        schema:
          type: string
        required: false
      - paramName: encryptionConfiguration
        description: ""
        paramKey: encryptionConfiguration
        in: body
        schema:
          type: any
        required: false
      - paramName: etag
        description: "[Output-only] A hash of the table metadata. Used to ensure there
          were no concurrent modifications to the resource when attempting an
          update. Not guaranteed to change when the table contents or the fields
          numRows, numBytes, numLongTermBytes or lastModifiedTime change."
        paramKey: etag
        in: body
        schema:
          type: string
        required: false
      - paramName: expirationTime
        description: "[Optional] The time when this table expires, in milliseconds since
          the epoch. If not present, the table will persist indefinitely.
          Expired tables will be deleted and their storage reclaimed. The
          defaultTableExpirationMs property of the encapsulating dataset can be
          used to set a default expirationTime on newly created tables."
        paramKey: expirationTime
        in: body
        schema:
          type: string
        required: false
      - paramName: externalDataConfiguration
        description: ""
        paramKey: externalDataConfiguration
        in: body
        schema:
          type: any
        required: false
      - paramName: friendlyName
        description: "[Optional] A descriptive name for this table."
        paramKey: friendlyName
        in: body
        schema:
          type: string
        required: false
      - paramName: id
        description: "[Output-only] An opaque ID uniquely identifying the table."
        paramKey: id
        in: body
        schema:
          type: string
        required: false
      - paramName: kind
        description: "[Output-only] The type of the resource."
        paramKey: kind
        in: body
        schema:
          type: string
          default: bigquery#table
        required: false
      - paramName: labels
        description: The labels associated with this table. You can use these to
          organize and group your tables. Label keys and values can be no longer
          than 63 characters, can only contain lowercase letters, numeric
          characters, underscores and dashes. International characters are
          allowed. Label values are optional. Label keys must start with a
          letter and each label in the list must have a different key.
        paramKey: labels
        in: body
        schema:
          type: any
        required: false
      - paramName: lastModifiedTime
        description: "[Output-only] The time when this table was last modified, in
          milliseconds since the epoch."
        paramKey: lastModifiedTime
        in: body
        schema:
          type: string
        required: false
      - paramName: location
        description: "[Output-only] The geographic location where the table resides.
          This value is inherited from the dataset."
        paramKey: location
        in: body
        schema:
          type: string
        required: false
      - paramName: materializedView
        description: ""
        paramKey: materializedView
        in: body
        schema:
          type: any
        required: false
      - paramName: maxStaleness
        description: "[Optional] Max staleness of data that could be returned when table
          or materialized view is queried (formatted as Google SQL Interval
          type)."
        paramKey: maxStaleness
        in: body
        schema:
          type: string
        required: false
      - paramName: model
        description: ""
        paramKey: model
        in: body
        schema:
          type: any
        required: false
      - paramName: numBytes
        description: "[Output-only] The size of this table in bytes, excluding any data
          in the streaming buffer."
        paramKey: numBytes
        in: body
        schema:
          type: string
        required: false
      - paramName: numLongTermBytes
        description: '[Output-only] The number of bytes in the table that are considered
          "long-term storage".'
        paramKey: numLongTermBytes
        in: body
        schema:
          type: string
        required: false
      - paramName: numPhysicalBytes
        description: "[Output-only] [TrustedTester] The physical size of this table in
          bytes, excluding any data in the streaming buffer. This includes
          compression and storage used for time travel."
        paramKey: numPhysicalBytes
        in: body
        schema:
          type: string
        required: false
      - paramName: numRows
        description: "[Output-only] The number of rows of data in this table, excluding
          any data in the streaming buffer."
        paramKey: numRows
        in: body
        schema:
          type: string
        required: false
      - paramName: numActiveLogicalBytes
        description: "[Output-only] Number of logical bytes that are less than 90 days old."
        paramKey: num_active_logical_bytes
        in: body
        schema:
          type: string
        required: false
      - paramName: numActivePhysicalBytes
        description: "[Output-only] Number of physical bytes less than 90 days old. This
          data is not kept in real time, and might be delayed by a few seconds
          to a few minutes."
        paramKey: num_active_physical_bytes
        in: body
        schema:
          type: string
        required: false
      - paramName: numLongTermLogicalBytes
        description: "[Output-only] Number of logical bytes that are more than 90 days old."
        paramKey: num_long_term_logical_bytes
        in: body
        schema:
          type: string
        required: false
      - paramName: numLongTermPhysicalBytes
        description: "[Output-only] Number of physical bytes more than 90 days old. This
          data is not kept in real time, and might be delayed by a few seconds
          to a few minutes."
        paramKey: num_long_term_physical_bytes
        in: body
        schema:
          type: string
        required: false
      - paramName: numPartitions
        description: "[Output-only] The number of partitions present in the table or
          materialized view. This data is not kept in real time, and might be
          delayed by a few seconds to a few minutes."
        paramKey: num_partitions
        in: body
        schema:
          type: string
        required: false
      - paramName: numTimeTravelPhysicalBytes
        description: "[Output-only] Number of physical bytes used by time travel storage
          (deleted or changed data). This data is not kept in real time, and
          might be delayed by a few seconds to a few minutes."
        paramKey: num_time_travel_physical_bytes
        in: body
        schema:
          type: string
        required: false
      - paramName: numTotalLogicalBytes
        description: "[Output-only] Total number of logical bytes in the table or
          materialized view."
        paramKey: num_total_logical_bytes
        in: body
        schema:
          type: string
        required: false
      - paramName: numTotalPhysicalBytes
        description: "[Output-only] The physical size of this table in bytes. This also
          includes storage used for time travel. This data is not kept in real
          time, and might be delayed by a few seconds to a few minutes."
        paramKey: num_total_physical_bytes
        in: body
        schema:
          type: string
        required: false
      - paramName: rangePartitioning
        description: ""
        paramKey: rangePartitioning
        in: body
        schema:
          type: any
        required: false
      - paramName: requirePartitionFilter
        description: "[Optional] If set to true, queries over this table require a
          partition filter that can be used for partition elimination to be
          specified."
        paramKey: requirePartitionFilter
        in: body
        schema:
          type: boolean
          default: false
        required: false
      - paramName: schema
        description: ""
        paramKey: schema
        in: body
        schema:
          type: any
        required: false
      - paramName: selfLink
        description: "[Output-only] A URL that can be used to access this resource again."
        paramKey: selfLink
        in: body
        schema:
          type: string
        required: false
      - paramName: snapshotDefinition
        description: ""
        paramKey: snapshotDefinition
        in: body
        schema:
          type: any
        required: false
      - paramName: streamingBuffer
        description: ""
        paramKey: streamingBuffer
        in: body
        schema:
          type: any
        required: false
      - paramName: tableReference
        description: ""
        paramKey: tableReference
        in: body
        schema:
          type: any
        required: false
      - paramName: timePartitioning
        description: ""
        paramKey: timePartitioning
        in: body
        schema:
          type: any
        required: false
      - paramName: type
        description: "[Output-only] Describes the table type. The following values are
          supported: TABLE: A normal BigQuery table. VIEW: A virtual table
          defined by a SQL query. SNAPSHOT: An immutable, read-only table that
          is a copy of another table. [TrustedTester] MATERIALIZED_VIEW: SQL
          query whose result is persisted. EXTERNAL: A table that references
          data stored in an external storage system, such as Google Cloud
          Storage. The default value is TABLE."
        paramKey: type
        in: body
        schema:
          type: string
        required: false
      - paramName: view
        description: ""
        paramKey: view
        in: body
        schema:
          type: any
        required: false
    requestBodyType: json
  - moduleName: Tables / Replace
    method: put
    path: /projects/{projectId}/datasets/{datasetId}/tables/{tableId}
    description: Updates information in an existing table. The update method
      replaces the entire table resource, whereas the patch method only replaces
      fields that are provided in the submitted table resource.
    externalDocs: ""
    params:
      - paramName: projectId
        description: Project ID of the table to update
        paramKey: projectId
        in: path
        schema:
          type: string
        required: true
      - paramName: datasetId
        description: Dataset ID of the table to update
        paramKey: datasetId
        in: path
        schema:
          type: string
        required: true
      - paramName: tableId
        description: Table ID of the table to update
        paramKey: tableId
        in: path
        schema:
          type: string
        required: true
      - paramName: autodetectSchema
        description: When true will autodetect schema, else will keep original schema
        paramKey: autodetect_schema
        in: query
        schema:
          type: boolean
        required: false
      - paramName: cloneDefinition
        description: ""
        paramKey: cloneDefinition
        in: body
        schema:
          type: any
        required: false
      - paramName: clustering
        description: ""
        paramKey: clustering
        in: body
        schema:
          type: any
        required: false
      - paramName: creationTime
        description: "[Output-only] The time when this table was created, in
          milliseconds since the epoch."
        paramKey: creationTime
        in: body
        schema:
          type: string
        required: false
      - paramName: defaultCollation
        description: "[Output-only] The default collation of the table."
        paramKey: defaultCollation
        in: body
        schema:
          type: string
        required: false
      - paramName: defaultRoundingMode
        description: "[Output-only] The default rounding mode of the table."
        paramKey: defaultRoundingMode
        in: body
        schema:
          type: string
        required: false
      - paramName: description
        description: "[Optional] A user-friendly description of this table."
        paramKey: description
        in: body
        schema:
          type: string
        required: false
      - paramName: encryptionConfiguration
        description: ""
        paramKey: encryptionConfiguration
        in: body
        schema:
          type: any
        required: false
      - paramName: etag
        description: "[Output-only] A hash of the table metadata. Used to ensure there
          were no concurrent modifications to the resource when attempting an
          update. Not guaranteed to change when the table contents or the fields
          numRows, numBytes, numLongTermBytes or lastModifiedTime change."
        paramKey: etag
        in: body
        schema:
          type: string
        required: false
      - paramName: expirationTime
        description: "[Optional] The time when this table expires, in milliseconds since
          the epoch. If not present, the table will persist indefinitely.
          Expired tables will be deleted and their storage reclaimed. The
          defaultTableExpirationMs property of the encapsulating dataset can be
          used to set a default expirationTime on newly created tables."
        paramKey: expirationTime
        in: body
        schema:
          type: string
        required: false
      - paramName: externalDataConfiguration
        description: ""
        paramKey: externalDataConfiguration
        in: body
        schema:
          type: any
        required: false
      - paramName: friendlyName
        description: "[Optional] A descriptive name for this table."
        paramKey: friendlyName
        in: body
        schema:
          type: string
        required: false
      - paramName: id
        description: "[Output-only] An opaque ID uniquely identifying the table."
        paramKey: id
        in: body
        schema:
          type: string
        required: false
      - paramName: kind
        description: "[Output-only] The type of the resource."
        paramKey: kind
        in: body
        schema:
          type: string
          default: bigquery#table
        required: false
      - paramName: labels
        description: The labels associated with this table. You can use these to
          organize and group your tables. Label keys and values can be no longer
          than 63 characters, can only contain lowercase letters, numeric
          characters, underscores and dashes. International characters are
          allowed. Label values are optional. Label keys must start with a
          letter and each label in the list must have a different key.
        paramKey: labels
        in: body
        schema:
          type: any
        required: false
      - paramName: lastModifiedTime
        description: "[Output-only] The time when this table was last modified, in
          milliseconds since the epoch."
        paramKey: lastModifiedTime
        in: body
        schema:
          type: string
        required: false
      - paramName: location
        description: "[Output-only] The geographic location where the table resides.
          This value is inherited from the dataset."
        paramKey: location
        in: body
        schema:
          type: string
        required: false
      - paramName: materializedView
        description: ""
        paramKey: materializedView
        in: body
        schema:
          type: any
        required: false
      - paramName: maxStaleness
        description: "[Optional] Max staleness of data that could be returned when table
          or materialized view is queried (formatted as Google SQL Interval
          type)."
        paramKey: maxStaleness
        in: body
        schema:
          type: string
        required: false
      - paramName: model
        description: ""
        paramKey: model
        in: body
        schema:
          type: any
        required: false
      - paramName: numBytes
        description: "[Output-only] The size of this table in bytes, excluding any data
          in the streaming buffer."
        paramKey: numBytes
        in: body
        schema:
          type: string
        required: false
      - paramName: numLongTermBytes
        description: '[Output-only] The number of bytes in the table that are considered
          "long-term storage".'
        paramKey: numLongTermBytes
        in: body
        schema:
          type: string
        required: false
      - paramName: numPhysicalBytes
        description: "[Output-only] [TrustedTester] The physical size of this table in
          bytes, excluding any data in the streaming buffer. This includes
          compression and storage used for time travel."
        paramKey: numPhysicalBytes
        in: body
        schema:
          type: string
        required: false
      - paramName: numRows
        description: "[Output-only] The number of rows of data in this table, excluding
          any data in the streaming buffer."
        paramKey: numRows
        in: body
        schema:
          type: string
        required: false
      - paramName: numActiveLogicalBytes
        description: "[Output-only] Number of logical bytes that are less than 90 days old."
        paramKey: num_active_logical_bytes
        in: body
        schema:
          type: string
        required: false
      - paramName: numActivePhysicalBytes
        description: "[Output-only] Number of physical bytes less than 90 days old. This
          data is not kept in real time, and might be delayed by a few seconds
          to a few minutes."
        paramKey: num_active_physical_bytes
        in: body
        schema:
          type: string
        required: false
      - paramName: numLongTermLogicalBytes
        description: "[Output-only] Number of logical bytes that are more than 90 days old."
        paramKey: num_long_term_logical_bytes
        in: body
        schema:
          type: string
        required: false
      - paramName: numLongTermPhysicalBytes
        description: "[Output-only] Number of physical bytes more than 90 days old. This
          data is not kept in real time, and might be delayed by a few seconds
          to a few minutes."
        paramKey: num_long_term_physical_bytes
        in: body
        schema:
          type: string
        required: false
      - paramName: numPartitions
        description: "[Output-only] The number of partitions present in the table or
          materialized view. This data is not kept in real time, and might be
          delayed by a few seconds to a few minutes."
        paramKey: num_partitions
        in: body
        schema:
          type: string
        required: false
      - paramName: numTimeTravelPhysicalBytes
        description: "[Output-only] Number of physical bytes used by time travel storage
          (deleted or changed data). This data is not kept in real time, and
          might be delayed by a few seconds to a few minutes."
        paramKey: num_time_travel_physical_bytes
        in: body
        schema:
          type: string
        required: false
      - paramName: numTotalLogicalBytes
        description: "[Output-only] Total number of logical bytes in the table or
          materialized view."
        paramKey: num_total_logical_bytes
        in: body
        schema:
          type: string
        required: false
      - paramName: numTotalPhysicalBytes
        description: "[Output-only] The physical size of this table in bytes. This also
          includes storage used for time travel. This data is not kept in real
          time, and might be delayed by a few seconds to a few minutes."
        paramKey: num_total_physical_bytes
        in: body
        schema:
          type: string
        required: false
      - paramName: rangePartitioning
        description: ""
        paramKey: rangePartitioning
        in: body
        schema:
          type: any
        required: false
      - paramName: requirePartitionFilter
        description: "[Optional] If set to true, queries over this table require a
          partition filter that can be used for partition elimination to be
          specified."
        paramKey: requirePartitionFilter
        in: body
        schema:
          type: boolean
          default: false
        required: false
      - paramName: schema
        description: ""
        paramKey: schema
        in: body
        schema:
          type: any
        required: false
      - paramName: selfLink
        description: "[Output-only] A URL that can be used to access this resource again."
        paramKey: selfLink
        in: body
        schema:
          type: string
        required: false
      - paramName: snapshotDefinition
        description: ""
        paramKey: snapshotDefinition
        in: body
        schema:
          type: any
        required: false
      - paramName: streamingBuffer
        description: ""
        paramKey: streamingBuffer
        in: body
        schema:
          type: any
        required: false
      - paramName: tableReference
        description: ""
        paramKey: tableReference
        in: body
        schema:
          type: any
        required: false
      - paramName: timePartitioning
        description: ""
        paramKey: timePartitioning
        in: body
        schema:
          type: any
        required: false
      - paramName: type
        description: "[Output-only] Describes the table type. The following values are
          supported: TABLE: A normal BigQuery table. VIEW: A virtual table
          defined by a SQL query. SNAPSHOT: An immutable, read-only table that
          is a copy of another table. [TrustedTester] MATERIALIZED_VIEW: SQL
          query whose result is persisted. EXTERNAL: A table that references
          data stored in an external storage system, such as Google Cloud
          Storage. The default value is TABLE."
        paramKey: type
        in: body
        schema:
          type: string
        required: false
      - paramName: view
        description: ""
        paramKey: view
        in: body
        schema:
          type: any
        required: false
    requestBodyType: json
  - moduleName: Tables / Data / List
    method: get
    path: /projects/{projectId}/datasets/{datasetId}/tables/{tableId}/data
    description: Retrieves table data from a specified set of rows. Requires the
      READER dataset role.
    externalDocs: ""
    params:
      - paramName: projectId
        description: Project ID of the table to read
        paramKey: projectId
        in: path
        schema:
          type: string
        required: true
      - paramName: datasetId
        description: Dataset ID of the table to read
        paramKey: datasetId
        in: path
        schema:
          type: string
        required: true
      - paramName: tableId
        description: Table ID of the table to read
        paramKey: tableId
        in: path
        schema:
          type: string
        required: true
      - paramName: maxResults
        description: Maximum number of results to return
        paramKey: maxResults
        in: query
        schema:
          type: number
        required: false
      - paramName: pageToken
        description: Page token, returned by a previous call, identifying the result set
        paramKey: pageToken
        in: query
        schema:
          type: string
        required: false
      - paramName: selectedFields
        description: List of fields to return (comma-separated). If unspecified, all
          fields are returned
        paramKey: selectedFields
        in: query
        schema:
          type: string
        required: false
      - paramName: startIndex
        description: Zero-based index of the starting row to read
        paramKey: startIndex
        in: query
        schema:
          type: string
        required: false
  - moduleName: Tables / Data / Insert
    method: post
    path: /projects/{projectId}/datasets/{datasetId}/tables/{tableId}/insertAll
    description: Streams data into BigQuery one record at a time without needing to
      run a load job. Requires the WRITER dataset role.
    externalDocs: ""
    params:
      - paramName: projectId
        description: Project ID of the destination table.
        paramKey: projectId
        in: path
        schema:
          type: string
        required: true
      - paramName: datasetId
        description: Dataset ID of the destination table.
        paramKey: datasetId
        in: path
        schema:
          type: string
        required: true
      - paramName: tableId
        description: Table ID of the destination table.
        paramKey: tableId
        in: path
        schema:
          type: string
        required: true
      - paramName: ignoreUnknownValues
        description: "[Optional] Accept rows that contain values that do not match the
          schema. The unknown values are ignored. Default is false, which treats
          unknown values as errors."
        paramKey: ignoreUnknownValues
        in: body
        schema:
          type: boolean
        required: false
      - paramName: kind
        description: The resource type of the response.
        paramKey: kind
        in: body
        schema:
          type: string
          default: bigquery#tableDataInsertAllRequest
        required: false
      - paramName: rows
        description: The rows to insert.
        paramKey: rows
        in: body
        schema:
          type: array
          items:
            type: any
        required: false
      - paramName: skipInvalidRows
        description: "[Optional] Insert all valid rows of a request, even if invalid
          rows exist. The default value is false, which causes the entire
          request to fail if any invalid rows exist."
        paramKey: skipInvalidRows
        in: body
        schema:
          type: boolean
        required: false
      - paramName: templateSuffix
        description: If specified, treats the destination table as a base template, and
          inserts the rows into an instance table named
          "{destination}{templateSuffix}". BigQuery will manage creation of the
          instance table, using the schema of the base template table. See
          https://cloud.google.com/bigquery/streaming-data-into-bigquery#template-tables
          for considerations when working with templates tables.
        paramKey: templateSuffix
        in: body
        schema:
          type: string
        required: false
    requestBodyType: json
  - moduleName: Tables / List Row Access Policies
    method: get
    path: /projects/{projectId}/datasets/{datasetId}/tables/{tableId}/rowAccessPolicies
    description: Lists all row access policies on the specified table.
    externalDocs: ""
    params:
      - paramName: projectId
        description: Required. Project ID of the row access policies to list.
        paramKey: projectId
        in: path
        schema:
          type: string
        required: true
      - paramName: datasetId
        description: Required. Dataset ID of row access policies to list.
        paramKey: datasetId
        in: path
        schema:
          type: string
        required: true
      - paramName: tableId
        description: Required. Table ID of the table to list row access policies.
        paramKey: tableId
        in: path
        schema:
          type: string
        required: true
      - paramName: pageSize
        description: The maximum number of results to return in a single response page.
          Leverage the page tokens to iterate through the entire collection.
        paramKey: pageSize
        in: query
        schema:
          type: number
        required: false
      - paramName: pageToken
        description: Page token, returned by a previous call, to request the next page
          of results.
        paramKey: pageToken
        in: query
        schema:
          type: string
        required: false
  - moduleName: Jobs / List
    method: get
    path: /projects/{projectId}/jobs
    description: Lists all jobs that you started in the specified project. Job
      information is available for a six month period after creation. The job
      list is sorted in reverse chronological order, by job creation time.
      Requires the Can View project role, or the Is Owner project role if you
      set the allUsers property.
    externalDocs: ""
    params:
      - paramName: projectId
        description: Project ID of the jobs to list
        paramKey: projectId
        in: path
        schema:
          type: string
        required: true
      - paramName: allUsers
        description: Whether to display jobs owned by all users in the project. Default
          false
        paramKey: allUsers
        in: query
        schema:
          type: boolean
        required: false
      - paramName: maxCreationTime
        description: Max value for job creation time, in milliseconds since the POSIX
          epoch. If set, only jobs created before or at this timestamp are
          returned
        paramKey: maxCreationTime
        in: query
        schema:
          type: string
        required: false
      - paramName: maxResults
        description: Maximum number of results to return
        paramKey: maxResults
        in: query
        schema:
          type: number
        required: false
      - paramName: minCreationTime
        description: Min value for job creation time, in milliseconds since the POSIX
          epoch. If set, only jobs created after or at this timestamp are
          returned
        paramKey: minCreationTime
        in: query
        schema:
          type: string
        required: false
      - paramName: pageToken
        description: Page token, returned by a previous call, to request the next page
          of results
        paramKey: pageToken
        in: query
        schema:
          type: string
        required: false
      - paramName: parentJobId
        description: If set, retrieves only jobs whose parent is this job. Otherwise,
          retrieves only jobs which have no parent
        paramKey: parentJobId
        in: query
        schema:
          type: string
        required: false
      - paramName: projection
        description: Restrict information returned to a set of selected fields
        paramKey: projection
        in: query
        schema:
          type: string
          enum:
            - full
            - minimal
        required: false
      - paramName: stateFilter
        description: Filter for job state
        paramKey: stateFilter
        in: query
        schema:
          type: array
          items:
            type: any
        required: false
        style: form
        explode: true
  - moduleName: Jobs / Create
    method: post
    path: /projects/{projectId}/jobs
    description: Starts a new asynchronous job. Requires the Can View project role.
    externalDocs: ""
    params:
      - paramName: projectId
        description: Project ID of the project that will be billed for the job
        paramKey: projectId
        in: path
        schema:
          type: string
        required: true
      - paramName: configuration
        description: ""
        paramKey: configuration
        in: body
        schema:
          type: any
        required: false
      - paramName: etag
        description: "[Output-only] A hash of this resource."
        paramKey: etag
        in: body
        schema:
          type: string
        required: false
      - paramName: id
        description: "[Output-only] Opaque ID field of the job"
        paramKey: id
        in: body
        schema:
          type: string
        required: false
      - paramName: jobReference
        description: ""
        paramKey: jobReference
        in: body
        schema:
          type: any
        required: false
      - paramName: kind
        description: "[Output-only] The type of the resource."
        paramKey: kind
        in: body
        schema:
          type: string
          default: bigquery#job
        required: false
      - paramName: selfLink
        description: "[Output-only] A URL that can be used to access this resource again."
        paramKey: selfLink
        in: body
        schema:
          type: string
        required: false
      - paramName: statistics
        description: ""
        paramKey: statistics
        in: body
        schema:
          type: any
        required: false
      - paramName: status
        description: ""
        paramKey: status
        in: body
        schema:
          type: any
        required: false
      - paramName: userEmail
        description: "[Output-only] Email address of the user who ran the job."
        paramKey: user_email
        in: body
        schema:
          type: string
        required: false
    requestBodyType: json
  - moduleName: Jobs / Get
    method: get
    path: /projects/{projectId}/jobs/{jobId}
    description: Returns information about a specific job. Job information is
      available for a six month period after creation. Requires that you're the
      person who ran the job, or have the Is Owner project role.
    externalDocs: ""
    params:
      - paramName: projectId
        description: "[Required] Project ID of the requested job"
        paramKey: projectId
        in: path
        schema:
          type: string
        required: true
      - paramName: jobId
        description: "[Required] Job ID of the requested job"
        paramKey: jobId
        in: path
        schema:
          type: string
        required: true
      - paramName: location
        description: The geographic location of the job. Required except for US and EU.
          See details at
          https://cloud.google.com/bigquery/docs/locations#specifying_your_location.
        paramKey: location
        in: query
        schema:
          type: string
        required: false
  - moduleName: Jobs / Cancel
    method: post
    path: /projects/{projectId}/jobs/{jobId}/cancel
    description: Requests that a job be cancelled. This call will return
      immediately, and the client will need to poll for the job status to see if
      the cancel completed successfully. Cancelled jobs may still incur costs.
    externalDocs: ""
    params:
      - paramName: projectId
        description: "[Required] Project ID of the job to cancel"
        paramKey: projectId
        in: path
        schema:
          type: string
        required: true
      - paramName: jobId
        description: "[Required] Job ID of the job to cancel"
        paramKey: jobId
        in: path
        schema:
          type: string
        required: true
      - paramName: location
        description: The geographic location of the job. Required except for US and EU.
          See details at
          https://cloud.google.com/bigquery/docs/locations#specifying_your_location.
        paramKey: location
        in: query
        schema:
          type: string
        required: false
  - moduleName: Jobs / Delete
    method: delete
    path: /projects/{projectId}/jobs/{jobId}/delete
    description: Requests the deletion of the metadata of a job. This call returns
      when the job's metadata is deleted.
    externalDocs: ""
    params:
      - paramName: projectId
        description: Required. Project ID of the job for which metadata is to be deleted.
        paramKey: projectId
        in: path
        schema:
          type: string
        required: true
      - paramName: jobId
        description: Required. Job ID of the job for which metadata is to be deleted. If
          this is a parent job which has child jobs, the metadata from all child
          jobs will be deleted as well. Direct deletion of the metadata of child
          jobs is not allowed.
        paramKey: jobId
        in: path
        schema:
          type: string
        required: true
      - paramName: location
        description: "The geographic location of the job. Required. See details at:
          https://cloud.google.com/bigquery/docs/locations#specifying_your_loca\
          tion."
        paramKey: location
        in: query
        schema:
          type: string
        required: false
  - moduleName: Queries / Execute
    method: post
    path: /projects/{projectId}/queries
    description: Runs a BigQuery SQL query synchronously and returns query results
      if the query completes within a specified timeout.
    externalDocs: ""
    params:
      - paramName: projectId
        description: Project ID of the project billed for the query
        paramKey: projectId
        in: path
        schema:
          type: string
        required: true
      - paramName: connectionProperties
        description: Connection properties.
        paramKey: connectionProperties
        in: body
        schema:
          type: array
          items:
            type: any
        required: false
      - paramName: continuous
        description: "[Optional] Specifies whether the query should be executed as a
          continuous query. The default value is false."
        paramKey: continuous
        in: body
        schema:
          type: boolean
        required: false
      - paramName: createSession
        description: If true, creates a new session, where session id will be a server
          generated random id. If false, runs query with an existing session_id
          passed in ConnectionProperty, otherwise runs query in non-session
          mode.
        paramKey: createSession
        in: body
        schema:
          type: boolean
        required: false
      - paramName: defaultDataset
        description: ""
        paramKey: defaultDataset
        in: body
        schema:
          type: any
        required: false
      - paramName: dryRun
        description: "[Optional] If set to true, BigQuery doesn't run the job. Instead,
          if the query is valid, BigQuery returns statistics about the job such
          as how many bytes would be processed. If the query is invalid, an
          error returns. The default value is false."
        paramKey: dryRun
        in: body
        schema:
          type: boolean
        required: false
      - paramName: kind
        description: The resource type of the request.
        paramKey: kind
        in: body
        schema:
          type: string
          default: bigquery#queryRequest
        required: false
      - paramName: labels
        description: The labels associated with this job. You can use these to organize
          and group your jobs. Label keys and values can be no longer than 63
          characters, can only contain lowercase letters, numeric characters,
          underscores and dashes. International characters are allowed. Label
          values are optional. Label keys must start with a letter and each
          label in the list must have a different key.
        paramKey: labels
        in: body
        schema:
          type: any
        required: false
      - paramName: location
        description: The geographic location where the job should run. See details at
          https://cloud.google.com/bigquery/docs/locations#specifying_your_location.
        paramKey: location
        in: body
        schema:
          type: string
        required: false
      - paramName: maxResults
        description: "[Optional] The maximum number of rows of data to return per page
          of results. Setting this flag to a small value such as 1000 and then
          paging through results might improve reliability when the query result
          set is large. In addition to this limit, responses are also limited to
          10 MB. By default, there is no maximum row count, and only the byte
          limit applies."
        paramKey: maxResults
        in: body
        schema:
          type: number
        required: false
      - paramName: maximumBytesBilled
        description: "[Optional] Limits the bytes billed for this job. Queries that will
          have bytes billed beyond this limit will fail (without incurring a
          charge). If unspecified, this will be set to your project default."
        paramKey: maximumBytesBilled
        in: body
        schema:
          type: string
        required: false
      - paramName: parameterMode
        description: Standard SQL only. Set to POSITIONAL to use positional (?) query
          parameters or to NAMED to use named (@myparam) query parameters in
          this query.
        paramKey: parameterMode
        in: body
        schema:
          type: string
        required: false
      - paramName: preserveNulls
        description: "[Deprecated] This property is deprecated."
        paramKey: preserveNulls
        in: body
        schema:
          type: boolean
        required: false
      - paramName: query
        description: '[Required] A query string, following the BigQuery query syntax, of
          the query to execute. Example: "SELECT count(f1) FROM
          [myProjectId:myDatasetId.myTableId]".'
        paramKey: query
        in: body
        schema:
          type: string
        required: false
      - paramName: queryParameters
        description: Query parameters for Standard SQL queries.
        paramKey: queryParameters
        in: body
        schema:
          type: array
          items:
            type: any
        required: false
      - paramName: requestId
        description: "A unique user provided identifier to ensure idempotent behavior
          for queries. Note that this is different from the job_id. It has the
          following properties: 1. It is case-sensitive, limited to up to 36
          ASCII characters. A UUID is recommended. 2. Read only queries can
          ignore this token since they are nullipotent by definition. 3. For the
          purposes of idempotency ensured by the request_id, a request is
          considered duplicate of another only if they have the same request_id
          and are actually duplicates. When determining whether a request is a
          duplicate of the previous request, all parameters in the request that
          may affect the behavior are considered. For example, query,
          connection_properties, query_parameters, use_legacy_sql are parameters
          that affect the result and are considered when determining whether a
          request is a duplicate, but properties like timeout_ms don't affect
          the result and are thus not considered. Dry run query requests are
          never considered duplicate of another request. 4. When a duplicate
          mutating query request is detected, it returns: a. the results of the
          mutation if it completes successfully within the timeout. b. the
          running operation if it is still in progress at the end of the
          timeout. 5. Its lifetime is limited to 15 minutes. In other words, if
          two requests are sent with the same request_id, but more than 15
          minutes apart, idempotency is not guaranteed."
        paramKey: requestId
        in: body
        schema:
          type: string
        required: false
      - paramName: timeoutMs
        description: "[Optional] How long to wait for the query to complete, in
          milliseconds, before the request times out and returns. Note that this
          is only a timeout for the request, not the query. If the query takes
          longer to run than the timeout value, the call returns without any
          results and with the 'jobComplete' flag set to false. You can call
          GetQueryResults() to wait for the query to complete and read the
          results. The default value is 10000 milliseconds (10 seconds)."
        paramKey: timeoutMs
        in: body
        schema:
          type: number
        required: false
      - paramName: useLegacySql
        description: "Specifies whether to use BigQuery's legacy SQL dialect for this
          query. The default value is true. If set to false, the query will use
          BigQuery's standard SQL:
          https://cloud.google.com/bigquery/sql-reference/ When useLegacySql is
          set to false, the value of flattenResults is ignored; query will be
          run as if flattenResults is false."
        paramKey: useLegacySql
        in: body
        schema:
          type: boolean
          default: true
        required: false
      - paramName: useQueryCache
        description: "[Optional] Whether to look for the result in the query cache. The
          query cache is a best-effort cache that will be flushed whenever
          tables in the query are modified. The default value is true."
        paramKey: useQueryCache
        in: body
        schema:
          type: boolean
          default: true
        required: false
    requestBodyType: json
  - moduleName: Queries / Results
    method: get
    path: /projects/{projectId}/queries/{jobId}
    description: Retrieves the results of a query job.
    externalDocs: ""
    params:
      - paramName: projectId
        description: "[Required] Project ID of the query job"
        paramKey: projectId
        in: path
        schema:
          type: string
        required: true
      - paramName: jobId
        description: "[Required] Job ID of the query job"
        paramKey: jobId
        in: path
        schema:
          type: string
        required: true
      - paramName: location
        description: The geographic location where the job should run. Required except
          for US and EU. See details at
          https://cloud.google.com/bigquery/docs/locations#specifying_your_location.
        paramKey: location
        in: query
        schema:
          type: string
        required: false
      - paramName: maxResults
        description: Maximum number of results to read
        paramKey: maxResults
        in: query
        schema:
          type: number
        required: false
      - paramName: pageToken
        description: Page token, returned by a previous call, to request the next page
          of results
        paramKey: pageToken
        in: query
        schema:
          type: string
        required: false
      - paramName: startIndex
        description: Zero-based index of the starting row
        paramKey: startIndex
        in: query
        schema:
          type: string
        required: false
      - paramName: timeoutMs
        description: How long to wait for the query to complete, in milliseconds, before
          returning. Default is 10 seconds. If the timeout passes before the job
          completes, the 'jobComplete' field in the response will be false
        paramKey: timeoutMs
        in: query
        schema:
          type: number
        required: false
  - moduleName: Projects / Get Service Account
    method: get
    path: /projects/{projectId}/serviceAccount
    description: Returns the email address of the service account for your project
      used for interactions with Google Cloud KMS.
    externalDocs: ""
    params:
      - paramName: projectId
        description: Project ID for which the service account is requested.
        paramKey: projectId
        in: path
        schema:
          type: string
        required: true
  - moduleName: Tables / Get IAM Policy
    method: post
    path: /{resource}:getIamPolicy
    description: Gets the access control policy for a resource. Returns an empty
      policy if the resource exists and does not have a policy set.
    externalDocs: ""
    params:
      - paramName: resource
        description: "REQUIRED: The resource for which the policy is being requested.
          See [Resource
          names](https://cloud.google.com/apis/design/resource_names) for the
          appropriate value for this field."
        paramKey: resource
        in: path
        schema:
          type: string
        required: true
      - paramName: options
        description: Encapsulates settings provided to GetIamPolicy.
        paramKey: options
        in: body
        schema:
          type: any
        required: false
    requestBodyType: json
  - moduleName: Tables / Set IAM Policy
    method: post
    path: /{resource}:setIamPolicy
    description: Sets the access control policy on the specified resource. Replaces
      any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and
      `PERMISSION_DENIED` errors.
    externalDocs: ""
    params:
      - paramName: resource
        description: "REQUIRED: The resource for which the policy is being specified.
          See [Resource
          names](https://cloud.google.com/apis/design/resource_names) for the
          appropriate value for this field."
        paramKey: resource
        in: path
        schema:
          type: string
        required: true
      - paramName: policy
        description: "An Identity and Access Management (IAM) policy, which specifies
          access controls for Google Cloud resources. A `Policy` is a collection
          of `bindings`. A `binding` binds one or more `members`, or principals,
          to a single `role`. Principals can be user accounts, service accounts,
          Google groups, and domains (such as G Suite). A `role` is a named list
          of permissions; each `role` can be an IAM predefined role or a
          user-created custom role. For some types of Google Cloud resources, a
          `binding` can also specify a `condition`, which is a logical
          expression that allows access to a resource only if the expression
          evaluates to `true`. A condition can add constraints based on
          attributes of the request, the resource, or both. To learn which
          resources support conditions in their IAM policies, see the [IAM
          documentation](https://cloud.google.com/iam/help/conditions/resource-\
          policies). **JSON example:** { \"bindings\": [ { \"role\":
          \"roles/resourcemanager.organizationAdmin\", \"members\": [
          \"user:mike@example.com\", \"group:admins@example.com\",
          \"domain:google.com\",
          \"serviceAccount:my-project-id@appspot.gserviceaccount.com\" ] }, {
          \"role\": \"roles/resourcemanager.organizationViewer\", \"members\": [
          \"user:eve@example.com\" ], \"condition\": { \"title\": \"expirable
          access\", \"description\": \"Does not grant access after Sep 2020\",
          \"expression\": \"request.time <
          timestamp('2020-10-01T00:00:00.000Z')\", } } ], \"etag\":
          \"BwWWja0YfJA=\", \"version\": 3 } **YAML example:** bindings: -
          members: - user:mike@example.com - group:admins@example.com -
          domain:google.com -
          serviceAccount:my-project-id@appspot.gserviceaccount.com role:
          roles/resourcemanager.organizationAdmin - members: -
          user:eve@example.com role: roles/resourcemanager.organizationViewer
          condition: title: expirable access description: Does not grant access
          after Sep 2020 expression: request.time <
          timestamp('2020-10-01T00:00:00.000Z') etag: BwWWja0YfJA= version: 3
          For a description of IAM and its features, see the [IAM
          documentation](https://cloud.google.com/iam/docs/)."
        paramKey: policy
        in: body
        schema:
          type: any
        required: false
      - paramName: updateMask
        description: 'OPTIONAL: A FieldMask specifying which fields of the policy to
          modify. Only the fields in the mask will be modified. If no mask is
          provided, the following default mask is used: `paths: "bindings,
          etag"`'
        paramKey: updateMask
        in: body
        schema:
          type: string
        required: false
    requestBodyType: json
  - moduleName: Tables / Test IAM Permissions
    method: post
    path: /{resource}:testIamPermissions
    description: 'Returns permissions that a caller has on the specified resource.
      If the resource does not exist, this will return an empty set of
      permissions, not a `NOT_FOUND` error. Note: This operation is designed to
      be used for building permission-aware UIs and command-line tools, not for
      authorization checking. This operation may "fail open" without warning.'
    externalDocs: ""
    params:
      - paramName: resource
        description: "REQUIRED: The resource for which the policy detail is being
          requested. See [Resource
          names](https://cloud.google.com/apis/design/resource_names) for the
          appropriate value for this field."
        paramKey: resource
        in: path
        schema:
          type: string
        required: true
      - paramName: permissions
        description: The set of permissions to check for the `resource`. Permissions
          with wildcards (such as `*` or `storage.*`) are not allowed. For more
          information see [IAM
          Overview](https://cloud.google.com/iam/docs/overview#permissions).
        paramKey: permissions
        in: body
        schema:
          type: array
          items:
            type: any
        required: false
    requestBodyType: json
