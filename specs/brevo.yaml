id: brevo
displayName: Brevo
baseUrl: https://api.brevo.com/v3
commonParams:
  - paramName: apiKey
    paramKey: api-key
    in: header
    required: true
    description: Brevo API key
    schema:
      type: string
modules:
  - moduleName: Email Campaigns / List
    method: get
    path: /emailCampaigns
    description: Return all your created email campaigns
    externalDocs: ""
    params:
      - paramName: type
        description: Filter on the type of the campaigns
        paramKey: type
        in: query
        schema:
          type: string
          enum:
            - classic
            - trigger
        required: false
      - paramName: status
        description: Filter on the status of the campaign
        paramKey: status
        in: query
        schema:
          type: string
          enum:
            - suspended
            - archive
            - sent
            - queued
            - draft
            - inProcess
        required: false
      - paramName: statistics
        description: Filter on the type of statistics required. Example **globalStats**
          value will only fetch globalStats info of the campaign in returned
          response.This option only returns data for events occurred in the last
          6 months.For older campaigns, itâ€™s advisable to use the **Get Campaign
          Report** endpoint.
        paramKey: statistics
        in: query
        schema:
          type: string
          enum:
            - globalStats
            - linksStats
            - statsByDomain
        required: false
      - paramName: startDate
        description: >
          **Mandatory if endDate is used**. Starting (urlencoded) UTC date-time
          (YYYY-MM-DDTHH:mm:ss.SSSZ) to filter the sent email campaigns.

          **Prefer to pass your timezone in date-time format for accurate
          result** ( only available if either 'status' not passed and if passed
          is set to 'sent' )
        paramKey: startDate
        in: query
        schema:
          type: string
        required: false
      - paramName: endDate
        description: >
          **Mandatory if startDate is used**. Ending (urlencoded) UTC date-time
          (YYYY-MM-DDTHH:mm:ss.SSSZ) to filter the sent email campaigns.

          **Prefer to pass your timezone in date-time format for accurate
          result** ( only available if either 'status' not passed and if passed
          is set to 'sent' )
        paramKey: endDate
        in: query
        schema:
          type: string
        required: false
      - paramName: limit
        description: Number of documents per page
        paramKey: limit
        in: query
        schema:
          type: number
          minimum: 0
          maximum: 100
          default: 50
        required: false
      - paramName: offset
        description: Index of the first document in the page
        paramKey: offset
        in: query
        schema:
          type: number
          default: 0
        required: false
      - paramName: sort
        description: Sort the results in the ascending/descending order of record
          creation. Default order is **descending** if `sort` is not passed
        paramKey: sort
        in: query
        schema:
          type: string
          default: desc
          enum:
            - asc
            - desc
        required: false
      - paramName: excludeHtmlContent
        description: Use this flag to exclude htmlContent from the response body. If set
          to **true**, htmlContent field will be returned as empty string in the
          response body
        paramKey: excludeHtmlContent
        in: query
        schema:
          type: boolean
        required: false
  - moduleName: Email Campaigns / Create
    method: post
    path: /emailCampaigns
    description: Create an email campaign
    externalDocs: ""
    params:
      - paramName: tag
        description: Tag of the campaign
        paramKey: tag
        in: body
        schema:
          type: string
        required: false
      - paramName: sender
        description: >
          Sender details including id or email and name (_optional_). Only one
          of either Sender's email or Sender's ID shall be passed in one request
          at a time. For example:

          **{"name":"xyz", "email":"example@abc.com"}**

          **{"name":"xyz", "id":123}**
        paramKey: sender
        in: body
        schema:
          type: any
        required: true
      - paramName: name
        description: Name of the campaign
        paramKey: name
        in: body
        schema:
          type: string
        required: true
      - paramName: htmlContent
        description: >
          Mandatory if htmlUrl and templateId are empty. Body of the message
          (HTML).
        paramKey: htmlContent
        in: body
        schema:
          type: string
        required: false
      - paramName: htmlUrl
        description: >
          **Mandatory if htmlContent and templateId are empty**. Url to the
          message (HTML). For example:

          **https://html.domain.com**
        paramKey: htmlUrl
        in: body
        schema:
          type: string
        required: false
      - paramName: templateId
        description: >
          **Mandatory if htmlContent and htmlUrl are empty**. Id of the
          transactional

          email template with status _active_. Used to copy only its content
          fetched

          from htmlContent/htmlUrl to an email campaign for RSS feature.
        paramKey: templateId
        in: body
        schema:
          type: number
        required: false
      - paramName: scheduledAt
        description: >
          Sending UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ). **Prefer to pass
          your timezone in date-time format for accurate result**.

          If sendAtBestTime is set to true, your campaign will be sent according
          to the date passed (ignoring the time part). For example:

          **2017-06-01T12:30:00+02:00**
        paramKey: scheduledAt
        in: body
        schema:
          type: string
        required: false
      - paramName: subject
        description: |
          Subject of the campaign. **Mandatory if abTesting is false**.
          Ignored if abTesting is true.
        paramKey: subject
        in: body
        schema:
          type: string
        required: false
      - paramName: previewText
        description: Preview text or preheader of the email campaign
        paramKey: previewText
        in: body
        schema:
          type: string
        required: false
      - paramName: replyTo
        description: Email on which the campaign recipients will be able to reply to
        paramKey: replyTo
        in: body
        schema:
          type: string
        required: false
      - paramName: toField
        description: >
          To personalize the **To** Field. If you want to include the first name
          and last name of your recipient, add **{FNAME} {LNAME}**. These
          contact attributes must already exist in your Brevo account. If input
          parameter **params** used please use **{{contact.FNAME}}
          {{contact.LNAME}}** for personalization
        paramKey: toField
        in: body
        schema:
          type: string
        required: false
      - paramName: recipients
        description: Segment ids and List ids to include/exclude from campaign
        paramKey: recipients
        in: body
        schema:
          type: any
        required: false
      - paramName: attachmentUrl
        description: >
          Absolute url of the attachment (no local file).

          Extension allowed:

          #### xlsx, xls, ods, docx, docm, doc, csv, pdf, txt, gif, jpg, jpeg,
          png, tif, tiff, rtf, bmp, cgm, css, shtml, html, htm, zip, xml, ppt,
          pptx, tar, ez, ics, mobi, msg, pub and eps
        paramKey: attachmentUrl
        in: body
        schema:
          type: string
        required: false
      - paramName: inlineImageActivation
        description: >
          Use true to embedded the images in your email. Final size of

          the email should be less than **4MB**. Campaigns with embedded images
          can

          _not be sent to more than 5000 contacts_
        paramKey: inlineImageActivation
        in: body
        schema:
          type: boolean
          default: false
        required: false
      - paramName: mirrorActive
        description: Use true to enable the mirror link
        paramKey: mirrorActive
        in: body
        schema:
          type: boolean
        required: false
      - paramName: footer
        description: Footer of the email campaign
        paramKey: footer
        in: body
        schema:
          type: string
        required: false
      - paramName: header
        description: Header of the email campaign
        paramKey: header
        in: body
        schema:
          type: string
        required: false
      - paramName: utmCampaign
        description: Customize the utm_campaign value. If this field is empty, the
          campaign name will be used. Only alphanumeric characters and spaces
          are allowed
        paramKey: utmCampaign
        in: body
        schema:
          type: string
        required: false
      - paramName: params
        description: >
          Pass the set of attributes to customize the type classic campaign. For
          example: **{"FNAME":"Joe", "LNAME":"Doe"}**. Only available if
          **type** is **classic**. It's considered only if campaign is in _New
          Template Language format_. The New Template Language is dependent on
          the values of **subject, htmlContent/htmlUrl, sender.name & toField**
        paramKey: params
        in: body
        schema:
          type: any
        required: false
      - paramName: sendAtBestTime
        description: Set this to true if you want to send your campaign at best time.
        paramKey: sendAtBestTime
        in: body
        schema:
          type: boolean
          default: false
        required: false
      - paramName: abTesting
        description: >
          Status of A/B Test. abTesting = false means it is disabled & abTesting
          = true means it is enabled. **subjectA, subjectB, splitRule,
          winnerCriteria & winnerDelay** will be considered when abTesting is
          set to true.

          subjectA & subjectB are mandatory together & subject if passed is
          ignored. **Can be set to true only if sendAtBestTime is false**.

          You will be able to set up two subject lines for your campaign and
          send them to a random sample of your total recipients. Half of the
          test group will receive version A, and the other half will receive
          version B
        paramKey: abTesting
        in: body
        schema:
          type: boolean
          default: false
        required: false
      - paramName: subjectA
        description: |
          Subject A of the campaign. **Mandatory if abTesting = true**.
          subjectA & subjectB should have unique value
        paramKey: subjectA
        in: body
        schema:
          type: string
        required: false
      - paramName: subjectB
        description: |
          Subject B of the campaign. **Mandatory if abTesting = true**.
          subjectA & subjectB should have unique value
        paramKey: subjectB
        in: body
        schema:
          type: string
        required: false
      - paramName: splitRule
        description: >
          Add the size of your test groups. **Mandatory if abTesting = true &
          'recipients' is passed**. We'll send version A and B to a random
          sample of recipients, and then the winning version to everyone else
        paramKey: splitRule
        in: body
        schema:
          type: number
          minimum: 1
          maximum: 50
        required: false
      - paramName: winnerCriteria
        description: >
          Choose the metrics that will determinate the winning version.
          **Mandatory if _splitRule_ >= 1 and < 50**. If splitRule = 50,
          `winnerCriteria` is ignored if passed
        paramKey: winnerCriteria
        in: body
        schema:
          type: string
          enum:
            - open
            - click
        required: false
      - paramName: winnerDelay
        description: >
          Choose the duration of the test in hours. Maximum is 7 days, pass 24*7
          = 168 hours. The winning version will be sent at the end of the test.
          **Mandatory if _splitRule_ >= 1 and < 50**. If splitRule = 50,
          `winnerDelay` is ignored if passed
        paramKey: winnerDelay
        in: body
        schema:
          type: number
          minimum: 1
          maximum: 168
        required: false
      - paramName: ipWarmupEnable
        description: >
          **Available for dedicated ip clients**. Set this to true if you wish
          to warm up your ip.
        paramKey: ipWarmupEnable
        in: body
        schema:
          type: boolean
          default: false
        required: false
      - paramName: initialQuota
        description: >
          **Mandatory if ipWarmupEnable is set to true**. Set an initial quota
          greater than 1 for warming up your ip. We recommend you set a value of
          3000.
        paramKey: initialQuota
        in: body
        schema:
          type: number
        required: false
      - paramName: increaseRate
        description: >
          **Mandatory if ipWarmupEnable is set to true**. Set a percentage
          increase rate for warming up your ip. We recommend you set the
          increase rate to 30% per day. If you want to send the same number of
          emails every day, set the daily increase value to 0%.
        paramKey: increaseRate
        in: body
        schema:
          type: number
          minimum: 0
          maximum: 100
        required: false
      - paramName: unsubscriptionPageId
        description: >
          Enter an unsubscription page id. The page id is a 24 digit
          alphanumeric id that can be found in the URL when editing the page. If
          not entered, then the default unsubscription page will be used.
        paramKey: unsubscriptionPageId
        in: body
        schema:
          type: string
        required: false
      - paramName: updateFormId
        description: >
          **Mandatory if templateId is used containing the {{ update_profile }}
          tag**. Enter an update profile form id. The form id is a 24 digit
          alphanumeric id that can be found in the URL when editing the form. If
          not entered, then the default update profile form will be used.
        paramKey: updateFormId
        in: body
        schema:
          type: string
        required: false
    requestBodyType: json
  - moduleName: Email Campaigns / Get
    method: get
    path: /emailCampaigns/{campaignId}
    description: Get an email campaign report
    externalDocs: ""
    params:
      - paramName: campaignId
        description: Id of the campaign
        paramKey: campaignId
        in: path
        schema:
          type: number
        required: true
      - paramName: statistics
        description: Filter on the type of statistics required. Example **globalStats**
          value will only fetch globalStats info of the campaign in returned
          response.
        paramKey: statistics
        in: query
        schema:
          type: string
          enum:
            - globalStats
            - linksStats
            - statsByDomain
            - statsByDevice
            - statsByBrowser
        required: false
  - moduleName: Email Campaigns / Update
    method: put
    path: /emailCampaigns/{campaignId}
    description: Update an email campaign
    externalDocs: ""
    params:
      - paramName: campaignId
        description: Id of the campaign
        paramKey: campaignId
        in: path
        schema:
          type: number
        required: true
      - paramName: tag
        description: Tag of the campaign
        paramKey: tag
        in: body
        schema:
          type: string
        required: false
      - paramName: sender
        description: >
          Sender details including id or email and name (optional). Only one of
          either Sender's email or Sender's ID shall be passed in one request at
          a time. For example:

          **{"name":"xyz", "email":"example@abc.com"}**

          **{"name":"xyz", "id":123}**
        paramKey: sender
        in: body
        schema:
          type: any
        required: false
      - paramName: name
        description: Name of the campaign
        paramKey: name
        in: body
        schema:
          type: string
        required: false
      - paramName: htmlContent
        description: >
          Body of the message (HTML version). If the campaign is designed using
          Drag & Drop editor via HTML content, then the design page will not
          have Drag & Drop editor access for that campaign. **REQUIRED if
          htmlUrl is empty**
        paramKey: htmlContent
        in: body
        schema:
          type: string
        required: false
      - paramName: htmlUrl
        description: >
          Url which contents the body of the email message. **REQUIRED if
          htmlContent is empty**
        paramKey: htmlUrl
        in: body
        schema:
          type: string
        required: false
      - paramName: scheduledAt
        description: >
          UTC date-time on which the campaign has to run
          (YYYY-MM-DDTHH:mm:ss.SSSZ).

          **Prefer to pass your timezone in date-time format for accurate
          result.**

          If sendAtBestTime is set to true, your campaign will be sent according

          to the date passed (ignoring the time part).
        paramKey: scheduledAt
        in: body
        schema:
          type: string
        required: false
      - paramName: subject
        description: Subject of the campaign
        paramKey: subject
        in: body
        schema:
          type: string
        required: false
      - paramName: previewText
        description: Preview text or preheader of the email campaign
        paramKey: previewText
        in: body
        schema:
          type: string
        required: false
      - paramName: replyTo
        description: Email on which campaign recipients will be able to reply to
        paramKey: replyTo
        in: body
        schema:
          type: string
        required: false
      - paramName: toField
        description: >
          To personalize the **To** Field. If you want to include the first

          name and last name of your recipient, add **{FNAME} {LNAME}**. These
          contact

          attributes must already exist in your Brevo account. If input
          parameter

          **params** used please use **{{contact.FNAME}} {{contact.LNAME}}** for
          personalization
        paramKey: toField
        in: body
        schema:
          type: string
        required: false
      - paramName: recipients
        description: Segment ids and List ids to include/exclude from campaign
        paramKey: recipients
        in: body
        schema:
          type: any
        required: false
      - paramName: attachmentUrl
        description: >
          Absolute url of the attachment (no local file).

          Extension allowed:

          #### xlsx, xls, ods, docx, docm, doc, csv, pdf, txt, gif, jpg, jpeg,
          png, tif, tiff, rtf, bmp, cgm, css, shtml, html, htm, zip, xml, ppt,
          pptx, tar, ez, ics, mobi, msg, pub and eps'
        paramKey: attachmentUrl
        in: body
        schema:
          type: string
        required: false
      - paramName: inlineImageActivation
        description: >
          Status of inline image. inlineImageActivation = false means image
          canâ€™t be embedded, & inlineImageActivation = true means image can be
          embedded, in the email.

          You cannot send a campaign of more than **4MB** with images embedded
          in the email. Campaigns with the images embedded in the email _must be
          sent to less than 5000 contacts_.
        paramKey: inlineImageActivation
        in: body
        schema:
          type: boolean
          default: false
        required: false
      - paramName: mirrorActive
        description: Status of mirror links in campaign. mirrorActive = false means
          mirror links are deactivated, & mirrorActive = true means mirror links
          are activated, in the campaign
        paramKey: mirrorActive
        in: body
        schema:
          type: boolean
        required: false
      - paramName: recurring
        description: >
          **FOR TRIGGER ONLY !** Type of trigger campaign.recurring = false
          means contact can receive the same Trigger campaign only once, &
          recurring = true means contact can receive the same Trigger campaign
          several times
        paramKey: recurring
        in: body
        schema:
          type: boolean
          default: false
        required: false
      - paramName: footer
        description: Footer of the email campaign
        paramKey: footer
        in: body
        schema:
          type: string
        required: false
      - paramName: header
        description: Header of the email campaign
        paramKey: header
        in: body
        schema:
          type: string
        required: false
      - paramName: utmCampaign
        description: Customize the utm_campaign value. If this field is empty, the
          campaign name will be used. Only alphanumeric characters and spaces
          are allowed
        paramKey: utmCampaign
        in: body
        schema:
          type: string
        required: false
      - paramName: params
        description: >
          Pass the set of attributes to customize the type classic campaign. For
          example: **{"FNAME":"Joe", "LNAME":"Doe"}**. Only available if
          **type** is **classic**. It's considered only if campaign is in _New
          Template Language format_. The New Template Language is dependent on
          the values of **subject, htmlContent/htmlUrl, sender.name & toField**
        paramKey: params
        in: body
        schema:
          type: any
        required: false
      - paramName: sendAtBestTime
        description: |
          Set this to true if you want to send your campaign at best time.
          Note:- **if true, warmup ip will be disabled.**
        paramKey: sendAtBestTime
        in: body
        schema:
          type: boolean
        required: false
      - paramName: abTesting
        description: >
          Status of A/B Test. abTesting = false means it is disabled & abTesting
          = true means it is enabled. **subjectA, subjectB, splitRule,
          winnerCriteria & winnerDelay** will be considered when abTesting is
          set to true.

          subjectA & subjectB are mandatory together & subject if passed is
          ignored. **Can be set to true only if sendAtBestTime is false**.

          You will be able to set up two subject lines for your campaign and
          send them to a random sample of your total recipients. Half of the
          test group will receive version A, and the other half will receive
          version B
        paramKey: abTesting
        in: body
        schema:
          type: boolean
          default: false
        required: false
      - paramName: subjectA
        description: |
          Subject A of the campaign. **Mandatory if abTesting = true**.
          subjectA & subjectB should have unique value
        paramKey: subjectA
        in: body
        schema:
          type: string
        required: false
      - paramName: subjectB
        description: |
          Subject B of the campaign. **Mandatory if abTesting = true**.
          subjectA & subjectB should have unique value
        paramKey: subjectB
        in: body
        schema:
          type: string
        required: false
      - paramName: splitRule
        description: >
          Add the size of your test groups. **Mandatory if abTesting = true &
          'recipients' is passed**. We'll send version A and B to a random
          sample of recipients, and then the winning version to everyone else
        paramKey: splitRule
        in: body
        schema:
          type: number
          minimum: 1
          maximum: 50
        required: false
      - paramName: winnerCriteria
        description: >
          Choose the metrics that will determinate the winning version.
          **Mandatory if _splitRule_ >= 1 and < 50**. If splitRule = 50,
          `winnerCriteria` is ignored if passed
        paramKey: winnerCriteria
        in: body
        schema:
          type: string
          enum:
            - open
            - click
        required: false
      - paramName: winnerDelay
        description: >
          Choose the duration of the test in hours. Maximum is 7 days, pass 24*7
          = 168 hours. The winning version will be sent at the end of the test.
          **Mandatory if _splitRule_ >= 1 and < 50**. If splitRule = 50,
          `winnerDelay` is ignored if passed
        paramKey: winnerDelay
        in: body
        schema:
          type: number
          minimum: 1
          maximum: 168
        required: false
      - paramName: ipWarmupEnable
        description: >
          **Available for dedicated ip clients**. Set this to true if you wish
          to warm up your ip.
        paramKey: ipWarmupEnable
        in: body
        schema:
          type: boolean
          default: false
        required: false
      - paramName: initialQuota
        description: >
          Set an initial quota greater than 1 for warming up your ip. We
          recommend you set a value of 3000.
        paramKey: initialQuota
        in: body
        schema:
          type: number
        required: false
      - paramName: increaseRate
        description: >
          Set a percentage increase rate for warming up your ip. We recommend
          you set the increase rate to 30% per day. If you want to send the same
          number of emails every day, set the daily increase value to 0%.
        paramKey: increaseRate
        in: body
        schema:
          type: number
          minimum: 0
          maximum: 100
        required: false
      - paramName: unsubscriptionPageId
        description: >
          Enter an unsubscription page id. The page id is a 24 digit
          alphanumeric id that can be found in the URL when editing the page.
        paramKey: unsubscriptionPageId
        in: body
        schema:
          type: string
        required: false
      - paramName: updateFormId
        description: >
          **Mandatory if templateId is used containing the {{ update_profile }}
          tag**. Enter an update profile form id. The form id is a 24 digit
          alphanumeric id that can be found in the URL when editing the form.
        paramKey: updateFormId
        in: body
        schema:
          type: string
        required: false
    requestBodyType: json
  - moduleName: Email Campaigns / Delete
    method: delete
    path: /emailCampaigns/{campaignId}
    description: Delete an email campaign
    externalDocs: ""
    params:
      - paramName: campaignId
        description: id of the campaign
        paramKey: campaignId
        in: path
        schema:
          type: number
        required: true
  - moduleName: Email Campaigns / Send Now
    method: post
    path: /emailCampaigns/{campaignId}/sendNow
    description: Send an email campaign immediately, based on campaignId
    externalDocs: ""
    params:
      - paramName: campaignId
        description: Id of the campaign
        paramKey: campaignId
        in: path
        schema:
          type: number
        required: true
  - moduleName: Email Campaigns / Send Test
    method: post
    path: /emailCampaigns/{campaignId}/sendTest
    description: Send an email campaign to your test list
    externalDocs: ""
    params:
      - paramName: campaignId
        description: Id of the campaign
        paramKey: campaignId
        in: path
        schema:
          type: number
        required: true
      - paramName: emailTo
        description: >
          List of the email addresses of the recipients whom you wish to send
          the test mail.

          _If left empty, the test mail will be sent to your entire test list.
          You can not send more than 50 test emails per day_.
        paramKey: emailTo
        in: body
        schema:
          type: array
          items:
            type: any
        required: false
    requestBodyType: json
  - moduleName: Email Campaigns / Update Status
    method: put
    path: /emailCampaigns/{campaignId}/status
    description: Update an email campaign status
    externalDocs: ""
    params:
      - paramName: campaignId
        description: Id of the campaign
        paramKey: campaignId
        in: path
        schema:
          type: number
        required: true
      - paramName: status
        description: >
          Note:- **replicateTemplate** status will be available **only for
          template type campaigns.**
        paramKey: status
        in: body
        schema:
          type: string
          enum:
            - suspended
            - archive
            - darchive
            - sent
            - queued
            - replicate
            - replicateTemplate
            - draft
        required: false
        example: draft
    requestBodyType: json
  - moduleName: Email Campaigns / Send Report
    method: post
    path: /emailCampaigns/{campaignId}/sendReport
    description: A PDF will be sent to the specified email addresses
    externalDocs: ""
    params:
      - paramName: campaignId
        description: Id of the campaign
        paramKey: campaignId
        in: path
        schema:
          type: number
        required: true
      - paramName: language
        description: Language of email content for campaign report sending.
        paramKey: language
        in: body
        schema:
          type: string
          default: fr
          enum:
            - fr
            - es
            - pt
            - it
            - de
            - en
        required: false
      - paramName: email
        description: Custom attributes for the report email.
        paramKey: email
        in: body
        schema:
          type: any
        required: true
    requestBodyType: json
  - moduleName: Email Campaigns / AB Test Result
    method: get
    path: /emailCampaigns/{campaignId}/abTestCampaignResult
    description: Obtain winning version of an A/B test email campaign
    externalDocs: ""
    params:
      - paramName: campaignId
        description: Id of the A/B test campaign
        paramKey: campaignId
        in: path
        schema:
          type: number
        required: true
  - moduleName: Email Campaigns / Shared URL
    method: get
    path: /emailCampaigns/{campaignId}/sharedUrl
    description: Get a unique URL to share & import an email template from one Brevo
      account to another.
    externalDocs: ""
    params:
      - paramName: campaignId
        description: Id of the campaign or template
        paramKey: campaignId
        in: path
        schema:
          type: number
        required: true
  - moduleName: Email Campaigns / Export Recipients
    method: post
    path: /emailCampaigns/{campaignId}/exportRecipients
    description: Export the recipients of an email campaign
    externalDocs: ""
    params:
      - paramName: campaignId
        description: Id of the campaign
        paramKey: campaignId
        in: path
        schema:
          type: number
        required: true
      - paramName: notifyUrl
        description: Webhook called once the export process is finished. For reference,
          https://help.brevo.com/hc/en-us/articles/360007666479
        paramKey: notifyURL
        in: body
        schema:
          type: string
        required: false
      - paramName: recipientsType
        description: Type of recipients to export for a campaign
        paramKey: recipientsType
        in: body
        schema:
          type: string
          enum:
            - all
            - nonClickers
            - nonOpeners
            - clickers
            - openers
            - softBounces
            - hardBounces
            - unsubscribed
        required: true
    requestBodyType: json
  - moduleName: Email Campaigns / Upload Image
    method: post
    path: /emailCampaigns/images
    description: Upload an image to your account's image gallery
    externalDocs: ""
    params:
      - paramName: imageUrl
        description: >
          The absolute url of the image (**no local file**). Maximum allowed
          size for image is **2MB**.

          Allowed extensions for images are:

          #### jpeg, jpg, png, bmp, gif.
        paramKey: imageUrl
        in: body
        schema:
          type: string
        required: true
      - paramName: name
        description: Name of the image.
        paramKey: name
        in: body
        schema:
          type: string
        required: false
    requestBodyType: json
  - moduleName: Transactional Emails / Send
    method: post
    path: /smtp/email
    description: Send a transactional email
    externalDocs: ""
    params:
      - paramName: sender
        description: >
          **Mandatory if `templateId` is not passed**. Pass name (_optional_)
          and email or id of sender from which emails will be sent. **`name`
          will be ignored if passed along with sender `id`**. For example,

          **{"name":"Mary from MyShop", "email":"no-reply@myshop.com"}**

          **{"id":2}**
        paramKey: sender
        in: body
        schema:
          type: any
        required: false
      - paramName: to
        description: >
          **Mandatory if messageVersions are not passed, ignored if
          messageVersions are passed**

          List of email addresses and names (_optional_) of the recipients. For
          example,

          **[{"name":"Jimmy", "email":"jimmy98@example.com"}, {"name":"Joe",
          "email":"joe@example.com"}]**
        paramKey: to
        in: body
        schema:
          type: array
          items:
            type: any
        required: false
      - paramName: bcc
        description: >
          List of email addresses and names (_optional_) of the recipients in bcc
        paramKey: bcc
        in: body
        schema:
          type: array
          items:
            type: any
        required: false
      - paramName: cc
        description: |
          List of email addresses and names (_optional_) of the recipients in cc
        paramKey: cc
        in: body
        schema:
          type: array
          items:
            type: any
        required: false
      - paramName: htmlContent
        description: >
          HTML body of the message. **Mandatory if 'templateId' is not passed,
          ignored if 'templateId' is passed**
        paramKey: htmlContent
        in: body
        schema:
          type: string
        required: false
      - paramName: textContent
        description: |
          Plain Text body of the message. **Ignored if 'templateId' is passed**
        paramKey: textContent
        in: body
        schema:
          type: string
        required: false
      - paramName: subject
        description: |
          Subject of the message. **Mandatory if 'templateId' is not passed**
        paramKey: subject
        in: body
        schema:
          type: string
        required: false
      - paramName: replyTo
        description: >
          Email (**required**), along with name (_optional_), on which
          transactional mail recipients will be able to reply back. For example,

          **{"email":"ann6533@example.com", "name":"Ann"}**
        paramKey: replyTo
        in: body
        schema:
          type: any
        required: false
      - paramName: attachment
        description: >
          Pass the _absolute URL_ (**no local file**) or the _base64 content_ of
          the attachment along with the attachment name. **Mandatory if
          attachment content is passed**. For example,

          **[{"url":"https://attachment.domain.com/myAttachmentFromUrl.jpg",
          "name":"myAttachmentFromUrl.jpg"}, {"content":"base64 example
          content", "name":"myAttachmentFromBase64.jpg"}]**.

          Allowed extensions for attachment file:

          #### xlsx, xls, ods, docx, docm, doc, csv, pdf, txt, gif, jpg, jpeg,
          png, tif, tiff, rtf, bmp, cgm, css, shtml, html, htm, zip, xml, ppt,
          pptx, tar, ez, ics, mobi, msg, pub, eps, odt, mp3, m4a, m4v, wma, ogg,
          flac, wav, aif, aifc, aiff, mp4, mov, avi, mkv, mpeg, mpg, wmv, pkpass
          and xlsm.

          If `templateId` is passed and is in New Template Language format then
          both attachment url and content are accepted. If template is in Old
          template Language format, then `attachment` is ignored
        paramKey: attachment
        in: body
        schema:
          type: array
          items:
            type: any
        required: false
      - paramName: headers
        description: >
          Pass the set of custom headers (_not the standard headers_) that shall
          be sent along the mail headers in the original email. **'sender.ip'**
          header can be set (**only for dedicated ip users**) to mention the IP
          to be used for sending transactional emails. Headers are allowed in
          `This-Case-Only` (i.e. words separated by hyphen with first letter of
          each word in capital letter), they will be converted to such case
          styling if not in this format in the request payload. For example,

          **{"sender.ip":"1.2.3.4", "X-Mailin-custom":"some_custom_header",
          "idempotencyKey":"abc-123"}**.
        paramKey: headers
        in: body
        schema:
          type: any
        required: false
      - paramName: templateId
        description: Id of the template.
        paramKey: templateId
        in: body
        schema:
          type: number
        required: false
      - paramName: params
        description: >
          Pass the set of attributes to customize the template. For example,
          **{"FNAME":"Joe", "LNAME":"Doe"}**. It's **considered only if template
          is in New Template Language format**.
        paramKey: params
        in: body
        schema:
          type: any
        required: false
      - paramName: messageVersions
        description: >
          You can customize and send out multiple versions of a mail.
          **templateId** can be customized only if global parameter contains
          templateId. **htmlContent and textContent** can be customized only if
          any of the two, htmlContent or textContent, is present in global
          parameters. Some global parameters such as **to(mandatory), bcc, cc,
          replyTo, subject** can also be customized specific to each version.

          Total number of recipients in one API request must not exceed 2000.
          However, you can still pass upto 99 recipients maximum in one message
          version.

          The size of individual params in all the messageVersions shall not
          exceed **100 KB** limit and that of cumulative params shall not exceed
          **1000 KB**.

          You can follow this **step-by-step guide** on how to use
          **messageVersions** to batch send emails -
          **https://developers.brevo.com/docs/batch-send-transactional-emails**
        paramKey: messageVersions
        in: body
        schema:
          type: array
          items:
            type: any
        required: false
      - paramName: tags
        description: Tag your emails to find them more easily
        paramKey: tags
        in: body
        schema:
          type: array
          items:
            type: any
        required: false
      - paramName: scheduledAt
        description: UTC date-time on which the email has to schedule
          (YYYY-MM-DDTHH:mm:ss.SSSZ). Prefer to pass your timezone in date-time
          format for scheduling. There can be an expected delay of +5 minutes in
          scheduled email delivery.
        paramKey: scheduledAt
        in: body
        schema:
          type: string
        required: false
      - paramName: batchId
        description: Valid UUIDv4 batch id to identify the scheduled batches
          transactional email. If not passed we will create a valid UUIDv4 batch
          id at our end.
        paramKey: batchId
        in: body
        schema:
          type: string
        required: false
    requestBodyType: json
  - moduleName: Transactional Emails / List
    method: get
    path: /smtp/emails
    description: This endpoint will show the list of emails for past 30 days by
      default. To retrieve emails before that time, please pass startDate and
      endDate in query filters.
    externalDocs: ""
    params:
      - paramName: email
        description: >
          **Mandatory if templateId and messageId are not passed in query
          filters.** Email address to which transactional email has been sent.
        paramKey: email
        in: query
        schema:
          type: string
        required: false
      - paramName: templateId
        description: >
          **Mandatory if email and messageId are not passed in query filters.**
          Id of the template that was used to compose transactional email.
        paramKey: templateId
        in: query
        schema:
          type: number
        required: false
      - paramName: messageId
        description: >
          **Mandatory if templateId and email are not passed in query filters.**
          Message ID of the transactional email sent.
        paramKey: messageId
        in: query
        schema:
          type: string
        required: false
      - paramName: startDate
        description: >
          **Mandatory if endDate is used.** Starting date (YYYY-MM-DD) from
          which you want to fetch the list. **Maximum time period that can be
          selected is one month**.
        paramKey: startDate
        in: query
        schema:
          type: string
        required: false
      - paramName: endDate
        description: >
          **Mandatory if startDate is used.** Ending date (YYYY-MM-DD) till
          which you want to fetch the list. **Maximum time period that can be
          selected is one month.**
        paramKey: endDate
        in: query
        schema:
          type: string
        required: false
      - paramName: sort
        description: Sort the results in the ascending/descending order of record
          creation. Default order is **descending** if `sort` is not passed
        paramKey: sort
        in: query
        schema:
          type: string
          default: desc
          enum:
            - asc
            - desc
        required: false
      - paramName: limit
        description: Number of documents returned per page
        paramKey: limit
        in: query
        schema:
          type: number
          minimum: 0
          maximum: 1000
          default: 500
        required: false
      - paramName: offset
        description: Index of the first document in the page
        paramKey: offset
        in: query
        schema:
          type: number
          default: 0
        required: false
  - moduleName: Transactional Emails / Get
    method: get
    path: /smtp/emails/{uuid}
    description: Get the personalized content of a sent transactional email
    externalDocs: ""
    params:
      - paramName: uuid
        description: Unique id of the transactional email that has been sent to a
          particular contact
        paramKey: uuid
        in: path
        schema:
          type: string
        required: true
  - moduleName: Transactional Emails / Delete
    method: delete
    path: /smtp/log/{identifier}
    description: Delete an SMTP transactional log
    externalDocs: ""
    params:
      - paramName: identifier
        description: MessageId or Email of the transactional log(s) to delete
        paramKey: identifier
        in: path
        schema:
          type: string
        required: true
  - moduleName: Transactional Emails / Templates / List
    method: get
    path: /smtp/templates
    description: Get the list of email templates
    externalDocs: ""
    params:
      - paramName: templateStatus
        description: Filter on the status of the template. Active = true, inactive = false
        paramKey: templateStatus
        in: query
        schema:
          type: boolean
        required: false
      - paramName: limit
        description: Number of documents returned per page
        paramKey: limit
        in: query
        schema:
          type: number
          minimum: 0
          maximum: 1000
          default: 50
        required: false
      - paramName: offset
        description: Index of the first document in the page
        paramKey: offset
        in: query
        schema:
          type: number
          default: 0
        required: false
      - paramName: sort
        description: Sort the results in the ascending/descending order of record
          creation. Default order is **descending** if `sort` is not passed
        paramKey: sort
        in: query
        schema:
          type: string
          default: desc
          enum:
            - asc
            - desc
        required: false
  - moduleName: Transactional Emails / Templates / Create
    method: post
    path: /smtp/templates
    description: Create an email template
    externalDocs: ""
    params:
      - paramName: tag
        description: Tag of the template
        paramKey: tag
        in: body
        schema:
          type: string
        required: false
      - paramName: sender
        description: >
          Sender details including id or email and name (_optional_). Only one
          of either Sender's email or Sender's ID shall be passed in one request
          at a time. For example:

          **{"name":"xyz", "email":"example@abc.com"}**

          **{"name":"xyz", "id":123}**
        paramKey: sender
        in: body
        schema:
          type: any
        required: true
      - paramName: templateName
        description: Name of the template
        paramKey: templateName
        in: body
        schema:
          type: string
        required: true
      - paramName: htmlContent
        description: >
          Body of the message (HTML version). The field must have more than 10
          characters. **REQUIRED if htmlUrl is empty**
        paramKey: htmlContent
        in: body
        schema:
          type: string
        required: false
      - paramName: htmlUrl
        description: Url which contents the body of the email message. REQUIRED if
          htmlContent is empty
        paramKey: htmlUrl
        in: body
        schema:
          type: string
        required: false
      - paramName: subject
        description: Subject of the template
        paramKey: subject
        in: body
        schema:
          type: string
        required: true
      - paramName: replyTo
        description: Email on which campaign recipients will be able to reply to
        paramKey: replyTo
        in: body
        schema:
          type: string
        required: false
      - paramName: toField
        description: >
          To personalize the **To** Field. If you want to include the first name
          and last name of your recipient, add **{FNAME} {LNAME}**. These
          contact attributes must already exist in your Brevo account. If input
          parameter **params** used please use **{{contact.FNAME}}
          {{contact.LNAME}}** for personalization
        paramKey: toField
        in: body
        schema:
          type: string
        required: false
      - paramName: attachmentUrl
        description: >
          Absolute url of the attachment (**no local file**). Extension allowed:

          #### xlsx, xls, ods, docx, docm, doc, csv, pdf, txt, gif, jpg, jpeg,
          png, tif, tiff, rtf, bmp, cgm, css, shtml, html, htm, zip, xml, ppt,
          pptx, tar, ez, ics, mobi, msg, pub and eps'
        paramKey: attachmentUrl
        in: body
        schema:
          type: string
        required: false
      - paramName: isActive
        description: Status of template. isActive = true means template is active and
          isActive = false means template is inactive
        paramKey: isActive
        in: body
        schema:
          type: boolean
        required: false
    requestBodyType: json
  - moduleName: Transactional Emails / Templates / Get
    method: get
    path: /smtp/templates/{templateId}
    description: Returns the template information
    externalDocs: ""
    params:
      - paramName: templateId
        description: id of the template
        paramKey: templateId
        in: path
        schema:
          type: number
        required: true
  - moduleName: Transactional Emails / Templates / Update
    method: put
    path: /smtp/templates/{templateId}
    description: Update an email template
    externalDocs: ""
    params:
      - paramName: templateId
        description: id of the template
        paramKey: templateId
        in: path
        schema:
          type: number
        required: true
      - paramName: tag
        description: Tag of the template
        paramKey: tag
        in: body
        schema:
          type: string
        required: false
      - paramName: sender
        description: >
          Sender details including id or email and name (_optional_). Only one
          of either Sender's email or Sender's ID shall be passed in one request
          at a time. For example:

          **{"name":"xyz", "email":"example@abc.com"}**

          **{"name":"xyz", "id":123}**
        paramKey: sender
        in: body
        schema:
          type: any
        required: false
      - paramName: templateName
        description: Name of the template
        paramKey: templateName
        in: body
        schema:
          type: string
        required: false
      - paramName: htmlContent
        description: >
          **Required if htmlUrl is empty**. If the template is designed using
          Drag & Drop editor via HTML content, then the design page will not
          have Drag & Drop editor access for that template. Body of the message
          (HTML must have more than 10 characters)
        paramKey: htmlContent
        in: body
        schema:
          type: string
        required: false
      - paramName: htmlUrl
        description: >
          **Required if htmlContent is empty**. URL to the body of the email
          (HTML)
        paramKey: htmlUrl
        in: body
        schema:
          type: string
        required: false
      - paramName: subject
        description: Subject of the email
        paramKey: subject
        in: body
        schema:
          type: string
        required: false
      - paramName: replyTo
        description: Email on which campaign recipients will be able to reply to
        paramKey: replyTo
        in: body
        schema:
          type: string
        required: false
      - paramName: toField
        description: >
          To personalize the **To** Field. If you want to include the first name
          and last name of your recipient, add **{FNAME} {LNAME}**. These
          contact attributes must already exist in your Brevo account. If input
          parameter **params** used please use **{{contact.FNAME}}
          {{contact.LNAME}}** for personalization
        paramKey: toField
        in: body
        schema:
          type: string
        required: false
      - paramName: attachmentUrl
        description: >
          Absolute url of the attachment (**no local file**). Extensions
          allowed:

          #### xlsx, xls, ods, docx, docm, doc, csv, pdf, txt, gif, jpg, jpeg,
          png, tif, tiff, rtf, bmp, cgm, css, shtml, html, htm, zip, xml, ppt,
          pptx, tar, ez, ics, mobi, msg, pub and eps
        paramKey: attachmentUrl
        in: body
        schema:
          type: string
        required: false
      - paramName: isActive
        description: Status of the template. isActive = false means template is
          inactive, isActive = true means template is active
        paramKey: isActive
        in: body
        schema:
          type: boolean
        required: false
    requestBodyType: json
  - moduleName: Transactional Emails / Templates / Delete
    method: delete
    path: /smtp/templates/{templateId}
    description: Delete an inactive email template
    externalDocs: ""
    params:
      - paramName: templateId
        description: id of the template
        paramKey: templateId
        in: path
        schema:
          type: number
        required: true
  - moduleName: Transactional Emails / Templates / Send Test
    method: post
    path: /smtp/templates/{templateId}/sendTest
    description: Send a template to your test list
    externalDocs: ""
    params:
      - paramName: templateId
        description: Id of the template
        paramKey: templateId
        in: path
        schema:
          type: number
        required: true
      - paramName: emailTo
        description: >
          List of the email addresses of the recipients whom you wish to send
          the test mail.

          _If left empty, the test mail will be sent to your entire test list.
          You can not send more than 50 test emails per day_.
        paramKey: emailTo
        in: body
        schema:
          type: array
          items:
            type: any
        required: false
    requestBodyType: json
  - moduleName: Transactional Emails / Reports / Aggregated
    method: get
    path: /smtp/statistics/aggregatedReport
    description: This endpoint will show the aggregated stats for past 90 days by
      default if `startDate` and `endDate` OR `days` is not passed. The date
      range can not exceed 90 days
    externalDocs: ""
    params:
      - paramName: startDate
        description: >
          **Mandatory if endDate is used.** Starting date of the report
          (YYYY-MM-DD). Must be lower than equal to endDate
        paramKey: startDate
        in: query
        schema:
          type: string
        required: false
      - paramName: endDate
        description: >
          **Mandatory if startDate is used.** Ending date of the report
          (YYYY-MM-DD). Must be greater than equal to startDate
        paramKey: endDate
        in: query
        schema:
          type: string
        required: false
      - paramName: days
        description: >
          Number of days in the past including today (positive integer). _Not
          compatible with 'startDate' and 'endDate'_
        paramKey: days
        in: query
        schema:
          type: number
        required: false
      - paramName: tag
        description: Tag of the emails
        paramKey: tag
        in: query
        schema:
          type: string
        required: false
  - moduleName: Transactional Emails / Reports / List
    method: get
    path: /smtp/statistics/reports
    description: Get your transactional email activity aggregated per day
    externalDocs: ""
    params:
      - paramName: limit
        description: Number of documents returned per page
        paramKey: limit
        in: query
        schema:
          type: number
          minimum: 0
          maximum: 30
          default: 10
        required: false
      - paramName: offset
        description: Index of the first document on the page
        paramKey: offset
        in: query
        schema:
          type: number
          default: 0
        required: false
      - paramName: startDate
        description: >
          **Mandatory if endDate is used.** Starting date of the report
          (YYYY-MM-DD)
        paramKey: startDate
        in: query
        schema:
          type: string
        required: false
      - paramName: endDate
        description: >
          **Mandatory if startDate is used.** Ending date of the report
          (YYYY-MM-DD)
        paramKey: endDate
        in: query
        schema:
          type: string
        required: false
      - paramName: days
        description: >
          Number of days in the past including today (positive integer). _Not
          compatible with 'startDate' and 'endDate'_
        paramKey: days
        in: query
        schema:
          type: number
        required: false
      - paramName: tag
        description: Tag of the emails
        paramKey: tag
        in: query
        schema:
          type: string
        required: false
      - paramName: sort
        description: Sort the results in the ascending/descending order of record
          creation. Default order is **descending** if `sort` is not passed
        paramKey: sort
        in: query
        schema:
          type: string
          default: desc
          enum:
            - asc
            - desc
        required: false
  - moduleName: Transactional Emails / Events / List
    method: get
    path: /smtp/statistics/events
    description: This endpoint will show the aggregated stats for past 30 days by
      default if `startDate` and `endDate` OR `days` is not passed. The date
      range can not exceed 90 days
    externalDocs: ""
    params:
      - paramName: limit
        description: Number limitation for the result returned
        paramKey: limit
        in: query
        schema:
          type: number
          minimum: 0
          maximum: 5000
          default: 2500
        required: false
      - paramName: offset
        description: Beginning point in the list to retrieve from.
        paramKey: offset
        in: query
        schema:
          type: number
          default: 0
        required: false
      - paramName: startDate
        description: >
          **Mandatory if endDate is used.** Starting date of the report
          (YYYY-MM-DD). Must be lower than equal to endDate
        paramKey: startDate
        in: query
        schema:
          type: string
        required: false
      - paramName: endDate
        description: >
          **Mandatory if startDate is used.** Ending date of the report
          (YYYY-MM-DD). Must be greater than equal to startDate
        paramKey: endDate
        in: query
        schema:
          type: string
        required: false
      - paramName: days
        description: >
          Number of days in the past including today (positive integer). _Not
          compatible with 'startDate' and 'endDate'_
        paramKey: days
        in: query
        schema:
          type: number
        required: false
      - paramName: email
        description: Filter the report for a specific email addresses
        paramKey: email
        in: query
        schema:
          type: string
        required: false
      - paramName: event
        description: Filter the report for a specific event type
        paramKey: event
        in: query
        schema:
          type: string
          enum:
            - bounces
            - hardBounces
            - softBounces
            - delivered
            - spam
            - requests
            - opened
            - clicks
            - invalid
            - deferred
            - blocked
            - unsubscribed
            - error
            - loadedByProxy
        required: false
      - paramName: tags
        description: Filter the report for tags (serialized and urlencoded array)
        paramKey: tags
        in: query
        schema:
          type: string
        required: false
      - paramName: messageId
        description: Filter on a specific message id
        paramKey: messageId
        in: query
        schema:
          type: string
        required: false
      - paramName: templateId
        description: Filter on a specific template id
        paramKey: templateId
        in: query
        schema:
          type: number
        required: false
      - paramName: sort
        description: Sort the results in the ascending/descending order of record
          creation. Default order is **descending** if `sort` is not passed
        paramKey: sort
        in: query
        schema:
          type: string
          default: desc
          enum:
            - asc
            - desc
        required: false
  - moduleName: Transactional Emails / Blocked Contacts / Delete
    method: delete
    path: /smtp/blockedContacts/{email}
    description: Unblock or resubscribe a transactional contact
    externalDocs: ""
    params:
      - paramName: email
        description: contact email (urlencoded) to unblock.
        paramKey: email
        in: path
        schema:
          type: string
        required: true
  - moduleName: Transactional Emails / Blocked Contacts / List
    method: get
    path: /smtp/blockedContacts
    description: Get the list of blocked or unsubscribed transactional contacts
    externalDocs: ""
    params:
      - paramName: startDate
        description: >
          **Mandatory if endDate is used.** Starting date (YYYY-MM-DD) from
          which you want to fetch the blocked or unsubscribed contacts
        paramKey: startDate
        in: query
        schema:
          type: string
        required: false
      - paramName: endDate
        description: >
          **Mandatory if startDate is used.** Ending date (YYYY-MM-DD) till
          which you want to fetch the blocked or unsubscribed contacts
        paramKey: endDate
        in: query
        schema:
          type: string
        required: false
      - paramName: limit
        description: Number of documents returned per page
        paramKey: limit
        in: query
        schema:
          type: number
          minimum: 0
          maximum: 100
          default: 50
        required: false
      - paramName: offset
        description: Index of the first document on the page
        paramKey: offset
        in: query
        schema:
          type: number
          default: 0
        required: false
      - paramName: senders
        description: Comma separated list of emails of the senders from which contacts
          are blocked or unsubscribed
        paramKey: senders
        in: query
        schema:
          type: array
          items:
            type: any
        required: false
        style: form
        explode: false
      - paramName: sort
        description: Sort the results in the ascending/descending order of record
          creation. Default order is **descending** if `sort` is not passed
        paramKey: sort
        in: query
        schema:
          type: string
          default: desc
          enum:
            - asc
            - desc
        required: false
  - moduleName: Transactional Emails / Blocked Domains / List
    method: get
    path: /smtp/blockedDomains
    description: Get the list of blocked domains
    externalDocs: ""
    params: []
  - moduleName: Transactional Emails / Blocked Domains / Create
    method: post
    path: /smtp/blockedDomains
    description: Blocks a new domain in order to avoid messages being sent to the same
    externalDocs: ""
    params:
      - paramName: domain
        description: name of the domain to be blocked
        paramKey: domain
        in: body
        schema:
          type: string
        required: true
    requestBodyType: json
  - moduleName: Transactional Emails / Blocked Domains / Delete
    method: delete
    path: /smtp/blockedDomains/{domain}
    description: Unblocks an existing domain from the list of blocked domains
    externalDocs: ""
    params:
      - paramName: domain
        description: The name of the domain to be deleted
        paramKey: domain
        in: path
        schema:
          type: string
        required: true
  - moduleName: Transactional Emails / Hard Bounces / Delete
    method: post
    path: /smtp/deleteHardbounces
    description: Delete hardbounces. To use carefully (e.g. in case of temporary ISP
      failures)
    externalDocs: ""
    params:
      - paramName: startDate
        description: Starting date (YYYY-MM-DD) of the time period for deletion. The
          hardbounces occurred after this date will be deleted. Must be less
          than or equal to the endDate
        paramKey: startDate
        in: body
        schema:
          type: string
        required: false
      - paramName: endDate
        description: Ending date (YYYY-MM-DD) of the time period for deletion. The
          hardbounces until this date will be deleted. Must be greater than or
          equal to the startDate
        paramKey: endDate
        in: body
        schema:
          type: string
        required: false
      - paramName: contactEmail
        description: Target a specific email address
        paramKey: contactEmail
        in: body
        schema:
          type: string
        required: false
    requestBodyType: json
  - moduleName: Transactional Emails / Scheduled Email / Get
    method: get
    path: /smtp/emailStatus/{identifier}
    description: Fetch scheduled batch of emails by batchId or single scheduled
      email by messageId (Can retrieve data upto 30 days old)
    externalDocs: ""
    params:
      - paramName: identifier
        description: The `batchId` of scheduled emails batch (Should be a valid UUIDv4)
          or the `messageId` of scheduled email.
        paramKey: identifier
        in: path
        schema:
          type: string
        required: true
      - paramName: startDate
        description: Mandatory if `endDate` is used. Starting date (YYYY-MM-DD) from
          which you want to fetch the list. Can be maximum 30 days older tha
          current date.
        paramKey: startDate
        in: query
        schema:
          type: string
        required: false
      - paramName: endDate
        description: Mandatory if `startDate` is used. Ending date (YYYY-MM-DD) till
          which you want to fetch the list. Maximum time period that can be
          selected is one month.
        paramKey: endDate
        in: query
        schema:
          type: string
        required: false
      - paramName: sort
        description: Sort the results in the ascending/descending order of record
          creation. Default order is **descending** if `sort` is not passed. Not
          valid when identifier is `messageId`.
        paramKey: sort
        in: query
        schema:
          type: string
          default: desc
          enum:
            - asc
            - desc
        required: false
      - paramName: status
        description: Filter the records by `status` of the scheduled email batch or
          message. Not valid when identifier is `messageId`.
        paramKey: status
        in: query
        schema:
          type: string
          enum:
            - processed
            - inProgress
            - queued
        required: false
      - paramName: limit
        description: Number of documents returned per page. Not valid when identifier is
          `messageId`.
        paramKey: limit
        in: query
        schema:
          type: number
          minimum: 0
          maximum: 500
          default: 100
        required: false
      - paramName: offset
        description: Index of the first document on the page.  Not valid when identifier
          is `messageId`.
        paramKey: offset
        in: query
        schema:
          type: number
          default: 0
        required: false
  - moduleName: Transactional Emails / Scheduled Email / Delete
    method: delete
    path: /smtp/email/{identifier}
    description: Delete scheduled batch of emails by batchId or single scheduled
      email by messageId
    externalDocs: ""
    params:
      - paramName: identifier
        description: The `batchId` of scheduled emails batch (Should be a valid UUIDv4)
          or the `messageId` of scheduled email.
        paramKey: identifier
        in: path
        schema:
          type: string
        required: true
  - moduleName: Contacts / List
    method: get
    path: /contacts
    description: Get all the contacts
    externalDocs: ""
    params:
      - paramName: limit
        description: Number of documents per page
        paramKey: limit
        in: query
        schema:
          type: number
          minimum: 0
          maximum: 1000
          default: 50
        required: false
      - paramName: offset
        description: Index of the first document of the page
        paramKey: offset
        in: query
        schema:
          type: number
          default: 0
        required: false
      - paramName: modifiedSince
        description: >
          Filter (urlencoded) the contacts modified after a given UTC date-time
          (YYYY-MM-DDTHH:mm:ss.SSSZ). **Prefer to pass your timezone in
          date-time format for accurate result.**
        paramKey: modifiedSince
        in: query
        schema:
          type: string
        required: false
      - paramName: createdSince
        description: >
          Filter (urlencoded) the contacts created after a given UTC date-time
          (YYYY-MM-DDTHH:mm:ss.SSSZ). **Prefer to pass your timezone in
          date-time format for accurate result.**
        paramKey: createdSince
        in: query
        schema:
          type: string
        required: false
      - paramName: sort
        description: Sort the results in the ascending/descending order of record
          creation. Default order is **descending** if `sort` is not passed
        paramKey: sort
        in: query
        schema:
          type: string
          default: desc
          enum:
            - asc
            - desc
        required: false
      - paramName: segmentId
        description: Id of the segment. **Either listIds or segmentId can be passed.**
        paramKey: segmentId
        in: query
        schema:
          type: number
        required: false
      - paramName: listIds
        description: Ids of the list. **Either listIds or segmentId can be passed.**
        paramKey: listIds
        in: query
        schema:
          type: array
          items:
            type: any
        required: false
      - paramName: filter
        description: >
          Filter the contacts on the basis of attributes. **Allowed operator:
          equals. (e.g. filter=equals(FIRSTNAME,"Antoine"), filter=equals(B1,
          true), filter=equals(DOB, "1989-11-23"))**
        paramKey: filter
        in: query
        schema:
          type: string
        required: false
  - moduleName: Contacts / Create
    method: post
    path: /contacts
    description: Create a contact
    externalDocs: ""
    params:
      - paramName: email
        description: >
          Email address of the user. **Mandatory if "SMS" field is not passed in
          "attributes" parameter**. Mobile Number in **SMS** field should be
          passed with proper country code. For example:

          **{"SMS":"+91xxxxxxxxxx"}** or **{"SMS":"0091xxxxxxxxxx"}**
        paramKey: email
        in: body
        schema:
          type: string
        required: false
      - paramName: extId
        description: Pass your own Id to create a contact.
        paramKey: ext_id
        in: body
        schema:
          type: string
        required: false
      - paramName: attributes
        description: >
          Pass the set of attributes and their values. The attribute's parameter
          should be passed in capital letter while creating a contact. Values
          that don't match the attribute type (e.g. text or string in a date
          attribute) will be ignored. **These attributes must be present in your
          Brevo account.**. For eg:

          **{"FNAME":"Elly", "LNAME":"Roger", "COUNTRIES":["India","China"]}**
        paramKey: attributes
        in: body
        schema:
          type: any
        required: false
      - paramName: emailBlacklisted
        description: Set this field to blacklist the contact for emails
          (emailBlacklisted = true)
        paramKey: emailBlacklisted
        in: body
        schema:
          type: boolean
        required: false
      - paramName: smsBlacklisted
        description: Set this field to blacklist the contact for SMS (smsBlacklisted = true)
        paramKey: smsBlacklisted
        in: body
        schema:
          type: boolean
        required: false
      - paramName: listIds
        description: Ids of the lists to add the contact to
        paramKey: listIds
        in: body
        schema:
          type: array
          items:
            type: any
        required: false
      - paramName: updateEnabled
        description: Facilitate to update the existing contact in the same request
          (updateEnabled = true)
        paramKey: updateEnabled
        in: body
        schema:
          type: boolean
          default: false
        required: false
      - paramName: smtpBlacklistSender
        description: transactional email forbidden sender for contact. Use only for
          email Contact ( only available if updateEnabled = true )
        paramKey: smtpBlacklistSender
        in: body
        schema:
          type: array
          items:
            type: any
        required: false
    requestBodyType: json
  - moduleName: Contacts / Create Double Opt-In
    method: post
    path: /contacts/doubleOptinConfirmation
    description: Create Contact via DOI (Double-Opt-In) Flow
    externalDocs: ""
    params:
      - paramName: email
        description: Email address where the confirmation email will be sent. This email
          address will be the identifier for all other contact attributes.
        paramKey: email
        in: body
        schema:
          type: string
        required: true
      - paramName: attributes
        description: >
          Pass the set of attributes and their values. **These attributes must
          be present in your Brevo account**. For eg. **{'FNAME':'Elly',
          'LNAME':'Roger', 'COUNTRIES':['India','China']}**
        paramKey: attributes
        in: body
        schema:
          type: any
        required: false
      - paramName: includeListIds
        description: Lists under user account where contact should be added
        paramKey: includeListIds
        in: body
        schema:
          type: array
          items:
            type: any
        required: true
      - paramName: excludeListIds
        description: Lists under user account where contact should not be added
        paramKey: excludeListIds
        in: body
        schema:
          type: array
          items:
            type: any
        required: false
      - paramName: templateId
        description: Id of the Double opt-in (DOI) template
        paramKey: templateId
        in: body
        schema:
          type: number
        required: true
      - paramName: redirectionUrl
        description: >
          URL of the web page that user will be redirected to after clicking on
          the double opt in URL. When editing your DOI template you can
          reference this URL by using the tag **{{ params.DOIurl }}**.
        paramKey: redirectionUrl
        in: body
        schema:
          type: string
        required: true
    requestBodyType: json
  - moduleName: Contacts / Get
    method: get
    path: /contacts/{identifier}
    description: Along with the contact details, this endpoint will show the
      statistics of contact for the recent 90 days by default. To fetch the
      earlier statistics, please use Get contact campaign stats
      ``https://developers.brevo.com/reference/contacts-7#getcontactstats``
      endpoint with the appropriate date ranges.
    externalDocs: ""
    params:
      - paramName: identifier
        description: Email (urlencoded) OR ID of the contact OR its SMS attribute value
          OR EXT_ID attribute (urlencoded)
        paramKey: identifier
        in: path
        schema:
          type: any
        required: true
      - paramName: identifierType
        description: email_id for Email, phone_id for SMS attribute, contact_id for ID
          of the contact, ext_id for EXT_ID attribute
        paramKey: identifierType
        in: query
        schema:
          type: string
          enum:
            - email_id
            - phone_id
            - contact_id
            - ext_id
        required: false
      - paramName: startDate
        description: >
          **Mandatory if endDate is used.** Starting date (YYYY-MM-DD) of the
          statistic events specific to campaigns. Must be lower than equal to
          endDate
        paramKey: startDate
        in: query
        schema:
          type: string
        required: false
      - paramName: endDate
        description: >
          **Mandatory if startDate is used.** Ending date (YYYY-MM-DD) of the
          statistic events specific to campaigns. Must be greater than equal to
          startDate.
        paramKey: endDate
        in: query
        schema:
          type: string
        required: false
  - moduleName: Contacts / Delete
    method: delete
    path: /contacts/{identifier}
    description: Delete a contact
    externalDocs: ""
    params:
      - paramName: identifier
        description: Email (urlencoded) OR ID of the contact OR EXT_ID attribute
          (urlencoded)
        paramKey: identifier
        in: path
        schema:
          type: any
        required: true
      - paramName: identifierType
        description: email_id for Email, contact_id for ID of the contact, ext_id for
          EXT_ID attribute
        paramKey: identifierType
        in: query
        schema:
          type: string
          enum:
            - email_id
            - contact_id
            - ext_id
        required: false
  - moduleName: Contacts / Update
    method: put
    path: /contacts/{identifier}
    description: Update a contact
    externalDocs: ""
    params:
      - paramName: identifier
        description: Email (urlencoded) OR ID of the contact
        paramKey: identifier
        in: path
        schema:
          type: any
        required: true
      - paramName: attributes
        description: >
          Pass the set of attributes to be updated. **These attributes must be
          present in your account**. To update existing email address of a
          contact with the new one please pass EMAIL in attributes. For example,
          **{ "EMAIL":"newemail@domain.com", "FNAME":"Ellie", "LNAME":"Roger",
          "COUNTRIES":["India","China"]}**.

          The attribute's parameter should be passed in capital letter while
          updating a contact. Values that don't match the attribute type (e.g.
          text or string in a date attribute) will be ignored. Keep in mind
          transactional attributes can be updated the same way as normal
          attributes. Mobile Number in **SMS** field should be passed with
          proper country code. For example: **{"SMS":"+91xxxxxxxxxx"} or
          {"SMS":"0091xxxxxxxxxx"}**
        paramKey: attributes
        in: body
        schema:
          type: any
        required: false
      - paramName: extId
        description: Pass your own Id to update ext_id of a contact.
        paramKey: ext_id
        in: body
        schema:
          type: string
        required: false
      - paramName: emailBlacklisted
        description: Set/unset this field to blacklist/allow the contact for emails
          (emailBlacklisted = true)
        paramKey: emailBlacklisted
        in: body
        schema:
          type: boolean
        required: false
      - paramName: smsBlacklisted
        description: Set/unset this field to blacklist/allow the contact for SMS
          (smsBlacklisted = true)
        paramKey: smsBlacklisted
        in: body
        schema:
          type: boolean
        required: false
      - paramName: listIds
        description: Ids of the lists to add the contact to
        paramKey: listIds
        in: body
        schema:
          type: array
          items:
            type: any
        required: false
      - paramName: unlinkListIds
        description: Ids of the lists to remove the contact from
        paramKey: unlinkListIds
        in: body
        schema:
          type: array
          items:
            type: any
        required: false
      - paramName: smtpBlacklistSender
        description: transactional email forbidden sender for contact. Use only for
          email Contact
        paramKey: smtpBlacklistSender
        in: body
        schema:
          type: array
          items:
            type: any
        required: false
    requestBodyType: json
  - moduleName: Contacts / Batch Update
    method: post
    path: /contacts/batch
    description: Update multiple contacts
    externalDocs: ""
    params:
      - paramName: contacts
        description: List of contacts to be updated
        paramKey: contacts
        in: body
        schema:
          type: array
          items:
            type: any
        required: false
    requestBodyType: json
  - moduleName: Contacts / Stats
    method: get
    path: /contacts/{identifier}/campaignStats
    description: Get email campaigns' statistics for a contact
    externalDocs: ""
    params:
      - paramName: identifier
        description: Email (urlencoded) OR ID of the contact
        paramKey: identifier
        in: path
        schema:
          type: any
        required: true
      - paramName: startDate
        description: >
          **Mandatory if endDate is used.** Starting date (YYYY-MM-DD) of the
          statistic events specific to campaigns. Must be lower than equal to
          endDate
        paramKey: startDate
        in: query
        schema:
          type: string
        required: false
      - paramName: endDate
        description: >
          **Mandatory if startDate is used.** Ending date (YYYY-MM-DD) of the
          statistic events specific to campaigns. Must be greater than equal to
          startDate. Maximum difference between startDate and endDate should not
          be greater than 90 days
        paramKey: endDate
        in: query
        schema:
          type: string
        required: false
  - moduleName: Contacts / Attributes / List
    method: get
    path: /contacts/attributes
    description: List all attributes
    externalDocs: ""
    params: []
  - moduleName: Contacts / Attributes / Update
    method: put
    path: /contacts/attributes/{attributeCategory}/{attributeName}
    description: Update contact attribute
    externalDocs: ""
    params:
      - paramName: attributeCategory
        description: Category of the attribute
        paramKey: attributeCategory
        in: path
        schema:
          type: string
          enum:
            - category
            - calculated
            - global
            - normal
        required: true
      - paramName: attributeName
        description: Name of the existing attribute
        paramKey: attributeName
        in: path
        schema:
          type: string
        required: true
      - paramName: value
        description: >
          Value of the attribute to update. **Use only if the attribute's
          category is 'calculated' or 'global'**
        paramKey: value
        in: body
        schema:
          type: string
        required: false
      - paramName: enumeration
        description: >
          List of the values and labels that the attribute can take. **Use only
          if the attribute's category is "category"**. For example,

          **[{"value":1, "label":"male"}, {"value":2, "label":"female"}]**
        paramKey: enumeration
        in: body
        schema:
          type: array
          items:
            type: any
        required: false
      - paramName: multiCategoryOptions
        description: >
          Use this option to add multiple-choice attributes options only if the
          attribute's category is "normal". **This option is specifically
          designed for updating multiple-choice attributes**. For example:

          **["USA","INDIA"]**
        paramKey: multiCategoryOptions
        in: body
        schema:
          type: array
          items:
            type: any
        required: false
    requestBodyType: json
  - moduleName: Contacts / Attributes / Create
    method: post
    path: /contacts/attributes/{attributeCategory}/{attributeName}
    description: Create contact attribute
    externalDocs: ""
    params:
      - paramName: attributeCategory
        description: Category of the attribute
        paramKey: attributeCategory
        in: path
        schema:
          type: string
          enum:
            - normal
            - transactional
            - category
            - calculated
            - global
        required: true
      - paramName: attributeName
        description: Name of the attribute
        paramKey: attributeName
        in: path
        schema:
          type: string
        required: true
      - paramName: value
        description: >
          Value of the attribute. **Use only if the attribute's category is
          'calculated' or 'global'**
        paramKey: value
        in: body
        schema:
          type: string
        required: false
      - paramName: isRecurring
        description: >
          Type of the attribute. **Use only if the attribute's category is
          'calculated' or 'global'**
        paramKey: isRecurring
        in: body
        schema:
          type: boolean
        required: false
      - paramName: enumeration
        description: >
          List of values and labels that the attribute can take. **Use only if
          the attribute's category is "category"**. For example:

          **[{"value":1, "label":"male"}, {"value":2, "label":"female"}]**
        paramKey: enumeration
        in: body
        schema:
          type: array
          items:
            type: any
        required: false
      - paramName: multiCategoryOptions
        description: >
          List of options you want to add for multiple-choice attribute. **Use
          only if the attribute's category is "normal" and attribute's type is
          "multiple-choice".** For example:

          **["USA","INDIA"]**
        paramKey: multiCategoryOptions
        in: body
        schema:
          type: array
          items:
            type: any
        required: false
      - paramName: type
        description: >
          Type of the attribute. **Use only if the attribute's category is
          'normal', 'category' or 'transactional'**

          Type **boolean and multiple-choice** is only available if the category
          is **normal** attribute

          Type **id** is only available if the category is **transactional**
          attribute

          Type **category** is only available if the category is **category**
          attribute
        paramKey: type
        in: body
        schema:
          type: string
          enum:
            - text
            - date
            - float
            - boolean
            - id
            - category
            - multiple-choice
        required: false
    requestBodyType: json
  - moduleName: Contacts / Attributes / Delete
    method: delete
    path: /contacts/attributes/{attributeCategory}/{attributeName}
    description: Delete an attribute
    externalDocs: ""
    params:
      - paramName: attributeCategory
        description: Category of the attribute
        paramKey: attributeCategory
        in: path
        schema:
          type: string
          enum:
            - normal
            - transactional
            - category
            - calculated
            - global
        required: true
      - paramName: attributeName
        description: Name of the existing attribute
        paramKey: attributeName
        in: path
        schema:
          type: string
        required: true
  - moduleName: Contacts / Attributes / Multi Delete
    method: delete
    path: /contacts/attributes/{attributeType}/{multipleChoiceAttribute}/{multipleChoiceAttributeOption}
    description: Delete a multiple-choice attribute option
    externalDocs: ""
    params:
      - paramName: attributeType
        description: Type of the attribute
        paramKey: attributeType
        in: path
        schema:
          type: string
          enum:
            - multiple-choice
        required: true
      - paramName: multipleChoiceAttribute
        description: Name of the existing muliple-choice attribute
        paramKey: multipleChoiceAttribute
        in: path
        schema:
          type: string
        required: true
      - paramName: multipleChoiceAttributeOption
        description: Name of the existing multiple-choice attribute option that you want
          to delete
        paramKey: multipleChoiceAttributeOption
        in: path
        schema:
          type: string
        required: true
  - moduleName: Contacts / Folders / List
    method: get
    path: /contacts/folders
    description: Get all folders
    externalDocs: ""
    params:
      - paramName: limit
        description: Number of documents per page
        paramKey: limit
        in: query
        schema:
          type: number
          minimum: 0
          maximum: 50
          default: 10
        required: true
      - paramName: offset
        description: Index of the first document of the page
        paramKey: offset
        in: query
        schema:
          type: number
          default: 0
        required: true
      - paramName: sort
        description: Sort the results in the ascending/descending order of record
          creation. Default order is **descending** if `sort` is not passed
        paramKey: sort
        in: query
        schema:
          type: string
          default: desc
          enum:
            - asc
            - desc
        required: false
  - moduleName: Contacts / Folders / Create
    method: post
    path: /contacts/folders
    description: Create a folder
    externalDocs: ""
    params:
      - paramName: name
        description: Name of the folder
        paramKey: name
        in: body
        schema:
          type: string
        required: false
    requestBodyType: json
  - moduleName: Contacts / Folders / Get
    method: get
    path: /contacts/folders/{folderId}
    description: Returns a folder's details
    externalDocs: ""
    params:
      - paramName: folderId
        description: id of the folder
        paramKey: folderId
        in: path
        schema:
          type: number
        required: true
  - moduleName: Contacts / Folders / Update
    method: put
    path: /contacts/folders/{folderId}
    description: Update a folder
    externalDocs: ""
    params:
      - paramName: folderId
        description: Id of the folder
        paramKey: folderId
        in: path
        schema:
          type: number
        required: true
      - paramName: name
        description: Name of the folder
        paramKey: name
        in: body
        schema:
          type: string
        required: false
    requestBodyType: json
  - moduleName: Contacts / Folders / Delete
    method: delete
    path: /contacts/folders/{folderId}
    description: Delete a folder (and all its lists)
    externalDocs: ""
    params:
      - paramName: folderId
        description: Id of the folder
        paramKey: folderId
        in: path
        schema:
          type: number
        required: true
  - moduleName: Contacts / Folders / Lists
    method: get
    path: /contacts/folders/{folderId}/lists
    description: Get lists in a folder
    externalDocs: ""
    params:
      - paramName: folderId
        description: Id of the folder
        paramKey: folderId
        in: path
        schema:
          type: number
        required: true
      - paramName: limit
        description: Number of documents per page
        paramKey: limit
        in: query
        schema:
          type: number
          minimum: 0
          maximum: 50
          default: 10
        required: false
      - paramName: offset
        description: Index of the first document of the page
        paramKey: offset
        in: query
        schema:
          type: number
          default: 0
        required: false
      - paramName: sort
        description: Sort the results in the ascending/descending order of record
          creation. Default order is **descending** if `sort` is not passed
        paramKey: sort
        in: query
        schema:
          type: string
          default: desc
          enum:
            - asc
            - desc
        required: false
  - moduleName: Contacts / Lists / List
    method: get
    path: /contacts/lists
    description: Get all the lists
    externalDocs: ""
    params:
      - paramName: limit
        description: Number of documents per page
        paramKey: limit
        in: query
        schema:
          type: number
          minimum: 0
          maximum: 50
          default: 10
        required: false
      - paramName: offset
        description: Index of the first document of the page
        paramKey: offset
        in: query
        schema:
          type: number
          default: 0
        required: false
      - paramName: sort
        description: Sort the results in the ascending/descending order of record
          creation. Default order is **descending** if `sort` is not passed
        paramKey: sort
        in: query
        schema:
          type: string
          default: desc
          enum:
            - asc
            - desc
        required: false
  - moduleName: Contacts / Lists / Create
    method: post
    path: /contacts/lists
    description: Create a list
    externalDocs: ""
    params:
      - paramName: name
        description: Name of the list
        paramKey: name
        in: body
        schema:
          type: string
        required: true
      - paramName: folderId
        description: Id of the parent folder in which this list is to be created
        paramKey: folderId
        in: body
        schema:
          type: number
        required: true
    requestBodyType: json
  - moduleName: Contacts / Lists / Get
    method: get
    path: /contacts/lists/{listId}
    description: Get a list's details
    externalDocs: ""
    params:
      - paramName: listId
        description: Id of the list
        paramKey: listId
        in: path
        schema:
          type: number
        required: true
      - paramName: startDate
        description: >
          **Mandatory if endDate is used**. Ending (urlencoded) UTC date-time
          (YYYY-MM-DDTHH:mm:ss.SSSZ) to aggregate the sent email campaigns for a
          specific list id.

          **Prefer to pass your timezone in date-time format for accurate
          result**
        paramKey: startDate
        in: query
        schema:
          type: string
        required: false
      - paramName: endDate
        description: >
          **Mandatory if startDate is used**. Ending (urlencoded) UTC date-time
          (YYYY-MM-DDTHH:mm:ss.SSSZ) to aggregate the sent email campaigns for a
          specific list id.

          **Prefer to pass your timezone in date-time format for accurate
          result**
        paramKey: endDate
        in: query
        schema:
          type: string
        required: false
  - moduleName: Contacts / Lists / Update
    method: put
    path: /contacts/lists/{listId}
    description: Update a list
    externalDocs: ""
    params:
      - paramName: listId
        description: Id of the list
        paramKey: listId
        in: path
        schema:
          type: number
        required: true
      - paramName: name
        description: Name of the list. Either of the two parameters (name, folderId) can
          be updated at a time.
        paramKey: name
        in: body
        schema:
          type: string
        required: false
      - paramName: folderId
        description: Id of the folder in which the list is to be moved. Either of the
          two parameters (name, folderId) can be updated at a time.
        paramKey: folderId
        in: body
        schema:
          type: number
        required: false
    requestBodyType: json
  - moduleName: Contacts / Lists / Delete
    method: delete
    path: /contacts/lists/{listId}
    description: Delete a list
    externalDocs: ""
    params:
      - paramName: listId
        description: Id of the list
        paramKey: listId
        in: path
        schema:
          type: number
        required: true
  - moduleName: Contacts / Segments / List
    method: get
    path: /contacts/segments
    description: Get all the segments
    externalDocs: ""
    params:
      - paramName: limit
        description: Number of documents per page
        paramKey: limit
        in: query
        schema:
          type: number
          minimum: 0
          maximum: 50
          default: 10
        required: false
      - paramName: offset
        description: Index of the first document of the page
        paramKey: offset
        in: query
        schema:
          type: number
          default: 0
        required: false
      - paramName: sort
        description: Sort the results in the ascending/descending order of record
          creation. Default order is **descending** if `sort` is not passed
        paramKey: sort
        in: query
        schema:
          type: string
          default: desc
          enum:
            - asc
            - desc
        required: false
  - moduleName: Contacts / Lists / Contacts / List
    method: get
    path: /contacts/lists/{listId}/contacts
    description: Get contacts in a list
    externalDocs: ""
    params:
      - paramName: listId
        description: Id of the list
        paramKey: listId
        in: path
        schema:
          type: number
        required: true
      - paramName: modifiedSince
        description: >
          Filter (urlencoded) the contacts modified after a given UTC date-time
          (YYYY-MM-DDTHH:mm:ss.SSSZ). **Prefer to pass your timezone in
          date-time format for accurate result.**
        paramKey: modifiedSince
        in: query
        schema:
          type: string
        required: false
      - paramName: limit
        description: Number of documents per page
        paramKey: limit
        in: query
        schema:
          type: number
          minimum: 0
          maximum: 500
          default: 50
        required: false
      - paramName: offset
        description: Index of the first document of the page
        paramKey: offset
        in: query
        schema:
          type: number
          default: 0
        required: false
      - paramName: sort
        description: Sort the results in the ascending/descending order of record
          creation. Default order is **descending** if `sort` is not passed
        paramKey: sort
        in: query
        schema:
          type: string
          default: desc
          enum:
            - asc
            - desc
        required: false
  - moduleName: Contacts / Lists / Contacts / Add
    method: post
    path: /contacts/lists/{listId}/contacts/add
    description: Add existing contacts to a list
    externalDocs: ""
    params:
      - paramName: listId
        description: Id of the list
        paramKey: listId
        in: path
        schema:
          type: number
        required: true
      - paramName: requestBody
        paramKey: ""
        description: ""
        in: body_raw
        schema:
          type: any
        required: true
    requestBodyType: json
  - moduleName: Contacts / Lists / Contacts / Remove
    method: post
    path: /contacts/lists/{listId}/contacts/remove
    description: Delete a contact from a list
    externalDocs: ""
    params:
      - paramName: listId
        description: Id of the list
        paramKey: listId
        in: path
        schema:
          type: number
        required: true
      - paramName: requestBody
        paramKey: ""
        description: ""
        in: body_raw
        schema:
          type: any
        required: true
    requestBodyType: json
  - moduleName: Contacts / Export
    method: post
    path: /contacts/export
    description: It returns the background process ID which on completion calls the
      notify URL that you have set in the input. File will be available in csv.
    externalDocs: ""
    params:
      - paramName: exportAttributes
        description: >
          List of all the attributes that you want to export. **These attributes
          must be present in your contact database.** For example:

          **['fname', 'lname', 'email']**
        paramKey: exportAttributes
        in: body
        schema:
          type: array
          items:
            type: any
        required: false
      - paramName: customContactFilter
        description: |
          Set the filter for the contacts to be exported.
        paramKey: customContactFilter
        in: body
        schema:
          type: any
        required: true
      - paramName: notifyUrl
        description: Webhook that will be called once the export process is finished.
          For reference, https://help.brevo.com/hc/en-us/articles/360007666479
        paramKey: notifyUrl
        in: body
        schema:
          type: string
        required: false
    requestBodyType: json
  - moduleName: Contacts / Import
    method: post
    path: /contacts/import
    description: >
      It returns the background process ID which on completion calls

      the notify URL that you have set in the input.


      **Note**:

      - Any contact attribute that doesn't exist in your account will be ignored
      at import end.
    externalDocs: ""
    params:
      - paramName: fileUrl
        description: >
          **Mandatory if fileBody and jsonBody is not defined.** URL of the file
          to be imported (**no local file**). Possible file formats:

          #### .txt, .csv, .json
        paramKey: fileUrl
        in: body
        schema:
          type: string
        required: false
      - paramName: fileBody
        description: >
          **Mandatory if fileUrl and jsonBody is not defined.** CSV content to
          be imported. Use semicolon to separate multiple attributes. **Maximum
          allowed file body size is 10MB** . However we recommend a safe limit
          of around 8 MB to avoid the issues caused due to increase of file body
          size while parsing. Please use fileUrl instead to import bigger files.
        paramKey: fileBody
        in: body
        schema:
          type: string
        required: false
      - paramName: jsonBody
        description: >
          **Mandatory if fileUrl and fileBody is not defined.** JSON content to
          be imported. **Maximum allowed json body size is 10MB** . However we
          recommend a safe limit of around 8 MB to avoid the issues caused due
          to increase of json body size while parsing. Please use fileUrl
          instead to import bigger files.
        paramKey: jsonBody
        in: body
        schema:
          type: array
          items:
            type: any
        required: false
      - paramName: listIds
        description: >
          **Mandatory if newList is not defined.** Ids of the lists in which the
          contacts shall be imported. For example, **[2, 4, 7]**.
        paramKey: listIds
        in: body
        schema:
          type: array
          items:
            type: any
        required: false
      - paramName: notifyUrl
        description: URL that will be called once the import process is finished. For
          reference, https://help.brevo.com/hc/en-us/articles/360007666479
        paramKey: notifyUrl
        in: body
        schema:
          type: string
        required: false
      - paramName: newList
        description: To create a new list and import the contacts into it, pass the
          listName and an optional folderId.
        paramKey: newList
        in: body
        schema:
          type: any
        required: false
      - paramName: emailBlacklist
        description: To blacklist all the contacts for email
        paramKey: emailBlacklist
        in: body
        schema:
          type: boolean
          default: false
        required: false
      - paramName: disableNotification
        description: To disable email notification
        paramKey: disableNotification
        in: body
        schema:
          type: boolean
          default: false
        required: false
      - paramName: smsBlacklist
        description: To blacklist all the contacts for sms
        paramKey: smsBlacklist
        in: body
        schema:
          type: boolean
          default: false
        required: false
      - paramName: updateExistingContacts
        description: To facilitate the choice to update the existing contacts
        paramKey: updateExistingContacts
        in: body
        schema:
          type: boolean
          default: true
        required: false
      - paramName: emptyContactsAttributes
        description: >
          To facilitate the choice to erase any attribute of the existing
          contacts with empty value. emptyContactsAttributes = true means the
          empty fields in your import will erase any attribute that currently
          contain data in Brevo, & emptyContactsAttributes = false means the
          empty fields will not affect your existing data ( **only available if
          `updateExistingContacts` set to true **)
        paramKey: emptyContactsAttributes
        in: body
        schema:
          type: boolean
          default: false
        required: false
    requestBodyType: json
  - moduleName: SMS Campaigns / List
    method: get
    path: /smsCampaigns
    description: Returns the information for all your created SMS campaigns
    externalDocs: ""
    params:
      - paramName: status
        description: Status of campaign.
        paramKey: status
        in: query
        schema:
          type: string
          enum:
            - suspended
            - archive
            - sent
            - queued
            - draft
            - inProcess
        required: false
      - paramName: startDate
        description: >
          **Mandatory if endDate is used.** Starting (urlencoded) UTC date-time
          (YYYY-MM-DDTHH:mm:ss.SSSZ) to filter the sent sms campaigns. **Prefer
          to pass your timezone in date-time format for accurate result** ( only
          available if either 'status' not passed and if passed is set to 'sent'
          )
        paramKey: startDate
        in: query
        schema:
          type: string
        required: false
      - paramName: endDate
        description: >
          **Mandatory if startDate is used.** Ending (urlencoded) UTC date-time
          (YYYY-MM-DDTHH:mm:ss.SSSZ) to filter the sent sms campaigns. **Prefer
          to pass your timezone in date-time format for accurate result** ( only
          available if either 'status' not passed and if passed is set to 'sent'
          )
        paramKey: endDate
        in: query
        schema:
          type: string
        required: false
      - paramName: limit
        description: Number limitation for the result returned
        paramKey: limit
        in: query
        schema:
          type: number
          minimum: 0
          maximum: 1000
          default: 500
        required: false
      - paramName: offset
        description: Beginning point in the list to retrieve from.
        paramKey: offset
        in: query
        schema:
          type: number
          default: 0
        required: false
      - paramName: sort
        description: Sort the results in the ascending/descending order of record
          creation. Default order is **descending** if `sort` is not passed
        paramKey: sort
        in: query
        schema:
          type: string
          default: desc
          enum:
            - asc
            - desc
        required: false
  - moduleName: SMS Campaigns / Create
    method: post
    path: /smsCampaigns
    description: Creates an SMS campaign
    externalDocs: ""
    params:
      - paramName: name
        description: Name of the campaign
        paramKey: name
        in: body
        schema:
          type: string
        required: true
      - paramName: sender
        description: >
          Name of the sender. **The number of characters is limited to 11 for
          alphanumeric characters and 15 for numeric characters**
        paramKey: sender
        in: body
        schema:
          type: string
        required: true
      - paramName: content
        description: >
          Content of the message. The **maximum characters used per SMS is
          160**, if used more than that, it will be counted as more than one SMS
        paramKey: content
        in: body
        schema:
          type: string
        required: true
      - paramName: recipients
        description: ""
        paramKey: recipients
        in: body
        schema:
          type: any
        required: false
      - paramName: scheduledAt
        description: >
          UTC date-time on which the campaign has to run
          (YYYY-MM-DDTHH:mm:ss.SSSZ). **Prefer to pass your timezone in
          date-time format for accurate result.**
        paramKey: scheduledAt
        in: body
        schema:
          type: string
        required: false
      - paramName: unicodeEnabled
        description: >
          Format of the message. It indicates whether the content should be
          treated as unicode or not.
        paramKey: unicodeEnabled
        in: body
        schema:
          type: boolean
          default: false
        required: false
      - paramName: organisationPrefix
        description: A recognizable prefix will ensure your audience knows who you are.
          Recommended by U.S. carriers. This will be added as your Brand Name
          before the message content. **Prefer verifying maximum length of 160
          characters including this prefix in message content to avoid multiple
          sending of same sms.**
        paramKey: organisationPrefix
        in: body
        schema:
          type: string
        required: false
      - paramName: unsubscribeInstruction
        description: Instructions to unsubscribe from future communications. Recommended
          by U.S. carriers. Must include **STOP** keyword. This will be added as
          instructions after the end of message content. **Prefer verifying
          maximum length of 160 characters including this instructions in
          message content to avoid multiple sending of same sms.**
        paramKey: unsubscribeInstruction
        in: body
        schema:
          type: string
        required: false
    requestBodyType: json
  - moduleName: SMS Campaigns / Get
    method: get
    path: /smsCampaigns/{campaignId}
    description: Get an SMS campaign
    externalDocs: ""
    params:
      - paramName: campaignId
        description: id of the SMS campaign
        paramKey: campaignId
        in: path
        schema:
          type: number
        required: true
  - moduleName: SMS Campaigns / Update
    method: put
    path: /smsCampaigns/{campaignId}
    description: Update an SMS campaign
    externalDocs: ""
    params:
      - paramName: campaignId
        description: id of the SMS campaign
        paramKey: campaignId
        in: path
        schema:
          type: number
        required: true
      - paramName: name
        description: Name of the campaign
        paramKey: name
        in: body
        schema:
          type: string
        required: false
      - paramName: sender
        description: >
          Name of the sender. **The number of characters is limited to 11 for
          alphanumeric characters and 15 for numeric characters**
        paramKey: sender
        in: body
        schema:
          type: string
        required: false
      - paramName: content
        description: >
          Content of the message. The **maximum characters used per SMS is
          160**, if used more than that, it will be counted as more than one SMS
        paramKey: content
        in: body
        schema:
          type: string
        required: false
      - paramName: recipients
        description: ""
        paramKey: recipients
        in: body
        schema:
          type: any
        required: false
      - paramName: scheduledAt
        description: >
          UTC date-time on which the campaign has to run
          (YYYY-MM-DDTHH:mm:ss.SSSZ). **Prefer to pass your timezone in
          date-time format for accurate result.**
        paramKey: scheduledAt
        in: body
        schema:
          type: string
        required: false
      - paramName: unicodeEnabled
        description: >
          Format of the message. It indicates whether the content should be
          treated as unicode or not.
        paramKey: unicodeEnabled
        in: body
        schema:
          type: boolean
          default: false
        required: false
      - paramName: organisationPrefix
        description: A recognizable prefix will ensure your audience knows who you are.
          Recommended by U.S. carriers. This will be added as your Brand Name
          before the message content. **Prefer verifying maximum length of 160
          characters including this prefix in message content to avoid multiple
          sending of same sms.**
        paramKey: organisationPrefix
        in: body
        schema:
          type: string
        required: false
      - paramName: unsubscribeInstruction
        description: Instructions to unsubscribe from future communications. Recommended
          by U.S. carriers. Must include **STOP** keyword. This will be added as
          instructions after the end of message content. **Prefer verifying
          maximum length of 160 characters including this instructions in
          message content to avoid multiple sending of same sms.**
        paramKey: unsubscribeInstruction
        in: body
        schema:
          type: string
        required: false
    requestBodyType: json
  - moduleName: SMS Campaigns / Delete
    method: delete
    path: /smsCampaigns/{campaignId}
    description: Delete an SMS campaign
    externalDocs: ""
    params:
      - paramName: campaignId
        description: id of the SMS campaign
        paramKey: campaignId
        in: path
        schema:
          type: number
        required: true
  - moduleName: SMS Campaigns / Send Now
    method: post
    path: /smsCampaigns/{campaignId}/sendNow
    description: Send your SMS campaign immediately
    externalDocs: ""
    params:
      - paramName: campaignId
        description: id of the campaign
        paramKey: campaignId
        in: path
        schema:
          type: number
        required: true
  - moduleName: SMS Campaigns / Update Status
    method: put
    path: /smsCampaigns/{campaignId}/status
    description: Update a campaign's status
    externalDocs: ""
    params:
      - paramName: campaignId
        description: id of the campaign
        paramKey: campaignId
        in: path
        schema:
          type: number
        required: true
      - paramName: status
        description: >
          Note:- **replicateTemplate** status will be available **only for
          template type campaigns.**
        paramKey: status
        in: body
        schema:
          type: string
          enum:
            - suspended
            - archive
            - darchive
            - sent
            - queued
            - replicate
            - replicateTemplate
            - draft
        required: false
        example: draft
    requestBodyType: json
  - moduleName: SMS Campaigns / Send Test
    method: post
    path: /smsCampaigns/{campaignId}/sendTest
    description: Send a test SMS campaign
    externalDocs: ""
    params:
      - paramName: campaignId
        description: Id of the SMS campaign
        paramKey: campaignId
        in: path
        schema:
          type: number
        required: true
      - paramName: phoneNumber
        description: >
          Mobile number of the recipient with the country code. This number
          **must belong to one of your contacts in Brevo account and must not be
          blacklisted**
        paramKey: phoneNumber
        in: body
        schema:
          type: string
        required: false
    requestBodyType: json
  - moduleName: SMS Campaigns / Export Recipients
    method: post
    path: /smsCampaigns/{campaignId}/exportRecipients
    description: It returns the background process ID which on completion calls the
      notify URL that you have set in the input.
    externalDocs: ""
    params:
      - paramName: campaignId
        description: id of the campaign
        paramKey: campaignId
        in: path
        schema:
          type: number
        required: true
      - paramName: notifyUrl
        description: URL that will be called once the export process is finished. For
          reference, https://help.brevo.com/hc/en-us/articles/360007666479
        paramKey: notifyURL
        in: body
        schema:
          type: string
        required: false
      - paramName: recipientsType
        description: Filter the recipients based on how they interacted with the campaign
        paramKey: recipientsType
        in: body
        schema:
          type: string
          enum:
            - all
            - delivered
            - answered
            - softBounces
            - hardBounces
            - unsubscribed
        required: true
    requestBodyType: json
  - moduleName: SMS Campaigns / Send Report
    method: post
    path: /smsCampaigns/{campaignId}/sendReport
    description: Send report of Sent and Archived campaign, to the specified email
      addresses, with respective data and a pdf attachment in detail.
    externalDocs: ""
    params:
      - paramName: campaignId
        description: id of the campaign
        paramKey: campaignId
        in: path
        schema:
          type: number
        required: true
      - paramName: language
        description: Language of email content for campaign report sending.
        paramKey: language
        in: body
        schema:
          type: string
          default: fr
          enum:
            - fr
            - es
            - pt
            - it
            - de
            - en
        required: false
      - paramName: email
        description: Custom attributes for the report email.
        paramKey: email
        in: body
        schema:
          type: any
        required: true
    requestBodyType: json
  - moduleName: Transactional SMS / Send
    method: post
    path: /transactionalSMS/sms
    description: Send SMS message to a mobile number
    externalDocs: ""
    params:
      - paramName: sender
        description: >
          Name of the sender. **The number of characters is limited to 11 for
          alphanumeric characters and 15 for numeric characters**
        paramKey: sender
        in: body
        schema:
          type: string
        required: true
      - paramName: recipient
        description: Mobile number to send SMS with the country code
        paramKey: recipient
        in: body
        schema:
          type: string
        required: true
      - paramName: content
        description: >
          Content of the message. If more than **160 characters** long, will be
          sent as multiple text messages
        paramKey: content
        in: body
        schema:
          type: string
        required: true
      - paramName: type
        description: Type of the SMS. Marketing SMS messages are those sent typically
          with marketing content. Transactional SMS messages are sent to
          individuals and are triggered in response to some action, such as a
          sign-up, purchase, etc.
        paramKey: type
        in: body
        schema:
          type: string
          default: transactional
          enum:
            - transactional
            - marketing
        required: false
      - paramName: tag
        description: Tag of the message
        paramKey: tag
        in: body
        schema:
          type: string
        required: false
      - paramName: webUrl
        description: Webhook to call for each event triggered by the message (delivered
          etc.)
        paramKey: webUrl
        in: body
        schema:
          type: string
        required: false
      - paramName: unicodeEnabled
        description: >
          Format of the message. It indicates whether the content should be
          treated as unicode or not.
        paramKey: unicodeEnabled
        in: body
        schema:
          type: boolean
          default: false
        required: false
      - paramName: organisationPrefix
        description: A recognizable prefix will ensure your audience knows who you are.
          Recommended by U.S. carriers. This will be added as your Brand Name
          before the message content. **Prefer verifying maximum length of 160
          characters including this prefix in message content to avoid multiple
          sending of same sms.**
        paramKey: organisationPrefix
        in: body
        schema:
          type: string
        required: false
    requestBodyType: json
  - moduleName: Transactional SMS / Reports / Aggregated
    method: get
    path: /transactionalSMS/statistics/aggregatedReport
    description: Get your SMS activity aggregated over a period of time
    externalDocs: ""
    params:
      - paramName: startDate
        description: >
          **Mandatory if endDate is used.** Starting date (YYYY-MM-DD) of the
          report
        paramKey: startDate
        in: query
        schema:
          type: string
        required: false
      - paramName: endDate
        description: >
          **Mandatory if startDate is used.** Ending date (YYYY-MM-DD) of the
          report
        paramKey: endDate
        in: query
        schema:
          type: string
        required: false
      - paramName: days
        description: >
          Number of days in the past including today (positive integer). **Not
          compatible with startDate and endDate**
        paramKey: days
        in: query
        schema:
          type: number
        required: false
      - paramName: tag
        description: Filter on a tag
        paramKey: tag
        in: query
        schema:
          type: string
        required: false
  - moduleName: Transactional SMS / Reports / List
    method: get
    path: /transactionalSMS/statistics/reports
    description: Get your SMS activity aggregated per day
    externalDocs: ""
    params:
      - paramName: startDate
        description: >
          **Mandatory if endDate is used.** Starting date (YYYY-MM-DD) of the
          report
        paramKey: startDate
        in: query
        schema:
          type: string
        required: false
      - paramName: endDate
        description: >
          **Mandatory if startDate is used.** Ending date (YYYY-MM-DD) of the
          report
        paramKey: endDate
        in: query
        schema:
          type: string
        required: false
      - paramName: days
        description: >
          Number of days in the past including today (positive integer). **Not
          compatible with 'startDate' and 'endDate'**
        paramKey: days
        in: query
        schema:
          type: number
        required: false
      - paramName: tag
        description: Filter on a tag
        paramKey: tag
        in: query
        schema:
          type: string
        required: false
      - paramName: sort
        description: Sort the results in the ascending/descending order of record
          creation. Default order is **descending** if `sort` is not passed
        paramKey: sort
        in: query
        schema:
          type: string
          default: desc
          enum:
            - asc
            - desc
        required: false
  - moduleName: Transactional SMS / Events / List
    method: get
    path: /transactionalSMS/statistics/events
    description: Get all your SMS activity (unaggregated events)
    externalDocs: ""
    params:
      - paramName: limit
        description: Number of documents per page
        paramKey: limit
        in: query
        schema:
          type: number
          minimum: 0
          maximum: 100
          default: 50
        required: false
      - paramName: startDate
        description: >
          **Mandatory if endDate is used.** Starting date (YYYY-MM-DD) of the
          report
        paramKey: startDate
        in: query
        schema:
          type: string
        required: false
      - paramName: endDate
        description: >
          **Mandatory if startDate is used.** Ending date (YYYY-MM-DD) of the
          report
        paramKey: endDate
        in: query
        schema:
          type: string
        required: false
      - paramName: offset
        description: Index of the first document of the page
        paramKey: offset
        in: query
        schema:
          type: number
          default: 0
        required: false
      - paramName: days
        description: >
          Number of days in the past including today (positive integer). **Not
          compatible with 'startDate' and 'endDate'**
        paramKey: days
        in: query
        schema:
          type: number
        required: false
      - paramName: phoneNumber
        description: Filter the report for a specific phone number
        paramKey: phoneNumber
        in: query
        schema:
          type: string
        required: false
      - paramName: event
        description: Filter the report for specific events
        paramKey: event
        in: query
        schema:
          type: string
          enum:
            - bounces
            - hardBounces
            - softBounces
            - delivered
            - sent
            - accepted
            - unsubscription
            - replies
            - blocked
            - rejected
            - skipped
        required: false
      - paramName: tags
        description: Filter the report for specific tags passed as a serialized
          urlencoded array
        paramKey: tags
        in: query
        schema:
          type: string
        required: false
      - paramName: sort
        description: Sort the results in the ascending/descending order of record
          creation. Default order is **descending** if `sort` is not passed
        paramKey: sort
        in: query
        schema:
          type: string
          default: desc
          enum:
            - asc
            - desc
        required: false
  - moduleName: WhatsApp Campaigns / Get
    method: get
    path: /whatsappCampaigns/{campaignId}
    description: Get a WhatsApp campaign
    externalDocs: ""
    params:
      - paramName: campaignId
        description: Id of the campaign
        paramKey: campaignId
        in: path
        schema:
          type: number
        required: true
  - moduleName: WhatsApp Campaigns / Delete
    method: delete
    path: /whatsappCampaigns/{campaignId}
    description: Delete a WhatsApp campaign
    externalDocs: ""
    params:
      - paramName: campaignId
        description: id of the campaign
        paramKey: campaignId
        in: path
        schema:
          type: number
        required: true
  - moduleName: WhatsApp Campaigns / Update
    method: put
    path: /whatsappCampaigns/{campaignId}
    description: Update a WhatsApp campaign
    externalDocs: ""
    params:
      - paramName: campaignId
        description: id of the campaign
        paramKey: campaignId
        in: path
        schema:
          type: number
        required: true
      - paramName: campaignName
        description: Name of the campaign
        paramKey: campaignName
        in: body
        schema:
          type: string
        required: false
      - paramName: campaignStatus
        description: Status of the campaign
        paramKey: campaignStatus
        in: body
        schema:
          type: string
          default: scheduled
          enum:
            - scheduled
            - suspended
        required: false
      - paramName: rescheduleFor
        description: >
          Reschedule the sending UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) of
          campaign. **Prefer to pass your timezone in date-time format for
          accurate result.For example: **2017-06-01T12:30:00+02:00**

          Use this field to update the scheduledAt of any existing draft or
          scheduled WhatsApp campaign.
        paramKey: rescheduleFor
        in: body
        schema:
          type: string
        required: false
      - paramName: recipients
        description: Segment ids and List ids to include/exclude from campaign
        paramKey: recipients
        in: body
        schema:
          type: any
        required: false
    requestBodyType: json
  - moduleName: WhatsApp Campaigns / Templates / List
    method: get
    path: /whatsappCampaigns/template-list
    description: Return all your created WhatsApp templates
    externalDocs: ""
    params:
      - paramName: startDate
        description: >
          **Mandatory if endDate is used**. Starting (urlencoded) UTC date-time
          (YYYY-MM-DDTHH:mm:ss.SSSZ) to filter the templates created.

          **Prefer to pass your timezone in date-time format for accurate
          result**
        paramKey: startDate
        in: query
        schema:
          type: string
        required: false
      - paramName: endDate
        description: >
          **Mandatory if startDate is used**. Ending (urlencoded) UTC date-time
          (YYYY-MM-DDTHH:mm:ss.SSSZ) to filter the templates created.

          **Prefer to pass your timezone in date-time format for accurate
          result**
        paramKey: endDate
        in: query
        schema:
          type: string
        required: false
      - paramName: limit
        description: Number of documents per page
        paramKey: limit
        in: query
        schema:
          type: number
          minimum: 0
          maximum: 100
          default: 50
        required: false
      - paramName: offset
        description: Index of the first document in the page
        paramKey: offset
        in: query
        schema:
          type: number
          default: 0
        required: false
      - paramName: sort
        description: Sort the results in the ascending/descending order of record
          modification. Default order is **descending** if `sort` is not passed
        paramKey: sort
        in: query
        schema:
          type: string
          default: desc
          enum:
            - asc
            - desc
        required: false
      - paramName: source
        description: source of the template
        paramKey: source
        in: query
        schema:
          type: string
          enum:
            - Automation
            - Conversations
        required: false
  - moduleName: WhatsApp Campaigns / Create
    method: post
    path: /whatsappCampaigns
    description: Create and Send a WhatsApp campaign
    externalDocs: ""
    params:
      - paramName: name
        description: Name of the WhatsApp campaign creation
        paramKey: name
        in: body
        schema:
          type: string
        required: true
      - paramName: templateId
        description: Id of the WhatsApp template in **approved** state
        paramKey: templateId
        in: body
        schema:
          type: number
        required: true
      - paramName: scheduledAt
        description: >
          Sending UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ). **Prefer to pass
          your timezone in date-time format for accurate result.For example:
          **2017-06-01T12:30:00+02:00**
        paramKey: scheduledAt
        in: body
        schema:
          type: string
        required: true
      - paramName: recipients
        description: Segment ids and List ids to include/exclude from campaign
        paramKey: recipients
        in: body
        schema:
          type: any
        required: true
    requestBodyType: json
  - moduleName: WhatsApp Campaigns / List
    method: get
    path: /whatsappCampaigns
    description: Return all your created WhatsApp campaigns
    externalDocs: ""
    params:
      - paramName: startDate
        description: >
          **Mandatory if endDate is used**. Starting (urlencoded) UTC date-time
          (YYYY-MM-DDTHH:mm:ss.SSSZ) to filter the WhatsApp campaigns created.

          **Prefer to pass your timezone in date-time format for accurate
          result**
        paramKey: startDate
        in: query
        schema:
          type: string
        required: false
      - paramName: endDate
        description: >
          **Mandatory if startDate is used**. Ending (urlencoded) UTC date-time
          (YYYY-MM-DDTHH:mm:ss.SSSZ) to filter the WhatsApp campaigns created.

          **Prefer to pass your timezone in date-time format for accurate
          result**
        paramKey: endDate
        in: query
        schema:
          type: string
        required: false
      - paramName: limit
        description: Number of documents per page
        paramKey: limit
        in: query
        schema:
          type: number
          minimum: 0
          maximum: 100
          default: 50
        required: false
      - paramName: offset
        description: Index of the first document in the page
        paramKey: offset
        in: query
        schema:
          type: number
          default: 0
        required: false
      - paramName: sort
        description: Sort the results in the ascending/descending order of record
          modification. Default order is **descending** if `sort` is not passed
        paramKey: sort
        in: query
        schema:
          type: string
          default: desc
          enum:
            - asc
            - desc
        required: false
  - moduleName: WhatsApp Campaigns / Templates / Create
    method: post
    path: /whatsappCampaigns/template
    description: Create a WhatsApp template
    externalDocs: ""
    params:
      - paramName: name
        description: Name of the template
        paramKey: name
        in: body
        schema:
          type: string
        required: true
      - paramName: language
        description: |
          Language of the template. For Example :
          **en** for English
        paramKey: language
        in: body
        schema:
          type: string
        required: true
      - paramName: category
        description: Category of the template
        paramKey: category
        in: body
        schema:
          type: string
          enum:
            - MARKETING
            - UTILITY
        required: true
      - paramName: mediaUrl
        description: >
          Absolute url of the media file **(no local file)** for the header.
          **Use this field in you want to add media in Template header and
          headerText is empty**.

          Allowed extensions for media files are:

          #### jpeg | png | mp4 | pdf
        paramKey: mediaUrl
        in: body
        schema:
          type: string
        required: false
      - paramName: bodyText
        description: Body of the template. **Maximum allowed characters are 1024**
        paramKey: bodyText
        in: body
        schema:
          type: string
        required: true
      - paramName: headerText
        description: >
          Text content of the header in the template. **Maximum allowed
          characters are 45**

          **Use this field to add text content in template header and if
          mediaUrl is empty**
        paramKey: headerText
        in: body
        schema:
          type: string
        required: false
      - paramName: source
        description: source of the template
        paramKey: source
        in: body
        schema:
          type: string
          enum:
            - Automation
            - Conversations
        required: false
    requestBodyType: json
  - moduleName: WhatsApp Campaigns / Templates / Approval
    method: post
    path: /whatsappCampaigns/template/approval/{templateId}
    description: Send your WhatsApp template for approval
    externalDocs: ""
    params:
      - paramName: templateId
        description: id of the template
        paramKey: templateId
        in: path
        schema:
          type: number
        required: true
  - moduleName: WhatsApp Campaigns / Config / Get
    method: get
    path: /whatsappCampaigns/config
    description: Get your WhatsApp API account information
    externalDocs: ""
    params: []
  - moduleName: Senders / List
    method: get
    path: /senders
    description: Get the list of all your senders
    externalDocs: ""
    params:
      - paramName: ip
        description: >
          Filter your senders for a specific ip. **Available for dedicated IP
          usage only**
        paramKey: ip
        in: query
        schema:
          type: string
        required: false
      - paramName: domain
        description: Filter your senders for a specific domain
        paramKey: domain
        in: query
        schema:
          type: string
        required: false
  - moduleName: Senders / Create
    method: post
    path: /senders
    description: Create a new sender
    externalDocs: ""
    params:
      - paramName: name
        description: From Name to use for the sender
        paramKey: name
        in: body
        schema:
          type: string
        required: true
      - paramName: email
        description: From email to use for the sender. A verification email will be sent
          to this address.
        paramKey: email
        in: body
        schema:
          type: string
        required: true
      - paramName: ips
        description: |
          **Mandatory in case of dedicated IP**. IPs to associate to the sender
        paramKey: ips
        in: body
        schema:
          type: array
          items:
            type: any
        required: false
    requestBodyType: json
  - moduleName: Senders / Update
    method: put
    path: /senders/{senderId}
    description: Update a sender
    externalDocs: ""
    params:
      - paramName: senderId
        description: Id of the sender
        paramKey: senderId
        in: path
        schema:
          type: number
        required: true
      - paramName: name
        description: From Name to update the sender
        paramKey: name
        in: body
        schema:
          type: string
        required: false
      - paramName: email
        description: From Email to update the sender
        paramKey: email
        in: body
        schema:
          type: string
        required: false
      - paramName: ips
        description: >
          **Only in case of dedicated IP**. IPs to associate to the sender. If
          passed, will replace all the existing IPs.
        paramKey: ips
        in: body
        schema:
          type: array
          items:
            type: any
        required: false
    requestBodyType: json
  - moduleName: Senders / Delete
    method: delete
    path: /senders/{senderId}
    description: Delete a sender
    externalDocs: ""
    params:
      - paramName: senderId
        description: Id of the sender
        paramKey: senderId
        in: path
        schema:
          type: number
        required: true
  - moduleName: Senders / Validate
    method: put
    path: /senders/{senderId}/validate
    description: Validate Sender using OTP
    externalDocs: ""
    params:
      - paramName: senderId
        description: Id of the sender
        paramKey: senderId
        in: path
        schema:
          type: number
        required: true
      - paramName: otp
        description: 6 digit OTP received on email
        paramKey: otp
        in: body
        schema:
          type: number
        required: true
    requestBodyType: json
  - moduleName: Senders / IPs / Get
    method: get
    path: /senders/{senderId}/ips
    description: Get all the dedicated IPs for a sender
    externalDocs: ""
    params:
      - paramName: senderId
        description: Id of the sender
        paramKey: senderId
        in: path
        schema:
          type: number
        required: true
  - moduleName: Senders / IPs / List
    method: get
    path: /senders/ips
    description: Get all the dedicated IPs for your account
    externalDocs: ""
    params: []
  - moduleName: Domains / List
    method: get
    path: /senders/domains
    description: Get the list of all your domains
    externalDocs: ""
    params: []
  - moduleName: Domains / Create
    method: post
    path: /senders/domains
    description: Create a new domain
    externalDocs: ""
    params:
      - paramName: name
        description: Domain name
        paramKey: name
        in: body
        schema:
          type: string
        required: true
    requestBodyType: json
  - moduleName: Domains / Delete
    method: delete
    path: /senders/domains/{domainName}
    description: Delete a domain
    externalDocs: ""
    params:
      - paramName: domainName
        description: Domain name
        paramKey: domainName
        in: path
        schema:
          type: string
        required: true
  - moduleName: Domains / Get
    method: get
    path: /senders/domains/{domainName}
    description: Validate domain configuration
    externalDocs: ""
    params:
      - paramName: domainName
        description: Domain name
        paramKey: domainName
        in: path
        schema:
          type: string
        required: true
  - moduleName: Domains / Authenticate
    method: put
    path: /senders/domains/{domainName}/authenticate
    description: Authenticate a domain
    externalDocs: ""
    params:
      - paramName: domainName
        description: Domain name
        paramKey: domainName
        in: path
        schema:
          type: string
        required: true
  - moduleName: Webhooks / List
    method: get
    path: /webhooks
    description: Get all webhooks
    externalDocs: ""
    params:
      - paramName: type
        description: Filter on webhook type
        paramKey: type
        in: query
        schema:
          type: string
          default: transactional
          enum:
            - marketing
            - transactional
            - inbound
        required: false
      - paramName: sort
        description: Sort the results in the ascending/descending order of webhook creation
        paramKey: sort
        in: query
        schema:
          type: string
          default: desc
          enum:
            - asc
            - desc
        required: false
  - moduleName: Webhooks / Create
    method: post
    path: /webhooks
    description: Create a webhook
    externalDocs: ""
    params:
      - paramName: url
        description: URL of the webhook
        paramKey: url
        in: body
        schema:
          type: string
        required: true
      - paramName: description
        description: Description of the webhook
        paramKey: description
        in: body
        schema:
          type: string
        required: false
      - paramName: events
        description: >
          - Events triggering the webhook. Possible values for **Transactional**
          type webhook:

          #### `sent` OR `request`, `delivered`, `hardBounce`, `softBounce`,
          `blocked`, `spam`, `invalid`, `deferred`, `click`, `opened`,
          `uniqueOpened` and `unsubscribed`

          - Possible values for **Marketing** type webhook:

          #### `spam`, `opened`, `click`, `hardBounce`, `softBounce`,
          `unsubscribed`, `listAddition` & `delivered`

          - Possible values for **Inbound** type webhook:

          #### `inboundEmailProcessed`
        paramKey: events
        in: body
        schema:
          type: array
          items:
            type: any
        required: true
      - paramName: type
        description: Type of the webhook
        paramKey: type
        in: body
        schema:
          type: string
          default: transactional
          enum:
            - transactional
            - marketing
            - inbound
        required: false
      - paramName: domain
        description: Inbound domain of webhook, required in case of event type `inbound`
        paramKey: domain
        in: body
        schema:
          type: string
        required: false
      - paramName: batched
        description: Batching configuration of the webhook, we send batched webhooks if
          its true
        paramKey: batched
        in: body
        schema:
          type: boolean
        required: false
      - paramName: auth
        description: Authentication header to be send with the webhook requests
        paramKey: auth
        in: body
        schema:
          type: any
        required: false
      - paramName: headers
        description: ""
        paramKey: headers
        in: body
        schema:
          type: array
          items:
            type: any
        required: false
    requestBodyType: json
  - moduleName: Webhooks / Get
    method: get
    path: /webhooks/{webhookId}
    description: Get a webhook details
    externalDocs: ""
    params:
      - paramName: webhookId
        description: Id of the webhook
        paramKey: webhookId
        in: path
        schema:
          type: number
        required: true
  - moduleName: Webhooks / Update
    method: put
    path: /webhooks/{webhookId}
    description: Update a webhook
    externalDocs: ""
    params:
      - paramName: webhookId
        description: Id of the webhook
        paramKey: webhookId
        in: path
        schema:
          type: number
        required: true
      - paramName: url
        description: URL of the webhook
        paramKey: url
        in: body
        schema:
          type: string
        required: false
      - paramName: description
        description: Description of the webhook
        paramKey: description
        in: body
        schema:
          type: string
        required: false
      - paramName: events
        description: >
          - Events triggering the webhook. Possible values for **Transactional**
          type webhook:

          #### `sent` OR `request`, `delivered`, `hardBounce`, `softBounce`,
          `blocked`, `spam`, `invalid`, `deferred`, `click`, `opened`,
          `uniqueOpened` and `unsubscribed`

          - Possible values for **Marketing** type webhook:

          #### `spam`, `opened`, `click`, `hardBounce`, `softBounce`,
          `unsubscribed`, `listAddition` & `delivered`

          - Possible values for **Inbound** type webhook:

          #### `inboundEmailProcessed`
        paramKey: events
        in: body
        schema:
          type: array
          items:
            type: any
        required: false
      - paramName: domain
        description: Inbound domain of webhook, used in case of event type `inbound`
        paramKey: domain
        in: body
        schema:
          type: string
        required: false
      - paramName: batched
        description: Batching configuration of the webhook, we send batched webhooks if
          its true
        paramKey: batched
        in: body
        schema:
          type: boolean
        required: false
      - paramName: auth
        description: Authentication header to be send with the webhook requests
        paramKey: auth
        in: body
        schema:
          type: any
        required: false
      - paramName: headers
        description: ""
        paramKey: headers
        in: body
        schema:
          type: array
          items:
            type: any
        required: false
    requestBodyType: json
  - moduleName: Webhooks / Delete
    method: delete
    path: /webhooks/{webhookId}
    description: Delete a webhook
    externalDocs: ""
    params:
      - paramName: webhookId
        description: Id of the webhook
        paramKey: webhookId
        in: path
        schema:
          type: number
        required: true
  - moduleName: Webhooks / Export History
    method: post
    path: /webhooks/export
    description: This endpoint will submit a request to get the history of webhooks
      in the CSV file. The link to download the CSV file will be sent to the
      webhook that was provided in the notifyURL.
    externalDocs: ""
    params:
      - paramName: requestBody
        paramKey: ""
        description: ""
        in: body_raw
        schema:
          type: any
        required: true
    requestBodyType: json
  - moduleName: Account / Get
    method: get
    path: /account
    description: Get your account information, plan and credits details
    externalDocs: ""
    params: []
  - moduleName: Account / Activity
    method: get
    path: /organization/activities
    description: Get user activity logs
    externalDocs: ""
    params:
      - paramName: startDate
        description: Mandatory if endDate is used. Enter start date in UTC date
          (YYYY-MM-DD) format to filter the activity in your account. Maximum
          time period that can be selected is one month. Additionally, you can
          retrieve activity logs from the past 12 months from the date of your
          search.
        paramKey: startDate
        in: query
        schema:
          type: string
        required: false
      - paramName: endDate
        description: Mandatory if startDate is used. Enter end date in UTC date
          (YYYY-MM-DD) format to filter the activity in your account. Maximum
          time period that can be selected is one month.
        paramKey: endDate
        in: query
        schema:
          type: string
        required: false
      - paramName: limit
        description: Number of documents per page
        paramKey: limit
        in: query
        schema:
          type: number
          minimum: 1
          maximum: 100
          default: 10
        required: false
      - paramName: offset
        description: Index of the first document in the page.
        paramKey: offset
        in: query
        schema:
          type: number
          default: 0
        required: false
  - moduleName: User / Invited List
    method: get
    path: /organization/invited/users
    description: Get the list of all your users
    externalDocs: ""
    params: []
  - moduleName: User / Permissions / Get
    method: get
    path: /organization/user/{email}/permissions
    description: Check user permission
    externalDocs: ""
    params:
      - paramName: email
        description: Email of the invited user.
        paramKey: email
        in: path
        schema:
          type: string
        required: true
  - moduleName: User / Revoke Permission
    method: put
    path: /organization/user/invitation/revoke/{email}
    description: Revoke user permission
    externalDocs: ""
    params:
      - paramName: email
        description: Email of the invited user.
        paramKey: email
        in: path
        schema:
          type: string
        required: true
  - moduleName: User / Resend Invitation
    method: put
    path: /organization/user/invitation/{action}/{email}
    description: Resend / Cancel invitation
    externalDocs: ""
    params:
      - paramName: action
        description: action
        paramKey: action
        in: path
        schema:
          type: string
          enum:
            - resend
            - cancel
        required: true
      - paramName: email
        description: Email of the invited user.
        paramKey: email
        in: path
        schema:
          type: string
        required: true
  - moduleName: User / Invite
    method: post
    path: /organization/user/invitation/send
    description: >
      `Feature` - A Feature represents a specific functionality like Email
      campaign, Deals, Calls, Automations, etc. on Brevo. While inviting a user,
      determine which feature you want to manage access to. You must specify the
      feature accurately to avoid errors.


      `Permission` - A Permission defines the level of access or control a user
      has over a specific feature. While inviting user, decide on the permission
      level required for the selected feature. Make sure the chosen permission
      is related to the selected feature.


      Features and their respective permissions are as below:


      - `email_campaigns`:
        - "create_edit_delete"
        - "send_schedule_suspend"
      - `sms_campaigns`:
        - "create_edit_delete"
        - "send_schedule_suspend"
      - `contacts`:
        - "view"
        - "create_edit_delete"
        - "import"
        - "export"
        - "list_and_attributes"
        - "forms"
      - `templates`:
        - "create_edit_delete"
        - "activate_deactivate"
      - `workflows`:
        - "create_edit_delete"
        - "activate_deactivate_pause"
        - "settings"
      - `facebook_ads`:
        - "create_edit_delete"
        - "schedule_pause"
      - `landing_pages`:
        - "all"
      - `transactional_emails`:
        - "settings"
        - "logs"
      - `smtp_api`:
        - "smtp"
        - "api_keys"
        - "authorized_ips"
      - `user_management`:
        - "all"
      - `sales_platform`:
        - "manage_owned_deals_tasks"
        - "manage_others_deals_tasks"
        - "reports"
        - "settings"
      - `phone`:
        - "all"
      - `conversations`:
        - "access"
        - "assign"
        - "configure"
      - `senders_domains_dedicated_ips`:
        - "senders_management"
        - "domains_management"
        - "dedicated_ips_management"
      - `push_notifications`:
        - "view"
        - "create_edit_delete"
        - "send"
        - "settings"
      - `companies`:
        - "manage_owned_companies"
        - "manage_other_companies"
        - "settings"

      **Note**:

      - If `all_features_access: false` then only privileges are required
      otherwise if `true` then it's assumed that all permissions will be there
      for the invited user.

      - The availability of feature and its permission depends on your current
      plan. Please select the features and permissions accordingly.
    externalDocs: ""
    params:
      - paramName: email
        description: Email address for the organization
        paramKey: email
        in: body
        schema:
          type: string
        required: true
      - paramName: allFeaturesAccess
        description: All access to the features
        paramKey: all_features_access
        in: body
        schema:
          type: boolean
        required: true
      - paramName: privileges
        description: ""
        paramKey: privileges
        in: body
        schema:
          type: array
          items:
            type: any
        required: true
    requestBodyType: json
  - moduleName: User / Update Permissions
    method: post
    path: /organization/user/update/permissions
    description: >
      `Feature` - A Feature represents a specific functionality like Email
      campaign, Deals, Calls, Automations, etc. on Brevo. While inviting a user,
      determine which feature you want to manage access to. You must specify the
      feature accurately to avoid errors.


      `Permission` - A Permission defines the level of access or control a user
      has over a specific feature. While inviting user, decide on the permission
      level required for the selected feature. Make sure the chosen permission
      is related to the selected feature.


      Features and their respective permissions are as below:


      - `email_campaigns`:
        - "create_edit_delete"
        - "send_schedule_suspend"
      - `sms_campaigns`:
        - "create_edit_delete"
        - "send_schedule_suspend"
      - `contacts`:
        - "view"
        - "create_edit_delete"
        - "import"
        - "export"
        - "list_and_attributes"
        - "forms"
      - `templates`:
        - "create_edit_delete"
        - "activate_deactivate"
      - `workflows`:
        - "create_edit_delete"
        - "activate_deactivate_pause"
        - "settings"
      - `facebook_ads`:
        - "create_edit_delete"
        - "schedule_pause"
      - `landing_pages`:
        - "all"
      - `transactional_emails`:
        - "settings"
        - "logs"
      - `smtp_api`:
        - "smtp"
        - "api_keys"
        - "authorized_ips"
      - `user_management`:
        - "all"
      - `sales_platform`:
        - "manage_owned_deals_tasks"
        - "manage_others_deals_tasks"
        - "reports"
        - "settings"
      - `phone`:
        - "all"
      - `conversations`:
        - "access"
        - "assign"
        - "configure"
      - `senders_domains_dedicated_ips`:
        - "senders_management"
        - "domains_management"
        - "dedicated_ips_management"
      - `push_notifications`:
        - "view"
        - "create_edit_delete"
        - "send"
        - "settings"
      - `companies`:
        - "manage_owned_companies"
        - "manage_other_companies"
        - "settings"

      **Note**:

      - The privileges array remains the same as in the send invitation; the
      user simply needs to provide the permissions that need to be updated.

      - The availability of feature and its permission depends on your current
      plan. Please select the features and permissions accordingly.
    externalDocs: ""
    params:
      - paramName: email
        description: Email address for the organization
        paramKey: email
        in: body
        schema:
          type: string
        required: true
      - paramName: allFeaturesAccess
        description: All access to the features
        paramKey: all_features_access
        in: body
        schema:
          type: boolean
        required: true
      - paramName: privileges
        description: ""
        paramKey: privileges
        in: body
        schema:
          type: array
          items:
            type: any
        required: true
    requestBodyType: json
  - moduleName: Process / List
    method: get
    path: /processes
    description: Return all the processes for your account
    externalDocs: ""
    params:
      - paramName: limit
        description: Number limitation for the result returned
        paramKey: limit
        in: query
        schema:
          type: number
          minimum: 0
          maximum: 50
          default: 10
        required: false
      - paramName: offset
        description: Beginning point in the list to retrieve from.
        paramKey: offset
        in: query
        schema:
          type: number
          default: 0
        required: false
      - paramName: sort
        description: Sort the results in the ascending/descending order of record
          creation. Default order is **descending** if `sort` is not passed
        paramKey: sort
        in: query
        schema:
          type: string
          default: desc
          enum:
            - asc
            - desc
        required: false
  - moduleName: Process / Get
    method: get
    path: /processes/{processId}
    description: Return the informations for a process
    externalDocs: ""
    params:
      - paramName: processId
        description: Id of the process
        paramKey: processId
        in: path
        schema:
          type: number
        required: true
  - moduleName: Inbound Parsing / Events / List
    method: get
    path: /inbound/events
    description: This endpoint will show the list of all the events for the received emails.
    externalDocs: ""
    params:
      - paramName: sender
        description: Email address of the sender.
        paramKey: sender
        in: query
        schema:
          type: string
        required: false
      - paramName: startDate
        description: Mandatory if endDate is used. Starting date (YYYY-MM-DD or
          YYYY-MM-DDTHH:mm:ss.SSSZ) from which you want to fetch the list.
          Maximum time period that can be selected is one month.
        paramKey: startDate
        in: query
        schema:
          type: string
        required: false
      - paramName: endDate
        description: Mandatory if startDate is used. Ending date (YYYY-MM-DD or
          YYYY-MM-DDTHH:mm:ss.SSSZ) till which you want to fetch the list.
          Maximum time period that can be selected is one month.
        paramKey: endDate
        in: query
        schema:
          type: string
        required: false
      - paramName: limit
        description: Number of documents returned per page
        paramKey: limit
        in: query
        schema:
          type: number
          minimum: 0
          maximum: 500
          default: 100
        required: false
      - paramName: offset
        description: Index of the first document on the page
        paramKey: offset
        in: query
        schema:
          type: number
          default: 0
        required: false
      - paramName: sort
        description: Sort the results in the ascending/descending order of record creation
        paramKey: sort
        in: query
        schema:
          type: string
          default: desc
          enum:
            - asc
            - desc
        required: false
  - moduleName: Inbound Parsing / Events / Get
    method: get
    path: /inbound/events/{uuid}
    description: This endpoint will show the list of all events history for one
      particular received email.
    externalDocs: ""
    params:
      - paramName: uuid
        description: UUID to fetch events specific to recieved email
        paramKey: uuid
        in: path
        schema:
          type: string
        required: true
  - moduleName: Inbound Parsing / Attachments / Get
    method: get
    path: /inbound/attachments/{downloadToken}
    description: This endpoint will retrieve inbound attachment with download token.
    externalDocs: ""
    params:
      - paramName: downloadToken
        description: Token to fetch a particular attachment
        paramKey: downloadToken
        in: path
        schema:
          type: string
        required: true
  - moduleName: Master Account / SubAccount / List
    method: get
    path: /corporate/subAccount
    description: This endpoint will provide the list all the sub-accounts of the
      master account.
    externalDocs: ""
    params:
      - paramName: offset
        description: Index of the first sub-account in the page
        paramKey: offset
        in: query
        schema:
          type: number
        required: true
      - paramName: limit
        description: Number of sub-accounts to be displayed on each page
        paramKey: limit
        in: query
        schema:
          type: number
        required: true
  - moduleName: Master Account / SubAccount / Create
    method: post
    path: /corporate/subAccount
    description: This endpoint will create a new sub-account under a master account
    externalDocs: ""
    params:
      - paramName: companyName
        description: Set the name of the sub-account company
        paramKey: companyName
        in: body
        schema:
          type: string
        required: true
        example:
          companyName: Test Sub-account
          email: test-sub@example.com
          timezone: Europe/Paris
          language: en
          groupIds:
            - 5f8f8c3b5f56a02d4433b3a7
            - 5f8f8c3b5f56a02d4433b3a8
      - paramName: email
        description: Email address for the organization
        paramKey: email
        in: body
        schema:
          type: string
        required: true
        example:
          companyName: Test Sub-account
          email: test-sub@example.com
          timezone: Europe/Paris
          language: en
          groupIds:
            - 5f8f8c3b5f56a02d4433b3a7
            - 5f8f8c3b5f56a02d4433b3a8
      - paramName: language
        description: Set the language of the sub-account
        paramKey: language
        in: body
        schema:
          type: string
          enum:
            - en
            - fr
            - it
            - es
            - pt
            - de
        required: false
        example:
          companyName: Test Sub-account
          email: test-sub@example.com
          timezone: Europe/Paris
          language: en
          groupIds:
            - 5f8f8c3b5f56a02d4433b3a7
            - 5f8f8c3b5f56a02d4433b3a8
      - paramName: timezone
        description: Set the timezone of the sub-account
        paramKey: timezone
        in: body
        schema:
          type: string
        required: false
        example:
          companyName: Test Sub-account
          email: test-sub@example.com
          timezone: Europe/Paris
          language: en
          groupIds:
            - 5f8f8c3b5f56a02d4433b3a7
            - 5f8f8c3b5f56a02d4433b3a8
      - paramName: groupIds
        description: Set the group(s) for the sub-account
        paramKey: groupIds
        in: body
        schema:
          type: array
          items:
            type: any
        required: false
        example:
          companyName: Test Sub-account
          email: test-sub@example.com
          timezone: Europe/Paris
          language: en
          groupIds:
            - 5f8f8c3b5f56a02d4433b3a7
            - 5f8f8c3b5f56a02d4433b3a8
    requestBodyType: json
  - moduleName: Master Account / SubAccount / Get
    method: get
    path: /corporate/subAccount/{id}
    description: This endpoint will provide the details for the specified
      sub-account company
    externalDocs: ""
    params:
      - paramName: id
        description: Id of the sub-account organization
        paramKey: id
        in: path
        schema:
          type: number
        required: true
  - moduleName: Master Account / SubAccount / Delete
    method: delete
    path: /corporate/subAccount/{id}
    description: Delete a sub-account
    externalDocs: ""
    params:
      - paramName: id
        description: Id of the sub-account organization to be deleted
        paramKey: id
        in: path
        schema:
          type: number
        required: true
  - moduleName: Master Account / SubAccount / Update Plan
    method: put
    path: /corporate/subAccount/{id}/plan
    description: This endpoint will update the sub-account plan. On the Corporate
      solution new version v2, you can set an unlimited number of credits in
      your sub-organization. Please pass the value â€œ-1" to set the consumable in
      unlimited mode.
    externalDocs: ""
    params:
      - paramName: id
        description: Id of the sub-account organization
        paramKey: id
        in: path
        schema:
          type: number
        required: true
      - paramName: credits
        description: Credit details to update
        paramKey: credits
        in: body
        schema:
          type: any
        required: false
        example:
          credits:
            email: 5000
            sms: 2000
            wpSubscribers: -1
          features:
            users: 15
            landingPage: 20
            inbox: 10
      - paramName: features
        description: Features details to update
        paramKey: features
        in: body
        schema:
          type: any
        required: false
        example:
          credits:
            email: 5000
            sms: 2000
            wpSubscribers: -1
          features:
            users: 15
            landingPage: 20
            inbox: 10
    requestBodyType: json
  - moduleName: Master Account / SSO Token / Create
    method: post
    path: /corporate/ssoToken
    description: This endpoint generates an SSO token to authenticate and access the
      admin account using the endpoint
      https://account-app.brevo.com/account/login/corporate/sso/[token], where
      [token] will be replaced by the actual token.
    externalDocs: ""
    params:
      - paramName: email
        description: User email of admin account
        paramKey: email
        in: body
        schema:
          type: string
        required: true
    requestBodyType: json
  - moduleName: Master Account / SubAccount / SSO Token / Create
    method: post
    path: /corporate/subAccount/ssoToken
    description: This endpoint generates an sso token to authenticate and access a
      sub-account of the master using the account endpoint
      https://account-app.brevo.com/account/login/sub-account/sso/[token], where
      [token] will be replaced by the actual token.
    externalDocs: ""
    params:
      - paramName: id
        description: Id of the sub-account organization
        paramKey: id
        in: body
        schema:
          type: number
        required: true
      - paramName: email
        description: User email of sub-account organization
        paramKey: email
        in: body
        schema:
          type: string
        required: false
      - paramName: target
        description: >
          **Set target after login success**

          * **automation** - Redirect to Automation after login

          * **email_campaign** - Redirect to Email Campaign after login

          * **contacts** - Redirect to Contacts after login

          * **landing_pages** - Redirect to Landing Pages after login

          * **email_transactional** - Redirect to Email Transactional after
          login

          * **senders** - Redirect to Senders after login

          * **sms_campaign** - Redirect to Sms Campaign after login

          * **sms_transactional** - Redirect to Sms Transactional after login
        paramKey: target
        in: body
        schema:
          type: string
          enum:
            - automation
            - email_campaign
            - contacts
            - landing_pages
            - email_transactional
            - senders
            - sms_campaign
            - sms_transactional
        required: false
      - paramName: url
        description: Set the full target URL after login success. The user will land
          directly on this target URL after login
        paramKey: url
        in: body
        schema:
          type: string
        required: false
    requestBodyType: json
  - moduleName: Master Account / Get
    method: get
    path: /corporate/masterAccount
    description: This endpoint will provide the details of the master account.
    externalDocs: ""
    params: []
  - moduleName: Master Account / SubAccount Key / Create
    method: post
    path: /corporate/subAccount/key
    description: This endpoint will generate an API v3 key for a sub account
    externalDocs: ""
    params:
      - paramName: id
        description: Id of the sub-account organization
        paramKey: id
        in: body
        schema:
          type: number
        required: true
      - paramName: name
        description: Name of the API key
        paramKey: name
        in: body
        schema:
          type: string
        required: true
    requestBodyType: json
  - moduleName: Master Account / SubAccount Applications / Toggle
    method: put
    path: /corporate/subAccount/{id}/applications/toggle
    description: API endpoints for the Corporate owner to enable/disable
      applications on the sub-account
    externalDocs: ""
    params:
      - paramName: id
        description: Id of the sub-account organization (mandatory)
        paramKey: id
        in: path
        schema:
          type: number
        required: true
      - paramName: inbox
        description: Set this field to enable or disable Inbox on the sub-account / Not
          applicable on ENTv2
        paramKey: inbox
        in: body
        schema:
          type: boolean
        required: false
        example:
          landing-pages: true
          sms-campaigns: false
          whatsapp: true
          meetings: true
          web-push: false
      - paramName: whatsapp
        description: Set this field to enable or disable Whatsapp campaigns on the
          sub-account
        paramKey: whatsapp
        in: body
        schema:
          type: boolean
        required: false
        example:
          landing-pages: true
          sms-campaigns: false
          whatsapp: true
          meetings: true
          web-push: false
      - paramName: automation
        description: Set this field to enable or disable Automation on the sub-account
        paramKey: automation
        in: body
        schema:
          type: boolean
        required: false
        example:
          landing-pages: true
          sms-campaigns: false
          whatsapp: true
          meetings: true
          web-push: false
      - paramName: emailCampaigns
        description: Set this field to enable or disable Email Campaigns on the sub-account
        paramKey: email-campaigns
        in: body
        schema:
          type: boolean
        required: false
        example:
          landing-pages: true
          sms-campaigns: false
          whatsapp: true
          meetings: true
          web-push: false
      - paramName: smsCampaigns
        description: Set this field to enable or disable SMS Marketing on the sub-account
        paramKey: sms-campaigns
        in: body
        schema:
          type: boolean
        required: false
        example:
          landing-pages: true
          sms-campaigns: false
          whatsapp: true
          meetings: true
          web-push: false
      - paramName: landingPages
        description: Set this field to enable or disable Landing pages on the sub-account
        paramKey: landing-pages
        in: body
        schema:
          type: boolean
        required: false
        example:
          landing-pages: true
          sms-campaigns: false
          whatsapp: true
          meetings: true
          web-push: false
      - paramName: transactionalEmails
        description: Set this field to enable or disable Transactional Email on the
          sub-account
        paramKey: transactional-emails
        in: body
        schema:
          type: boolean
        required: false
        example:
          landing-pages: true
          sms-campaigns: false
          whatsapp: true
          meetings: true
          web-push: false
      - paramName: transactionalSms
        description: Set this field to enable or disable Transactional SMS on the
          sub-account
        paramKey: transactional-sms
        in: body
        schema:
          type: boolean
        required: false
        example:
          landing-pages: true
          sms-campaigns: false
          whatsapp: true
          meetings: true
          web-push: false
      - paramName: facebookAds
        description: Set this field to enable or disable Facebook ads on the sub-account
        paramKey: facebook-ads
        in: body
        schema:
          type: boolean
        required: false
        example:
          landing-pages: true
          sms-campaigns: false
          whatsapp: true
          meetings: true
          web-push: false
      - paramName: webPush
        description: Set this field to enable or disable Web Push on the sub-account
        paramKey: web-push
        in: body
        schema:
          type: boolean
        required: false
        example:
          landing-pages: true
          sms-campaigns: false
          whatsapp: true
          meetings: true
          web-push: false
      - paramName: meetings
        description: Set this field to enable or disable Meetings on the sub-account
        paramKey: meetings
        in: body
        schema:
          type: boolean
        required: false
        example:
          landing-pages: true
          sms-campaigns: false
          whatsapp: true
          meetings: true
          web-push: false
      - paramName: conversations
        description: Set this field to enable or disable Conversations on the sub-account
        paramKey: conversations
        in: body
        schema:
          type: boolean
        required: false
        example:
          landing-pages: true
          sms-campaigns: false
          whatsapp: true
          meetings: true
          web-push: false
      - paramName: crm
        description: Set this field to enable or disable Sales CRM on the sub-account
        paramKey: crm
        in: body
        schema:
          type: boolean
        required: false
        example:
          landing-pages: true
          sms-campaigns: false
          whatsapp: true
          meetings: true
          web-push: false
    requestBodyType: json
  - moduleName: Master Account / Group / Create
    method: post
    path: /corporate/group
    description: This endpoint allows to create a group of sub-accounts
    externalDocs: ""
    params:
      - paramName: groupName
        description: The name of the group of sub-accounts
        paramKey: groupName
        in: body
        schema:
          type: string
        required: true
      - paramName: subAccountIds
        description: Pass the list of sub-account Ids to be included in the group
        paramKey: subAccountIds
        in: body
        schema:
          type: array
          items:
            type: any
        required: false
    requestBodyType: json
  - moduleName: Master Account / SubAccount IP / Associate
    method: post
    path: /corporate/subAccount/ip/associate
    description: This endpoint allows to associate an IP to sub-accounts
    externalDocs: ""
    params:
      - paramName: ip
        description: IP address
        paramKey: ip
        in: body
        schema:
          type: string
        required: true
      - paramName: ids
        description: Pass the list of sub-account Ids to be associated with the IP address
        paramKey: ids
        in: body
        schema:
          type: array
          items:
            type: any
        required: true
    requestBodyType: json
  - moduleName: Master Account / SubAccount IP / Dissociate
    method: put
    path: /corporate/subAccount/ip/dissociate
    description: This endpoint allows to dissociate an IP from sub-accounts
    externalDocs: ""
    params:
      - paramName: ip
        description: IP address
        paramKey: ip
        in: body
        schema:
          type: string
        required: true
      - paramName: ids
        description: Pass the list of sub-account Ids to be dissociated from the IP address
        paramKey: ids
        in: body
        schema:
          type: array
          items:
            type: any
        required: true
    requestBodyType: json
  - moduleName: Master Account / Group / Get
    method: get
    path: /corporate/group/{id}
    description: This endpoint allows you to retrieve a specific groupâ€™s information
      such as the list of sub-organizations and the user associated with the
      group.
    externalDocs: ""
    params:
      - paramName: id
        description: Id of the group of sub-organization
        paramKey: id
        in: path
        schema:
          type: string
        required: true
  - moduleName: Master Account / Group / Update
    method: put
    path: /corporate/group/{id}
    description: This endpoint allows to update a group of sub-accounts
    externalDocs: ""
    params:
      - paramName: id
        description: Id of the group
        paramKey: id
        in: path
        schema:
          type: string
        required: true
      - paramName: groupName
        description: The name of the group of sub-accounts
        paramKey: groupName
        in: body
        schema:
          type: string
        required: false
      - paramName: subAccountIds
        description: Pass the list of sub-account Ids to be included in the group
        paramKey: subAccountIds
        in: body
        schema:
          type: array
          items:
            type: any
        required: false
    requestBodyType: json
  - moduleName: Master Account / Group / Delete
    method: delete
    path: /corporate/group/{id}
    description: This endpoint allows you to delete a group of sub-organizations.
      When a group is deleted, the sub-organizations are no longer part of this
      group. The users associated with the group are no longer associated with
      the group once deleted.
    externalDocs: ""
    params:
      - paramName: id
        description: Id of the group
        paramKey: id
        in: path
        schema:
          type: string
        required: true
  - moduleName: Master Account / Group Unlink / SubAccounts
    method: put
    path: /corporate/group/unlink/{groupId}/subAccounts
    description: This endpoint allows you to remove a sub-organization from a group.
    externalDocs: ""
    params:
      - paramName: groupId
        description: Group id
        paramKey: groupId
        in: path
        schema:
          type: string
        required: true
      - paramName: subAccountIds
        description: List of sub-account ids
        paramKey: subAccountIds
        in: body
        schema:
          type: array
          items:
            type: any
        required: true
    requestBodyType: json
  - moduleName: Master Account / User Invitation / Send
    method: post
    path: /corporate/user/invitation/send
    description: >
      `This endpoint allows you to invite a member to manage the Admin account


      Features and their respective permissions are as below:


      - `my_plan`:
        - "all"
      - `api`:
        - "none"
      - `user_management`:
        - "all"
      - `app_management` | Not available in ENTv2:
        - "all"
      - `sub_organization_groups`
        - "create"
        - "edit_delete"
      - `create_sub_organizations`
        - "all"
      - `manage_sub_organizations`
        - "all"
      - `analytics`
        - "download_data"
        - "create_alerts"
      - `security`
        - "all"

      **Note**:

      - If `all_features_access: false` then only privileges are required
      otherwise if `true` then it's assumed that all permissions will be there
      for the invited admin user.
    externalDocs: ""
    params:
      - paramName: email
        description: Email address for the organization
        paramKey: email
        in: body
        schema:
          type: string
        required: true
      - paramName: allFeaturesAccess
        description: All access to the features
        paramKey: all_features_access
        in: body
        schema:
          type: boolean
        required: true
      - paramName: groupIds
        description: Ids of Group
        paramKey: groupIds
        in: body
        schema:
          type: array
          items:
            type: any
        required: false
      - paramName: privileges
        description: ""
        paramKey: privileges
        in: body
        schema:
          type: array
          items:
            type: any
        required: true
    requestBodyType: json
  - moduleName: Master Account / User Invitation / Update
    method: put
    path: /corporate/user/invitation/{action}/{email}
    description: |
      This endpoint will allow the user to:
      - Resend an admin user invitation
      - Cancel an admin user invitation
    externalDocs: ""
    params:
      - paramName: action
        description: Action to be performed (cancel / resend)
        paramKey: action
        in: path
        schema:
          type: string
          enum:
            - resend
            - cancel
        required: true
      - paramName: email
        description: Email address of the recipient
        paramKey: email
        in: path
        schema:
          type: string
        required: true
  - moduleName: Master Account / User Revoke
    method: delete
    path: /corporate/user/revoke/{email}
    description: This endpoint allows to revoke/remove an invited member of your
      Admin account
    externalDocs: ""
    params:
      - paramName: email
        description: Email of the invited user
        paramKey: email
        in: path
        schema:
          type: string
        required: true
  - moduleName: Master Account / Invited Users / List
    method: get
    path: /corporate/invited/users
    description: This endpoint allows you to list all Admin users of your Admin account
    externalDocs: ""
    params: []
  - moduleName: Master Account / User Permissions / Get
    method: get
    path: /corporate/user/{email}/permissions
    description: Check admin user permissions
    externalDocs: ""
    params:
      - paramName: email
        description: Email of the invited user.
        paramKey: email
        in: path
        schema:
          type: string
        required: true
  - moduleName: Master Account / SubAccount Groups / List
    method: get
    path: /corporate/groups
    description: This endpoint allows you to list all groups created on your Admin account.
    externalDocs: ""
    params: []
  - moduleName: Companies / List
    method: get
    path: /companies
    description: Get all Companies
    externalDocs: ""
    params:
      - paramName: filters
        description: Filter by attrbutes. If you have filter for owner on your side
          please send it as {"attributes.owner":"6299dcf3874a14eacbc65c46"}
        paramKey: filters
        in: query
        schema:
          type: string
        required: false
      - paramName: linkedContactsIds
        description: Filter by linked contacts ids
        paramKey: linkedContactsIds
        in: query
        schema:
          type: number
        required: false
      - paramName: linkedDealsIds
        description: Filter by linked Deals ids
        paramKey: linkedDealsIds
        in: query
        schema:
          type: string
        required: false
      - paramName: page
        description: Index of the first document of the page
        paramKey: page
        in: query
        schema:
          type: number
        required: false
      - paramName: limit
        description: Number of documents per page
        paramKey: limit
        in: query
        schema:
          type: number
        required: false
      - paramName: sort
        description: Sort the results in the ascending/descending order. Default order
          is **descending** by creation if `sort` is not passed
        paramKey: sort
        in: query
        schema:
          type: string
          enum:
            - asc
            - desc
        required: false
      - paramName: sortBy
        description: The field used to sort field names.
        paramKey: sortBy
        in: query
        schema:
          type: string
        required: false
  - moduleName: Companies / Create
    method: post
    path: /companies
    description: Create a company
    externalDocs: ""
    params:
      - paramName: name
        description: Name of company
        paramKey: name
        in: body
        schema:
          type: string
        required: true
      - paramName: attributes
        description: Attributes for company creation
        paramKey: attributes
        in: body
        schema:
          type: any
        required: false
      - paramName: countryCode
        description: Country code if phone_number is passed in attributes.
        paramKey: countryCode
        in: body
        schema:
          type: number
        required: false
      - paramName: linkedContactsIds
        description: Contact ids to be linked with company
        paramKey: linkedContactsIds
        in: body
        schema:
          type: array
          items:
            type: any
        required: false
      - paramName: linkedDealsIds
        description: Deal ids to be linked with company
        paramKey: linkedDealsIds
        in: body
        schema:
          type: array
          items:
            type: any
        required: false
    requestBodyType: json
  - moduleName: Companies / Get
    method: get
    path: /companies/{id}
    description: Get a company
    externalDocs: ""
    params:
      - paramName: id
        description: Get Company Details
        paramKey: id
        in: path
        schema:
          type: string
        required: true
  - moduleName: Companies / Delete
    method: delete
    path: /companies/{id}
    description: Delete a company
    externalDocs: ""
    params:
      - paramName: id
        description: Company ID to delete
        paramKey: id
        in: path
        schema:
          type: string
        required: true
  - moduleName: Companies / Update
    method: patch
    path: /companies/{id}
    description: Update a company
    externalDocs: ""
    params:
      - paramName: id
        description: ""
        paramKey: id
        in: path
        schema:
          type: string
        required: true
      - paramName: name
        description: Name of company
        paramKey: name
        in: body
        schema:
          type: string
        required: false
      - paramName: attributes
        description: Attributes for company update
        paramKey: attributes
        in: body
        schema:
          type: any
        required: false
      - paramName: countryCode
        description: Country code if phone_number is passed in attributes.
        paramKey: countryCode
        in: body
        schema:
          type: number
        required: false
    requestBodyType: json
  - moduleName: Companies / Attributes / List
    method: get
    path: /companies/attributes
    description: Get company attributes
    externalDocs: ""
    params: []
  - moduleName: Companies / Link-Unlink
    method: patch
    path: /companies/link-unlink/{id}
    description: Link and Unlink company with contact and deal
    externalDocs: ""
    params:
      - paramName: id
        description: ""
        paramKey: id
        in: path
        schema:
          type: string
        required: true
      - paramName: linkContactIds
        description: Contact ids for contacts to be linked with company
        paramKey: linkContactIds
        in: body
        schema:
          type: array
          items:
            type: any
        required: false
      - paramName: unlinkContactIds
        description: Contact ids for contacts to be unlinked from company
        paramKey: unlinkContactIds
        in: body
        schema:
          type: array
          items:
            type: any
        required: false
      - paramName: linkDealsIds
        description: Deal ids for deals to be linked with company
        paramKey: linkDealsIds
        in: body
        schema:
          type: array
          items:
            type: any
        required: false
      - paramName: unlinkDealsIds
        description: Deal ids for deals to be unlinked from company
        paramKey: unlinkDealsIds
        in: body
        schema:
          type: array
          items:
            type: any
        required: false
    requestBodyType: json
  - moduleName: Companies / Import
    method: post
    path: /companies/import
    description: Import companies from a CSV file with mapping options.
    externalDocs: ""
    params: []
  - moduleName: Deals / Pipeline / Get
    method: get
    path: /crm/pipeline/details
    description: This endpoint is deprecated. Prefer
      /crm/pipeline/details/{pipelineID} instead.
    externalDocs: ""
    params: []
  - moduleName: Deals / Pipeline / Get By ID
    method: get
    path: /crm/pipeline/details/{pipelineID}
    description: Get a pipeline
    externalDocs: ""
    params:
      - paramName: pipelineId
        description: ""
        paramKey: pipelineID
        in: path
        schema:
          type: string
        required: true
  - moduleName: Deals / Pipeline / All
    method: get
    path: /crm/pipeline/details/all
    description: Get all pipelines
    externalDocs: ""
    params: []
  - moduleName: Deals / Attributes
    method: get
    path: /crm/attributes/deals
    description: Get deal attributes
    externalDocs: ""
    params: []
  - moduleName: Deals / List
    method: get
    path: /crm/deals
    description: Get all deals
    externalDocs: ""
    params:
      - paramName: filters[attributesDealName]
        description: Filter by attributes. If you have a filter for the owner on your
          end, please send it as filters[attributes.deal_owner] and utilize the
          account email for the filtering.
        paramKey: filters[attributes.deal_name]
        in: query
        schema:
          type: string
        required: false
      - paramName: filters[linkedCompaniesIds]
        description: Filter by linked companies ids
        paramKey: filters[linkedCompaniesIds]
        in: query
        schema:
          type: string
        required: false
      - paramName: filters[linkedContactsIds]
        description: Filter by linked companies ids
        paramKey: filters[linkedContactsIds]
        in: query
        schema:
          type: string
        required: false
      - paramName: offset
        description: Index of the first document of the page
        paramKey: offset
        in: query
        schema:
          type: number
        required: false
      - paramName: limit
        description: Number of documents per page
        paramKey: limit
        in: query
        schema:
          type: number
        required: false
      - paramName: sort
        description: Sort the results in the ascending/descending order. Default order
          is **descending** by creation if `sort` is not passed
        paramKey: sort
        in: query
        schema:
          type: string
          enum:
            - asc
            - desc
        required: false
  - moduleName: Deals / Create
    method: post
    path: /crm/deals
    description: Create a deal
    externalDocs: ""
    params:
      - paramName: name
        description: Name of deal
        paramKey: name
        in: body
        schema:
          type: string
        required: true
      - paramName: attributes
        description: >
          Attributes for deal creation


          To assign owner of a Deal you can send attributes.deal_owner and
          utilize the account email or ID.


          If you want to create a deal on a specific pipeline and stage you can
          use the following attributes `pipeline` and `deal_stage`.


          Pipeline and deal_stage are ids you can fetch using this endpoint
          `/crm/pipeline/details/{pipelineID}`
        paramKey: attributes
        in: body
        schema:
          type: any
        required: false
      - paramName: linkedContactsIds
        description: Contact ids to be linked with deal
        paramKey: linkedContactsIds
        in: body
        schema:
          type: array
          items:
            type: any
        required: false
      - paramName: linkedCompaniesIds
        description: Company ids to be linked with deal
        paramKey: linkedCompaniesIds
        in: body
        schema:
          type: array
          items:
            type: any
        required: false
    requestBodyType: json
  - moduleName: Deals / Get
    method: get
    path: /crm/deals/{id}
    description: Get a deal
    externalDocs: ""
    params:
      - paramName: id
        description: ""
        paramKey: id
        in: path
        schema:
          type: string
        required: true
  - moduleName: Deals / Delete
    method: delete
    path: /crm/deals/{id}
    description: Delete a deal
    externalDocs: ""
    params:
      - paramName: id
        description: ""
        paramKey: id
        in: path
        schema:
          type: string
        required: true
  - moduleName: Deals / Update
    method: patch
    path: /crm/deals/{id}
    description: Update a deal
    externalDocs: ""
    params:
      - paramName: id
        description: ""
        paramKey: id
        in: path
        schema:
          type: string
        required: true
      - paramName: name
        description: Name of deal
        paramKey: name
        in: body
        schema:
          type: string
        required: false
      - paramName: attributes
        description: >
          Attributes for deal update


          To assign owner of a Deal you can send attributes.deal_owner and
          utilize the account email or ID.


          If you wish to update the pipeline of a deal you need to provide the
          `pipeline` and the `deal_stage`


          Pipeline and deal_stage are ids you can fetch using this endpoint
          `/crm/pipeline/details/{pipelineID}`
        paramKey: attributes
        in: body
        schema:
          type: any
        required: false
    requestBodyType: json
  - moduleName: Deals / Link-Unlink
    method: patch
    path: /crm/deals/link-unlink/{id}
    description: Link and Unlink a deal with contacts and companies
    externalDocs: ""
    params:
      - paramName: id
        description: ""
        paramKey: id
        in: path
        schema:
          type: string
        required: true
      - paramName: linkContactIds
        description: Contact ids for contacts to be linked with deal
        paramKey: linkContactIds
        in: body
        schema:
          type: array
          items:
            type: any
        required: false
      - paramName: unlinkContactIds
        description: Contact ids for contacts to be unlinked from deal
        paramKey: unlinkContactIds
        in: body
        schema:
          type: array
          items:
            type: any
        required: false
      - paramName: linkCompanyIds
        description: Company ids to be linked with deal
        paramKey: linkCompanyIds
        in: body
        schema:
          type: array
          items:
            type: any
        required: false
      - paramName: unlinkCompanyIds
        description: Company ids to be unlinked from deal
        paramKey: unlinkCompanyIds
        in: body
        schema:
          type: array
          items:
            type: any
        required: false
    requestBodyType: json
  - moduleName: Deals / Import
    method: post
    path: /crm/deals/import
    description: Import deals from a CSV file with mapping options.
    externalDocs: ""
    params: []
  - moduleName: Tasks / Types
    method: get
    path: /crm/tasktypes
    description: Get all task types
    externalDocs: ""
    params: []
  - moduleName: Tasks / List
    method: get
    path: /crm/tasks
    description: Get all tasks
    externalDocs: ""
    params:
      - paramName: filter[type]
        description: Filter by task type (ID)
        paramKey: filter[type]
        in: query
        schema:
          type: string
        required: false
      - paramName: filter[status]
        description: Filter by task status
        paramKey: filter[status]
        in: query
        schema:
          type: string
          enum:
            - done
            - undone
        required: false
      - paramName: filter[date]
        description: Filter by date
        paramKey: filter[date]
        in: query
        schema:
          type: string
          enum:
            - overdue
            - today
            - tomorrow
            - week
            - range
        required: false
      - paramName: filter[assignTo]
        description: Filter by the "assignTo" ID. You can utilize account emails for the
          "assignTo" attribute.
        paramKey: filter[assignTo]
        in: query
        schema:
          type: string
        required: false
      - paramName: filter[contacts]
        description: Filter by contact ids
        paramKey: filter[contacts]
        in: query
        schema:
          type: string
        required: false
      - paramName: filter[deals]
        description: Filter by deals ids
        paramKey: filter[deals]
        in: query
        schema:
          type: string
        required: false
      - paramName: filter[companies]
        description: Filter by companies ids
        paramKey: filter[companies]
        in: query
        schema:
          type: string
        required: false
      - paramName: dateFrom
        description: dateFrom to date range filter type (timestamp in milliseconds)
        paramKey: dateFrom
        in: query
        schema:
          type: number
        required: false
      - paramName: dateTo
        description: dateTo to date range filter type (timestamp in milliseconds)
        paramKey: dateTo
        in: query
        schema:
          type: number
        required: false
      - paramName: offset
        description: Index of the first document of the page
        paramKey: offset
        in: query
        schema:
          type: number
        required: false
      - paramName: limit
        description: Number of documents per page
        paramKey: limit
        in: query
        schema:
          type: number
          default: 50
        required: false
      - paramName: sort
        description: Sort the results in the ascending/descending order. Default order
          is **descending** by creation if `sort` is not passed
        paramKey: sort
        in: query
        schema:
          type: string
          enum:
            - asc
            - desc
        required: false
      - paramName: sortBy
        description: The field used to sort field names.
        paramKey: sortBy
        in: query
        schema:
          type: string
        required: false
  - moduleName: Tasks / Create
    method: post
    path: /crm/tasks
    description: Create a task
    externalDocs: ""
    params:
      - paramName: name
        description: Name of task
        paramKey: name
        in: body
        schema:
          type: string
        required: true
      - paramName: duration
        description: Duration of task in milliseconds [1 minute = 60000 ms]
        paramKey: duration
        in: body
        schema:
          type: number
          minimum: 0
        required: false
      - paramName: taskTypeId
        description: Id for type of task e.g Call / Email / Meeting etc.
        paramKey: taskTypeId
        in: body
        schema:
          type: string
        required: true
      - paramName: date
        description: Task due date and time
        paramKey: date
        in: body
        schema:
          type: string
        required: true
      - paramName: notes
        description: Notes added to a task
        paramKey: notes
        in: body
        schema:
          type: string
        required: false
      - paramName: done
        description: Task marked as done
        paramKey: done
        in: body
        schema:
          type: boolean
        required: false
      - paramName: assignToId
        description: To assign a task to a user you can use either the account email or ID.
        paramKey: assignToId
        in: body
        schema:
          type: string
        required: false
      - paramName: contactsIds
        description: Contact ids for contacts linked to this task
        paramKey: contactsIds
        in: body
        schema:
          type: array
          items:
            type: any
        required: false
      - paramName: dealsIds
        description: Deal ids for deals a task is linked to
        paramKey: dealsIds
        in: body
        schema:
          type: array
          items:
            type: any
        required: false
      - paramName: companiesIds
        description: Companies ids for companies a task is linked to
        paramKey: companiesIds
        in: body
        schema:
          type: array
          items:
            type: any
        required: false
      - paramName: reminder
        description: Task reminder date/time for a task
        paramKey: reminder
        in: body
        schema:
          type: any
        required: false
    requestBodyType: json
  - moduleName: Tasks / Get
    method: get
    path: /crm/tasks/{id}
    description: Get a task
    externalDocs: ""
    params:
      - paramName: id
        description: ""
        paramKey: id
        in: path
        schema:
          type: string
        required: true
  - moduleName: Tasks / Delete
    method: delete
    path: /crm/tasks/{id}
    description: Delete a task
    externalDocs: ""
    params:
      - paramName: id
        description: ""
        paramKey: id
        in: path
        schema:
          type: string
        required: true
  - moduleName: Tasks / Update
    method: patch
    path: /crm/tasks/{id}
    description: Update a task
    externalDocs: ""
    params:
      - paramName: id
        description: ""
        paramKey: id
        in: path
        schema:
          type: string
        required: true
      - paramName: name
        description: Name of task
        paramKey: name
        in: body
        schema:
          type: string
        required: false
      - paramName: duration
        description: Duration of task in milliseconds [1 minute = 60000 ms]
        paramKey: duration
        in: body
        schema:
          type: number
        required: false
      - paramName: taskTypeId
        description: Id for type of task e.g Call / Email / Meeting etc.
        paramKey: taskTypeId
        in: body
        schema:
          type: string
        required: false
      - paramName: date
        description: Task date/time
        paramKey: date
        in: body
        schema:
          type: string
        required: false
      - paramName: notes
        description: Notes added to a task
        paramKey: notes
        in: body
        schema:
          type: string
        required: false
      - paramName: done
        description: Task marked as done
        paramKey: done
        in: body
        schema:
          type: boolean
        required: false
      - paramName: assignToId
        description: To assign a task to a user you can use either the account email or ID.
        paramKey: assignToId
        in: body
        schema:
          type: string
        required: false
      - paramName: contactsIds
        description: Contact ids for contacts linked to this task
        paramKey: contactsIds
        in: body
        schema:
          type: array
          items:
            type: any
        required: false
      - paramName: dealsIds
        description: Deal ids for deals a task is linked to
        paramKey: dealsIds
        in: body
        schema:
          type: array
          items:
            type: any
        required: false
      - paramName: companiesIds
        description: Companies ids for companies a task is linked to
        paramKey: companiesIds
        in: body
        schema:
          type: array
          items:
            type: any
        required: false
      - paramName: reminder
        description: Task reminder date/time for a task
        paramKey: reminder
        in: body
        schema:
          type: any
        required: false
    requestBodyType: json
  - moduleName: Notes / List
    method: get
    path: /crm/notes
    description: Get all notes
    externalDocs: ""
    params:
      - paramName: entity
        description: Filter by note entity type
        paramKey: entity
        in: query
        schema:
          type: string
          enum:
            - companies
            - deals
            - contacts
        required: false
      - paramName: entityIds
        description: Filter by note entity IDs
        paramKey: entityIds
        in: query
        schema:
          type: string
        required: false
      - paramName: dateFrom
        description: dateFrom to date range filter type (timestamp in milliseconds)
        paramKey: dateFrom
        in: query
        schema:
          type: number
        required: false
      - paramName: dateTo
        description: dateTo to date range filter type (timestamp in milliseconds)
        paramKey: dateTo
        in: query
        schema:
          type: number
        required: false
      - paramName: offset
        description: Index of the first document of the page
        paramKey: offset
        in: query
        schema:
          type: number
        required: false
      - paramName: limit
        description: Number of documents per page
        paramKey: limit
        in: query
        schema:
          type: number
          default: 50
        required: false
      - paramName: sort
        description: Sort the results in the ascending/descending order. Default order
          is **descending** by creation if `sort` is not passed
        paramKey: sort
        in: query
        schema:
          type: string
          enum:
            - asc
            - desc
        required: false
  - moduleName: Notes / Create
    method: post
    path: /crm/notes
    description: Create a note
    externalDocs: ""
    params:
      - paramName: text
        description: Text content of a note
        paramKey: text
        in: body
        schema:
          type: string
        required: true
      - paramName: contactIds
        description: Contact Ids linked to a note
        paramKey: contactIds
        in: body
        schema:
          type: array
          items:
            type: any
        required: false
      - paramName: dealIds
        description: Deal Ids linked to a note
        paramKey: dealIds
        in: body
        schema:
          type: array
          items:
            type: any
        required: false
      - paramName: companyIds
        description: Company Ids linked to a note
        paramKey: companyIds
        in: body
        schema:
          type: array
          items:
            type: any
        required: false
    requestBodyType: json
  - moduleName: Notes / Get
    method: get
    path: /crm/notes/{id}
    description: Get a note
    externalDocs: ""
    params:
      - paramName: id
        description: Note ID to get
        paramKey: id
        in: path
        schema:
          type: string
        required: true
  - moduleName: Notes / Update
    method: patch
    path: /crm/notes/{id}
    description: Update a note
    externalDocs: ""
    params:
      - paramName: id
        description: Note ID to update
        paramKey: id
        in: path
        schema:
          type: string
        required: true
      - paramName: text
        description: Text content of a note
        paramKey: text
        in: body
        schema:
          type: string
        required: true
      - paramName: contactIds
        description: Contact Ids linked to a note
        paramKey: contactIds
        in: body
        schema:
          type: array
          items:
            type: any
        required: false
      - paramName: dealIds
        description: Deal Ids linked to a note
        paramKey: dealIds
        in: body
        schema:
          type: array
          items:
            type: any
        required: false
      - paramName: companyIds
        description: Company Ids linked to a note
        paramKey: companyIds
        in: body
        schema:
          type: array
          items:
            type: any
        required: false
    requestBodyType: json
  - moduleName: Notes / Delete
    method: delete
    path: /crm/notes/{id}
    description: Delete a note
    externalDocs: ""
    params:
      - paramName: id
        description: Note ID to delete
        paramKey: id
        in: path
        schema:
          type: string
        required: true
  - moduleName: Files / List
    method: get
    path: /crm/files
    description: Get all files
    externalDocs: ""
    params:
      - paramName: entity
        description: Filter by file entity type
        paramKey: entity
        in: query
        schema:
          type: string
          enum:
            - companies
            - deals
            - contacts
        required: false
      - paramName: entityIds
        description: Filter by file entity IDs
        paramKey: entityIds
        in: query
        schema:
          type: string
        required: false
      - paramName: dateFrom
        description: dateFrom to date range filter type (timestamp in milliseconds)
        paramKey: dateFrom
        in: query
        schema:
          type: number
        required: false
      - paramName: dateTo
        description: dateTo to date range filter type (timestamp in milliseconds)
        paramKey: dateTo
        in: query
        schema:
          type: number
        required: false
      - paramName: offset
        description: Index of the first document of the page
        paramKey: offset
        in: query
        schema:
          type: number
        required: false
      - paramName: limit
        description: Number of documents per page
        paramKey: limit
        in: query
        schema:
          type: number
          default: 50
        required: false
      - paramName: sort
        description: Sort the results in the ascending/descending order. Default order
          is **descending** by creation if `sort` is not passed
        paramKey: sort
        in: query
        schema:
          type: string
          enum:
            - asc
            - desc
        required: false
  - moduleName: Files / Create
    method: post
    path: /crm/files
    description: Upload a file
    externalDocs: ""
    params: []
  - moduleName: Files / Get
    method: get
    path: /crm/files/{id}
    description: Download a file
    externalDocs: ""
    params:
      - paramName: id
        description: File id to download.
        paramKey: id
        in: path
        schema:
          type: string
        required: true
  - moduleName: Files / Delete
    method: delete
    path: /crm/files/{id}
    description: Delete a file
    externalDocs: ""
    params:
      - paramName: id
        description: File id to delete.
        paramKey: id
        in: path
        schema:
          type: string
        required: true
  - moduleName: Files / Data
    method: get
    path: /crm/files/{id}/data
    description: Get file details
    externalDocs: ""
    params:
      - paramName: id
        description: File id to get file data.
        paramKey: id
        in: path
        schema:
          type: string
        required: true
  - moduleName: Conversations / Messages / Create
    method: post
    path: /conversations/messages
    description: Send a message as an agent
    externalDocs: ""
    params:
      - paramName: visitorId
        description: visitorâ€™s ID received <a
          href="https://developers.brevo.com/docs/conversations-webhooks">from a
          webhook</a> or generated by you to <a
          href="https://developers.brevo.com/docs/customize-the-widget#identifying-existing-users">bind
          existing user account to Conversations</a>
        paramKey: visitorId
        in: body
        schema:
          type: any
        required: true
      - paramName: text
        description: message text
        paramKey: text
        in: body
        schema:
          type: any
        required: true
      - paramName: agentId
        description: agent ID. It can be found on agentâ€™s page or received <a
          href="https://developers.brevo.com/docs/conversations-webhooks">from a
          webhook</a>. Alternatively, you can use `agentEmail` + `agentName` +
          `receivedFrom` instead (all 3 fields required).
        paramKey: agentId
        in: body
        schema:
          type: any
        required: false
      - paramName: receivedFrom
        description: mark your messages to distinguish messages created by you from the
          others.
        paramKey: receivedFrom
        in: body
        schema:
          type: any
        required: false
      - paramName: agentEmail
        description: agent email. When sending messages from a standalone system, itâ€™s
          hard to maintain a 1-to-1 relationship between the users of both
          systems. In this case, an agent can be specified by their email
          address.
        paramKey: agentEmail
        in: body
        schema:
          type: any
        required: false
      - paramName: agentName
        description: agent name
        paramKey: agentName
        in: body
        schema:
          type: any
        required: false
    requestBodyType: json
  - moduleName: Conversations / Messages / Get
    method: get
    path: /conversations/messages/{id}
    description: Get a message
    externalDocs: ""
    params:
      - paramName: id
        description: ID of the message
        paramKey: id
        in: path
        schema:
          type: string
        required: true
  - moduleName: Conversations / Messages / Update
    method: put
    path: /conversations/messages/{id}
    description: Only agentsâ€™ messages can be edited.
    externalDocs: ""
    params:
      - paramName: id
        description: ID of the message
        paramKey: id
        in: path
        schema:
          type: string
        required: true
      - paramName: text
        description: edited message text
        paramKey: text
        in: body
        schema:
          type: string
        required: true
    requestBodyType: json
  - moduleName: Conversations / Messages / Delete
    method: delete
    path: /conversations/messages/{id}
    description: Only agentsâ€™ messages can be deleted.
    externalDocs: ""
    params:
      - paramName: id
        description: ID of the message
        paramKey: id
        in: path
        schema:
          type: string
        required: true
  - moduleName: Conversations / Pushed Messages / Create
    method: post
    path: /conversations/pushedMessages
    description: "Example of automated messages: order status, announce new features
      in your web app, etc."
    externalDocs: ""
    params:
      - paramName: visitorId
        description: visitorâ€™s ID received <a
          href="https://developers.brevo.com/docs/conversations-webhooks">from a
          webhook</a> or generated by you to <a
          href="https://developers.brevo.com/docs/customize-the-widget#identifying-existing-users">bind
          existing user account to Conversations</a>
        paramKey: visitorId
        in: body
        schema:
          type: any
        required: true
      - paramName: text
        description: message text
        paramKey: text
        in: body
        schema:
          type: any
        required: true
      - paramName: agentId
        description: agent ID. It can be found on agentâ€™s page or received <a
          href="https://developers.brevo.com/docs/conversations-webhooks">from a
          webhook</a>.
        paramKey: agentId
        in: body
        schema:
          type: any
        required: false
      - paramName: groupId
        description: group ID. It can be found on groupâ€™s page.
        paramKey: groupId
        in: body
        schema:
          type: any
        required: false
    requestBodyType: json
  - moduleName: Conversations / Pushed Messages / Get
    method: get
    path: /conversations/pushedMessages/{id}
    description: Get an automated message
    externalDocs: ""
    params:
      - paramName: id
        description: ID of the message sent previously
        paramKey: id
        in: path
        schema:
          type: string
        required: true
  - moduleName: Conversations / Pushed Messages / Update
    method: put
    path: /conversations/pushedMessages/{id}
    description: Update an automated message
    externalDocs: ""
    params:
      - paramName: id
        description: ID of the message
        paramKey: id
        in: path
        schema:
          type: string
        required: true
      - paramName: text
        description: edited message text
        paramKey: text
        in: body
        schema:
          type: string
        required: true
    requestBodyType: json
  - moduleName: Conversations / Pushed Messages / Delete
    method: delete
    path: /conversations/pushedMessages/{id}
    description: Delete an automated message
    externalDocs: ""
    params:
      - paramName: id
        description: ID of the message
        paramKey: id
        in: path
        schema:
          type: string
        required: true
  - moduleName: Conversations / Agent Online Ping
    method: post
    path: /conversations/agentOnlinePing
    description: We recommend pinging this endpoint every minute for as long as the
      agent has to be considered online.
    externalDocs: ""
    params:
      - paramName: agentId
        description: agent ID. It can be found on agentâ€™s page or received <a
          href="https://developers.brevo.com/docs/conversations-webhooks">from a
          webhook</a>. Alternatively, you can use `agentEmail` + `agentName` +
          `receivedFrom` instead (all 3 fields required).
        paramKey: agentId
        in: body
        schema:
          type: any
        required: false
      - paramName: receivedFrom
        description: mark your messages to distinguish messages created by you from the
          others.
        paramKey: receivedFrom
        in: body
        schema:
          type: any
        required: false
      - paramName: agentEmail
        description: agent email. When sending online pings from a standalone system,
          itâ€™s hard to maintain a 1-to-1 relationship between the users of both
          systems. In this case, an agent can be specified by their email
          address. If thereâ€™s no agent with the specified email address in your
          Brevo organization, a dummy agent will be created automatically.
        paramKey: agentEmail
        in: body
        schema:
          type: any
        required: false
      - paramName: agentName
        description: agent name
        paramKey: agentName
        in: body
        schema:
          type: any
        required: false
    requestBodyType: json
  - moduleName: Ecommerce / Activate
    method: post
    path: /ecommerce/activate
    description: Getting access to Brevo eCommerce.
    externalDocs: ""
    params: []
  - moduleName: Ecommerce / Config / Display Currency / Set
    method: post
    path: /ecommerce/config/displayCurrency
    description: Set the ISO 4217 compliant display currency code for your Brevo account
    externalDocs: ""
    params:
      - paramName: code
        description: ISO 4217 compliant display currency code
        paramKey: code
        in: body
        schema:
          type: string
        required: true
    requestBodyType: json
  - moduleName: Ecommerce / Config / Display Currency / Get
    method: get
    path: /ecommerce/config/displayCurrency
    description: Get the ISO 4217 compliant display currency code for your Brevo account
    externalDocs: ""
    params: []
  - moduleName: Ecommerce / Attribution / Metrics / List
    method: get
    path: /ecommerce/attribution/metrics
    description: Get attribution metrics for one or more Brevo campaigns
    externalDocs: ""
    params:
      - paramName: periodFrom
        description: When getting metrics for a specific period, define the starting
          datetime in RFC3339 format
        paramKey: periodFrom
        in: query
        schema:
          type: string
        required: false
      - paramName: periodTo
        description: When getting metrics for a specific period, define the end datetime
          in RFC3339 format
        paramKey: periodTo
        in: query
        schema:
          type: string
        required: false
      - paramName: emailCampaignId[]
        description: The email campaign id(s) to get metrics for
        paramKey: emailCampaignId[]
        in: query
        schema:
          type: array
          items:
            type: any
        required: false
  - moduleName: Ecommerce / Attribution / Metrics / Get
    method: get
    path: /ecommerce/attribution/metrics/{conversionSource}/{conversionSourceId}
    description: Get detailed attribution metrics for a single Brevo campaign
    externalDocs: ""
    params:
      - paramName: conversionSource
        description: The Brevo campaign type for which data will be retrieved
        paramKey: conversionSource
        in: path
        schema:
          type: string
          enum:
            - email_campaign
        required: true
      - paramName: conversionSourceId
        description: The Brevo campaign id for which data will be retrieved
        paramKey: conversionSourceId
        in: path
        schema:
          type: number
        required: true
  - moduleName: Ecommerce / Attribution / Products / List
    method: get
    path: /ecommerce/attribution/products/{conversionSource}/{conversionSourceId}
    description: Get attributed product sales for a single Brevo campaign
    externalDocs: ""
    params:
      - paramName: conversionSource
        description: The Brevo campaign type for which data will be retrieved
        paramKey: conversionSource
        in: path
        schema:
          type: string
          enum:
            - email_campaign
        required: true
      - paramName: conversionSourceId
        description: The Brevo campaign id for which data will be retrieved
        paramKey: conversionSourceId
        in: path
        schema:
          type: number
        required: true
  - moduleName: Ecommerce / Orders / List
    method: get
    path: /orders
    description: Get all the orders
    externalDocs: ""
    params:
      - paramName: limit
        description: Number of documents per page
        paramKey: limit
        in: query
        schema:
          type: number
          maximum: 100
          default: 50
        required: false
      - paramName: offset
        description: Index of the first document in the page
        paramKey: offset
        in: query
        schema:
          type: number
          default: 0
        required: false
      - paramName: sort
        description: Sort the results in the ascending/descending order of record
          creation. Default order is **descending** if `sort` is not passed
        paramKey: sort
        in: query
        schema:
          type: string
          default: desc
          enum:
            - asc
            - desc
        required: false
      - paramName: modifiedSince
        description: >
          Filter (urlencoded) the orders modified after a given UTC date-time
          (YYYY-MM-DDTHH:mm:ss.SSSZ). **Prefer to pass your timezone in
          date-time format for accurate result.**
        paramKey: modifiedSince
        in: query
        schema:
          type: string
        required: false
      - paramName: createdSince
        description: >
          Filter (urlencoded) the orders created after a given UTC date-time
          (YYYY-MM-DDTHH:mm:ss.SSSZ). **Prefer to pass your timezone in
          date-time format for accurate result.**
        paramKey: createdSince
        in: query
        schema:
          type: string
        required: false
  - moduleName: Ecommerce / Orders / Create
    method: post
    path: /orders/status
    description: Manages the transactional status of the order
    externalDocs: ""
    params:
      - paramName: id
        description: Unique ID of the order.
        paramKey: id
        in: body
        schema:
          type: string
        required: true
      - paramName: createdAt
        description: Event occurrence UTC date-time (YYYY-MM-DDTHH:mm:ssZ), when order
          is actually created.
        paramKey: createdAt
        in: body
        schema:
          type: string
        required: true
      - paramName: updatedAt
        description: Event updated UTC date-time (YYYY-MM-DDTHH:mm:ssZ), when the status
          of the order is actually changed/updated.
        paramKey: updatedAt
        in: body
        schema:
          type: string
        required: true
      - paramName: status
        description: State of the order.
        paramKey: status
        in: body
        schema:
          type: string
        required: true
      - paramName: amount
        description: Total amount of the order, including all shipping expenses, tax and
          the price of items.
        paramKey: amount
        in: body
        schema:
          type: number
        required: true
      - paramName: storeId
        description: ID of store where the order is placed
        paramKey: storeId
        in: body
        schema:
          type: string
        required: false
      - paramName: identifiers
        description: Identifies the contact associated with the order.
        paramKey: identifiers
        in: body
        schema:
          type: any
        required: false
      - paramName: products
        description: ""
        paramKey: products
        in: body
        schema:
          type: array
          items:
            type: any
        required: true
      - paramName: email
        description: Email of the contact, Mandatory if "phone" field is not passed in
          "billing" parameter.
        paramKey: email
        in: body
        schema:
          type: string
        required: false
      - paramName: billing
        description: Billing details of an order.
        paramKey: billing
        in: body
        schema:
          type: any
        required: false
      - paramName: coupons
        description: Coupons applied to the order. Stored case insensitive.
        paramKey: coupons
        in: body
        schema:
          type: array
          items:
            type: any
        required: false
    requestBodyType: json
  - moduleName: Ecommerce / Orders / Batch Create
    method: post
    path: /orders/status/batch
    description: Create multiple orders at one time instead of one order at a time
    externalDocs: ""
    params:
      - paramName: orders
        description: array of order objects
        paramKey: orders
        in: body
        schema:
          type: array
          items:
            type: any
        required: true
      - paramName: notifyUrl
        description: Notify Url provided by client to get the status of batch request
        paramKey: notifyUrl
        in: body
        schema:
          type: string
        required: false
      - paramName: historical
        description: "Defines wether you want your orders to be considered as live data
          or as historical data (import of past data, synchronising data). True:
          orders will not trigger any automation workflows. False: orders will
          trigger workflows as usual."
        paramKey: historical
        in: body
        schema:
          type: boolean
          default: true
        required: false
    requestBodyType: json
  - moduleName: Events / Create
    method: post
    path: /events
    description: Create an event to track a contact's interaction.
    externalDocs: ""
    params:
      - paramName: eventName
        description: The name of the event that occurred. This is how you will find your
          event in Brevo. Limited to 255 characters, alphanumerical characters
          and - _ only.
        paramKey: event_name
        in: body
        schema:
          type: string
        required: true
      - paramName: eventDate
        description: Timestamp of when the event occurred (e.g.
          "2024-01-24T17:39:57+01:00"). If no value is passed, the timestamp of
          the event creation is used.
        paramKey: event_date
        in: body
        schema:
          type: string
        required: false
      - paramName: identifiers
        description: Identifies the contact associated with the event. At least one
          identifier is required.
        paramKey: identifiers
        in: body
        schema:
          type: any
        required: true
      - paramName: contactProperties
        description: 'Properties defining the state of the contact associated to this
          event. Useful to update contact attributes defined in your contacts
          database while passing the event. For example: **"FIRSTNAME": "Jane" ,
          "AGE": 37**'
        paramKey: contact_properties
        in: body
        schema:
          type: any
        required: false
      - paramName: eventProperties
        description: 'Properties of the event. Top level properties and nested
          properties can be used to better segment contacts and personalise
          workflow conditions. The following field type are supported: string,
          number, boolean (true/false), date (Timestamp e.g.
          "2024-01-24T17:39:57+01:00"). Keys are limited to 255 characters,
          alphanumerical characters and - _ only. Size is limited to 50Kb.'
        paramKey: event_properties
        in: body
        schema:
          type: any
        required: false
    requestBodyType: json
  - moduleName: Ecommerce / Categories / List
    method: get
    path: /categories
    description: Return all your categories
    externalDocs: ""
    params:
      - paramName: limit
        description: Number of documents per page
        paramKey: limit
        in: query
        schema:
          type: number
          maximum: 100
          default: 50
        required: false
      - paramName: offset
        description: Index of the first document in the page
        paramKey: offset
        in: query
        schema:
          type: number
          default: 0
        required: false
      - paramName: sort
        description: Sort the results in the ascending/descending order of record
          creation. Default order is **descending** if `sort` is not passed
        paramKey: sort
        in: query
        schema:
          type: string
          default: desc
          enum:
            - asc
            - desc
        required: false
      - paramName: ids
        description: Filter by category ids
        paramKey: ids
        in: query
        schema:
          type: array
          items:
            type: any
        required: false
      - paramName: name
        description: Filter by category name
        paramKey: name
        in: query
        schema:
          type: string
        required: false
      - paramName: modifiedSince
        description: >
          Filter (urlencoded) the categories modified after a given UTC
          date-time (YYYY-MM-DDTHH:mm:ss.SSSZ). **Prefer to pass your timezone
          in date-time format for accurate result.**
        paramKey: modifiedSince
        in: query
        schema:
          type: string
        required: false
      - paramName: createdSince
        description: >
          Filter (urlencoded) the categories created after a given UTC date-time
          (YYYY-MM-DDTHH:mm:ss.SSSZ). **Prefer to pass your timezone in
          date-time format for accurate result.**
        paramKey: createdSince
        in: query
        schema:
          type: string
        required: false
  - moduleName: Ecommerce / Categories / Create
    method: post
    path: /categories
    description: Create/Update a category
    externalDocs: ""
    params:
      - paramName: id
        description: |
          Unique Category ID as saved in the shop
        paramKey: id
        in: body
        schema:
          type: string
        required: true
      - paramName: name
        description: >
          **Mandatory in case of creation**. Name of the Category, as displayed
          in the shop
        paramKey: name
        in: body
        schema:
          type: string
        required: false
      - paramName: url
        description: URL to the category
        paramKey: url
        in: body
        schema:
          type: string
        required: false
      - paramName: updateEnabled
        description: Facilitate to update the existing category in the same request
          (updateEnabled = true)
        paramKey: updateEnabled
        in: body
        schema:
          type: boolean
          default: false
        required: false
      - paramName: deletedAt
        description: UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) of the category deleted
          from the shop's database
        paramKey: deletedAt
        in: body
        schema:
          type: string
        required: false
      - paramName: isDeleted
        description: category deleted from the shop's database
        paramKey: isDeleted
        in: body
        schema:
          type: boolean
        required: false
    requestBodyType: json
  - moduleName: Ecommerce / Categories / Get
    method: get
    path: /categories/{id}
    description: Get a category details
    externalDocs: ""
    params:
      - paramName: id
        description: Category ID
        paramKey: id
        in: path
        schema:
          type: string
        required: true
  - moduleName: Ecommerce / Categories / Batch Create
    method: post
    path: /categories/batch
    description: Create categories in batch
    externalDocs: ""
    params:
      - paramName: categories
        description: array of categories objects
        paramKey: categories
        in: body
        schema:
          type: array
          items:
            type: any
        required: true
      - paramName: updateEnabled
        description: Facilitate to update the existing categories in the same request
          (updateEnabled = true)
        paramKey: updateEnabled
        in: body
        schema:
          type: boolean
        required: false
    requestBodyType: json
  - moduleName: Ecommerce / Products / List
    method: get
    path: /products
    description: Return all your products
    externalDocs: ""
    params:
      - paramName: limit
        description: Number of documents per page
        paramKey: limit
        in: query
        schema:
          type: number
          maximum: 1000
          default: 50
        required: false
      - paramName: offset
        description: Index of the first document in the page
        paramKey: offset
        in: query
        schema:
          type: number
          default: 0
        required: false
      - paramName: sort
        description: Sort the results in the ascending/descending order of record
          creation. Default order is **descending** if `sort` is not passed
        paramKey: sort
        in: query
        schema:
          type: string
          default: desc
          enum:
            - asc
            - desc
        required: false
      - paramName: ids
        description: Filter by product ids
        paramKey: ids
        in: query
        schema:
          type: array
          items:
            type: any
        required: false
      - paramName: name
        description: Filter by product name, minimum 3 characters should be present for
          search
        paramKey: name
        in: query
        schema:
          type: string
        required: false
      - paramName: price[lte]
        description: Price filter for products less than and equals to particular amount
        paramKey: price[lte]
        in: query
        schema:
          type: number
        required: false
      - paramName: price[gte]
        description: Price filter for products greater than and equals to particular amount
        paramKey: price[gte]
        in: query
        schema:
          type: number
        required: false
      - paramName: price[lt]
        description: Price filter for products less than particular amount
        paramKey: price[lt]
        in: query
        schema:
          type: number
        required: false
      - paramName: price[gt]
        description: Price filter for products greater than particular amount
        paramKey: price[gt]
        in: query
        schema:
          type: number
        required: false
      - paramName: price[eq]
        description: Price filter for products equals to particular amount
        paramKey: price[eq]
        in: query
        schema:
          type: number
        required: false
      - paramName: price[ne]
        description: Price filter for products not equals to particular amount
        paramKey: price[ne]
        in: query
        schema:
          type: number
        required: false
      - paramName: categories
        description: Filter by product categories
        paramKey: categories
        in: query
        schema:
          type: array
          items:
            type: any
        required: false
      - paramName: modifiedSince
        description: >
          Filter (urlencoded) the orders modified after a given UTC date-time
          (YYYY-MM-DDTHH:mm:ss.SSSZ). **Prefer to pass your timezone in
          date-time format for accurate result.**
        paramKey: modifiedSince
        in: query
        schema:
          type: string
        required: false
      - paramName: createdSince
        description: >
          Filter (urlencoded) the orders created after a given UTC date-time
          (YYYY-MM-DDTHH:mm:ss.SSSZ). **Prefer to pass your timezone in
          date-time format for accurate result.**
        paramKey: createdSince
        in: query
        schema:
          type: string
        required: false
  - moduleName: Ecommerce / Products / Create
    method: post
    path: /products
    description: Create/Update a product
    externalDocs: ""
    params:
      - paramName: id
        description: Product ID for which you requested the details
        paramKey: id
        in: body
        schema:
          type: string
        required: true
      - paramName: name
        description: Mandatory in case of creation**. Name of the product for which you
          requested the details
        paramKey: name
        in: body
        schema:
          type: string
        required: true
      - paramName: url
        description: URL to the product
        paramKey: url
        in: body
        schema:
          type: string
        required: false
      - paramName: imageUrl
        description: Absolute URL to the cover image of the product
        paramKey: imageUrl
        in: body
        schema:
          type: string
        required: false
      - paramName: sku
        description: Product identifier from the shop
        paramKey: sku
        in: body
        schema:
          type: string
        required: false
      - paramName: price
        description: Price of the product
        paramKey: price
        in: body
        schema:
          type: number
        required: false
      - paramName: categories
        description: Category ID-s of the product
        paramKey: categories
        in: body
        schema:
          type: array
          items:
            type: any
        required: false
      - paramName: parentId
        description: Parent product id of the product
        paramKey: parentId
        in: body
        schema:
          type: string
        required: false
      - paramName: metaInfo
        description: Meta data of product such as description, vendor, producer, stock
          level. The size of cumulative metaInfo shall not exceed **1000 KB**.
          Maximum length of metaInfo object can be 10.
        paramKey: metaInfo
        in: body
        schema:
          type: any
        required: false
      - paramName: updateEnabled
        description: Facilitate to update the existing category in the same request
          (updateEnabled = true)
        paramKey: updateEnabled
        in: body
        schema:
          type: boolean
          default: false
        required: false
      - paramName: deletedAt
        description: UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) of the product deleted
          from the shop's database
        paramKey: deletedAt
        in: body
        schema:
          type: string
        required: false
      - paramName: isDeleted
        description: product deleted from the shop's database
        paramKey: isDeleted
        in: body
        schema:
          type: boolean
        required: false
    requestBodyType: json
  - moduleName: Ecommerce / Products / Get
    method: get
    path: /products/{id}
    description: Get a product's details
    externalDocs: ""
    params:
      - paramName: id
        description: Product ID
        paramKey: id
        in: path
        schema:
          type: string
        required: true
  - moduleName: Ecommerce / Products / Batch Create
    method: post
    path: /products/batch
    description: Create products in batch
    externalDocs: ""
    params:
      - paramName: products
        description: array of products objects
        paramKey: products
        in: body
        schema:
          type: array
          items:
            type: any
        required: true
      - paramName: updateEnabled
        description: Facilitate to update the existing categories in the same request
          (updateEnabled = true)
        paramKey: updateEnabled
        in: body
        schema:
          type: boolean
        required: false
    requestBodyType: json
  - moduleName: Coupons / List
    method: get
    path: /couponCollections
    description: Get all your coupon collections
    externalDocs: ""
    params:
      - paramName: limit
        description: Number of documents returned per page
        paramKey: limit
        in: query
        schema:
          type: number
          minimum: 0
          maximum: 100
          default: 50
        required: false
      - paramName: offset
        description: Index of the first document on the page
        paramKey: offset
        in: query
        schema:
          type: number
          minimum: 0
          default: 0
        required: false
      - paramName: sort
        description: Sort the results by creation time in ascending/descending order
        paramKey: sort
        in: query
        schema:
          type: string
          default: desc
          enum:
            - asc
            - desc
        required: false
      - paramName: sortBy
        description: The field used to sort coupon collections
        paramKey: sortBy
        in: query
        schema:
          type: string
          default: createdAt
          enum:
            - createdAt
            - remainingCoupons
            - expirationDate
        required: false
  - moduleName: Coupons / Create
    method: post
    path: /couponCollections
    description: Create Ð° coupon collection
    externalDocs: ""
    params:
      - paramName: name
        description: Name of the coupons collection
        paramKey: name
        in: body
        schema:
          type: string
        required: true
      - paramName: defaultCoupon
        description: Default coupons collection name
        paramKey: defaultCoupon
        in: body
        schema:
          type: string
        required: true
      - paramName: expirationDate
        description: Specify an expiration date for the coupon collection in RFC3339
          format. Use null to remove the expiration date.
        paramKey: expirationDate
        in: body
        schema:
          type: string
        required: false
      - paramName: remainingDaysAlert
        description: Send a notification alert (email) when the remaining days until the
          expiration date are equal or fall bellow this number. Use null to
          disable alerts.
        paramKey: remainingDaysAlert
        in: body
        schema:
          type: number
        required: false
      - paramName: remainingCouponsAlert
        description: Send a notification alert (email) when the remaining coupons count
          is equal or fall bellow this number. Use null to disable alerts.
        paramKey: remainingCouponsAlert
        in: body
        schema:
          type: number
        required: false
    requestBodyType: json
  - moduleName: Coupons / Get
    method: get
    path: /couponCollections/{id}
    description: Get a coupon collection by id
    externalDocs: ""
    params:
      - paramName: id
        description: Id of the collection to return
        paramKey: id
        in: path
        schema:
          type: string
        required: true
  - moduleName: Coupons / Update
    method: patch
    path: /couponCollections/{id}
    description: Update a coupon collection by id
    externalDocs: ""
    params:
      - paramName: id
        description: Id of the collection to update
        paramKey: id
        in: path
        schema:
          type: string
        required: true
      - paramName: defaultCoupon
        description: A default coupon to be used in case there are no coupons left
        paramKey: defaultCoupon
        in: body
        schema:
          type: string
        required: false
      - paramName: expirationDate
        description: Specify an expiration date for the coupon collection in RFC3339
          format. Use null to remove the expiration date.
        paramKey: expirationDate
        in: body
        schema:
          type: string
        required: false
      - paramName: remainingDaysAlert
        description: Send a notification alert (email) when the remaining days until the
          expiration date are equal or fall bellow this number. Use null to
          disable alerts.
        paramKey: remainingDaysAlert
        in: body
        schema:
          type: number
        required: false
      - paramName: remainingCouponsAlert
        description: Send a notification alert (email) when the remaining coupons count
          is equal or fall bellow this number. Use null to disable alerts.
        paramKey: remainingCouponsAlert
        in: body
        schema:
          type: number
        required: false
    requestBodyType: json
  - moduleName: Coupons / Create Codes
    method: post
    path: /coupons
    description: Create coupons for a coupon collection
    externalDocs: ""
    params:
      - paramName: collectionId
        description: The id of the coupon collection for which the coupons will be created
        paramKey: collectionId
        in: body
        schema:
          type: string
        required: true
      - paramName: coupons
        description: ""
        paramKey: coupons
        in: body
        schema:
          type: array
          items:
            type: any
        required: true
    requestBodyType: json
  - moduleName: Transactional WhatsApp / Send Message
    method: post
    path: /whatsapp/sendMessage
    description: This endpoint is used to send a WhatsApp message. <br/>(**The first
      message you send using the API must contain a Template ID. You must create
      a template on WhatsApp on the Brevo platform to fetch the Template ID.**)
    externalDocs: ""
    params:
      - paramName: requestBody
        paramKey: ""
        description: ""
        in: body_raw
        schema:
          type: any
        required: true
    requestBodyType: json
  - moduleName: Transactional WhatsApp / Events / List
    method: get
    path: /whatsapp/statistics/events
    description: This endpoint will show the unaggregated statistics for WhatsApp
      activity (30 days by default if `startDate` and `endDate` or `days` is not
      passed. The date range can not exceed 90 days)
    externalDocs: ""
    params:
      - paramName: limit
        description: Number limitation for the result returned
        paramKey: limit
        in: query
        schema:
          type: number
          minimum: 0
          maximum: 5000
          default: 2500
        required: false
      - paramName: offset
        description: Beginning point in the list to retrieve from
        paramKey: offset
        in: query
        schema:
          type: number
          default: 0
        required: false
      - paramName: startDate
        description: >
          **Mandatory if endDate is used.** Starting date of the report
          (YYYY-MM-DD). Must be lower than equal to endDate
        paramKey: startDate
        in: query
        schema:
          type: string
        required: false
      - paramName: endDate
        description: >
          **Mandatory if startDate is used.** Ending date of the report
          (YYYY-MM-DD). Must be greater than equal to startDate
        paramKey: endDate
        in: query
        schema:
          type: string
        required: false
      - paramName: days
        description: >
          Number of days in the past including today (positive integer). _Not
          compatible with 'startDate' and 'endDate'_
        paramKey: days
        in: query
        schema:
          type: number
        required: false
      - paramName: contactNumber
        description: Filter results for specific contact (WhatsApp Number with country
          code. Example, 85264318721)
        paramKey: contactNumber
        in: query
        schema:
          type: string
        required: false
      - paramName: event
        description: Filter the report for a specific event type
        paramKey: event
        in: query
        schema:
          type: string
          enum:
            - sent
            - delivered
            - read
            - error
            - unsubscribe
            - reply
            - soft-bounce
        required: false
      - paramName: sort
        description: Sort the results in the ascending/descending order of record
          creation. Default order is **descending** if `sort` is not passed
        paramKey: sort
        in: query
        schema:
          type: string
          default: desc
          enum:
            - asc
            - desc
        required: false
  - moduleName: External Feeds / List
    method: get
    path: /feeds
    description: This endpoint can fetch all created external feeds.
    externalDocs: ""
    params:
      - paramName: search
        description: Can be used to filter records by search keyword on feed name
        paramKey: search
        in: query
        schema:
          type: string
        required: false
      - paramName: startDate
        description: Mandatory if `endDate` is used. Starting date (YYYY-MM-DD) from
          which you want to fetch the list. Can be maximum 30 days older than
          current date.
        paramKey: startDate
        in: query
        schema:
          type: string
        required: false
      - paramName: endDate
        description: Mandatory if `startDate` is used. Ending date (YYYY-MM-DD) till
          which you want to fetch the list. Maximum time period that can be
          selected is one month.
        paramKey: endDate
        in: query
        schema:
          type: string
        required: false
      - paramName: sort
        description: Sort the results in the ascending/descending order of record
          creation. Default order is **descending** if `sort` is not passed.
        paramKey: sort
        in: query
        schema:
          type: string
          default: desc
          enum:
            - asc
            - desc
        required: false
      - paramName: authType
        description: Filter the records by `authType` of the feed.
        paramKey: authType
        in: query
        schema:
          type: string
          enum:
            - basic
            - token
            - noAuth
        required: false
      - paramName: limit
        description: Number of documents returned per page.
        paramKey: limit
        in: query
        schema:
          type: number
          minimum: 0
          maximum: 500
          default: 50
        required: false
      - paramName: offset
        description: Index of the first document on the page.
        paramKey: offset
        in: query
        schema:
          type: number
          default: 0
        required: false
  - moduleName: External Feeds / Create
    method: post
    path: /feeds
    description: This endpoint will create an external feed.
    externalDocs: ""
    params:
      - paramName: name
        description: Name of the feed
        paramKey: name
        in: body
        schema:
          type: string
        required: true
      - paramName: url
        description: URL of the feed
        paramKey: url
        in: body
        schema:
          type: string
        required: true
      - paramName: authType
        description: |
          Auth type of the feed:
           * `basic`
           * `token`
           * `noAuth`
        paramKey: authType
        in: body
        schema:
          type: string
          default: noAuth
          enum:
            - basic
            - token
            - noAuth
        required: false
      - paramName: username
        description: Username for authType `basic`
        paramKey: username
        in: body
        schema:
          type: string
        required: false
      - paramName: password
        description: Password for authType `basic`
        paramKey: password
        in: body
        schema:
          type: string
        required: false
      - paramName: token
        description: Token for authType `token`
        paramKey: token
        in: body
        schema:
          type: string
        required: false
      - paramName: headers
        description: Custom headers for the feed
        paramKey: headers
        in: body
        schema:
          type: array
          items:
            type: any
        required: false
      - paramName: maxRetries
        description: Maximum number of retries on the feed url
        paramKey: maxRetries
        in: body
        schema:
          type: number
          minimum: 0
          maximum: 5
          default: 5
        required: false
      - paramName: cache
        description: Toggle caching of feed url response
        paramKey: cache
        in: body
        schema:
          type: boolean
          default: false
        required: false
    requestBodyType: json
  - moduleName: External Feeds / Get
    method: get
    path: /feeds/{uuid}
    description: This endpoint will update an external feed.
    externalDocs: ""
    params:
      - paramName: uuid
        description: UUID of the feed to fetch
        paramKey: uuid
        in: path
        schema:
          type: string
        required: true
  - moduleName: External Feeds / Update
    method: put
    path: /feeds/{uuid}
    description: This endpoint will update an external feed.
    externalDocs: ""
    params:
      - paramName: uuid
        description: UUID of the feed to update
        paramKey: uuid
        in: path
        schema:
          type: string
        required: true
      - paramName: name
        description: Name of the feed
        paramKey: name
        in: body
        schema:
          type: string
        required: false
      - paramName: url
        description: URL of the feed
        paramKey: url
        in: body
        schema:
          type: string
        required: false
      - paramName: authType
        description: |
          Auth type of the feed:
           * `basic`
           * `token`
           * `noAuth`
        paramKey: authType
        in: body
        schema:
          type: string
          enum:
            - basic
            - token
            - noAuth
        required: false
      - paramName: username
        description: Username for authType `basic`
        paramKey: username
        in: body
        schema:
          type: string
        required: false
      - paramName: password
        description: Password for authType `basic`
        paramKey: password
        in: body
        schema:
          type: string
        required: false
      - paramName: token
        description: Token for authType `token`
        paramKey: token
        in: body
        schema:
          type: string
        required: false
      - paramName: headers
        description: Custom headers for the feed
        paramKey: headers
        in: body
        schema:
          type: array
          items:
            type: any
        required: false
      - paramName: maxRetries
        description: Maximum number of retries on the feed url
        paramKey: maxRetries
        in: body
        schema:
          type: number
          minimum: 0
          maximum: 5
          default: 5
        required: false
      - paramName: cache
        description: Toggle caching of feed url response
        paramKey: cache
        in: body
        schema:
          type: boolean
          default: false
        required: false
    requestBodyType: json
  - moduleName: External Feeds / Delete
    method: delete
    path: /feeds/{uuid}
    description: This endpoint will delete an external feed.
    externalDocs: ""
    params:
      - paramName: uuid
        description: UUID of the feed to delete
        paramKey: uuid
        in: path
        schema:
          type: string
        required: true
  - moduleName: Payments / Requests / Create
    method: post
    path: /payments/requests
    description: Create a payment request
    externalDocs: ""
    params:
      - paramName: reference
        description: |
          Reference of the payment request, it will appear on the payment page.
        paramKey: reference
        in: body
        schema:
          type: string
        required: true
      - paramName: cart
        description: |
          Specify the payment currency and amount.
        paramKey: cart
        in: body
        schema:
          type: any
        required: true
      - paramName: contactId
        description: |
          Brevo ID of the contact requested to pay.
        paramKey: contactId
        in: body
        schema:
          type: number
        required: true
      - paramName: description
        description: |
          description of payment request
        paramKey: description
        in: body
        schema:
          type: string
        required: false
      - paramName: notification
        description: >
          Optional. Use this object if you want to let Brevo send an email to
          the contact, with the payment request URL. If empty, no notifications
          (message and reminders) will be sent.
        paramKey: notification
        in: body
        schema:
          type: any
        required: false
      - paramName: configuration
        description: >
          Optional. Redirect contact to a custom success page once payment is
          successful. If empty the default Brevo page will be displayed once a
          payment is validated
        paramKey: configuration
        in: body
        schema:
          type: any
        required: false
    requestBodyType: json
  - moduleName: Payments / Requests / Get
    method: get
    path: /payments/requests/{id}
    description: Get payment request details
    externalDocs: ""
    params:
      - paramName: id
        description: Id of the payment Request
        paramKey: id
        in: path
        schema:
          type: string
        required: true
  - moduleName: Payments / Requests / Delete
    method: delete
    path: /payments/requests/{id}
    description: Delete a payment request.
    externalDocs: ""
    params:
      - paramName: id
        description: ID of the payment request.
        paramKey: id
        in: path
        schema:
          type: string
        required: true
