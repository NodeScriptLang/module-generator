id: gemini
displayName: Gemini
workspaceId:
  development: 0q8TMVJAEKlQgQ3T
  production: fR5QbcWaRwIr9feE
baseUrl: https://generativelanguage.googleapis.com
description: The Gemini API allows developers to build generative AI
  applications using Gemini models. Gemini is our most capable model, built from
  the ground up to be multimodal. It can generalize and seamlessly understand,
  operate across, and combine different types of information including language,
  images, audio, video, and code. You can use the Gemini API for use cases like
  reasoning across text and images, content generation, dialogue agents,
  summarization and classification systems, and more.
commonKeywords:
  - ai
  - google
commonParams:
  - paramName: accessToken
    description: OAuth 2.0 token for the current user.
    paramKey: oauth_token
    in: query
    schema:
      type: string
    required: false
  - paramName: apiKey
    description: |
      API key. Your API key identifies your project and provides you with
      API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    paramKey: key
    in: query
    schema:
      type: string
    required: false
modules:
  - moduleName: Cached Contents / Create
    method: post
    path: /v1beta/cachedContents
    description: Creates CachedContent resource.
    externalDocs: ""
    params:
      - paramName: $Xgafv
        description: V1 error format.
        paramKey: $.xgafv
        in: query
        schema:
          type: string
          enum:
            - "1"
            - "2"
        required: false
      - paramName: accessToken
        description: OAuth access token.
        paramKey: access_token
        in: query
        schema:
          type: string
        required: false
      - paramName: alt
        description: Data format for response.
        paramKey: alt
        in: query
        schema:
          type: string
          enum:
            - json
            - media
            - proto
        required: false
      - paramName: callback
        description: JSONP
        paramKey: callback
        in: query
        schema:
          type: string
        required: false
      - paramName: fields
        description: Selector specifying which fields to include in a partial response.
        paramKey: fields
        in: query
        schema:
          type: string
        required: false
      - paramName: prettyPrint
        description: Returns response with indentations and line breaks.
        paramKey: prettyPrint
        in: query
        schema:
          type: boolean
        required: false
      - paramName: quotaUser
        description: Available to use for quota purposes for server-side applications.
          Can be any arbitrary string assigned to a user, but should not exceed
          40 characters.
        paramKey: quotaUser
        in: query
        schema:
          type: string
        required: false
      - paramName: uploadProtocol
        description: Upload protocol for media (e.g. "raw", "multipart").
        paramKey: upload_protocol
        in: query
        schema:
          type: string
        required: false
      - paramName: uploadType
        description: Legacy upload protocol for media (e.g. "media", "multipart").
        paramKey: uploadType
        in: query
        schema:
          type: string
        required: false
      - paramName: contents
        description: Optional. Input only. Immutable. The content to cache.
        paramKey: contents
        in: body
        schema:
          type: array
          items:
            type: any
        required: false
      - paramName: createTime
        description: Output only. Creation time of the cache entry.
        paramKey: createTime
        in: body
        schema:
          type: string
        required: false
      - paramName: displayName
        description: Optional. Immutable. The user-generated meaningful display name of
          the cached content. Maximum 128 Unicode characters.
        paramKey: displayName
        in: body
        schema:
          type: string
        required: false
      - paramName: expireTime
        description: Timestamp in UTC of when this resource is considered expired. This
          is *always* provided on output, regardless of what was sent on input.
        paramKey: expireTime
        in: body
        schema:
          type: string
        required: false
      - paramName: model
        description: "Required. Immutable. The name of the `Model` to use for cached
          content Format: `models/{model}`"
        paramKey: model
        in: body
        schema:
          type: string
        required: false
      - paramName: name
        description: "Optional. Identifier. The resource name referring to the cached
          content. Format: `cachedContents/{id}`"
        paramKey: name
        in: body
        schema:
          type: string
        required: false
      - paramName: systemInstruction
        description: ""
        paramKey: systemInstruction
        in: body
        schema:
          type: any
        required: false
      - paramName: toolConfig
        description: The Tool configuration containing parameters for specifying `Tool`
          use in the request.
        paramKey: toolConfig
        in: body
        schema:
          type: any
        required: false
      - paramName: tools
        description: Optional. Input only. Immutable. A list of `Tools` the model may
          use to generate the next response
        paramKey: tools
        in: body
        schema:
          type: array
          items:
            type: any
        required: false
      - paramName: ttl
        description: Input only. New TTL for this resource, input only.
        paramKey: ttl
        in: body
        schema:
          type: string
        required: false
      - paramName: updateTime
        description: Output only. When the cache entry was last updated in UTC time.
        paramKey: updateTime
        in: body
        schema:
          type: string
        required: false
      - paramName: usageMetadata
        description: Metadata on the usage of the cached content.
        paramKey: usageMetadata
        in: body
        schema:
          type: any
        required: false
    requestBodyType: json
  - moduleName: Cached Contents / List
    method: get
    path: /v1beta/cachedContents
    description: Lists CachedContents.
    externalDocs: ""
    params:
      - paramName: $Xgafv
        description: V1 error format.
        paramKey: $.xgafv
        in: query
        schema:
          type: string
          enum:
            - "1"
            - "2"
        required: false
      - paramName: accessToken
        description: OAuth access token.
        paramKey: access_token
        in: query
        schema:
          type: string
        required: false
      - paramName: alt
        description: Data format for response.
        paramKey: alt
        in: query
        schema:
          type: string
          enum:
            - json
            - media
            - proto
        required: false
      - paramName: callback
        description: JSONP
        paramKey: callback
        in: query
        schema:
          type: string
        required: false
      - paramName: fields
        description: Selector specifying which fields to include in a partial response.
        paramKey: fields
        in: query
        schema:
          type: string
        required: false
      - paramName: key
        description: API key. Your API key identifies your project and provides you with
          API access, quota, and reports. Required unless you provide an OAuth
          2.0 token.
        paramKey: key
        in: query
        schema:
          type: string
        required: false
      - paramName: oauthToken
        description: OAuth 2.0 token for the current user.
        paramKey: oauth_token
        in: query
        schema:
          type: string
        required: false
      - paramName: prettyPrint
        description: Returns response with indentations and line breaks.
        paramKey: prettyPrint
        in: query
        schema:
          type: boolean
        required: false
      - paramName: quotaUser
        description: Available to use for quota purposes for server-side applications.
          Can be any arbitrary string assigned to a user, but should not exceed
          40 characters.
        paramKey: quotaUser
        in: query
        schema:
          type: string
        required: false
      - paramName: uploadProtocol
        description: Upload protocol for media (e.g. "raw", "multipart").
        paramKey: upload_protocol
        in: query
        schema:
          type: string
        required: false
      - paramName: uploadType
        description: Legacy upload protocol for media (e.g. "media", "multipart").
        paramKey: uploadType
        in: query
        schema:
          type: string
        required: false
      - paramName: pageSize
        description: Optional. The maximum number of cached contents to return. The
          service may return fewer than this value. If unspecified, some default
          (under maximum) number of items will be returned. The maximum value is
          1000; values above 1000 will be coerced to 1000.
        paramKey: pageSize
        in: query
        schema:
          type: number
        required: false
      - paramName: pageToken
        description: Optional. A page token, received from a previous
          `ListCachedContents` call. Provide this to retrieve the subsequent
          page. When paginating, all other parameters provided to
          `ListCachedContents` must match the call that provided the page token.
        paramKey: pageToken
        in: query
        schema:
          type: string
        required: false
  - moduleName: Corpora / Create
    method: post
    path: /v1beta/corpora
    description: Creates an empty `Corpus`.
    externalDocs: ""
    params:
      - paramName: $Xgafv
        description: V1 error format.
        paramKey: $.xgafv
        in: query
        schema:
          type: string
          enum:
            - "1"
            - "2"
        required: false
      - paramName: accessToken
        description: OAuth access token.
        paramKey: access_token
        in: query
        schema:
          type: string
        required: false
      - paramName: alt
        description: Data format for response.
        paramKey: alt
        in: query
        schema:
          type: string
          enum:
            - json
            - media
            - proto
        required: false
      - paramName: callback
        description: JSONP
        paramKey: callback
        in: query
        schema:
          type: string
        required: false
      - paramName: fields
        description: Selector specifying which fields to include in a partial response.
        paramKey: fields
        in: query
        schema:
          type: string
        required: false
      - paramName: key
        description: API key. Your API key identifies your project and provides you with
          API access, quota, and reports. Required unless you provide an OAuth
          2.0 token.
        paramKey: key
        in: query
        schema:
          type: string
        required: false
      - paramName: oauthToken
        description: OAuth 2.0 token for the current user.
        paramKey: oauth_token
        in: query
        schema:
          type: string
        required: false
      - paramName: prettyPrint
        description: Returns response with indentations and line breaks.
        paramKey: prettyPrint
        in: query
        schema:
          type: boolean
        required: false
      - paramName: quotaUser
        description: Available to use for quota purposes for server-side applications.
          Can be any arbitrary string assigned to a user, but should not exceed
          40 characters.
        paramKey: quotaUser
        in: query
        schema:
          type: string
        required: false
      - paramName: uploadProtocol
        description: Upload protocol for media (e.g. "raw", "multipart").
        paramKey: upload_protocol
        in: query
        schema:
          type: string
        required: false
      - paramName: uploadType
        description: Legacy upload protocol for media (e.g. "media", "multipart").
        paramKey: uploadType
        in: query
        schema:
          type: string
        required: false
      - paramName: createTime
        description: Output only. The Timestamp of when the `Corpus` was created.
        paramKey: createTime
        in: body
        schema:
          type: string
        required: false
      - paramName: displayName
        description: 'Optional. The human-readable display name for the `Corpus`. The
          display name must be no more than 512 characters in length, including
          spaces. Example: "Docs on Semantic Retriever"'
        paramKey: displayName
        in: body
        schema:
          type: string
        required: false
      - paramName: name
        description: 'Immutable. Identifier. The `Corpus` resource name. The ID (name
          excluding the "corpora/" prefix) can contain up to 40 characters that
          are lowercase alphanumeric or dashes (-). The ID cannot start or end
          with a dash. If the name is empty on create, a unique name will be
          derived from `display_name` along with a 12 character random suffix.
          Example: `corpora/my-awesome-corpora-123a456b789c`'
        paramKey: name
        in: body
        schema:
          type: string
        required: false
      - paramName: updateTime
        description: Output only. The Timestamp of when the `Corpus` was last updated.
        paramKey: updateTime
        in: body
        schema:
          type: string
        required: false
    requestBodyType: json
  - moduleName: Corpora / List
    method: get
    path: /v1beta/corpora
    description: Lists all `Corpora` owned by the user.
    externalDocs: ""
    params:
      - paramName: $Xgafv
        description: V1 error format.
        paramKey: $.xgafv
        in: query
        schema:
          type: string
          enum:
            - "1"
            - "2"
        required: false
      - paramName: accessToken
        description: OAuth access token.
        paramKey: access_token
        in: query
        schema:
          type: string
        required: false
      - paramName: alt
        description: Data format for response.
        paramKey: alt
        in: query
        schema:
          type: string
          enum:
            - json
            - media
            - proto
        required: false
      - paramName: callback
        description: JSONP
        paramKey: callback
        in: query
        schema:
          type: string
        required: false
      - paramName: fields
        description: Selector specifying which fields to include in a partial response.
        paramKey: fields
        in: query
        schema:
          type: string
        required: false
      - paramName: key
        description: API key. Your API key identifies your project and provides you with
          API access, quota, and reports. Required unless you provide an OAuth
          2.0 token.
        paramKey: key
        in: query
        schema:
          type: string
        required: false
      - paramName: oauthToken
        description: OAuth 2.0 token for the current user.
        paramKey: oauth_token
        in: query
        schema:
          type: string
        required: false
      - paramName: prettyPrint
        description: Returns response with indentations and line breaks.
        paramKey: prettyPrint
        in: query
        schema:
          type: boolean
        required: false
      - paramName: quotaUser
        description: Available to use for quota purposes for server-side applications.
          Can be any arbitrary string assigned to a user, but should not exceed
          40 characters.
        paramKey: quotaUser
        in: query
        schema:
          type: string
        required: false
      - paramName: uploadProtocol
        description: Upload protocol for media (e.g. "raw", "multipart").
        paramKey: upload_protocol
        in: query
        schema:
          type: string
        required: false
      - paramName: uploadType
        description: Legacy upload protocol for media (e.g. "media", "multipart").
        paramKey: uploadType
        in: query
        schema:
          type: string
        required: false
      - paramName: pageSize
        description: Optional. The maximum number of `Corpora` to return (per page). The
          service may return fewer `Corpora`. If unspecified, at most 10
          `Corpora` will be returned. The maximum size limit is 20 `Corpora` per
          page.
        paramKey: pageSize
        in: query
        schema:
          type: number
        required: false
      - paramName: pageToken
        description: Optional. A page token, received from a previous `ListCorpora`
          call. Provide the `next_page_token` returned in the response as an
          argument to the next request to retrieve the next page. When
          paginating, all other parameters provided to `ListCorpora` must match
          the call that provided the page token.
        paramKey: pageToken
        in: query
        schema:
          type: string
        required: false
  - moduleName: Files / List
    method: get
    path: /v1beta/files
    description: Lists the metadata for `File`s owned by the requesting project.
    externalDocs: ""
    params:
      - paramName: $Xgafv
        description: V1 error format.
        paramKey: $.xgafv
        in: query
        schema:
          type: string
          enum:
            - "1"
            - "2"
        required: false
      - paramName: accessToken
        description: OAuth access token.
        paramKey: access_token
        in: query
        schema:
          type: string
        required: false
      - paramName: alt
        description: Data format for response.
        paramKey: alt
        in: query
        schema:
          type: string
          enum:
            - json
            - media
            - proto
        required: false
      - paramName: callback
        description: JSONP
        paramKey: callback
        in: query
        schema:
          type: string
        required: false
      - paramName: fields
        description: Selector specifying which fields to include in a partial response.
        paramKey: fields
        in: query
        schema:
          type: string
        required: false
      - paramName: key
        description: API key. Your API key identifies your project and provides you with
          API access, quota, and reports. Required unless you provide an OAuth
          2.0 token.
        paramKey: key
        in: query
        schema:
          type: string
        required: false
      - paramName: oauthToken
        description: OAuth 2.0 token for the current user.
        paramKey: oauth_token
        in: query
        schema:
          type: string
        required: false
      - paramName: prettyPrint
        description: Returns response with indentations and line breaks.
        paramKey: prettyPrint
        in: query
        schema:
          type: boolean
        required: false
      - paramName: quotaUser
        description: Available to use for quota purposes for server-side applications.
          Can be any arbitrary string assigned to a user, but should not exceed
          40 characters.
        paramKey: quotaUser
        in: query
        schema:
          type: string
        required: false
      - paramName: uploadProtocol
        description: Upload protocol for media (e.g. "raw", "multipart").
        paramKey: upload_protocol
        in: query
        schema:
          type: string
        required: false
      - paramName: uploadType
        description: Legacy upload protocol for media (e.g. "media", "multipart").
        paramKey: uploadType
        in: query
        schema:
          type: string
        required: false
      - paramName: pageSize
        description: Optional. Maximum number of `File`s to return per page. If
          unspecified, defaults to 10. Maximum `page_size` is 100.
        paramKey: pageSize
        in: query
        schema:
          type: number
        required: false
      - paramName: pageToken
        description: Optional. A page token from a previous `ListFiles` call.
        paramKey: pageToken
        in: query
        schema:
          type: string
        required: false
  - moduleName: Generated Files / List
    method: get
    path: /v1beta/generatedFiles
    description: Lists the generated files owned by the requesting project.
    externalDocs: ""
    params:
      - paramName: $Xgafv
        description: V1 error format.
        paramKey: $.xgafv
        in: query
        schema:
          type: string
          enum:
            - "1"
            - "2"
        required: false
      - paramName: accessToken
        description: OAuth access token.
        paramKey: access_token
        in: query
        schema:
          type: string
        required: false
      - paramName: alt
        description: Data format for response.
        paramKey: alt
        in: query
        schema:
          type: string
          enum:
            - json
            - media
            - proto
        required: false
      - paramName: callback
        description: JSONP
        paramKey: callback
        in: query
        schema:
          type: string
        required: false
      - paramName: fields
        description: Selector specifying which fields to include in a partial response.
        paramKey: fields
        in: query
        schema:
          type: string
        required: false
      - paramName: key
        description: API key. Your API key identifies your project and provides you with
          API access, quota, and reports. Required unless you provide an OAuth
          2.0 token.
        paramKey: key
        in: query
        schema:
          type: string
        required: false
      - paramName: oauthToken
        description: OAuth 2.0 token for the current user.
        paramKey: oauth_token
        in: query
        schema:
          type: string
        required: false
      - paramName: prettyPrint
        description: Returns response with indentations and line breaks.
        paramKey: prettyPrint
        in: query
        schema:
          type: boolean
        required: false
      - paramName: quotaUser
        description: Available to use for quota purposes for server-side applications.
          Can be any arbitrary string assigned to a user, but should not exceed
          40 characters.
        paramKey: quotaUser
        in: query
        schema:
          type: string
        required: false
      - paramName: uploadProtocol
        description: Upload protocol for media (e.g. "raw", "multipart").
        paramKey: upload_protocol
        in: query
        schema:
          type: string
        required: false
      - paramName: uploadType
        description: Legacy upload protocol for media (e.g. "media", "multipart").
        paramKey: uploadType
        in: query
        schema:
          type: string
        required: false
      - paramName: pageSize
        description: Optional. Maximum number of `GeneratedFile`s to return per page. If
          unspecified, defaults to 10. Maximum `page_size` is 50.
        paramKey: pageSize
        in: query
        schema:
          type: number
        required: false
      - paramName: pageToken
        description: Optional. A page token from a previous `ListGeneratedFiles` call.
        paramKey: pageToken
        in: query
        schema:
          type: string
        required: false
  - moduleName: Models / List
    method: get
    path: /v1beta/models
    description: Lists the
      [`Model`s](https://ai.google.dev/gemini-api/docs/models/gemini) available
      through the Gemini API.
    externalDocs: ""
    params:
      - paramName: $Xgafv
        description: V1 error format.
        paramKey: $.xgafv
        in: query
        schema:
          type: string
          enum:
            - "1"
            - "2"
        required: false
      - paramName: accessToken
        description: OAuth access token.
        paramKey: access_token
        in: query
        schema:
          type: string
        required: false
      - paramName: alt
        description: Data format for response.
        paramKey: alt
        in: query
        schema:
          type: string
          enum:
            - json
            - media
            - proto
        required: false
      - paramName: callback
        description: JSONP
        paramKey: callback
        in: query
        schema:
          type: string
        required: false
      - paramName: fields
        description: Selector specifying which fields to include in a partial response.
        paramKey: fields
        in: query
        schema:
          type: string
        required: false
      - paramName: key
        description: API key. Your API key identifies your project and provides you with
          API access, quota, and reports. Required unless you provide an OAuth
          2.0 token.
        paramKey: key
        in: query
        schema:
          type: string
        required: false
      - paramName: oauthToken
        description: OAuth 2.0 token for the current user.
        paramKey: oauth_token
        in: query
        schema:
          type: string
        required: false
      - paramName: prettyPrint
        description: Returns response with indentations and line breaks.
        paramKey: prettyPrint
        in: query
        schema:
          type: boolean
        required: false
      - paramName: quotaUser
        description: Available to use for quota purposes for server-side applications.
          Can be any arbitrary string assigned to a user, but should not exceed
          40 characters.
        paramKey: quotaUser
        in: query
        schema:
          type: string
        required: false
      - paramName: uploadProtocol
        description: Upload protocol for media (e.g. "raw", "multipart").
        paramKey: upload_protocol
        in: query
        schema:
          type: string
        required: false
      - paramName: uploadType
        description: Legacy upload protocol for media (e.g. "media", "multipart").
        paramKey: uploadType
        in: query
        schema:
          type: string
        required: false
      - paramName: pageSize
        description: The maximum number of `Models` to return (per page). If
          unspecified, 50 models will be returned per page. This method returns
          at most 1000 models per page, even if you pass a larger page_size.
        paramKey: pageSize
        in: query
        schema:
          type: number
        required: false
      - paramName: pageToken
        description: A page token, received from a previous `ListModels` call. Provide
          the `page_token` returned by one request as an argument to the next
          request to retrieve the next page. When paginating, all other
          parameters provided to `ListModels` must match the call that provided
          the page token.
        paramKey: pageToken
        in: query
        schema:
          type: string
        required: false
  - moduleName: Tuned Models / Create
    method: post
    path: /v1beta/tunedModels
    description: "Creates a tuned model. Check intermediate tuning progress (if any)
      through the [google.longrunning.Operations] service. Access status and
      results through the Operations service. Example: GET
      /v1/tunedModels/az2mb0bpw6i/operations/000-111-222"
    externalDocs: ""
    params:
      - paramName: $Xgafv
        description: V1 error format.
        paramKey: $.xgafv
        in: query
        schema:
          type: string
          enum:
            - "1"
            - "2"
        required: false
      - paramName: accessToken
        description: OAuth access token.
        paramKey: access_token
        in: query
        schema:
          type: string
        required: false
      - paramName: alt
        description: Data format for response.
        paramKey: alt
        in: query
        schema:
          type: string
          enum:
            - json
            - media
            - proto
        required: false
      - paramName: callback
        description: JSONP
        paramKey: callback
        in: query
        schema:
          type: string
        required: false
      - paramName: fields
        description: Selector specifying which fields to include in a partial response.
        paramKey: fields
        in: query
        schema:
          type: string
        required: false
      - paramName: key
        description: API key. Your API key identifies your project and provides you with
          API access, quota, and reports. Required unless you provide an OAuth
          2.0 token.
        paramKey: key
        in: query
        schema:
          type: string
        required: false
      - paramName: oauthToken
        description: OAuth 2.0 token for the current user.
        paramKey: oauth_token
        in: query
        schema:
          type: string
        required: false
      - paramName: prettyPrint
        description: Returns response with indentations and line breaks.
        paramKey: prettyPrint
        in: query
        schema:
          type: boolean
        required: false
      - paramName: quotaUser
        description: Available to use for quota purposes for server-side applications.
          Can be any arbitrary string assigned to a user, but should not exceed
          40 characters.
        paramKey: quotaUser
        in: query
        schema:
          type: string
        required: false
      - paramName: uploadProtocol
        description: Upload protocol for media (e.g. "raw", "multipart").
        paramKey: upload_protocol
        in: query
        schema:
          type: string
        required: false
      - paramName: uploadType
        description: Legacy upload protocol for media (e.g. "media", "multipart").
        paramKey: uploadType
        in: query
        schema:
          type: string
        required: false
      - paramName: tunedModelId
        description: "Optional. The unique id for the tuned model if specified. This
          value should be up to 40 characters, the first character must be a
          letter, the last could be a letter or a number. The id must match the
          regular expression: `[a-z]([a-z0-9-]{0,38}[a-z0-9])?`."
        paramKey: tunedModelId
        in: query
        schema:
          type: string
        required: false
      - paramName: baseModel
        description: "Immutable. The name of the `Model` to tune. Example:
          `models/gemini-1.5-flash-001`"
        paramKey: baseModel
        in: body
        schema:
          type: string
        required: false
      - paramName: createTime
        description: Output only. The timestamp when this model was created.
        paramKey: createTime
        in: body
        schema:
          type: string
        required: false
      - paramName: description
        description: Optional. A short description of this model.
        paramKey: description
        in: body
        schema:
          type: string
        required: false
      - paramName: displayName
        description: Optional. The name to display for this model in user interfaces.
          The display name must be up to 40 characters including spaces.
        paramKey: displayName
        in: body
        schema:
          type: string
        required: false
      - paramName: name
        description: "Output only. The tuned model name. A unique name will be generated
          on create. Example: `tunedModels/az2mb0bpw6i` If display_name is set
          on create, the id portion of the name will be set by concatenating the
          words of the display_name with hyphens and adding a random portion for
          uniqueness. Example: * display_name = `Sentence Translator` * name =
          `tunedModels/sentence-translator-u3b7m`"
        paramKey: name
        in: body
        schema:
          type: string
        required: false
      - paramName: readerProjectNumbers
        description: Optional. List of project numbers that have read access to the
          tuned model.
        paramKey: readerProjectNumbers
        in: body
        schema:
          type: array
          items:
            type: any
        required: false
      - paramName: state
        description: Output only. The state of the tuned model.
        paramKey: state
        in: body
        schema:
          type: string
          enum:
            - STATE_UNSPECIFIED
            - CREATING
            - ACTIVE
            - FAILED
        required: false
      - paramName: temperature
        description: Optional. Controls the randomness of the output. Values can range
          over `[0.0,1.0]`, inclusive. A value closer to `1.0` will produce
          responses that are more varied, while a value closer to `0.0` will
          typically result in less surprising responses from the model. This
          value specifies default to be the one used by the base model while
          creating the model.
        paramKey: temperature
        in: body
        schema:
          type: number
        required: false
      - paramName: topK
        description: Optional. For Top-k sampling. Top-k sampling considers the set of
          `top_k` most probable tokens. This value specifies default to be used
          by the backend while making the call to the model. This value
          specifies default to be the one used by the base model while creating
          the model.
        paramKey: topK
        in: body
        schema:
          type: number
        required: false
      - paramName: topP
        description: Optional. For Nucleus sampling. Nucleus sampling considers the
          smallest set of tokens whose probability sum is at least `top_p`. This
          value specifies default to be the one used by the base model while
          creating the model.
        paramKey: topP
        in: body
        schema:
          type: number
        required: false
      - paramName: tunedModelSource
        description: Tuned model as a source for training a new model.
        paramKey: tunedModelSource
        in: body
        schema:
          type: any
        required: false
      - paramName: tuningTask
        description: Tuning tasks that create tuned models.
        paramKey: tuningTask
        in: body
        schema:
          type: any
        required: false
      - paramName: updateTime
        description: Output only. The timestamp when this model was updated.
        paramKey: updateTime
        in: body
        schema:
          type: string
        required: false
    requestBodyType: json
  - moduleName: Tuned Models / List
    method: get
    path: /v1beta/tunedModels
    description: Lists created tuned models.
    externalDocs: ""
    params:
      - paramName: $Xgafv
        description: V1 error format.
        paramKey: $.xgafv
        in: query
        schema:
          type: string
          enum:
            - "1"
            - "2"
        required: false
      - paramName: accessToken
        description: OAuth access token.
        paramKey: access_token
        in: query
        schema:
          type: string
        required: false
      - paramName: alt
        description: Data format for response.
        paramKey: alt
        in: query
        schema:
          type: string
          enum:
            - json
            - media
            - proto
        required: false
      - paramName: callback
        description: JSONP
        paramKey: callback
        in: query
        schema:
          type: string
        required: false
      - paramName: fields
        description: Selector specifying which fields to include in a partial response.
        paramKey: fields
        in: query
        schema:
          type: string
        required: false
      - paramName: key
        description: API key. Your API key identifies your project and provides you with
          API access, quota, and reports. Required unless you provide an OAuth
          2.0 token.
        paramKey: key
        in: query
        schema:
          type: string
        required: false
      - paramName: oauthToken
        description: OAuth 2.0 token for the current user.
        paramKey: oauth_token
        in: query
        schema:
          type: string
        required: false
      - paramName: prettyPrint
        description: Returns response with indentations and line breaks.
        paramKey: prettyPrint
        in: query
        schema:
          type: boolean
        required: false
      - paramName: quotaUser
        description: Available to use for quota purposes for server-side applications.
          Can be any arbitrary string assigned to a user, but should not exceed
          40 characters.
        paramKey: quotaUser
        in: query
        schema:
          type: string
        required: false
      - paramName: uploadProtocol
        description: Upload protocol for media (e.g. "raw", "multipart").
        paramKey: upload_protocol
        in: query
        schema:
          type: string
        required: false
      - paramName: uploadType
        description: Legacy upload protocol for media (e.g. "media", "multipart").
        paramKey: uploadType
        in: query
        schema:
          type: string
        required: false
      - paramName: filter
        description: "Optional. A filter is a full text search over the tuned model's
          description and display name. By default, results will not include
          tuned models shared with everyone. Additional operators: - owner:me -
          writers:me - readers:me - readers:everyone Examples: \"owner:me\"
          returns all tuned models to which caller has owner role \"readers:me\"
          returns all tuned models to which caller has reader role
          \"readers:everyone\" returns all tuned models that are shared with
          everyone"
        paramKey: filter
        in: query
        schema:
          type: string
        required: false
      - paramName: pageSize
        description: Optional. The maximum number of `TunedModels` to return (per page).
          The service may return fewer tuned models. If unspecified, at most 10
          tuned models will be returned. This method returns at most 1000 models
          per page, even if you pass a larger page_size.
        paramKey: pageSize
        in: query
        schema:
          type: number
        required: false
      - paramName: pageToken
        description: Optional. A page token, received from a previous `ListTunedModels`
          call. Provide the `page_token` returned by one request as an argument
          to the next request to retrieve the next page. When paginating, all
          other parameters provided to `ListTunedModels` must match the call
          that provided the page token.
        paramKey: pageToken
        in: query
        schema:
          type: string
        required: false
  - moduleName: Cached Contents / Delete
    method: delete
    path: /v1beta/cachedContents/{name}
    description: Deletes CachedContent resource.
    externalDocs: ""
    params:
      - paramName: $Xgafv
        description: V1 error format.
        paramKey: $.xgafv
        in: query
        schema:
          type: string
          enum:
            - "1"
            - "2"
        required: false
      - paramName: accessToken
        description: OAuth access token.
        paramKey: access_token
        in: query
        schema:
          type: string
        required: false
      - paramName: alt
        description: Data format for response.
        paramKey: alt
        in: query
        schema:
          type: string
          enum:
            - json
            - media
            - proto
        required: false
      - paramName: callback
        description: JSONP
        paramKey: callback
        in: query
        schema:
          type: string
        required: false
      - paramName: fields
        description: Selector specifying which fields to include in a partial response.
        paramKey: fields
        in: query
        schema:
          type: string
        required: false
      - paramName: key
        description: API key. Your API key identifies your project and provides you with
          API access, quota, and reports. Required unless you provide an OAuth
          2.0 token.
        paramKey: key
        in: query
        schema:
          type: string
        required: false
      - paramName: oauthToken
        description: OAuth 2.0 token for the current user.
        paramKey: oauth_token
        in: query
        schema:
          type: string
        required: false
      - paramName: prettyPrint
        description: Returns response with indentations and line breaks.
        paramKey: prettyPrint
        in: query
        schema:
          type: boolean
        required: false
      - paramName: quotaUser
        description: Available to use for quota purposes for server-side applications.
          Can be any arbitrary string assigned to a user, but should not exceed
          40 characters.
        paramKey: quotaUser
        in: query
        schema:
          type: string
        required: false
      - paramName: uploadProtocol
        description: Upload protocol for media (e.g. "raw", "multipart").
        paramKey: upload_protocol
        in: query
        schema:
          type: string
        required: false
      - paramName: uploadType
        description: Legacy upload protocol for media (e.g. "media", "multipart").
        paramKey: uploadType
        in: query
        schema:
          type: string
        required: false
      - paramName: name
        description: "Required. The resource name referring to the content cache entry
          Format: `cachedContents/{id}`"
        paramKey: name
        in: path
        schema:
          type: string
        required: true
  - moduleName: Cached Contents / Get
    method: get
    path: /v1beta/cachedContents/{name}
    description: Reads CachedContent resource.
    externalDocs: ""
    params:
      - paramName: $Xgafv
        description: V1 error format.
        paramKey: $.xgafv
        in: query
        schema:
          type: string
          enum:
            - "1"
            - "2"
        required: false
      - paramName: accessToken
        description: OAuth access token.
        paramKey: access_token
        in: query
        schema:
          type: string
        required: false
      - paramName: alt
        description: Data format for response.
        paramKey: alt
        in: query
        schema:
          type: string
          enum:
            - json
            - media
            - proto
        required: false
      - paramName: callback
        description: JSONP
        paramKey: callback
        in: query
        schema:
          type: string
        required: false
      - paramName: fields
        description: Selector specifying which fields to include in a partial response.
        paramKey: fields
        in: query
        schema:
          type: string
        required: false
      - paramName: key
        description: API key. Your API key identifies your project and provides you with
          API access, quota, and reports. Required unless you provide an OAuth
          2.0 token.
        paramKey: key
        in: query
        schema:
          type: string
        required: false
      - paramName: oauthToken
        description: OAuth 2.0 token for the current user.
        paramKey: oauth_token
        in: query
        schema:
          type: string
        required: false
      - paramName: prettyPrint
        description: Returns response with indentations and line breaks.
        paramKey: prettyPrint
        in: query
        schema:
          type: boolean
        required: false
      - paramName: quotaUser
        description: Available to use for quota purposes for server-side applications.
          Can be any arbitrary string assigned to a user, but should not exceed
          40 characters.
        paramKey: quotaUser
        in: query
        schema:
          type: string
        required: false
      - paramName: uploadProtocol
        description: Upload protocol for media (e.g. "raw", "multipart").
        paramKey: upload_protocol
        in: query
        schema:
          type: string
        required: false
      - paramName: uploadType
        description: Legacy upload protocol for media (e.g. "media", "multipart").
        paramKey: uploadType
        in: query
        schema:
          type: string
        required: false
      - paramName: name
        description: "Required. The resource name referring to the content cache entry.
          Format: `cachedContents/{id}`"
        paramKey: name
        in: path
        schema:
          type: string
        required: true
  - moduleName: Cached Contents / Update
    method: patch
    path: /v1beta/cachedContents/{name}
    description: Updates CachedContent resource (only expiration is updatable).
    externalDocs: ""
    params:
      - paramName: $Xgafv
        description: V1 error format.
        paramKey: $.xgafv
        in: query
        schema:
          type: string
          enum:
            - "1"
            - "2"
        required: false
      - paramName: accessToken
        description: OAuth access token.
        paramKey: access_token
        in: query
        schema:
          type: string
        required: false
      - paramName: alt
        description: Data format for response.
        paramKey: alt
        in: query
        schema:
          type: string
          enum:
            - json
            - media
            - proto
        required: false
      - paramName: callback
        description: JSONP
        paramKey: callback
        in: query
        schema:
          type: string
        required: false
      - paramName: fields
        description: Selector specifying which fields to include in a partial response.
        paramKey: fields
        in: query
        schema:
          type: string
        required: false
      - paramName: key
        description: API key. Your API key identifies your project and provides you with
          API access, quota, and reports. Required unless you provide an OAuth
          2.0 token.
        paramKey: key
        in: query
        schema:
          type: string
        required: false
      - paramName: oauthToken
        description: OAuth 2.0 token for the current user.
        paramKey: oauth_token
        in: query
        schema:
          type: string
        required: false
      - paramName: prettyPrint
        description: Returns response with indentations and line breaks.
        paramKey: prettyPrint
        in: query
        schema:
          type: boolean
        required: false
      - paramName: quotaUser
        description: Available to use for quota purposes for server-side applications.
          Can be any arbitrary string assigned to a user, but should not exceed
          40 characters.
        paramKey: quotaUser
        in: query
        schema:
          type: string
        required: false
      - paramName: uploadProtocol
        description: Upload protocol for media (e.g. "raw", "multipart").
        paramKey: upload_protocol
        in: query
        schema:
          type: string
        required: false
      - paramName: uploadType
        description: Legacy upload protocol for media (e.g. "media", "multipart").
        paramKey: uploadType
        in: query
        schema:
          type: string
        required: false
      - paramName: name
        description: "Optional. Identifier. The resource name referring to the cached
          content. Format: `cachedContents/{id}`"
        paramKey: name
        in: path
        schema:
          type: string
        required: true
      - paramName: updateMask
        description: The list of fields to update.
        paramKey: updateMask
        in: query
        schema:
          type: string
        required: false
      - paramName: contents
        description: Optional. Input only. Immutable. The content to cache.
        paramKey: contents
        in: body
        schema:
          type: array
          items:
            type: any
        required: false
      - paramName: createTime
        description: Output only. Creation time of the cache entry.
        paramKey: createTime
        in: body
        schema:
          type: string
        required: false
      - paramName: displayName
        description: Optional. Immutable. The user-generated meaningful display name of
          the cached content. Maximum 128 Unicode characters.
        paramKey: displayName
        in: body
        schema:
          type: string
        required: false
      - paramName: expireTime
        description: Timestamp in UTC of when this resource is considered expired. This
          is *always* provided on output, regardless of what was sent on input.
        paramKey: expireTime
        in: body
        schema:
          type: string
        required: false
      - paramName: model
        description: "Required. Immutable. The name of the `Model` to use for cached
          content Format: `models/{model}`"
        paramKey: model
        in: body
        schema:
          type: string
        required: false
      - paramName: name
        description: "Optional. Identifier. The resource name referring to the cached
          content. Format: `cachedContents/{id}`"
        paramKey: name
        in: body
        schema:
          type: string
        required: false
      - paramName: systemInstruction
        description: ""
        paramKey: systemInstruction
        in: body
        schema:
          type: any
        required: false
      - paramName: toolConfig
        description: The Tool configuration containing parameters for specifying `Tool`
          use in the request.
        paramKey: toolConfig
        in: body
        schema:
          type: any
        required: false
      - paramName: tools
        description: Optional. Input only. Immutable. A list of `Tools` the model may
          use to generate the next response
        paramKey: tools
        in: body
        schema:
          type: array
          items:
            type: any
        required: false
      - paramName: ttl
        description: Input only. New TTL for this resource, input only.
        paramKey: ttl
        in: body
        schema:
          type: string
        required: false
      - paramName: updateTime
        description: Output only. When the cache entry was last updated in UTC time.
        paramKey: updateTime
        in: body
        schema:
          type: string
        required: false
      - paramName: usageMetadata
        description: Metadata on the usage of the cached content.
        paramKey: usageMetadata
        in: body
        schema:
          type: any
        required: false
    requestBodyType: json
  - moduleName: Corpora / Permissions / Delete
    method: delete
    path: /v1beta/corpora/{name}
    description: Deletes the permission.
    externalDocs: ""
    params:
      - paramName: $Xgafv
        description: V1 error format.
        paramKey: $.xgafv
        in: query
        schema:
          type: string
          enum:
            - "1"
            - "2"
        required: false
      - paramName: accessToken
        description: OAuth access token.
        paramKey: access_token
        in: query
        schema:
          type: string
        required: false
      - paramName: alt
        description: Data format for response.
        paramKey: alt
        in: query
        schema:
          type: string
          enum:
            - json
            - media
            - proto
        required: false
      - paramName: callback
        description: JSONP
        paramKey: callback
        in: query
        schema:
          type: string
        required: false
      - paramName: fields
        description: Selector specifying which fields to include in a partial response.
        paramKey: fields
        in: query
        schema:
          type: string
        required: false
      - paramName: key
        description: API key. Your API key identifies your project and provides you with
          API access, quota, and reports. Required unless you provide an OAuth
          2.0 token.
        paramKey: key
        in: query
        schema:
          type: string
        required: false
      - paramName: oauthToken
        description: OAuth 2.0 token for the current user.
        paramKey: oauth_token
        in: query
        schema:
          type: string
        required: false
      - paramName: prettyPrint
        description: Returns response with indentations and line breaks.
        paramKey: prettyPrint
        in: query
        schema:
          type: boolean
        required: false
      - paramName: quotaUser
        description: Available to use for quota purposes for server-side applications.
          Can be any arbitrary string assigned to a user, but should not exceed
          40 characters.
        paramKey: quotaUser
        in: query
        schema:
          type: string
        required: false
      - paramName: uploadProtocol
        description: Upload protocol for media (e.g. "raw", "multipart").
        paramKey: upload_protocol
        in: query
        schema:
          type: string
        required: false
      - paramName: uploadType
        description: Legacy upload protocol for media (e.g. "media", "multipart").
        paramKey: uploadType
        in: query
        schema:
          type: string
        required: false
      - paramName: name
        description: "Required. The resource name of the permission. Formats:
          `tunedModels/{tuned_model}/permissions/{permission}`
          `corpora/{corpus}/permissions/{permission}`"
        paramKey: name
        in: path
        schema:
          type: string
        required: true
      - paramName: force
        description: Optional. If set to true, any `Chunk`s and objects related to this
          `Document` will also be deleted. If false (the default), a
          `FAILED_PRECONDITION` error will be returned if `Document` contains
          any `Chunk`s.
        paramKey: force
        in: query
        schema:
          type: boolean
        required: false
  - moduleName: Corpora / Permissions / Get
    method: get
    path: /v1beta/corpora/{name}
    description: Gets information about a specific Permission.
    externalDocs: ""
    params:
      - paramName: $Xgafv
        description: V1 error format.
        paramKey: $.xgafv
        in: query
        schema:
          type: string
          enum:
            - "1"
            - "2"
        required: false
      - paramName: accessToken
        description: OAuth access token.
        paramKey: access_token
        in: query
        schema:
          type: string
        required: false
      - paramName: alt
        description: Data format for response.
        paramKey: alt
        in: query
        schema:
          type: string
          enum:
            - json
            - media
            - proto
        required: false
      - paramName: callback
        description: JSONP
        paramKey: callback
        in: query
        schema:
          type: string
        required: false
      - paramName: fields
        description: Selector specifying which fields to include in a partial response.
        paramKey: fields
        in: query
        schema:
          type: string
        required: false
      - paramName: key
        description: API key. Your API key identifies your project and provides you with
          API access, quota, and reports. Required unless you provide an OAuth
          2.0 token.
        paramKey: key
        in: query
        schema:
          type: string
        required: false
      - paramName: oauthToken
        description: OAuth 2.0 token for the current user.
        paramKey: oauth_token
        in: query
        schema:
          type: string
        required: false
      - paramName: prettyPrint
        description: Returns response with indentations and line breaks.
        paramKey: prettyPrint
        in: query
        schema:
          type: boolean
        required: false
      - paramName: quotaUser
        description: Available to use for quota purposes for server-side applications.
          Can be any arbitrary string assigned to a user, but should not exceed
          40 characters.
        paramKey: quotaUser
        in: query
        schema:
          type: string
        required: false
      - paramName: uploadProtocol
        description: Upload protocol for media (e.g. "raw", "multipart").
        paramKey: upload_protocol
        in: query
        schema:
          type: string
        required: false
      - paramName: uploadType
        description: Legacy upload protocol for media (e.g. "media", "multipart").
        paramKey: uploadType
        in: query
        schema:
          type: string
        required: false
      - paramName: name
        description: "Required. The resource name of the permission. Formats:
          `tunedModels/{tuned_model}/permissions/{permission}`
          `corpora/{corpus}/permissions/{permission}`"
        paramKey: name
        in: path
        schema:
          type: string
        required: true
  - moduleName: Corpora / Permissions / Update
    method: patch
    path: /v1beta/corpora/{name}
    description: Updates the permission.
    externalDocs: ""
    params:
      - paramName: $Xgafv
        description: V1 error format.
        paramKey: $.xgafv
        in: query
        schema:
          type: string
          enum:
            - "1"
            - "2"
        required: false
      - paramName: accessToken
        description: OAuth access token.
        paramKey: access_token
        in: query
        schema:
          type: string
        required: false
      - paramName: alt
        description: Data format for response.
        paramKey: alt
        in: query
        schema:
          type: string
          enum:
            - json
            - media
            - proto
        required: false
      - paramName: callback
        description: JSONP
        paramKey: callback
        in: query
        schema:
          type: string
        required: false
      - paramName: fields
        description: Selector specifying which fields to include in a partial response.
        paramKey: fields
        in: query
        schema:
          type: string
        required: false
      - paramName: key
        description: API key. Your API key identifies your project and provides you with
          API access, quota, and reports. Required unless you provide an OAuth
          2.0 token.
        paramKey: key
        in: query
        schema:
          type: string
        required: false
      - paramName: oauthToken
        description: OAuth 2.0 token for the current user.
        paramKey: oauth_token
        in: query
        schema:
          type: string
        required: false
      - paramName: prettyPrint
        description: Returns response with indentations and line breaks.
        paramKey: prettyPrint
        in: query
        schema:
          type: boolean
        required: false
      - paramName: quotaUser
        description: Available to use for quota purposes for server-side applications.
          Can be any arbitrary string assigned to a user, but should not exceed
          40 characters.
        paramKey: quotaUser
        in: query
        schema:
          type: string
        required: false
      - paramName: uploadProtocol
        description: Upload protocol for media (e.g. "raw", "multipart").
        paramKey: upload_protocol
        in: query
        schema:
          type: string
        required: false
      - paramName: uploadType
        description: Legacy upload protocol for media (e.g. "media", "multipart").
        paramKey: uploadType
        in: query
        schema:
          type: string
        required: false
      - paramName: name
        description: "Output only. Identifier. The permission name. A unique name will
          be generated on create. Examples:
          tunedModels/{tuned_model}/permissions/{permission}
          corpora/{corpus}/permissions/{permission} Output only."
        paramKey: name
        in: path
        schema:
          type: string
        required: true
      - paramName: updateMask
        description: "Required. The list of fields to update. Accepted ones: - role
          (`Permission.role` field)"
        paramKey: updateMask
        in: query
        schema:
          type: string
        required: false
      - paramName: emailAddress
        description: Optional. Immutable. The email address of the user of group which
          this permission refers. Field is not set when permission's grantee
          type is EVERYONE.
        paramKey: emailAddress
        in: body
        schema:
          type: string
        required: false
      - paramName: granteeType
        description: Optional. Immutable. The type of the grantee.
        paramKey: granteeType
        in: body
        schema:
          type: string
          enum:
            - GRANTEE_TYPE_UNSPECIFIED
            - USER
            - GROUP
            - EVERYONE
        required: false
      - paramName: name
        description: "Output only. Identifier. The permission name. A unique name will
          be generated on create. Examples:
          tunedModels/{tuned_model}/permissions/{permission}
          corpora/{corpus}/permissions/{permission} Output only."
        paramKey: name
        in: body
        schema:
          type: string
        required: false
      - paramName: role
        description: Required. The role granted by this permission.
        paramKey: role
        in: body
        schema:
          type: string
          enum:
            - ROLE_UNSPECIFIED
            - OWNER
            - WRITER
            - READER
        required: false
    requestBodyType: json
  - moduleName: Corpora / Documents / Query
    method: post
    path: /v1beta/corpora/{name}:query
    description: Performs semantic search over a `Document`.
    externalDocs: ""
    params:
      - paramName: $Xgafv
        description: V1 error format.
        paramKey: $.xgafv
        in: query
        schema:
          type: string
          enum:
            - "1"
            - "2"
        required: false
      - paramName: accessToken
        description: OAuth access token.
        paramKey: access_token
        in: query
        schema:
          type: string
        required: false
      - paramName: alt
        description: Data format for response.
        paramKey: alt
        in: query
        schema:
          type: string
          enum:
            - json
            - media
            - proto
        required: false
      - paramName: callback
        description: JSONP
        paramKey: callback
        in: query
        schema:
          type: string
        required: false
      - paramName: fields
        description: Selector specifying which fields to include in a partial response.
        paramKey: fields
        in: query
        schema:
          type: string
        required: false
      - paramName: key
        description: API key. Your API key identifies your project and provides you with
          API access, quota, and reports. Required unless you provide an OAuth
          2.0 token.
        paramKey: key
        in: query
        schema:
          type: string
        required: false
      - paramName: oauthToken
        description: OAuth 2.0 token for the current user.
        paramKey: oauth_token
        in: query
        schema:
          type: string
        required: false
      - paramName: prettyPrint
        description: Returns response with indentations and line breaks.
        paramKey: prettyPrint
        in: query
        schema:
          type: boolean
        required: false
      - paramName: quotaUser
        description: Available to use for quota purposes for server-side applications.
          Can be any arbitrary string assigned to a user, but should not exceed
          40 characters.
        paramKey: quotaUser
        in: query
        schema:
          type: string
        required: false
      - paramName: uploadProtocol
        description: Upload protocol for media (e.g. "raw", "multipart").
        paramKey: upload_protocol
        in: query
        schema:
          type: string
        required: false
      - paramName: uploadType
        description: Legacy upload protocol for media (e.g. "media", "multipart").
        paramKey: uploadType
        in: query
        schema:
          type: string
        required: false
      - paramName: name
        description: "Required. The name of the `Document` to query. Example:
          `corpora/my-corpus-123/documents/the-doc-abc`"
        paramKey: name
        in: path
        schema:
          type: string
        required: true
      - paramName: metadataFilters
        description: 'Optional. Filter for `Chunk` metadata. Each `MetadataFilter`
          object should correspond to a unique key. Multiple `MetadataFilter`
          objects are joined by logical "AND"s. Note: `Document`-level filtering
          is not supported for this request because a `Document` name is already
          specified. Example query: (year >= 2020 OR year < 2010) AND (genre =
          drama OR genre = action) `MetadataFilter` object list:
          metadata_filters = [ {key = "chunk.custom_metadata.year" conditions =
          [{int_value = 2020, operation = GREATER_EQUAL}, {int_value = 2010,
          operation = LESS}}, {key = "chunk.custom_metadata.genre" conditions =
          [{string_value = "drama", operation = EQUAL}, {string_value =
          "action", operation = EQUAL}}] Example query for a numeric range of
          values: (year > 2015 AND year <= 2020) `MetadataFilter` object list:
          metadata_filters = [ {key = "chunk.custom_metadata.year" conditions =
          [{int_value = 2015, operation = GREATER}]}, {key =
          "chunk.custom_metadata.year" conditions = [{int_value = 2020,
          operation = LESS_EQUAL}]}] Note: "AND"s for the same key are only
          supported for numeric values. String values only support "OR"s for the
          same key.'
        paramKey: metadataFilters
        in: body
        schema:
          type: array
          items:
            type: any
        required: false
      - paramName: query
        description: Required. Query string to perform semantic search.
        paramKey: query
        in: body
        schema:
          type: string
        required: false
      - paramName: resultsCount
        description: Optional. The maximum number of `Chunk`s to return. The service may
          return fewer `Chunk`s. If unspecified, at most 10 `Chunk`s will be
          returned. The maximum specified result count is 100.
        paramKey: resultsCount
        in: body
        schema:
          type: number
        required: false
    requestBodyType: json
  - moduleName: Corpora / Documents / Create
    method: post
    path: /v1beta/corpora/{parent}/documents
    description: Creates an empty `Document`.
    externalDocs: ""
    params:
      - paramName: $Xgafv
        description: V1 error format.
        paramKey: $.xgafv
        in: query
        schema:
          type: string
          enum:
            - "1"
            - "2"
        required: false
      - paramName: accessToken
        description: OAuth access token.
        paramKey: access_token
        in: query
        schema:
          type: string
        required: false
      - paramName: alt
        description: Data format for response.
        paramKey: alt
        in: query
        schema:
          type: string
          enum:
            - json
            - media
            - proto
        required: false
      - paramName: callback
        description: JSONP
        paramKey: callback
        in: query
        schema:
          type: string
        required: false
      - paramName: fields
        description: Selector specifying which fields to include in a partial response.
        paramKey: fields
        in: query
        schema:
          type: string
        required: false
      - paramName: key
        description: API key. Your API key identifies your project and provides you with
          API access, quota, and reports. Required unless you provide an OAuth
          2.0 token.
        paramKey: key
        in: query
        schema:
          type: string
        required: false
      - paramName: oauthToken
        description: OAuth 2.0 token for the current user.
        paramKey: oauth_token
        in: query
        schema:
          type: string
        required: false
      - paramName: prettyPrint
        description: Returns response with indentations and line breaks.
        paramKey: prettyPrint
        in: query
        schema:
          type: boolean
        required: false
      - paramName: quotaUser
        description: Available to use for quota purposes for server-side applications.
          Can be any arbitrary string assigned to a user, but should not exceed
          40 characters.
        paramKey: quotaUser
        in: query
        schema:
          type: string
        required: false
      - paramName: uploadProtocol
        description: Upload protocol for media (e.g. "raw", "multipart").
        paramKey: upload_protocol
        in: query
        schema:
          type: string
        required: false
      - paramName: uploadType
        description: Legacy upload protocol for media (e.g. "media", "multipart").
        paramKey: uploadType
        in: query
        schema:
          type: string
        required: false
      - paramName: parent
        description: "Required. The name of the `Corpus` where this `Document` will be
          created. Example: `corpora/my-corpus-123`"
        paramKey: parent
        in: path
        schema:
          type: string
        required: true
      - paramName: createTime
        description: Output only. The Timestamp of when the `Document` was created.
        paramKey: createTime
        in: body
        schema:
          type: string
        required: false
      - paramName: customMetadata
        description: Optional. User provided custom metadata stored as key-value pairs
          used for querying. A `Document` can have a maximum of 20
          `CustomMetadata`.
        paramKey: customMetadata
        in: body
        schema:
          type: array
          items:
            type: any
        required: false
      - paramName: displayName
        description: 'Optional. The human-readable display name for the `Document`. The
          display name must be no more than 512 characters in length, including
          spaces. Example: "Semantic Retriever Documentation"'
        paramKey: displayName
        in: body
        schema:
          type: string
        required: false
      - paramName: name
        description: 'Immutable. Identifier. The `Document` resource name. The ID (name
          excluding the "corpora/*/documents/" prefix) can contain up to 40
          characters that are lowercase alphanumeric or dashes (-). The ID
          cannot start or end with a dash. If the name is empty on create, a
          unique name will be derived from `display_name` along with a 12
          character random suffix. Example:
          `corpora/{corpus_id}/documents/my-awesome-doc-123a456b789c`'
        paramKey: name
        in: body
        schema:
          type: string
        required: false
      - paramName: updateTime
        description: Output only. The Timestamp of when the `Document` was last updated.
        paramKey: updateTime
        in: body
        schema:
          type: string
        required: false
    requestBodyType: json
  - moduleName: Corpora / Documents / List
    method: get
    path: /v1beta/corpora/{parent}/documents
    description: Lists all `Document`s in a `Corpus`.
    externalDocs: ""
    params:
      - paramName: $Xgafv
        description: V1 error format.
        paramKey: $.xgafv
        in: query
        schema:
          type: string
          enum:
            - "1"
            - "2"
        required: false
      - paramName: accessToken
        description: OAuth access token.
        paramKey: access_token
        in: query
        schema:
          type: string
        required: false
      - paramName: alt
        description: Data format for response.
        paramKey: alt
        in: query
        schema:
          type: string
          enum:
            - json
            - media
            - proto
        required: false
      - paramName: callback
        description: JSONP
        paramKey: callback
        in: query
        schema:
          type: string
        required: false
      - paramName: fields
        description: Selector specifying which fields to include in a partial response.
        paramKey: fields
        in: query
        schema:
          type: string
        required: false
      - paramName: key
        description: API key. Your API key identifies your project and provides you with
          API access, quota, and reports. Required unless you provide an OAuth
          2.0 token.
        paramKey: key
        in: query
        schema:
          type: string
        required: false
      - paramName: oauthToken
        description: OAuth 2.0 token for the current user.
        paramKey: oauth_token
        in: query
        schema:
          type: string
        required: false
      - paramName: prettyPrint
        description: Returns response with indentations and line breaks.
        paramKey: prettyPrint
        in: query
        schema:
          type: boolean
        required: false
      - paramName: quotaUser
        description: Available to use for quota purposes for server-side applications.
          Can be any arbitrary string assigned to a user, but should not exceed
          40 characters.
        paramKey: quotaUser
        in: query
        schema:
          type: string
        required: false
      - paramName: uploadProtocol
        description: Upload protocol for media (e.g. "raw", "multipart").
        paramKey: upload_protocol
        in: query
        schema:
          type: string
        required: false
      - paramName: uploadType
        description: Legacy upload protocol for media (e.g. "media", "multipart").
        paramKey: uploadType
        in: query
        schema:
          type: string
        required: false
      - paramName: parent
        description: "Required. The name of the `Corpus` containing `Document`s.
          Example: `corpora/my-corpus-123`"
        paramKey: parent
        in: path
        schema:
          type: string
        required: true
      - paramName: pageSize
        description: Optional. The maximum number of `Document`s to return (per page).
          The service may return fewer `Document`s. If unspecified, at most 10
          `Document`s will be returned. The maximum size limit is 20 `Document`s
          per page.
        paramKey: pageSize
        in: query
        schema:
          type: number
        required: false
      - paramName: pageToken
        description: Optional. A page token, received from a previous `ListDocuments`
          call. Provide the `next_page_token` returned in the response as an
          argument to the next request to retrieve the next page. When
          paginating, all other parameters provided to `ListDocuments` must
          match the call that provided the page token.
        paramKey: pageToken
        in: query
        schema:
          type: string
        required: false
  - moduleName: Corpora / Documents / Chunks / Batch Create
    method: post
    path: /v1beta/corpora/{parent}/chunks:batchCreate
    description: Batch create `Chunk`s.
    externalDocs: ""
    params:
      - paramName: $Xgafv
        description: V1 error format.
        paramKey: $.xgafv
        in: query
        schema:
          type: string
          enum:
            - "1"
            - "2"
        required: false
      - paramName: accessToken
        description: OAuth access token.
        paramKey: access_token
        in: query
        schema:
          type: string
        required: false
      - paramName: alt
        description: Data format for response.
        paramKey: alt
        in: query
        schema:
          type: string
          enum:
            - json
            - media
            - proto
        required: false
      - paramName: callback
        description: JSONP
        paramKey: callback
        in: query
        schema:
          type: string
        required: false
      - paramName: fields
        description: Selector specifying which fields to include in a partial response.
        paramKey: fields
        in: query
        schema:
          type: string
        required: false
      - paramName: key
        description: API key. Your API key identifies your project and provides you with
          API access, quota, and reports. Required unless you provide an OAuth
          2.0 token.
        paramKey: key
        in: query
        schema:
          type: string
        required: false
      - paramName: oauthToken
        description: OAuth 2.0 token for the current user.
        paramKey: oauth_token
        in: query
        schema:
          type: string
        required: false
      - paramName: prettyPrint
        description: Returns response with indentations and line breaks.
        paramKey: prettyPrint
        in: query
        schema:
          type: boolean
        required: false
      - paramName: quotaUser
        description: Available to use for quota purposes for server-side applications.
          Can be any arbitrary string assigned to a user, but should not exceed
          40 characters.
        paramKey: quotaUser
        in: query
        schema:
          type: string
        required: false
      - paramName: uploadProtocol
        description: Upload protocol for media (e.g. "raw", "multipart").
        paramKey: upload_protocol
        in: query
        schema:
          type: string
        required: false
      - paramName: uploadType
        description: Legacy upload protocol for media (e.g. "media", "multipart").
        paramKey: uploadType
        in: query
        schema:
          type: string
        required: false
      - paramName: parent
        description: "Optional. The name of the `Document` where this batch of `Chunk`s
          will be created. The parent field in every `CreateChunkRequest` must
          match this value. Example:
          `corpora/my-corpus-123/documents/the-doc-abc`"
        paramKey: parent
        in: path
        schema:
          type: string
        required: true
      - paramName: requests
        description: Required. The request messages specifying the `Chunk`s to create. A
          maximum of 100 `Chunk`s can be created in a batch.
        paramKey: requests
        in: body
        schema:
          type: array
          items:
            type: any
        required: false
    requestBodyType: json
  - moduleName: Corpora / Documents / Chunks / Batch Delete
    method: post
    path: /v1beta/corpora/{parent}/chunks:batchDelete
    description: Batch delete `Chunk`s.
    externalDocs: ""
    params:
      - paramName: $Xgafv
        description: V1 error format.
        paramKey: $.xgafv
        in: query
        schema:
          type: string
          enum:
            - "1"
            - "2"
        required: false
      - paramName: accessToken
        description: OAuth access token.
        paramKey: access_token
        in: query
        schema:
          type: string
        required: false
      - paramName: alt
        description: Data format for response.
        paramKey: alt
        in: query
        schema:
          type: string
          enum:
            - json
            - media
            - proto
        required: false
      - paramName: callback
        description: JSONP
        paramKey: callback
        in: query
        schema:
          type: string
        required: false
      - paramName: fields
        description: Selector specifying which fields to include in a partial response.
        paramKey: fields
        in: query
        schema:
          type: string
        required: false
      - paramName: key
        description: API key. Your API key identifies your project and provides you with
          API access, quota, and reports. Required unless you provide an OAuth
          2.0 token.
        paramKey: key
        in: query
        schema:
          type: string
        required: false
      - paramName: oauthToken
        description: OAuth 2.0 token for the current user.
        paramKey: oauth_token
        in: query
        schema:
          type: string
        required: false
      - paramName: prettyPrint
        description: Returns response with indentations and line breaks.
        paramKey: prettyPrint
        in: query
        schema:
          type: boolean
        required: false
      - paramName: quotaUser
        description: Available to use for quota purposes for server-side applications.
          Can be any arbitrary string assigned to a user, but should not exceed
          40 characters.
        paramKey: quotaUser
        in: query
        schema:
          type: string
        required: false
      - paramName: uploadProtocol
        description: Upload protocol for media (e.g. "raw", "multipart").
        paramKey: upload_protocol
        in: query
        schema:
          type: string
        required: false
      - paramName: uploadType
        description: Legacy upload protocol for media (e.g. "media", "multipart").
        paramKey: uploadType
        in: query
        schema:
          type: string
        required: false
      - paramName: parent
        description: "Optional. The name of the `Document` containing the `Chunk`s to
          delete. The parent field in every `DeleteChunkRequest` must match this
          value. Example: `corpora/my-corpus-123/documents/the-doc-abc`"
        paramKey: parent
        in: path
        schema:
          type: string
        required: true
      - paramName: requests
        description: Required. The request messages specifying the `Chunk`s to delete.
        paramKey: requests
        in: body
        schema:
          type: array
          items:
            type: any
        required: false
    requestBodyType: json
  - moduleName: Corpora / Documents / Chunks / Batch Update
    method: post
    path: /v1beta/corpora/{parent}/chunks:batchUpdate
    description: Batch update `Chunk`s.
    externalDocs: ""
    params:
      - paramName: $Xgafv
        description: V1 error format.
        paramKey: $.xgafv
        in: query
        schema:
          type: string
          enum:
            - "1"
            - "2"
        required: false
      - paramName: accessToken
        description: OAuth access token.
        paramKey: access_token
        in: query
        schema:
          type: string
        required: false
      - paramName: alt
        description: Data format for response.
        paramKey: alt
        in: query
        schema:
          type: string
          enum:
            - json
            - media
            - proto
        required: false
      - paramName: callback
        description: JSONP
        paramKey: callback
        in: query
        schema:
          type: string
        required: false
      - paramName: fields
        description: Selector specifying which fields to include in a partial response.
        paramKey: fields
        in: query
        schema:
          type: string
        required: false
      - paramName: key
        description: API key. Your API key identifies your project and provides you with
          API access, quota, and reports. Required unless you provide an OAuth
          2.0 token.
        paramKey: key
        in: query
        schema:
          type: string
        required: false
      - paramName: oauthToken
        description: OAuth 2.0 token for the current user.
        paramKey: oauth_token
        in: query
        schema:
          type: string
        required: false
      - paramName: prettyPrint
        description: Returns response with indentations and line breaks.
        paramKey: prettyPrint
        in: query
        schema:
          type: boolean
        required: false
      - paramName: quotaUser
        description: Available to use for quota purposes for server-side applications.
          Can be any arbitrary string assigned to a user, but should not exceed
          40 characters.
        paramKey: quotaUser
        in: query
        schema:
          type: string
        required: false
      - paramName: uploadProtocol
        description: Upload protocol for media (e.g. "raw", "multipart").
        paramKey: upload_protocol
        in: query
        schema:
          type: string
        required: false
      - paramName: uploadType
        description: Legacy upload protocol for media (e.g. "media", "multipart").
        paramKey: uploadType
        in: query
        schema:
          type: string
        required: false
      - paramName: parent
        description: "Optional. The name of the `Document` containing the `Chunk`s to
          update. The parent field in every `UpdateChunkRequest` must match this
          value. Example: `corpora/my-corpus-123/documents/the-doc-abc`"
        paramKey: parent
        in: path
        schema:
          type: string
        required: true
      - paramName: requests
        description: Required. The request messages specifying the `Chunk`s to update. A
          maximum of 100 `Chunk`s can be updated in a batch.
        paramKey: requests
        in: body
        schema:
          type: array
          items:
            type: any
        required: false
    requestBodyType: json
  - moduleName: Corpora / Documents / Chunks / Create
    method: post
    path: /v1beta/corpora/{parent}/chunks
    description: Creates a `Chunk`.
    externalDocs: ""
    params:
      - paramName: $Xgafv
        description: V1 error format.
        paramKey: $.xgafv
        in: query
        schema:
          type: string
          enum:
            - "1"
            - "2"
        required: false
      - paramName: accessToken
        description: OAuth access token.
        paramKey: access_token
        in: query
        schema:
          type: string
        required: false
      - paramName: alt
        description: Data format for response.
        paramKey: alt
        in: query
        schema:
          type: string
          enum:
            - json
            - media
            - proto
        required: false
      - paramName: callback
        description: JSONP
        paramKey: callback
        in: query
        schema:
          type: string
        required: false
      - paramName: fields
        description: Selector specifying which fields to include in a partial response.
        paramKey: fields
        in: query
        schema:
          type: string
        required: false
      - paramName: key
        description: API key. Your API key identifies your project and provides you with
          API access, quota, and reports. Required unless you provide an OAuth
          2.0 token.
        paramKey: key
        in: query
        schema:
          type: string
        required: false
      - paramName: oauthToken
        description: OAuth 2.0 token for the current user.
        paramKey: oauth_token
        in: query
        schema:
          type: string
        required: false
      - paramName: prettyPrint
        description: Returns response with indentations and line breaks.
        paramKey: prettyPrint
        in: query
        schema:
          type: boolean
        required: false
      - paramName: quotaUser
        description: Available to use for quota purposes for server-side applications.
          Can be any arbitrary string assigned to a user, but should not exceed
          40 characters.
        paramKey: quotaUser
        in: query
        schema:
          type: string
        required: false
      - paramName: uploadProtocol
        description: Upload protocol for media (e.g. "raw", "multipart").
        paramKey: upload_protocol
        in: query
        schema:
          type: string
        required: false
      - paramName: uploadType
        description: Legacy upload protocol for media (e.g. "media", "multipart").
        paramKey: uploadType
        in: query
        schema:
          type: string
        required: false
      - paramName: parent
        description: "Required. The name of the `Document` where this `Chunk` will be
          created. Example: `corpora/my-corpus-123/documents/the-doc-abc`"
        paramKey: parent
        in: path
        schema:
          type: string
        required: true
      - paramName: createTime
        description: Output only. The Timestamp of when the `Chunk` was created.
        paramKey: createTime
        in: body
        schema:
          type: string
        required: false
      - paramName: customMetadata
        description: Optional. User provided custom metadata stored as key-value pairs.
          The maximum number of `CustomMetadata` per chunk is 20.
        paramKey: customMetadata
        in: body
        schema:
          type: array
          items:
            type: any
        required: false
      - paramName: data
        description: Extracted data that represents the `Chunk` content.
        paramKey: data
        in: body
        schema:
          type: any
        required: false
      - paramName: name
        description: 'Immutable. Identifier. The `Chunk` resource name. The ID (name
          excluding the "corpora/*/documents/*/chunks/" prefix) can contain up
          to 40 characters that are lowercase alphanumeric or dashes (-). The ID
          cannot start or end with a dash. If the name is empty on create, a
          random 12-character unique ID will be generated. Example:
          `corpora/{corpus_id}/documents/{document_id}/chunks/123a456b789c`'
        paramKey: name
        in: body
        schema:
          type: string
        required: false
      - paramName: state
        description: Output only. Current state of the `Chunk`.
        paramKey: state
        in: body
        schema:
          type: string
          enum:
            - STATE_UNSPECIFIED
            - STATE_PENDING_PROCESSING
            - STATE_ACTIVE
            - STATE_FAILED
        required: false
      - paramName: updateTime
        description: Output only. The Timestamp of when the `Chunk` was last updated.
        paramKey: updateTime
        in: body
        schema:
          type: string
        required: false
    requestBodyType: json
  - moduleName: Corpora / Documents / Chunks / List
    method: get
    path: /v1beta/corpora/{parent}/chunks
    description: Lists all `Chunk`s in a `Document`.
    externalDocs: ""
    params:
      - paramName: $Xgafv
        description: V1 error format.
        paramKey: $.xgafv
        in: query
        schema:
          type: string
          enum:
            - "1"
            - "2"
        required: false
      - paramName: accessToken
        description: OAuth access token.
        paramKey: access_token
        in: query
        schema:
          type: string
        required: false
      - paramName: alt
        description: Data format for response.
        paramKey: alt
        in: query
        schema:
          type: string
          enum:
            - json
            - media
            - proto
        required: false
      - paramName: callback
        description: JSONP
        paramKey: callback
        in: query
        schema:
          type: string
        required: false
      - paramName: fields
        description: Selector specifying which fields to include in a partial response.
        paramKey: fields
        in: query
        schema:
          type: string
        required: false
      - paramName: key
        description: API key. Your API key identifies your project and provides you with
          API access, quota, and reports. Required unless you provide an OAuth
          2.0 token.
        paramKey: key
        in: query
        schema:
          type: string
        required: false
      - paramName: oauthToken
        description: OAuth 2.0 token for the current user.
        paramKey: oauth_token
        in: query
        schema:
          type: string
        required: false
      - paramName: prettyPrint
        description: Returns response with indentations and line breaks.
        paramKey: prettyPrint
        in: query
        schema:
          type: boolean
        required: false
      - paramName: quotaUser
        description: Available to use for quota purposes for server-side applications.
          Can be any arbitrary string assigned to a user, but should not exceed
          40 characters.
        paramKey: quotaUser
        in: query
        schema:
          type: string
        required: false
      - paramName: uploadProtocol
        description: Upload protocol for media (e.g. "raw", "multipart").
        paramKey: upload_protocol
        in: query
        schema:
          type: string
        required: false
      - paramName: uploadType
        description: Legacy upload protocol for media (e.g. "media", "multipart").
        paramKey: uploadType
        in: query
        schema:
          type: string
        required: false
      - paramName: parent
        description: "Required. The name of the `Document` containing `Chunk`s. Example:
          `corpora/my-corpus-123/documents/the-doc-abc`"
        paramKey: parent
        in: path
        schema:
          type: string
        required: true
      - paramName: pageSize
        description: Optional. The maximum number of `Chunk`s to return (per page). The
          service may return fewer `Chunk`s. If unspecified, at most 10 `Chunk`s
          will be returned. The maximum size limit is 100 `Chunk`s per page.
        paramKey: pageSize
        in: query
        schema:
          type: number
        required: false
      - paramName: pageToken
        description: Optional. A page token, received from a previous `ListChunks` call.
          Provide the `next_page_token` returned in the response as an argument
          to the next request to retrieve the next page. When paginating, all
          other parameters provided to `ListChunks` must match the call that
          provided the page token.
        paramKey: pageToken
        in: query
        schema:
          type: string
        required: false
  - moduleName: Corpora / Permissions / Create
    method: post
    path: /v1beta/corpora/{parent}/permissions
    description: Create a permission to a specific resource.
    externalDocs: ""
    params:
      - paramName: $Xgafv
        description: V1 error format.
        paramKey: $.xgafv
        in: query
        schema:
          type: string
          enum:
            - "1"
            - "2"
        required: false
      - paramName: accessToken
        description: OAuth access token.
        paramKey: access_token
        in: query
        schema:
          type: string
        required: false
      - paramName: alt
        description: Data format for response.
        paramKey: alt
        in: query
        schema:
          type: string
          enum:
            - json
            - media
            - proto
        required: false
      - paramName: callback
        description: JSONP
        paramKey: callback
        in: query
        schema:
          type: string
        required: false
      - paramName: fields
        description: Selector specifying which fields to include in a partial response.
        paramKey: fields
        in: query
        schema:
          type: string
        required: false
      - paramName: key
        description: API key. Your API key identifies your project and provides you with
          API access, quota, and reports. Required unless you provide an OAuth
          2.0 token.
        paramKey: key
        in: query
        schema:
          type: string
        required: false
      - paramName: oauthToken
        description: OAuth 2.0 token for the current user.
        paramKey: oauth_token
        in: query
        schema:
          type: string
        required: false
      - paramName: prettyPrint
        description: Returns response with indentations and line breaks.
        paramKey: prettyPrint
        in: query
        schema:
          type: boolean
        required: false
      - paramName: quotaUser
        description: Available to use for quota purposes for server-side applications.
          Can be any arbitrary string assigned to a user, but should not exceed
          40 characters.
        paramKey: quotaUser
        in: query
        schema:
          type: string
        required: false
      - paramName: uploadProtocol
        description: Upload protocol for media (e.g. "raw", "multipart").
        paramKey: upload_protocol
        in: query
        schema:
          type: string
        required: false
      - paramName: uploadType
        description: Legacy upload protocol for media (e.g. "media", "multipart").
        paramKey: uploadType
        in: query
        schema:
          type: string
        required: false
      - paramName: parent
        description: "Required. The parent resource of the `Permission`. Formats:
          `tunedModels/{tuned_model}` `corpora/{corpus}`"
        paramKey: parent
        in: path
        schema:
          type: string
        required: true
      - paramName: emailAddress
        description: Optional. Immutable. The email address of the user of group which
          this permission refers. Field is not set when permission's grantee
          type is EVERYONE.
        paramKey: emailAddress
        in: body
        schema:
          type: string
        required: false
      - paramName: granteeType
        description: Optional. Immutable. The type of the grantee.
        paramKey: granteeType
        in: body
        schema:
          type: string
          enum:
            - GRANTEE_TYPE_UNSPECIFIED
            - USER
            - GROUP
            - EVERYONE
        required: false
      - paramName: name
        description: "Output only. Identifier. The permission name. A unique name will
          be generated on create. Examples:
          tunedModels/{tuned_model}/permissions/{permission}
          corpora/{corpus}/permissions/{permission} Output only."
        paramKey: name
        in: body
        schema:
          type: string
        required: false
      - paramName: role
        description: Required. The role granted by this permission.
        paramKey: role
        in: body
        schema:
          type: string
          enum:
            - ROLE_UNSPECIFIED
            - OWNER
            - WRITER
            - READER
        required: false
    requestBodyType: json
  - moduleName: Corpora / Permissions / List
    method: get
    path: /v1beta/corpora/{parent}/permissions
    description: Lists permissions for the specific resource.
    externalDocs: ""
    params:
      - paramName: $Xgafv
        description: V1 error format.
        paramKey: $.xgafv
        in: query
        schema:
          type: string
          enum:
            - "1"
            - "2"
        required: false
      - paramName: accessToken
        description: OAuth access token.
        paramKey: access_token
        in: query
        schema:
          type: string
        required: false
      - paramName: alt
        description: Data format for response.
        paramKey: alt
        in: query
        schema:
          type: string
          enum:
            - json
            - media
            - proto
        required: false
      - paramName: callback
        description: JSONP
        paramKey: callback
        in: query
        schema:
          type: string
        required: false
      - paramName: fields
        description: Selector specifying which fields to include in a partial response.
        paramKey: fields
        in: query
        schema:
          type: string
        required: false
      - paramName: key
        description: API key. Your API key identifies your project and provides you with
          API access, quota, and reports. Required unless you provide an OAuth
          2.0 token.
        paramKey: key
        in: query
        schema:
          type: string
        required: false
      - paramName: oauthToken
        description: OAuth 2.0 token for the current user.
        paramKey: oauth_token
        in: query
        schema:
          type: string
        required: false
      - paramName: prettyPrint
        description: Returns response with indentations and line breaks.
        paramKey: prettyPrint
        in: query
        schema:
          type: boolean
        required: false
      - paramName: quotaUser
        description: Available to use for quota purposes for server-side applications.
          Can be any arbitrary string assigned to a user, but should not exceed
          40 characters.
        paramKey: quotaUser
        in: query
        schema:
          type: string
        required: false
      - paramName: uploadProtocol
        description: Upload protocol for media (e.g. "raw", "multipart").
        paramKey: upload_protocol
        in: query
        schema:
          type: string
        required: false
      - paramName: uploadType
        description: Legacy upload protocol for media (e.g. "media", "multipart").
        paramKey: uploadType
        in: query
        schema:
          type: string
        required: false
      - paramName: parent
        description: "Required. The parent resource of the permissions. Formats:
          `tunedModels/{tuned_model}` `corpora/{corpus}`"
        paramKey: parent
        in: path
        schema:
          type: string
        required: true
      - paramName: pageSize
        description: Optional. The maximum number of `Permission`s to return (per page).
          The service may return fewer permissions. If unspecified, at most 10
          permissions will be returned. This method returns at most 1000
          permissions per page, even if you pass larger page_size.
        paramKey: pageSize
        in: query
        schema:
          type: number
        required: false
      - paramName: pageToken
        description: Optional. A page token, received from a previous `ListPermissions`
          call. Provide the `page_token` returned by one request as an argument
          to the next request to retrieve the next page. When paginating, all
          other parameters provided to `ListPermissions` must match the call
          that provided the page token.
        paramKey: pageToken
        in: query
        schema:
          type: string
        required: false
  - moduleName: Files / Delete
    method: delete
    path: /v1beta/files/{name}
    description: Deletes the `File`.
    externalDocs: ""
    params:
      - paramName: $Xgafv
        description: V1 error format.
        paramKey: $.xgafv
        in: query
        schema:
          type: string
          enum:
            - "1"
            - "2"
        required: false
      - paramName: accessToken
        description: OAuth access token.
        paramKey: access_token
        in: query
        schema:
          type: string
        required: false
      - paramName: alt
        description: Data format for response.
        paramKey: alt
        in: query
        schema:
          type: string
          enum:
            - json
            - media
            - proto
        required: false
      - paramName: callback
        description: JSONP
        paramKey: callback
        in: query
        schema:
          type: string
        required: false
      - paramName: fields
        description: Selector specifying which fields to include in a partial response.
        paramKey: fields
        in: query
        schema:
          type: string
        required: false
      - paramName: key
        description: API key. Your API key identifies your project and provides you with
          API access, quota, and reports. Required unless you provide an OAuth
          2.0 token.
        paramKey: key
        in: query
        schema:
          type: string
        required: false
      - paramName: oauthToken
        description: OAuth 2.0 token for the current user.
        paramKey: oauth_token
        in: query
        schema:
          type: string
        required: false
      - paramName: prettyPrint
        description: Returns response with indentations and line breaks.
        paramKey: prettyPrint
        in: query
        schema:
          type: boolean
        required: false
      - paramName: quotaUser
        description: Available to use for quota purposes for server-side applications.
          Can be any arbitrary string assigned to a user, but should not exceed
          40 characters.
        paramKey: quotaUser
        in: query
        schema:
          type: string
        required: false
      - paramName: uploadProtocol
        description: Upload protocol for media (e.g. "raw", "multipart").
        paramKey: upload_protocol
        in: query
        schema:
          type: string
        required: false
      - paramName: uploadType
        description: Legacy upload protocol for media (e.g. "media", "multipart").
        paramKey: uploadType
        in: query
        schema:
          type: string
        required: false
      - paramName: name
        description: "Required. The name of the `File` to delete. Example: `files/abc-123`"
        paramKey: name
        in: path
        schema:
          type: string
        required: true
  - moduleName: Files / Get
    method: get
    path: /v1beta/files/{name}
    description: Gets the metadata for the given `File`.
    externalDocs: ""
    params:
      - paramName: $Xgafv
        description: V1 error format.
        paramKey: $.xgafv
        in: query
        schema:
          type: string
          enum:
            - "1"
            - "2"
        required: false
      - paramName: accessToken
        description: OAuth access token.
        paramKey: access_token
        in: query
        schema:
          type: string
        required: false
      - paramName: alt
        description: Data format for response.
        paramKey: alt
        in: query
        schema:
          type: string
          enum:
            - json
            - media
            - proto
        required: false
      - paramName: callback
        description: JSONP
        paramKey: callback
        in: query
        schema:
          type: string
        required: false
      - paramName: fields
        description: Selector specifying which fields to include in a partial response.
        paramKey: fields
        in: query
        schema:
          type: string
        required: false
      - paramName: key
        description: API key. Your API key identifies your project and provides you with
          API access, quota, and reports. Required unless you provide an OAuth
          2.0 token.
        paramKey: key
        in: query
        schema:
          type: string
        required: false
      - paramName: oauthToken
        description: OAuth 2.0 token for the current user.
        paramKey: oauth_token
        in: query
        schema:
          type: string
        required: false
      - paramName: prettyPrint
        description: Returns response with indentations and line breaks.
        paramKey: prettyPrint
        in: query
        schema:
          type: boolean
        required: false
      - paramName: quotaUser
        description: Available to use for quota purposes for server-side applications.
          Can be any arbitrary string assigned to a user, but should not exceed
          40 characters.
        paramKey: quotaUser
        in: query
        schema:
          type: string
        required: false
      - paramName: uploadProtocol
        description: Upload protocol for media (e.g. "raw", "multipart").
        paramKey: upload_protocol
        in: query
        schema:
          type: string
        required: false
      - paramName: uploadType
        description: Legacy upload protocol for media (e.g. "media", "multipart").
        paramKey: uploadType
        in: query
        schema:
          type: string
        required: false
      - paramName: name
        description: "Required. The name of the `File` to get. Example: `files/abc-123`"
        paramKey: name
        in: path
        schema:
          type: string
        required: true
  - moduleName: Media / Download
    method: get
    path: /v1beta/generatedFiles/{name}
    description: Gets a generated file. When calling this method via REST, only the
      metadata of the generated file is returned. To retrieve the file content
      via REST, add alt=media as a query parameter.
    externalDocs: ""
    params:
      - paramName: $Xgafv
        description: V1 error format.
        paramKey: $.xgafv
        in: query
        schema:
          type: string
          enum:
            - "1"
            - "2"
        required: false
      - paramName: accessToken
        description: OAuth access token.
        paramKey: access_token
        in: query
        schema:
          type: string
        required: false
      - paramName: alt
        description: Data format for response.
        paramKey: alt
        in: query
        schema:
          type: string
          enum:
            - json
            - media
            - proto
        required: false
      - paramName: callback
        description: JSONP
        paramKey: callback
        in: query
        schema:
          type: string
        required: false
      - paramName: fields
        description: Selector specifying which fields to include in a partial response.
        paramKey: fields
        in: query
        schema:
          type: string
        required: false
      - paramName: key
        description: API key. Your API key identifies your project and provides you with
          API access, quota, and reports. Required unless you provide an OAuth
          2.0 token.
        paramKey: key
        in: query
        schema:
          type: string
        required: false
      - paramName: oauthToken
        description: OAuth 2.0 token for the current user.
        paramKey: oauth_token
        in: query
        schema:
          type: string
        required: false
      - paramName: prettyPrint
        description: Returns response with indentations and line breaks.
        paramKey: prettyPrint
        in: query
        schema:
          type: boolean
        required: false
      - paramName: quotaUser
        description: Available to use for quota purposes for server-side applications.
          Can be any arbitrary string assigned to a user, but should not exceed
          40 characters.
        paramKey: quotaUser
        in: query
        schema:
          type: string
        required: false
      - paramName: uploadProtocol
        description: Upload protocol for media (e.g. "raw", "multipart").
        paramKey: upload_protocol
        in: query
        schema:
          type: string
        required: false
      - paramName: uploadType
        description: Legacy upload protocol for media (e.g. "media", "multipart").
        paramKey: uploadType
        in: query
        schema:
          type: string
        required: false
      - paramName: name
        description: "Required. The name of the generated file to retrieve. Example:
          `generatedFiles/abc-123`"
        paramKey: name
        in: path
        schema:
          type: string
        required: true
  - moduleName: Models / Batch Embed Contents
    method: post
    path: /v1beta/models/{model}:batchEmbedContents
    description: Generates multiple embedding vectors from the input `Content` which
      consists of a batch of strings represented as `EmbedContentRequest`
      objects.
    externalDocs: ""
    params:
      - paramName: $Xgafv
        description: V1 error format.
        paramKey: $.xgafv
        in: query
        schema:
          type: string
          enum:
            - "1"
            - "2"
        required: false
      - paramName: accessToken
        description: OAuth access token.
        paramKey: access_token
        in: query
        schema:
          type: string
        required: false
      - paramName: alt
        description: Data format for response.
        paramKey: alt
        in: query
        schema:
          type: string
          enum:
            - json
            - media
            - proto
        required: false
      - paramName: callback
        description: JSONP
        paramKey: callback
        in: query
        schema:
          type: string
        required: false
      - paramName: fields
        description: Selector specifying which fields to include in a partial response.
        paramKey: fields
        in: query
        schema:
          type: string
        required: false
      - paramName: key
        description: API key. Your API key identifies your project and provides you with
          API access, quota, and reports. Required unless you provide an OAuth
          2.0 token.
        paramKey: key
        in: query
        schema:
          type: string
        required: false
      - paramName: oauthToken
        description: OAuth 2.0 token for the current user.
        paramKey: oauth_token
        in: query
        schema:
          type: string
        required: false
      - paramName: prettyPrint
        description: Returns response with indentations and line breaks.
        paramKey: prettyPrint
        in: query
        schema:
          type: boolean
        required: false
      - paramName: quotaUser
        description: Available to use for quota purposes for server-side applications.
          Can be any arbitrary string assigned to a user, but should not exceed
          40 characters.
        paramKey: quotaUser
        in: query
        schema:
          type: string
        required: false
      - paramName: uploadProtocol
        description: Upload protocol for media (e.g. "raw", "multipart").
        paramKey: upload_protocol
        in: query
        schema:
          type: string
        required: false
      - paramName: uploadType
        description: Legacy upload protocol for media (e.g. "media", "multipart").
        paramKey: uploadType
        in: query
        schema:
          type: string
        required: false
      - paramName: model
        description: "Required. The model's resource name. This serves as an ID for the
          Model to use. This name should match a model name returned by the
          `ListModels` method. Format: `models/{model}`"
        paramKey: model
        in: path
        schema:
          type: string
        required: true
      - paramName: requests
        description: Required. Embed requests for the batch. The model in each of these
          requests must match the model specified
          `BatchEmbedContentsRequest.model`.
        paramKey: requests
        in: body
        schema:
          type: array
          items:
            type: any
        required: false
    requestBodyType: json
  - moduleName: Models / Batch Embed Text
    method: post
    path: /v1beta/models/{model}:batchEmbedText
    description: Generates multiple embeddings from the model given input text in a
      synchronous call.
    externalDocs: ""
    params:
      - paramName: $Xgafv
        description: V1 error format.
        paramKey: $.xgafv
        in: query
        schema:
          type: string
          enum:
            - "1"
            - "2"
        required: false
      - paramName: accessToken
        description: OAuth access token.
        paramKey: access_token
        in: query
        schema:
          type: string
        required: false
      - paramName: alt
        description: Data format for response.
        paramKey: alt
        in: query
        schema:
          type: string
          enum:
            - json
            - media
            - proto
        required: false
      - paramName: callback
        description: JSONP
        paramKey: callback
        in: query
        schema:
          type: string
        required: false
      - paramName: fields
        description: Selector specifying which fields to include in a partial response.
        paramKey: fields
        in: query
        schema:
          type: string
        required: false
      - paramName: key
        description: API key. Your API key identifies your project and provides you with
          API access, quota, and reports. Required unless you provide an OAuth
          2.0 token.
        paramKey: key
        in: query
        schema:
          type: string
        required: false
      - paramName: oauthToken
        description: OAuth 2.0 token for the current user.
        paramKey: oauth_token
        in: query
        schema:
          type: string
        required: false
      - paramName: prettyPrint
        description: Returns response with indentations and line breaks.
        paramKey: prettyPrint
        in: query
        schema:
          type: boolean
        required: false
      - paramName: quotaUser
        description: Available to use for quota purposes for server-side applications.
          Can be any arbitrary string assigned to a user, but should not exceed
          40 characters.
        paramKey: quotaUser
        in: query
        schema:
          type: string
        required: false
      - paramName: uploadProtocol
        description: Upload protocol for media (e.g. "raw", "multipart").
        paramKey: upload_protocol
        in: query
        schema:
          type: string
        required: false
      - paramName: uploadType
        description: Legacy upload protocol for media (e.g. "media", "multipart").
        paramKey: uploadType
        in: query
        schema:
          type: string
        required: false
      - paramName: model
        description: "Required. The name of the `Model` to use for generating the
          embedding. Examples: models/embedding-gecko-001"
        paramKey: model
        in: path
        schema:
          type: string
        required: true
      - paramName: requests
        description: Optional. Embed requests for the batch. Only one of `texts` or
          `requests` can be set.
        paramKey: requests
        in: body
        schema:
          type: array
          items:
            type: any
        required: false
      - paramName: texts
        description: Optional. The free-form input texts that the model will turn into
          an embedding. The current limit is 100 texts, over which an error will
          be thrown.
        paramKey: texts
        in: body
        schema:
          type: array
          items:
            type: any
        required: false
    requestBodyType: json
  - moduleName: Models / Count Message Tokens
    method: post
    path: /v1beta/models/{model}:countMessageTokens
    description: Runs a model's tokenizer on a string and returns the token count.
    externalDocs: ""
    params:
      - paramName: $Xgafv
        description: V1 error format.
        paramKey: $.xgafv
        in: query
        schema:
          type: string
          enum:
            - "1"
            - "2"
        required: false
      - paramName: accessToken
        description: OAuth access token.
        paramKey: access_token
        in: query
        schema:
          type: string
        required: false
      - paramName: alt
        description: Data format for response.
        paramKey: alt
        in: query
        schema:
          type: string
          enum:
            - json
            - media
            - proto
        required: false
      - paramName: callback
        description: JSONP
        paramKey: callback
        in: query
        schema:
          type: string
        required: false
      - paramName: fields
        description: Selector specifying which fields to include in a partial response.
        paramKey: fields
        in: query
        schema:
          type: string
        required: false
      - paramName: key
        description: API key. Your API key identifies your project and provides you with
          API access, quota, and reports. Required unless you provide an OAuth
          2.0 token.
        paramKey: key
        in: query
        schema:
          type: string
        required: false
      - paramName: oauthToken
        description: OAuth 2.0 token for the current user.
        paramKey: oauth_token
        in: query
        schema:
          type: string
        required: false
      - paramName: prettyPrint
        description: Returns response with indentations and line breaks.
        paramKey: prettyPrint
        in: query
        schema:
          type: boolean
        required: false
      - paramName: quotaUser
        description: Available to use for quota purposes for server-side applications.
          Can be any arbitrary string assigned to a user, but should not exceed
          40 characters.
        paramKey: quotaUser
        in: query
        schema:
          type: string
        required: false
      - paramName: uploadProtocol
        description: Upload protocol for media (e.g. "raw", "multipart").
        paramKey: upload_protocol
        in: query
        schema:
          type: string
        required: false
      - paramName: uploadType
        description: Legacy upload protocol for media (e.g. "media", "multipart").
        paramKey: uploadType
        in: query
        schema:
          type: string
        required: false
      - paramName: model
        description: "Required. The model's resource name. This serves as an ID for the
          Model to use. This name should match a model name returned by the
          `ListModels` method. Format: `models/{model}`"
        paramKey: model
        in: path
        schema:
          type: string
        required: true
      - paramName: prompt
        description: All of the structured input text passed to the model as a prompt. A
          `MessagePrompt` contains a structured set of fields that provide
          context for the conversation, examples of user input/model output
          message pairs that prime the model to respond in different ways, and
          the conversation history or list of messages representing the
          alternating turns of the conversation between the user and the model.
        paramKey: prompt
        in: body
        schema:
          type: any
        required: false
    requestBodyType: json
  - moduleName: Models / Count Text Tokens
    method: post
    path: /v1beta/models/{model}:countTextTokens
    description: Runs a model's tokenizer on a text and returns the token count.
    externalDocs: ""
    params:
      - paramName: $Xgafv
        description: V1 error format.
        paramKey: $.xgafv
        in: query
        schema:
          type: string
          enum:
            - "1"
            - "2"
        required: false
      - paramName: accessToken
        description: OAuth access token.
        paramKey: access_token
        in: query
        schema:
          type: string
        required: false
      - paramName: alt
        description: Data format for response.
        paramKey: alt
        in: query
        schema:
          type: string
          enum:
            - json
            - media
            - proto
        required: false
      - paramName: callback
        description: JSONP
        paramKey: callback
        in: query
        schema:
          type: string
        required: false
      - paramName: fields
        description: Selector specifying which fields to include in a partial response.
        paramKey: fields
        in: query
        schema:
          type: string
        required: false
      - paramName: key
        description: API key. Your API key identifies your project and provides you with
          API access, quota, and reports. Required unless you provide an OAuth
          2.0 token.
        paramKey: key
        in: query
        schema:
          type: string
        required: false
      - paramName: oauthToken
        description: OAuth 2.0 token for the current user.
        paramKey: oauth_token
        in: query
        schema:
          type: string
        required: false
      - paramName: prettyPrint
        description: Returns response with indentations and line breaks.
        paramKey: prettyPrint
        in: query
        schema:
          type: boolean
        required: false
      - paramName: quotaUser
        description: Available to use for quota purposes for server-side applications.
          Can be any arbitrary string assigned to a user, but should not exceed
          40 characters.
        paramKey: quotaUser
        in: query
        schema:
          type: string
        required: false
      - paramName: uploadProtocol
        description: Upload protocol for media (e.g. "raw", "multipart").
        paramKey: upload_protocol
        in: query
        schema:
          type: string
        required: false
      - paramName: uploadType
        description: Legacy upload protocol for media (e.g. "media", "multipart").
        paramKey: uploadType
        in: query
        schema:
          type: string
        required: false
      - paramName: model
        description: "Required. The model's resource name. This serves as an ID for the
          Model to use. This name should match a model name returned by the
          `ListModels` method. Format: `models/{model}`"
        paramKey: model
        in: path
        schema:
          type: string
        required: true
      - paramName: prompt
        description: Text given to the model as a prompt. The Model will use this
          TextPrompt to Generate a text completion.
        paramKey: prompt
        in: body
        schema:
          type: any
        required: false
    requestBodyType: json
  - moduleName: Models / Count Tokens
    method: post
    path: /v1beta/models/{model}:countTokens
    description: Runs a model's tokenizer on input `Content` and returns the token
      count. Refer to the [tokens
      guide](https://ai.google.dev/gemini-api/docs/tokens) to learn more about
      tokens.
    externalDocs: ""
    params:
      - paramName: $Xgafv
        description: V1 error format.
        paramKey: $.xgafv
        in: query
        schema:
          type: string
          enum:
            - "1"
            - "2"
        required: false
      - paramName: accessToken
        description: OAuth access token.
        paramKey: access_token
        in: query
        schema:
          type: string
        required: false
      - paramName: alt
        description: Data format for response.
        paramKey: alt
        in: query
        schema:
          type: string
          enum:
            - json
            - media
            - proto
        required: false
      - paramName: callback
        description: JSONP
        paramKey: callback
        in: query
        schema:
          type: string
        required: false
      - paramName: fields
        description: Selector specifying which fields to include in a partial response.
        paramKey: fields
        in: query
        schema:
          type: string
        required: false
      - paramName: key
        description: API key. Your API key identifies your project and provides you with
          API access, quota, and reports. Required unless you provide an OAuth
          2.0 token.
        paramKey: key
        in: query
        schema:
          type: string
        required: false
      - paramName: oauthToken
        description: OAuth 2.0 token for the current user.
        paramKey: oauth_token
        in: query
        schema:
          type: string
        required: false
      - paramName: prettyPrint
        description: Returns response with indentations and line breaks.
        paramKey: prettyPrint
        in: query
        schema:
          type: boolean
        required: false
      - paramName: quotaUser
        description: Available to use for quota purposes for server-side applications.
          Can be any arbitrary string assigned to a user, but should not exceed
          40 characters.
        paramKey: quotaUser
        in: query
        schema:
          type: string
        required: false
      - paramName: uploadProtocol
        description: Upload protocol for media (e.g. "raw", "multipart").
        paramKey: upload_protocol
        in: query
        schema:
          type: string
        required: false
      - paramName: uploadType
        description: Legacy upload protocol for media (e.g. "media", "multipart").
        paramKey: uploadType
        in: query
        schema:
          type: string
        required: false
      - paramName: model
        description: "Required. The model's resource name. This serves as an ID for the
          Model to use. This name should match a model name returned by the
          `ListModels` method. Format: `models/{model}`"
        paramKey: model
        in: path
        schema:
          type: string
        required: true
      - paramName: contents
        description: Optional. The input given to the model as a prompt. This field is
          ignored when `generate_content_request` is set.
        paramKey: contents
        in: body
        schema:
          type: array
          items:
            type: any
        required: false
      - paramName: generateContentRequest
        description: Request to generate a completion from the model.
        paramKey: generateContentRequest
        in: body
        schema:
          type: any
        required: false
    requestBodyType: json
  - moduleName: Models / Embed Content
    method: post
    path: /v1beta/models/{model}:embedContent
    description: Generates a text embedding vector from the input `Content` using
      the specified [Gemini Embedding
      model](https://ai.google.dev/gemini-api/docs/models/gemini#text-embedding).
    externalDocs: ""
    params:
      - paramName: $Xgafv
        description: V1 error format.
        paramKey: $.xgafv
        in: query
        schema:
          type: string
          enum:
            - "1"
            - "2"
        required: false
      - paramName: accessToken
        description: OAuth access token.
        paramKey: access_token
        in: query
        schema:
          type: string
        required: false
      - paramName: alt
        description: Data format for response.
        paramKey: alt
        in: query
        schema:
          type: string
          enum:
            - json
            - media
            - proto
        required: false
      - paramName: callback
        description: JSONP
        paramKey: callback
        in: query
        schema:
          type: string
        required: false
      - paramName: fields
        description: Selector specifying which fields to include in a partial response.
        paramKey: fields
        in: query
        schema:
          type: string
        required: false
      - paramName: key
        description: API key. Your API key identifies your project and provides you with
          API access, quota, and reports. Required unless you provide an OAuth
          2.0 token.
        paramKey: key
        in: query
        schema:
          type: string
        required: false
      - paramName: oauthToken
        description: OAuth 2.0 token for the current user.
        paramKey: oauth_token
        in: query
        schema:
          type: string
        required: false
      - paramName: prettyPrint
        description: Returns response with indentations and line breaks.
        paramKey: prettyPrint
        in: query
        schema:
          type: boolean
        required: false
      - paramName: quotaUser
        description: Available to use for quota purposes for server-side applications.
          Can be any arbitrary string assigned to a user, but should not exceed
          40 characters.
        paramKey: quotaUser
        in: query
        schema:
          type: string
        required: false
      - paramName: uploadProtocol
        description: Upload protocol for media (e.g. "raw", "multipart").
        paramKey: upload_protocol
        in: query
        schema:
          type: string
        required: false
      - paramName: uploadType
        description: Legacy upload protocol for media (e.g. "media", "multipart").
        paramKey: uploadType
        in: query
        schema:
          type: string
        required: false
      - paramName: model
        description: "Required. The model's resource name. This serves as an ID for the
          Model to use. This name should match a model name returned by the
          `ListModels` method. Format: `models/{model}`"
        paramKey: model
        in: path
        schema:
          type: string
        required: true
      - paramName: content
        description: The base structured datatype containing multi-part content of a
          message. A `Content` includes a `role` field designating the producer
          of the `Content` and a `parts` field containing multi-part data that
          contains the content of the message turn.
        paramKey: content
        in: body
        schema:
          type: any
        required: false
      - paramName: model
        description: "Required. The model's resource name. This serves as an ID for the
          Model to use. This name should match a model name returned by the
          `ListModels` method. Format: `models/{model}`"
        paramKey: model
        in: body
        schema:
          type: string
        required: false
      - paramName: outputDimensionality
        description: Optional. Optional reduced dimension for the output embedding. If
          set, excessive values in the output embedding are truncated from the
          end. Supported by newer models since 2024 only. You cannot set this
          value if using the earlier model (`models/embedding-001`).
        paramKey: outputDimensionality
        in: body
        schema:
          type: number
        required: false
      - paramName: taskType
        description: Optional. Optional task type for which the embeddings will be used.
          Can only be set for `models/embedding-001`.
        paramKey: taskType
        in: body
        schema:
          type: string
          enum:
            - TASK_TYPE_UNSPECIFIED
            - RETRIEVAL_QUERY
            - RETRIEVAL_DOCUMENT
            - SEMANTIC_SIMILARITY
            - CLASSIFICATION
            - CLUSTERING
            - QUESTION_ANSWERING
            - FACT_VERIFICATION
        required: false
      - paramName: title
        description: "Optional. An optional title for the text. Only applicable when
          TaskType is `RETRIEVAL_DOCUMENT`. Note: Specifying a `title` for
          `RETRIEVAL_DOCUMENT` provides better quality embeddings for
          retrieval."
        paramKey: title
        in: body
        schema:
          type: string
        required: false
    requestBodyType: json
  - moduleName: Models / Embed Text
    method: post
    path: /v1beta/models/{model}:embedText
    description: Generates an embedding from the model given an input message.
    externalDocs: ""
    params:
      - paramName: $Xgafv
        description: V1 error format.
        paramKey: $.xgafv
        in: query
        schema:
          type: string
          enum:
            - "1"
            - "2"
        required: false
      - paramName: accessToken
        description: OAuth access token.
        paramKey: access_token
        in: query
        schema:
          type: string
        required: false
      - paramName: alt
        description: Data format for response.
        paramKey: alt
        in: query
        schema:
          type: string
          enum:
            - json
            - media
            - proto
        required: false
      - paramName: callback
        description: JSONP
        paramKey: callback
        in: query
        schema:
          type: string
        required: false
      - paramName: fields
        description: Selector specifying which fields to include in a partial response.
        paramKey: fields
        in: query
        schema:
          type: string
        required: false
      - paramName: key
        description: API key. Your API key identifies your project and provides you with
          API access, quota, and reports. Required unless you provide an OAuth
          2.0 token.
        paramKey: key
        in: query
        schema:
          type: string
        required: false
      - paramName: oauthToken
        description: OAuth 2.0 token for the current user.
        paramKey: oauth_token
        in: query
        schema:
          type: string
        required: false
      - paramName: prettyPrint
        description: Returns response with indentations and line breaks.
        paramKey: prettyPrint
        in: query
        schema:
          type: boolean
        required: false
      - paramName: quotaUser
        description: Available to use for quota purposes for server-side applications.
          Can be any arbitrary string assigned to a user, but should not exceed
          40 characters.
        paramKey: quotaUser
        in: query
        schema:
          type: string
        required: false
      - paramName: uploadProtocol
        description: Upload protocol for media (e.g. "raw", "multipart").
        paramKey: upload_protocol
        in: query
        schema:
          type: string
        required: false
      - paramName: uploadType
        description: Legacy upload protocol for media (e.g. "media", "multipart").
        paramKey: uploadType
        in: query
        schema:
          type: string
        required: false
      - paramName: model
        description: Required. The model name to use with the format model=models/{model}.
        paramKey: model
        in: path
        schema:
          type: string
        required: true
      - paramName: model
        description: Required. The model name to use with the format model=models/{model}.
        paramKey: model
        in: body
        schema:
          type: string
        required: false
      - paramName: text
        description: Optional. The free-form input text that the model will turn into an
          embedding.
        paramKey: text
        in: body
        schema:
          type: string
        required: false
    requestBodyType: json
  - moduleName: Models / Generate Answer
    method: post
    path: /v1beta/models/{model}:generateAnswer
    description: Generates a grounded answer from the model given an input
      `GenerateAnswerRequest`.
    externalDocs: ""
    params:
      - paramName: $Xgafv
        description: V1 error format.
        paramKey: $.xgafv
        in: query
        schema:
          type: string
          enum:
            - "1"
            - "2"
        required: false
      - paramName: accessToken
        description: OAuth access token.
        paramKey: access_token
        in: query
        schema:
          type: string
        required: false
      - paramName: alt
        description: Data format for response.
        paramKey: alt
        in: query
        schema:
          type: string
          enum:
            - json
            - media
            - proto
        required: false
      - paramName: callback
        description: JSONP
        paramKey: callback
        in: query
        schema:
          type: string
        required: false
      - paramName: fields
        description: Selector specifying which fields to include in a partial response.
        paramKey: fields
        in: query
        schema:
          type: string
        required: false
      - paramName: key
        description: API key. Your API key identifies your project and provides you with
          API access, quota, and reports. Required unless you provide an OAuth
          2.0 token.
        paramKey: key
        in: query
        schema:
          type: string
        required: false
      - paramName: oauthToken
        description: OAuth 2.0 token for the current user.
        paramKey: oauth_token
        in: query
        schema:
          type: string
        required: false
      - paramName: prettyPrint
        description: Returns response with indentations and line breaks.
        paramKey: prettyPrint
        in: query
        schema:
          type: boolean
        required: false
      - paramName: quotaUser
        description: Available to use for quota purposes for server-side applications.
          Can be any arbitrary string assigned to a user, but should not exceed
          40 characters.
        paramKey: quotaUser
        in: query
        schema:
          type: string
        required: false
      - paramName: uploadProtocol
        description: Upload protocol for media (e.g. "raw", "multipart").
        paramKey: upload_protocol
        in: query
        schema:
          type: string
        required: false
      - paramName: uploadType
        description: Legacy upload protocol for media (e.g. "media", "multipart").
        paramKey: uploadType
        in: query
        schema:
          type: string
        required: false
      - paramName: model
        description: "Required. The name of the `Model` to use for generating the
          grounded response. Format: `model=models/{model}`."
        paramKey: model
        in: path
        schema:
          type: string
        required: true
      - paramName: answerStyle
        description: Required. Style in which answers should be returned.
        paramKey: answerStyle
        in: body
        schema:
          type: string
          enum:
            - ANSWER_STYLE_UNSPECIFIED
            - ABSTRACTIVE
            - EXTRACTIVE
            - VERBOSE
        required: false
      - paramName: contents
        description: "Required. The content of the current conversation with the
          `Model`. For single-turn queries, this is a single question to answer.
          For multi-turn queries, this is a repeated field that contains
          conversation history and the last `Content` in the list containing the
          question. Note: `GenerateAnswer` only supports queries in English."
        paramKey: contents
        in: body
        schema:
          type: array
          items:
            type: any
        required: false
      - paramName: inlinePassages
        description: A repeated list of passages.
        paramKey: inlinePassages
        in: body
        schema:
          type: any
        required: false
      - paramName: safetySettings
        description: Optional. A list of unique `SafetySetting` instances for blocking
          unsafe content. This will be enforced on the
          `GenerateAnswerRequest.contents` and
          `GenerateAnswerResponse.candidate`. There should not be more than one
          setting for each `SafetyCategory` type. The API will block any
          contents and responses that fail to meet the thresholds set by these
          settings. This list overrides the default settings for each
          `SafetyCategory` specified in the safety_settings. If there is no
          `SafetySetting` for a given `SafetyCategory` provided in the list, the
          API will use the default safety setting for that category. Harm
          categories HARM_CATEGORY_HATE_SPEECH, HARM_CATEGORY_SEXUALLY_EXPLICIT,
          HARM_CATEGORY_DANGEROUS_CONTENT, HARM_CATEGORY_HARASSMENT are
          supported. Refer to the
          [guide](https://ai.google.dev/gemini-api/docs/safety-settings) for
          detailed information on available safety settings. Also refer to the
          [Safety
          guidance](https://ai.google.dev/gemini-api/docs/safety-guidance) to
          learn how to incorporate safety considerations in your AI
          applications.
        paramKey: safetySettings
        in: body
        schema:
          type: array
          items:
            type: any
        required: false
      - paramName: semanticRetriever
        description: Configuration for retrieving grounding content from a `Corpus` or
          `Document` created using the Semantic Retriever API.
        paramKey: semanticRetriever
        in: body
        schema:
          type: any
        required: false
      - paramName: temperature
        description: Optional. Controls the randomness of the output. Values can range
          from [0.0,1.0], inclusive. A value closer to 1.0 will produce
          responses that are more varied and creative, while a value closer to
          0.0 will typically result in more straightforward responses from the
          model. A low temperature (~0.2) is usually recommended for
          Attributed-Question-Answering use cases.
        paramKey: temperature
        in: body
        schema:
          type: number
        required: false
    requestBodyType: json
  - moduleName: Models / Generate Content
    method: post
    path: /v1beta/models/{model}:generateContent
    description: Generates a model response given an input `GenerateContentRequest`.
      Refer to the [text generation
      guide](https://ai.google.dev/gemini-api/docs/text-generation) for detailed
      usage information. Input capabilities differ between models, including
      tuned models. Refer to the [model
      guide](https://ai.google.dev/gemini-api/docs/models/gemini) and [tuning
      guide](https://ai.google.dev/gemini-api/docs/model-tuning) for details.
    externalDocs: ""
    params:
      - paramName: $Xgafv
        description: V1 error format.
        paramKey: $.xgafv
        in: query
        schema:
          type: string
          enum:
            - "1"
            - "2"
        required: false
      - paramName: accessToken
        description: OAuth access token.
        paramKey: access_token
        in: query
        schema:
          type: string
        required: false
      - paramName: alt
        description: Data format for response.
        paramKey: alt
        in: query
        schema:
          type: string
          enum:
            - json
            - media
            - proto
        required: false
      - paramName: callback
        description: JSONP
        paramKey: callback
        in: query
        schema:
          type: string
        required: false
      - paramName: fields
        description: Selector specifying which fields to include in a partial response.
        paramKey: fields
        in: query
        schema:
          type: string
        required: false
      - paramName: key
        description: API key. Your API key identifies your project and provides you with
          API access, quota, and reports. Required unless you provide an OAuth
          2.0 token.
        paramKey: key
        in: query
        schema:
          type: string
        required: false
      - paramName: oauthToken
        description: OAuth 2.0 token for the current user.
        paramKey: oauth_token
        in: query
        schema:
          type: string
        required: false
      - paramName: prettyPrint
        description: Returns response with indentations and line breaks.
        paramKey: prettyPrint
        in: query
        schema:
          type: boolean
        required: false
      - paramName: quotaUser
        description: Available to use for quota purposes for server-side applications.
          Can be any arbitrary string assigned to a user, but should not exceed
          40 characters.
        paramKey: quotaUser
        in: query
        schema:
          type: string
        required: false
      - paramName: uploadProtocol
        description: Upload protocol for media (e.g. "raw", "multipart").
        paramKey: upload_protocol
        in: query
        schema:
          type: string
        required: false
      - paramName: uploadType
        description: Legacy upload protocol for media (e.g. "media", "multipart").
        paramKey: uploadType
        in: query
        schema:
          type: string
        required: false
      - paramName: model
        description: "Required. The name of the `Model` to use for generating the
          completion. Format: `name=models/{model}`."
        paramKey: model
        in: path
        schema:
          type: string
        required: true
      - paramName: cachedContent
        description: "Optional. The name of the content
          [cached](https://ai.google.dev/gemini-api/docs/caching) to use as
          context to serve the prediction. Format:
          `cachedContents/{cachedContent}`"
        paramKey: cachedContent
        in: body
        schema:
          type: string
        required: false
      - paramName: contents
        description: Required. The content of the current conversation with the model.
          For single-turn queries, this is a single instance. For multi-turn
          queries like
          [chat](https://ai.google.dev/gemini-api/docs/text-generation#chat),
          this is a repeated field that contains the conversation history and
          the latest request.
        paramKey: contents
        in: body
        schema:
          type: array
          items:
            type: any
        required: false
      - paramName: generationConfig
        description: Configuration options for model generation and outputs. Not all
          parameters are configurable for every model.
        paramKey: generationConfig
        in: body
        schema:
          type: any
        required: false
      - paramName: model
        description: "Required. The name of the `Model` to use for generating the
          completion. Format: `name=models/{model}`."
        paramKey: model
        in: body
        schema:
          type: string
        required: false
      - paramName: safetySettings
        description: Optional. A list of unique `SafetySetting` instances for blocking
          unsafe content. This will be enforced on the
          `GenerateContentRequest.contents` and
          `GenerateContentResponse.candidates`. There should not be more than
          one setting for each `SafetyCategory` type. The API will block any
          contents and responses that fail to meet the thresholds set by these
          settings. This list overrides the default settings for each
          `SafetyCategory` specified in the safety_settings. If there is no
          `SafetySetting` for a given `SafetyCategory` provided in the list, the
          API will use the default safety setting for that category. Harm
          categories HARM_CATEGORY_HATE_SPEECH, HARM_CATEGORY_SEXUALLY_EXPLICIT,
          HARM_CATEGORY_DANGEROUS_CONTENT, HARM_CATEGORY_HARASSMENT are
          supported. Refer to the
          [guide](https://ai.google.dev/gemini-api/docs/safety-settings) for
          detailed information on available safety settings. Also refer to the
          [Safety
          guidance](https://ai.google.dev/gemini-api/docs/safety-guidance) to
          learn how to incorporate safety considerations in your AI
          applications.
        paramKey: safetySettings
        in: body
        schema:
          type: array
          items:
            type: any
        required: false
      - paramName: systemInstruction
        description: ""
        paramKey: systemInstruction
        in: body
        schema:
          type: any
        required: false
      - paramName: toolConfig
        description: The Tool configuration containing parameters for specifying `Tool`
          use in the request.
        paramKey: toolConfig
        in: body
        schema:
          type: any
        required: false
      - paramName: tools
        description: Optional. A list of `Tools` the `Model` may use to generate the
          next response. A `Tool` is a piece of code that enables the system to
          interact with external systems to perform an action, or set of
          actions, outside of knowledge and scope of the `Model`. Supported
          `Tool`s are `Function` and `code_execution`. Refer to the [Function
          calling](https://ai.google.dev/gemini-api/docs/function-calling) and
          the [Code
          execution](https://ai.google.dev/gemini-api/docs/code-execution)
          guides to learn more.
        paramKey: tools
        in: body
        schema:
          type: array
          items:
            type: any
        required: false
    requestBodyType: json
  - moduleName: Models / Generate Message
    method: post
    path: /v1beta/models/{model}:generateMessage
    description: Generates a response from the model given an input `MessagePrompt`.
    externalDocs: ""
    params:
      - paramName: $Xgafv
        description: V1 error format.
        paramKey: $.xgafv
        in: query
        schema:
          type: string
          enum:
            - "1"
            - "2"
        required: false
      - paramName: accessToken
        description: OAuth access token.
        paramKey: access_token
        in: query
        schema:
          type: string
        required: false
      - paramName: alt
        description: Data format for response.
        paramKey: alt
        in: query
        schema:
          type: string
          enum:
            - json
            - media
            - proto
        required: false
      - paramName: callback
        description: JSONP
        paramKey: callback
        in: query
        schema:
          type: string
        required: false
      - paramName: fields
        description: Selector specifying which fields to include in a partial response.
        paramKey: fields
        in: query
        schema:
          type: string
        required: false
      - paramName: key
        description: API key. Your API key identifies your project and provides you with
          API access, quota, and reports. Required unless you provide an OAuth
          2.0 token.
        paramKey: key
        in: query
        schema:
          type: string
        required: false
      - paramName: oauthToken
        description: OAuth 2.0 token for the current user.
        paramKey: oauth_token
        in: query
        schema:
          type: string
        required: false
      - paramName: prettyPrint
        description: Returns response with indentations and line breaks.
        paramKey: prettyPrint
        in: query
        schema:
          type: boolean
        required: false
      - paramName: quotaUser
        description: Available to use for quota purposes for server-side applications.
          Can be any arbitrary string assigned to a user, but should not exceed
          40 characters.
        paramKey: quotaUser
        in: query
        schema:
          type: string
        required: false
      - paramName: uploadProtocol
        description: Upload protocol for media (e.g. "raw", "multipart").
        paramKey: upload_protocol
        in: query
        schema:
          type: string
        required: false
      - paramName: uploadType
        description: Legacy upload protocol for media (e.g. "media", "multipart").
        paramKey: uploadType
        in: query
        schema:
          type: string
        required: false
      - paramName: model
        description: "Required. The name of the model to use. Format:
          `name=models/{model}`."
        paramKey: model
        in: path
        schema:
          type: string
        required: true
      - paramName: candidateCount
        description: Optional. The number of generated response messages to return. This
          value must be between `[1, 8]`, inclusive. If unset, this will default
          to `1`.
        paramKey: candidateCount
        in: body
        schema:
          type: number
        required: false
      - paramName: prompt
        description: All of the structured input text passed to the model as a prompt. A
          `MessagePrompt` contains a structured set of fields that provide
          context for the conversation, examples of user input/model output
          message pairs that prime the model to respond in different ways, and
          the conversation history or list of messages representing the
          alternating turns of the conversation between the user and the model.
        paramKey: prompt
        in: body
        schema:
          type: any
        required: false
      - paramName: temperature
        description: Optional. Controls the randomness of the output. Values can range
          over `[0.0,1.0]`, inclusive. A value closer to `1.0` will produce
          responses that are more varied, while a value closer to `0.0` will
          typically result in less surprising responses from the model.
        paramKey: temperature
        in: body
        schema:
          type: number
        required: false
      - paramName: topK
        description: Optional. The maximum number of tokens to consider when sampling.
          The model uses combined Top-k and nucleus sampling. Top-k sampling
          considers the set of `top_k` most probable tokens.
        paramKey: topK
        in: body
        schema:
          type: number
        required: false
      - paramName: topP
        description: Optional. The maximum cumulative probability of tokens to consider
          when sampling. The model uses combined Top-k and nucleus sampling.
          Nucleus sampling considers the smallest set of tokens whose
          probability sum is at least `top_p`.
        paramKey: topP
        in: body
        schema:
          type: number
        required: false
    requestBodyType: json
  - moduleName: Models / Generate Text
    method: post
    path: /v1beta/models/{model}:generateText
    description: Generates a response from the model given an input message.
    externalDocs: ""
    params:
      - paramName: $Xgafv
        description: V1 error format.
        paramKey: $.xgafv
        in: query
        schema:
          type: string
          enum:
            - "1"
            - "2"
        required: false
      - paramName: accessToken
        description: OAuth access token.
        paramKey: access_token
        in: query
        schema:
          type: string
        required: false
      - paramName: alt
        description: Data format for response.
        paramKey: alt
        in: query
        schema:
          type: string
          enum:
            - json
            - media
            - proto
        required: false
      - paramName: callback
        description: JSONP
        paramKey: callback
        in: query
        schema:
          type: string
        required: false
      - paramName: fields
        description: Selector specifying which fields to include in a partial response.
        paramKey: fields
        in: query
        schema:
          type: string
        required: false
      - paramName: key
        description: API key. Your API key identifies your project and provides you with
          API access, quota, and reports. Required unless you provide an OAuth
          2.0 token.
        paramKey: key
        in: query
        schema:
          type: string
        required: false
      - paramName: oauthToken
        description: OAuth 2.0 token for the current user.
        paramKey: oauth_token
        in: query
        schema:
          type: string
        required: false
      - paramName: prettyPrint
        description: Returns response with indentations and line breaks.
        paramKey: prettyPrint
        in: query
        schema:
          type: boolean
        required: false
      - paramName: quotaUser
        description: Available to use for quota purposes for server-side applications.
          Can be any arbitrary string assigned to a user, but should not exceed
          40 characters.
        paramKey: quotaUser
        in: query
        schema:
          type: string
        required: false
      - paramName: uploadProtocol
        description: Upload protocol for media (e.g. "raw", "multipart").
        paramKey: upload_protocol
        in: query
        schema:
          type: string
        required: false
      - paramName: uploadType
        description: Legacy upload protocol for media (e.g. "media", "multipart").
        paramKey: uploadType
        in: query
        schema:
          type: string
        required: false
      - paramName: model
        description: "Required. The name of the `Model` or `TunedModel` to use for
          generating the completion. Examples: models/text-bison-001
          tunedModels/sentence-translator-u3b7m"
        paramKey: model
        in: path
        schema:
          type: string
        required: true
      - paramName: candidateCount
        description: Optional. Number of generated responses to return. This value must
          be between [1, 8], inclusive. If unset, this will default to 1.
        paramKey: candidateCount
        in: body
        schema:
          type: number
        required: false
      - paramName: maxOutputTokens
        description: Optional. The maximum number of tokens to include in a candidate.
          If unset, this will default to output_token_limit specified in the
          `Model` specification.
        paramKey: maxOutputTokens
        in: body
        schema:
          type: number
        required: false
      - paramName: prompt
        description: Text given to the model as a prompt. The Model will use this
          TextPrompt to Generate a text completion.
        paramKey: prompt
        in: body
        schema:
          type: any
        required: false
      - paramName: safetySettings
        description: Optional. A list of unique `SafetySetting` instances for blocking
          unsafe content. that will be enforced on the
          `GenerateTextRequest.prompt` and `GenerateTextResponse.candidates`.
          There should not be more than one setting for each `SafetyCategory`
          type. The API will block any prompts and responses that fail to meet
          the thresholds set by these settings. This list overrides the default
          settings for each `SafetyCategory` specified in the safety_settings.
          If there is no `SafetySetting` for a given `SafetyCategory` provided
          in the list, the API will use the default safety setting for that
          category. Harm categories HARM_CATEGORY_DEROGATORY,
          HARM_CATEGORY_TOXICITY, HARM_CATEGORY_VIOLENCE, HARM_CATEGORY_SEXUAL,
          HARM_CATEGORY_MEDICAL, HARM_CATEGORY_DANGEROUS are supported in text
          service.
        paramKey: safetySettings
        in: body
        schema:
          type: array
          items:
            type: any
        required: false
      - paramName: stopSequences
        description: The set of character sequences (up to 5) that will stop output
          generation. If specified, the API will stop at the first appearance of
          a stop sequence. The stop sequence will not be included as part of the
          response.
        paramKey: stopSequences
        in: body
        schema:
          type: array
          items:
            type: any
        required: false
      - paramName: temperature
        description: "Optional. Controls the randomness of the output. Note: The default
          value varies by model, see the `Model.temperature` attribute of the
          `Model` returned the `getModel` function. Values can range from
          [0.0,1.0], inclusive. A value closer to 1.0 will produce responses
          that are more varied and creative, while a value closer to 0.0 will
          typically result in more straightforward responses from the model."
        paramKey: temperature
        in: body
        schema:
          type: number
        required: false
      - paramName: topK
        description: "Optional. The maximum number of tokens to consider when sampling.
          The model uses combined Top-k and nucleus sampling. Top-k sampling
          considers the set of `top_k` most probable tokens. Defaults to 40.
          Note: The default value varies by model, see the `Model.top_k`
          attribute of the `Model` returned the `getModel` function."
        paramKey: topK
        in: body
        schema:
          type: number
        required: false
      - paramName: topP
        description: "Optional. The maximum cumulative probability of tokens to consider
          when sampling. The model uses combined Top-k and nucleus sampling.
          Tokens are sorted based on their assigned probabilities so that only
          the most likely tokens are considered. Top-k sampling directly limits
          the maximum number of tokens to consider, while Nucleus sampling
          limits number of tokens based on the cumulative probability. Note: The
          default value varies by model, see the `Model.top_p` attribute of the
          `Model` returned the `getModel` function."
        paramKey: topP
        in: body
        schema:
          type: number
        required: false
    requestBodyType: json
  - moduleName: Models / Operations / Get
    method: get
    path: /v1beta/models/{name}
    description: Gets the latest state of a long-running operation. Clients can use
      this method to poll the operation result at intervals as recommended by
      the API service.
    externalDocs: ""
    params:
      - paramName: $Xgafv
        description: V1 error format.
        paramKey: $.xgafv
        in: query
        schema:
          type: string
          enum:
            - "1"
            - "2"
        required: false
      - paramName: accessToken
        description: OAuth access token.
        paramKey: access_token
        in: query
        schema:
          type: string
        required: false
      - paramName: alt
        description: Data format for response.
        paramKey: alt
        in: query
        schema:
          type: string
          enum:
            - json
            - media
            - proto
        required: false
      - paramName: callback
        description: JSONP
        paramKey: callback
        in: query
        schema:
          type: string
        required: false
      - paramName: fields
        description: Selector specifying which fields to include in a partial response.
        paramKey: fields
        in: query
        schema:
          type: string
        required: false
      - paramName: key
        description: API key. Your API key identifies your project and provides you with
          API access, quota, and reports. Required unless you provide an OAuth
          2.0 token.
        paramKey: key
        in: query
        schema:
          type: string
        required: false
      - paramName: oauthToken
        description: OAuth 2.0 token for the current user.
        paramKey: oauth_token
        in: query
        schema:
          type: string
        required: false
      - paramName: prettyPrint
        description: Returns response with indentations and line breaks.
        paramKey: prettyPrint
        in: query
        schema:
          type: boolean
        required: false
      - paramName: quotaUser
        description: Available to use for quota purposes for server-side applications.
          Can be any arbitrary string assigned to a user, but should not exceed
          40 characters.
        paramKey: quotaUser
        in: query
        schema:
          type: string
        required: false
      - paramName: uploadProtocol
        description: Upload protocol for media (e.g. "raw", "multipart").
        paramKey: upload_protocol
        in: query
        schema:
          type: string
        required: false
      - paramName: uploadType
        description: Legacy upload protocol for media (e.g. "media", "multipart").
        paramKey: uploadType
        in: query
        schema:
          type: string
        required: false
      - paramName: name
        description: The name of the operation resource.
        paramKey: name
        in: path
        schema:
          type: string
        required: true
  - moduleName: Models / Predict
    method: post
    path: /v1beta/models/{model}:predict
    description: Performs a prediction request.
    externalDocs: ""
    params:
      - paramName: $Xgafv
        description: V1 error format.
        paramKey: $.xgafv
        in: query
        schema:
          type: string
          enum:
            - "1"
            - "2"
        required: false
      - paramName: accessToken
        description: OAuth access token.
        paramKey: access_token
        in: query
        schema:
          type: string
        required: false
      - paramName: alt
        description: Data format for response.
        paramKey: alt
        in: query
        schema:
          type: string
          enum:
            - json
            - media
            - proto
        required: false
      - paramName: callback
        description: JSONP
        paramKey: callback
        in: query
        schema:
          type: string
        required: false
      - paramName: fields
        description: Selector specifying which fields to include in a partial response.
        paramKey: fields
        in: query
        schema:
          type: string
        required: false
      - paramName: key
        description: API key. Your API key identifies your project and provides you with
          API access, quota, and reports. Required unless you provide an OAuth
          2.0 token.
        paramKey: key
        in: query
        schema:
          type: string
        required: false
      - paramName: oauthToken
        description: OAuth 2.0 token for the current user.
        paramKey: oauth_token
        in: query
        schema:
          type: string
        required: false
      - paramName: prettyPrint
        description: Returns response with indentations and line breaks.
        paramKey: prettyPrint
        in: query
        schema:
          type: boolean
        required: false
      - paramName: quotaUser
        description: Available to use for quota purposes for server-side applications.
          Can be any arbitrary string assigned to a user, but should not exceed
          40 characters.
        paramKey: quotaUser
        in: query
        schema:
          type: string
        required: false
      - paramName: uploadProtocol
        description: Upload protocol for media (e.g. "raw", "multipart").
        paramKey: upload_protocol
        in: query
        schema:
          type: string
        required: false
      - paramName: uploadType
        description: Legacy upload protocol for media (e.g. "media", "multipart").
        paramKey: uploadType
        in: query
        schema:
          type: string
        required: false
      - paramName: model
        description: "Required. The name of the model for prediction. Format:
          `name=models/{model}`."
        paramKey: model
        in: path
        schema:
          type: string
        required: true
      - paramName: instances
        description: Required. The instances that are the input to the prediction call.
        paramKey: instances
        in: body
        schema:
          type: array
          items:
            type: any
        required: false
      - paramName: parameters
        description: Optional. The parameters that govern the prediction call.
        paramKey: parameters
        in: body
        schema:
          type: any
        required: false
    requestBodyType: json
  - moduleName: Models / Predict Long Running
    method: post
    path: /v1beta/models/{model}:predictLongRunning
    description: Same as Predict but returns an LRO.
    externalDocs: ""
    params:
      - paramName: $Xgafv
        description: V1 error format.
        paramKey: $.xgafv
        in: query
        schema:
          type: string
          enum:
            - "1"
            - "2"
        required: false
      - paramName: accessToken
        description: OAuth access token.
        paramKey: access_token
        in: query
        schema:
          type: string
        required: false
      - paramName: alt
        description: Data format for response.
        paramKey: alt
        in: query
        schema:
          type: string
          enum:
            - json
            - media
            - proto
        required: false
      - paramName: callback
        description: JSONP
        paramKey: callback
        in: query
        schema:
          type: string
        required: false
      - paramName: fields
        description: Selector specifying which fields to include in a partial response.
        paramKey: fields
        in: query
        schema:
          type: string
        required: false
      - paramName: key
        description: API key. Your API key identifies your project and provides you with
          API access, quota, and reports. Required unless you provide an OAuth
          2.0 token.
        paramKey: key
        in: query
        schema:
          type: string
        required: false
      - paramName: oauthToken
        description: OAuth 2.0 token for the current user.
        paramKey: oauth_token
        in: query
        schema:
          type: string
        required: false
      - paramName: prettyPrint
        description: Returns response with indentations and line breaks.
        paramKey: prettyPrint
        in: query
        schema:
          type: boolean
        required: false
      - paramName: quotaUser
        description: Available to use for quota purposes for server-side applications.
          Can be any arbitrary string assigned to a user, but should not exceed
          40 characters.
        paramKey: quotaUser
        in: query
        schema:
          type: string
        required: false
      - paramName: uploadProtocol
        description: Upload protocol for media (e.g. "raw", "multipart").
        paramKey: upload_protocol
        in: query
        schema:
          type: string
        required: false
      - paramName: uploadType
        description: Legacy upload protocol for media (e.g. "media", "multipart").
        paramKey: uploadType
        in: query
        schema:
          type: string
        required: false
      - paramName: model
        description: "Required. The name of the model for prediction. Format:
          `name=models/{model}`."
        paramKey: model
        in: path
        schema:
          type: string
        required: true
      - paramName: instances
        description: Required. The instances that are the input to the prediction call.
        paramKey: instances
        in: body
        schema:
          type: array
          items:
            type: any
        required: false
      - paramName: parameters
        description: Optional. The parameters that govern the prediction call.
        paramKey: parameters
        in: body
        schema:
          type: any
        required: false
    requestBodyType: json
  - moduleName: Models / Stream Generate Content
    method: post
    path: /v1beta/models/{model}:streamGenerateContent
    description: Generates a [streamed
      response](https://ai.google.dev/gemini-api/docs/text-generation?lang=python#generate-a-text-stream)
      from the model given an input `GenerateContentRequest`.
    externalDocs: ""
    params:
      - paramName: $Xgafv
        description: V1 error format.
        paramKey: $.xgafv
        in: query
        schema:
          type: string
          enum:
            - "1"
            - "2"
        required: false
      - paramName: accessToken
        description: OAuth access token.
        paramKey: access_token
        in: query
        schema:
          type: string
        required: false
      - paramName: alt
        description: Data format for response.
        paramKey: alt
        in: query
        schema:
          type: string
          enum:
            - json
            - media
            - proto
        required: false
      - paramName: callback
        description: JSONP
        paramKey: callback
        in: query
        schema:
          type: string
        required: false
      - paramName: fields
        description: Selector specifying which fields to include in a partial response.
        paramKey: fields
        in: query
        schema:
          type: string
        required: false
      - paramName: key
        description: API key. Your API key identifies your project and provides you with
          API access, quota, and reports. Required unless you provide an OAuth
          2.0 token.
        paramKey: key
        in: query
        schema:
          type: string
        required: false
      - paramName: oauthToken
        description: OAuth 2.0 token for the current user.
        paramKey: oauth_token
        in: query
        schema:
          type: string
        required: false
      - paramName: prettyPrint
        description: Returns response with indentations and line breaks.
        paramKey: prettyPrint
        in: query
        schema:
          type: boolean
        required: false
      - paramName: quotaUser
        description: Available to use for quota purposes for server-side applications.
          Can be any arbitrary string assigned to a user, but should not exceed
          40 characters.
        paramKey: quotaUser
        in: query
        schema:
          type: string
        required: false
      - paramName: uploadProtocol
        description: Upload protocol for media (e.g. "raw", "multipart").
        paramKey: upload_protocol
        in: query
        schema:
          type: string
        required: false
      - paramName: uploadType
        description: Legacy upload protocol for media (e.g. "media", "multipart").
        paramKey: uploadType
        in: query
        schema:
          type: string
        required: false
      - paramName: model
        description: "Required. The name of the `Model` to use for generating the
          completion. Format: `name=models/{model}`."
        paramKey: model
        in: path
        schema:
          type: string
        required: true
      - paramName: cachedContent
        description: "Optional. The name of the content
          [cached](https://ai.google.dev/gemini-api/docs/caching) to use as
          context to serve the prediction. Format:
          `cachedContents/{cachedContent}`"
        paramKey: cachedContent
        in: body
        schema:
          type: string
        required: false
      - paramName: contents
        description: Required. The content of the current conversation with the model.
          For single-turn queries, this is a single instance. For multi-turn
          queries like
          [chat](https://ai.google.dev/gemini-api/docs/text-generation#chat),
          this is a repeated field that contains the conversation history and
          the latest request.
        paramKey: contents
        in: body
        schema:
          type: array
          items:
            type: any
        required: false
      - paramName: generationConfig
        description: Configuration options for model generation and outputs. Not all
          parameters are configurable for every model.
        paramKey: generationConfig
        in: body
        schema:
          type: any
        required: false
      - paramName: model
        description: "Required. The name of the `Model` to use for generating the
          completion. Format: `name=models/{model}`."
        paramKey: model
        in: body
        schema:
          type: string
        required: false
      - paramName: safetySettings
        description: Optional. A list of unique `SafetySetting` instances for blocking
          unsafe content. This will be enforced on the
          `GenerateContentRequest.contents` and
          `GenerateContentResponse.candidates`. There should not be more than
          one setting for each `SafetyCategory` type. The API will block any
          contents and responses that fail to meet the thresholds set by these
          settings. This list overrides the default settings for each
          `SafetyCategory` specified in the safety_settings. If there is no
          `SafetySetting` for a given `SafetyCategory` provided in the list, the
          API will use the default safety setting for that category. Harm
          categories HARM_CATEGORY_HATE_SPEECH, HARM_CATEGORY_SEXUALLY_EXPLICIT,
          HARM_CATEGORY_DANGEROUS_CONTENT, HARM_CATEGORY_HARASSMENT are
          supported. Refer to the
          [guide](https://ai.google.dev/gemini-api/docs/safety-settings) for
          detailed information on available safety settings. Also refer to the
          [Safety
          guidance](https://ai.google.dev/gemini-api/docs/safety-guidance) to
          learn how to incorporate safety considerations in your AI
          applications.
        paramKey: safetySettings
        in: body
        schema:
          type: array
          items:
            type: any
        required: false
      - paramName: systemInstruction
        description: ""
        paramKey: systemInstruction
        in: body
        schema:
          type: any
        required: false
      - paramName: toolConfig
        description: The Tool configuration containing parameters for specifying `Tool`
          use in the request.
        paramKey: toolConfig
        in: body
        schema:
          type: any
        required: false
      - paramName: tools
        description: Optional. A list of `Tools` the `Model` may use to generate the
          next response. A `Tool` is a piece of code that enables the system to
          interact with external systems to perform an action, or set of
          actions, outside of knowledge and scope of the `Model`. Supported
          `Tool`s are `Function` and `code_execution`. Refer to the [Function
          calling](https://ai.google.dev/gemini-api/docs/function-calling) and
          the [Code
          execution](https://ai.google.dev/gemini-api/docs/code-execution)
          guides to learn more.
        paramKey: tools
        in: body
        schema:
          type: array
          items:
            type: any
        required: false
    requestBodyType: json
  - moduleName: Models / Operations / List
    method: get
    path: /v1beta/models/{name}/operations
    description: Lists operations that match the specified filter in the request. If
      the server doesn't support this method, it returns `UNIMPLEMENTED`.
    externalDocs: ""
    params:
      - paramName: $Xgafv
        description: V1 error format.
        paramKey: $.xgafv
        in: query
        schema:
          type: string
          enum:
            - "1"
            - "2"
        required: false
      - paramName: accessToken
        description: OAuth access token.
        paramKey: access_token
        in: query
        schema:
          type: string
        required: false
      - paramName: alt
        description: Data format for response.
        paramKey: alt
        in: query
        schema:
          type: string
          enum:
            - json
            - media
            - proto
        required: false
      - paramName: callback
        description: JSONP
        paramKey: callback
        in: query
        schema:
          type: string
        required: false
      - paramName: fields
        description: Selector specifying which fields to include in a partial response.
        paramKey: fields
        in: query
        schema:
          type: string
        required: false
      - paramName: key
        description: API key. Your API key identifies your project and provides you with
          API access, quota, and reports. Required unless you provide an OAuth
          2.0 token.
        paramKey: key
        in: query
        schema:
          type: string
        required: false
      - paramName: oauthToken
        description: OAuth 2.0 token for the current user.
        paramKey: oauth_token
        in: query
        schema:
          type: string
        required: false
      - paramName: prettyPrint
        description: Returns response with indentations and line breaks.
        paramKey: prettyPrint
        in: query
        schema:
          type: boolean
        required: false
      - paramName: quotaUser
        description: Available to use for quota purposes for server-side applications.
          Can be any arbitrary string assigned to a user, but should not exceed
          40 characters.
        paramKey: quotaUser
        in: query
        schema:
          type: string
        required: false
      - paramName: uploadProtocol
        description: Upload protocol for media (e.g. "raw", "multipart").
        paramKey: upload_protocol
        in: query
        schema:
          type: string
        required: false
      - paramName: uploadType
        description: Legacy upload protocol for media (e.g. "media", "multipart").
        paramKey: uploadType
        in: query
        schema:
          type: string
        required: false
      - paramName: name
        description: The name of the operation's parent resource.
        paramKey: name
        in: path
        schema:
          type: string
        required: true
      - paramName: filter
        description: The standard list filter.
        paramKey: filter
        in: query
        schema:
          type: string
        required: false
      - paramName: pageSize
        description: The standard list page size.
        paramKey: pageSize
        in: query
        schema:
          type: number
        required: false
      - paramName: pageToken
        description: The standard list page token.
        paramKey: pageToken
        in: query
        schema:
          type: string
        required: false
  - moduleName: Tuned Models / Permissions / Delete
    method: delete
    path: /v1beta/tunedModels/{name}
    description: Deletes the permission.
    externalDocs: ""
    params:
      - paramName: $Xgafv
        description: V1 error format.
        paramKey: $.xgafv
        in: query
        schema:
          type: string
          enum:
            - "1"
            - "2"
        required: false
      - paramName: accessToken
        description: OAuth access token.
        paramKey: access_token
        in: query
        schema:
          type: string
        required: false
      - paramName: alt
        description: Data format for response.
        paramKey: alt
        in: query
        schema:
          type: string
          enum:
            - json
            - media
            - proto
        required: false
      - paramName: callback
        description: JSONP
        paramKey: callback
        in: query
        schema:
          type: string
        required: false
      - paramName: fields
        description: Selector specifying which fields to include in a partial response.
        paramKey: fields
        in: query
        schema:
          type: string
        required: false
      - paramName: key
        description: API key. Your API key identifies your project and provides you with
          API access, quota, and reports. Required unless you provide an OAuth
          2.0 token.
        paramKey: key
        in: query
        schema:
          type: string
        required: false
      - paramName: oauthToken
        description: OAuth 2.0 token for the current user.
        paramKey: oauth_token
        in: query
        schema:
          type: string
        required: false
      - paramName: prettyPrint
        description: Returns response with indentations and line breaks.
        paramKey: prettyPrint
        in: query
        schema:
          type: boolean
        required: false
      - paramName: quotaUser
        description: Available to use for quota purposes for server-side applications.
          Can be any arbitrary string assigned to a user, but should not exceed
          40 characters.
        paramKey: quotaUser
        in: query
        schema:
          type: string
        required: false
      - paramName: uploadProtocol
        description: Upload protocol for media (e.g. "raw", "multipart").
        paramKey: upload_protocol
        in: query
        schema:
          type: string
        required: false
      - paramName: uploadType
        description: Legacy upload protocol for media (e.g. "media", "multipart").
        paramKey: uploadType
        in: query
        schema:
          type: string
        required: false
      - paramName: name
        description: "Required. The resource name of the permission. Formats:
          `tunedModels/{tuned_model}/permissions/{permission}`
          `corpora/{corpus}/permissions/{permission}`"
        paramKey: name
        in: path
        schema:
          type: string
        required: true
  - moduleName: Tuned Models / Permissions / Get
    method: get
    path: /v1beta/tunedModels/{name}
    description: Gets information about a specific Permission.
    externalDocs: ""
    params:
      - paramName: $Xgafv
        description: V1 error format.
        paramKey: $.xgafv
        in: query
        schema:
          type: string
          enum:
            - "1"
            - "2"
        required: false
      - paramName: accessToken
        description: OAuth access token.
        paramKey: access_token
        in: query
        schema:
          type: string
        required: false
      - paramName: alt
        description: Data format for response.
        paramKey: alt
        in: query
        schema:
          type: string
          enum:
            - json
            - media
            - proto
        required: false
      - paramName: callback
        description: JSONP
        paramKey: callback
        in: query
        schema:
          type: string
        required: false
      - paramName: fields
        description: Selector specifying which fields to include in a partial response.
        paramKey: fields
        in: query
        schema:
          type: string
        required: false
      - paramName: key
        description: API key. Your API key identifies your project and provides you with
          API access, quota, and reports. Required unless you provide an OAuth
          2.0 token.
        paramKey: key
        in: query
        schema:
          type: string
        required: false
      - paramName: oauthToken
        description: OAuth 2.0 token for the current user.
        paramKey: oauth_token
        in: query
        schema:
          type: string
        required: false
      - paramName: prettyPrint
        description: Returns response with indentations and line breaks.
        paramKey: prettyPrint
        in: query
        schema:
          type: boolean
        required: false
      - paramName: quotaUser
        description: Available to use for quota purposes for server-side applications.
          Can be any arbitrary string assigned to a user, but should not exceed
          40 characters.
        paramKey: quotaUser
        in: query
        schema:
          type: string
        required: false
      - paramName: uploadProtocol
        description: Upload protocol for media (e.g. "raw", "multipart").
        paramKey: upload_protocol
        in: query
        schema:
          type: string
        required: false
      - paramName: uploadType
        description: Legacy upload protocol for media (e.g. "media", "multipart").
        paramKey: uploadType
        in: query
        schema:
          type: string
        required: false
      - paramName: name
        description: "Required. The resource name of the permission. Formats:
          `tunedModels/{tuned_model}/permissions/{permission}`
          `corpora/{corpus}/permissions/{permission}`"
        paramKey: name
        in: path
        schema:
          type: string
        required: true
  - moduleName: Tuned Models / Permissions / Update
    method: patch
    path: /v1beta/tunedModels/{name}
    description: Updates the permission.
    externalDocs: ""
    params:
      - paramName: $Xgafv
        description: V1 error format.
        paramKey: $.xgafv
        in: query
        schema:
          type: string
          enum:
            - "1"
            - "2"
        required: false
      - paramName: accessToken
        description: OAuth access token.
        paramKey: access_token
        in: query
        schema:
          type: string
        required: false
      - paramName: alt
        description: Data format for response.
        paramKey: alt
        in: query
        schema:
          type: string
          enum:
            - json
            - media
            - proto
        required: false
      - paramName: callback
        description: JSONP
        paramKey: callback
        in: query
        schema:
          type: string
        required: false
      - paramName: fields
        description: Selector specifying which fields to include in a partial response.
        paramKey: fields
        in: query
        schema:
          type: string
        required: false
      - paramName: key
        description: API key. Your API key identifies your project and provides you with
          API access, quota, and reports. Required unless you provide an OAuth
          2.0 token.
        paramKey: key
        in: query
        schema:
          type: string
        required: false
      - paramName: oauthToken
        description: OAuth 2.0 token for the current user.
        paramKey: oauth_token
        in: query
        schema:
          type: string
        required: false
      - paramName: prettyPrint
        description: Returns response with indentations and line breaks.
        paramKey: prettyPrint
        in: query
        schema:
          type: boolean
        required: false
      - paramName: quotaUser
        description: Available to use for quota purposes for server-side applications.
          Can be any arbitrary string assigned to a user, but should not exceed
          40 characters.
        paramKey: quotaUser
        in: query
        schema:
          type: string
        required: false
      - paramName: uploadProtocol
        description: Upload protocol for media (e.g. "raw", "multipart").
        paramKey: upload_protocol
        in: query
        schema:
          type: string
        required: false
      - paramName: uploadType
        description: Legacy upload protocol for media (e.g. "media", "multipart").
        paramKey: uploadType
        in: query
        schema:
          type: string
        required: false
      - paramName: name
        description: "Output only. Identifier. The permission name. A unique name will
          be generated on create. Examples:
          tunedModels/{tuned_model}/permissions/{permission}
          corpora/{corpus}/permissions/{permission} Output only."
        paramKey: name
        in: path
        schema:
          type: string
        required: true
      - paramName: updateMask
        description: "Required. The list of fields to update. Accepted ones: - role
          (`Permission.role` field)"
        paramKey: updateMask
        in: query
        schema:
          type: string
        required: false
      - paramName: emailAddress
        description: Optional. Immutable. The email address of the user of group which
          this permission refers. Field is not set when permission's grantee
          type is EVERYONE.
        paramKey: emailAddress
        in: body
        schema:
          type: string
        required: false
      - paramName: granteeType
        description: Optional. Immutable. The type of the grantee.
        paramKey: granteeType
        in: body
        schema:
          type: string
          enum:
            - GRANTEE_TYPE_UNSPECIFIED
            - USER
            - GROUP
            - EVERYONE
        required: false
      - paramName: name
        description: "Output only. Identifier. The permission name. A unique name will
          be generated on create. Examples:
          tunedModels/{tuned_model}/permissions/{permission}
          corpora/{corpus}/permissions/{permission} Output only."
        paramKey: name
        in: body
        schema:
          type: string
        required: false
      - paramName: role
        description: Required. The role granted by this permission.
        paramKey: role
        in: body
        schema:
          type: string
          enum:
            - ROLE_UNSPECIFIED
            - OWNER
            - WRITER
            - READER
        required: false
    requestBodyType: json
  - moduleName: Tuned Models / Generate Content
    method: post
    path: /v1beta/tunedModels/{model}:generateContent
    description: Generates a model response given an input `GenerateContentRequest`.
      Refer to the [text generation
      guide](https://ai.google.dev/gemini-api/docs/text-generation) for detailed
      usage information. Input capabilities differ between models, including
      tuned models. Refer to the [model
      guide](https://ai.google.dev/gemini-api/docs/models/gemini) and [tuning
      guide](https://ai.google.dev/gemini-api/docs/model-tuning) for details.
    externalDocs: ""
    params:
      - paramName: $Xgafv
        description: V1 error format.
        paramKey: $.xgafv
        in: query
        schema:
          type: string
          enum:
            - "1"
            - "2"
        required: false
      - paramName: accessToken
        description: OAuth access token.
        paramKey: access_token
        in: query
        schema:
          type: string
        required: false
      - paramName: alt
        description: Data format for response.
        paramKey: alt
        in: query
        schema:
          type: string
          enum:
            - json
            - media
            - proto
        required: false
      - paramName: callback
        description: JSONP
        paramKey: callback
        in: query
        schema:
          type: string
        required: false
      - paramName: fields
        description: Selector specifying which fields to include in a partial response.
        paramKey: fields
        in: query
        schema:
          type: string
        required: false
      - paramName: key
        description: API key. Your API key identifies your project and provides you with
          API access, quota, and reports. Required unless you provide an OAuth
          2.0 token.
        paramKey: key
        in: query
        schema:
          type: string
        required: false
      - paramName: oauthToken
        description: OAuth 2.0 token for the current user.
        paramKey: oauth_token
        in: query
        schema:
          type: string
        required: false
      - paramName: prettyPrint
        description: Returns response with indentations and line breaks.
        paramKey: prettyPrint
        in: query
        schema:
          type: boolean
        required: false
      - paramName: quotaUser
        description: Available to use for quota purposes for server-side applications.
          Can be any arbitrary string assigned to a user, but should not exceed
          40 characters.
        paramKey: quotaUser
        in: query
        schema:
          type: string
        required: false
      - paramName: uploadProtocol
        description: Upload protocol for media (e.g. "raw", "multipart").
        paramKey: upload_protocol
        in: query
        schema:
          type: string
        required: false
      - paramName: uploadType
        description: Legacy upload protocol for media (e.g. "media", "multipart").
        paramKey: uploadType
        in: query
        schema:
          type: string
        required: false
      - paramName: model
        description: "Required. The name of the `Model` to use for generating the
          completion. Format: `name=models/{model}`."
        paramKey: model
        in: path
        schema:
          type: string
        required: true
      - paramName: cachedContent
        description: "Optional. The name of the content
          [cached](https://ai.google.dev/gemini-api/docs/caching) to use as
          context to serve the prediction. Format:
          `cachedContents/{cachedContent}`"
        paramKey: cachedContent
        in: body
        schema:
          type: string
        required: false
      - paramName: contents
        description: Required. The content of the current conversation with the model.
          For single-turn queries, this is a single instance. For multi-turn
          queries like
          [chat](https://ai.google.dev/gemini-api/docs/text-generation#chat),
          this is a repeated field that contains the conversation history and
          the latest request.
        paramKey: contents
        in: body
        schema:
          type: array
          items:
            type: any
        required: false
      - paramName: generationConfig
        description: Configuration options for model generation and outputs. Not all
          parameters are configurable for every model.
        paramKey: generationConfig
        in: body
        schema:
          type: any
        required: false
      - paramName: model
        description: "Required. The name of the `Model` to use for generating the
          completion. Format: `name=models/{model}`."
        paramKey: model
        in: body
        schema:
          type: string
        required: false
      - paramName: safetySettings
        description: Optional. A list of unique `SafetySetting` instances for blocking
          unsafe content. This will be enforced on the
          `GenerateContentRequest.contents` and
          `GenerateContentResponse.candidates`. There should not be more than
          one setting for each `SafetyCategory` type. The API will block any
          contents and responses that fail to meet the thresholds set by these
          settings. This list overrides the default settings for each
          `SafetyCategory` specified in the safety_settings. If there is no
          `SafetySetting` for a given `SafetyCategory` provided in the list, the
          API will use the default safety setting for that category. Harm
          categories HARM_CATEGORY_HATE_SPEECH, HARM_CATEGORY_SEXUALLY_EXPLICIT,
          HARM_CATEGORY_DANGEROUS_CONTENT, HARM_CATEGORY_HARASSMENT are
          supported. Refer to the
          [guide](https://ai.google.dev/gemini-api/docs/safety-settings) for
          detailed information on available safety settings. Also refer to the
          [Safety
          guidance](https://ai.google.dev/gemini-api/docs/safety-guidance) to
          learn how to incorporate safety considerations in your AI
          applications.
        paramKey: safetySettings
        in: body
        schema:
          type: array
          items:
            type: any
        required: false
      - paramName: systemInstruction
        description: ""
        paramKey: systemInstruction
        in: body
        schema:
          type: any
        required: false
      - paramName: toolConfig
        description: The Tool configuration containing parameters for specifying `Tool`
          use in the request.
        paramKey: toolConfig
        in: body
        schema:
          type: any
        required: false
      - paramName: tools
        description: Optional. A list of `Tools` the `Model` may use to generate the
          next response. A `Tool` is a piece of code that enables the system to
          interact with external systems to perform an action, or set of
          actions, outside of knowledge and scope of the `Model`. Supported
          `Tool`s are `Function` and `code_execution`. Refer to the [Function
          calling](https://ai.google.dev/gemini-api/docs/function-calling) and
          the [Code
          execution](https://ai.google.dev/gemini-api/docs/code-execution)
          guides to learn more.
        paramKey: tools
        in: body
        schema:
          type: array
          items:
            type: any
        required: false
    requestBodyType: json
  - moduleName: Tuned Models / Generate Text
    method: post
    path: /v1beta/tunedModels/{model}:generateText
    description: Generates a response from the model given an input message.
    externalDocs: ""
    params:
      - paramName: $Xgafv
        description: V1 error format.
        paramKey: $.xgafv
        in: query
        schema:
          type: string
          enum:
            - "1"
            - "2"
        required: false
      - paramName: accessToken
        description: OAuth access token.
        paramKey: access_token
        in: query
        schema:
          type: string
        required: false
      - paramName: alt
        description: Data format for response.
        paramKey: alt
        in: query
        schema:
          type: string
          enum:
            - json
            - media
            - proto
        required: false
      - paramName: callback
        description: JSONP
        paramKey: callback
        in: query
        schema:
          type: string
        required: false
      - paramName: fields
        description: Selector specifying which fields to include in a partial response.
        paramKey: fields
        in: query
        schema:
          type: string
        required: false
      - paramName: key
        description: API key. Your API key identifies your project and provides you with
          API access, quota, and reports. Required unless you provide an OAuth
          2.0 token.
        paramKey: key
        in: query
        schema:
          type: string
        required: false
      - paramName: oauthToken
        description: OAuth 2.0 token for the current user.
        paramKey: oauth_token
        in: query
        schema:
          type: string
        required: false
      - paramName: prettyPrint
        description: Returns response with indentations and line breaks.
        paramKey: prettyPrint
        in: query
        schema:
          type: boolean
        required: false
      - paramName: quotaUser
        description: Available to use for quota purposes for server-side applications.
          Can be any arbitrary string assigned to a user, but should not exceed
          40 characters.
        paramKey: quotaUser
        in: query
        schema:
          type: string
        required: false
      - paramName: uploadProtocol
        description: Upload protocol for media (e.g. "raw", "multipart").
        paramKey: upload_protocol
        in: query
        schema:
          type: string
        required: false
      - paramName: uploadType
        description: Legacy upload protocol for media (e.g. "media", "multipart").
        paramKey: uploadType
        in: query
        schema:
          type: string
        required: false
      - paramName: model
        description: "Required. The name of the `Model` or `TunedModel` to use for
          generating the completion. Examples: models/text-bison-001
          tunedModels/sentence-translator-u3b7m"
        paramKey: model
        in: path
        schema:
          type: string
        required: true
      - paramName: candidateCount
        description: Optional. Number of generated responses to return. This value must
          be between [1, 8], inclusive. If unset, this will default to 1.
        paramKey: candidateCount
        in: body
        schema:
          type: number
        required: false
      - paramName: maxOutputTokens
        description: Optional. The maximum number of tokens to include in a candidate.
          If unset, this will default to output_token_limit specified in the
          `Model` specification.
        paramKey: maxOutputTokens
        in: body
        schema:
          type: number
        required: false
      - paramName: prompt
        description: Text given to the model as a prompt. The Model will use this
          TextPrompt to Generate a text completion.
        paramKey: prompt
        in: body
        schema:
          type: any
        required: false
      - paramName: safetySettings
        description: Optional. A list of unique `SafetySetting` instances for blocking
          unsafe content. that will be enforced on the
          `GenerateTextRequest.prompt` and `GenerateTextResponse.candidates`.
          There should not be more than one setting for each `SafetyCategory`
          type. The API will block any prompts and responses that fail to meet
          the thresholds set by these settings. This list overrides the default
          settings for each `SafetyCategory` specified in the safety_settings.
          If there is no `SafetySetting` for a given `SafetyCategory` provided
          in the list, the API will use the default safety setting for that
          category. Harm categories HARM_CATEGORY_DEROGATORY,
          HARM_CATEGORY_TOXICITY, HARM_CATEGORY_VIOLENCE, HARM_CATEGORY_SEXUAL,
          HARM_CATEGORY_MEDICAL, HARM_CATEGORY_DANGEROUS are supported in text
          service.
        paramKey: safetySettings
        in: body
        schema:
          type: array
          items:
            type: any
        required: false
      - paramName: stopSequences
        description: The set of character sequences (up to 5) that will stop output
          generation. If specified, the API will stop at the first appearance of
          a stop sequence. The stop sequence will not be included as part of the
          response.
        paramKey: stopSequences
        in: body
        schema:
          type: array
          items:
            type: any
        required: false
      - paramName: temperature
        description: "Optional. Controls the randomness of the output. Note: The default
          value varies by model, see the `Model.temperature` attribute of the
          `Model` returned the `getModel` function. Values can range from
          [0.0,1.0], inclusive. A value closer to 1.0 will produce responses
          that are more varied and creative, while a value closer to 0.0 will
          typically result in more straightforward responses from the model."
        paramKey: temperature
        in: body
        schema:
          type: number
        required: false
      - paramName: topK
        description: "Optional. The maximum number of tokens to consider when sampling.
          The model uses combined Top-k and nucleus sampling. Top-k sampling
          considers the set of `top_k` most probable tokens. Defaults to 40.
          Note: The default value varies by model, see the `Model.top_k`
          attribute of the `Model` returned the `getModel` function."
        paramKey: topK
        in: body
        schema:
          type: number
        required: false
      - paramName: topP
        description: "Optional. The maximum cumulative probability of tokens to consider
          when sampling. The model uses combined Top-k and nucleus sampling.
          Tokens are sorted based on their assigned probabilities so that only
          the most likely tokens are considered. Top-k sampling directly limits
          the maximum number of tokens to consider, while Nucleus sampling
          limits number of tokens based on the cumulative probability. Note: The
          default value varies by model, see the `Model.top_p` attribute of the
          `Model` returned the `getModel` function."
        paramKey: topP
        in: body
        schema:
          type: number
        required: false
    requestBodyType: json
  - moduleName: Tuned Models / Transfer Ownership
    method: post
    path: /v1beta/tunedModels/{name}:transferOwnership
    description: Transfers ownership of the tuned model. This is the only way to
      change ownership of the tuned model. The current owner will be downgraded
      to writer role.
    externalDocs: ""
    params:
      - paramName: $Xgafv
        description: V1 error format.
        paramKey: $.xgafv
        in: query
        schema:
          type: string
          enum:
            - "1"
            - "2"
        required: false
      - paramName: accessToken
        description: OAuth access token.
        paramKey: access_token
        in: query
        schema:
          type: string
        required: false
      - paramName: alt
        description: Data format for response.
        paramKey: alt
        in: query
        schema:
          type: string
          enum:
            - json
            - media
            - proto
        required: false
      - paramName: callback
        description: JSONP
        paramKey: callback
        in: query
        schema:
          type: string
        required: false
      - paramName: fields
        description: Selector specifying which fields to include in a partial response.
        paramKey: fields
        in: query
        schema:
          type: string
        required: false
      - paramName: key
        description: API key. Your API key identifies your project and provides you with
          API access, quota, and reports. Required unless you provide an OAuth
          2.0 token.
        paramKey: key
        in: query
        schema:
          type: string
        required: false
      - paramName: oauthToken
        description: OAuth 2.0 token for the current user.
        paramKey: oauth_token
        in: query
        schema:
          type: string
        required: false
      - paramName: prettyPrint
        description: Returns response with indentations and line breaks.
        paramKey: prettyPrint
        in: query
        schema:
          type: boolean
        required: false
      - paramName: quotaUser
        description: Available to use for quota purposes for server-side applications.
          Can be any arbitrary string assigned to a user, but should not exceed
          40 characters.
        paramKey: quotaUser
        in: query
        schema:
          type: string
        required: false
      - paramName: uploadProtocol
        description: Upload protocol for media (e.g. "raw", "multipart").
        paramKey: upload_protocol
        in: query
        schema:
          type: string
        required: false
      - paramName: uploadType
        description: Legacy upload protocol for media (e.g. "media", "multipart").
        paramKey: uploadType
        in: query
        schema:
          type: string
        required: false
      - paramName: name
        description: "Required. The resource name of the tuned model to transfer
          ownership. Format: `tunedModels/my-model-id`"
        paramKey: name
        in: path
        schema:
          type: string
        required: true
      - paramName: emailAddress
        description: Required. The email address of the user to whom the tuned model is
          being transferred to.
        paramKey: emailAddress
        in: body
        schema:
          type: string
        required: false
    requestBodyType: json
  - moduleName: Tuned Models / Operations / List
    method: get
    path: /v1beta/tunedModels/{name}/operations
    description: Lists operations that match the specified filter in the request. If
      the server doesn't support this method, it returns `UNIMPLEMENTED`.
    externalDocs: ""
    params:
      - paramName: $Xgafv
        description: V1 error format.
        paramKey: $.xgafv
        in: query
        schema:
          type: string
          enum:
            - "1"
            - "2"
        required: false
      - paramName: accessToken
        description: OAuth access token.
        paramKey: access_token
        in: query
        schema:
          type: string
        required: false
      - paramName: alt
        description: Data format for response.
        paramKey: alt
        in: query
        schema:
          type: string
          enum:
            - json
            - media
            - proto
        required: false
      - paramName: callback
        description: JSONP
        paramKey: callback
        in: query
        schema:
          type: string
        required: false
      - paramName: fields
        description: Selector specifying which fields to include in a partial response.
        paramKey: fields
        in: query
        schema:
          type: string
        required: false
      - paramName: key
        description: API key. Your API key identifies your project and provides you with
          API access, quota, and reports. Required unless you provide an OAuth
          2.0 token.
        paramKey: key
        in: query
        schema:
          type: string
        required: false
      - paramName: oauthToken
        description: OAuth 2.0 token for the current user.
        paramKey: oauth_token
        in: query
        schema:
          type: string
        required: false
      - paramName: prettyPrint
        description: Returns response with indentations and line breaks.
        paramKey: prettyPrint
        in: query
        schema:
          type: boolean
        required: false
      - paramName: quotaUser
        description: Available to use for quota purposes for server-side applications.
          Can be any arbitrary string assigned to a user, but should not exceed
          40 characters.
        paramKey: quotaUser
        in: query
        schema:
          type: string
        required: false
      - paramName: uploadProtocol
        description: Upload protocol for media (e.g. "raw", "multipart").
        paramKey: upload_protocol
        in: query
        schema:
          type: string
        required: false
      - paramName: uploadType
        description: Legacy upload protocol for media (e.g. "media", "multipart").
        paramKey: uploadType
        in: query
        schema:
          type: string
        required: false
      - paramName: name
        description: The name of the operation's parent resource.
        paramKey: name
        in: path
        schema:
          type: string
        required: true
      - paramName: filter
        description: The standard list filter.
        paramKey: filter
        in: query
        schema:
          type: string
        required: false
      - paramName: pageSize
        description: The standard list page size.
        paramKey: pageSize
        in: query
        schema:
          type: number
        required: false
      - paramName: pageToken
        description: The standard list page token.
        paramKey: pageToken
        in: query
        schema:
          type: string
        required: false
  - moduleName: Tuned Models / Permissions / Create
    method: post
    path: /v1beta/tunedModels/{parent}/permissions
    description: Create a permission to a specific resource.
    externalDocs: ""
    params:
      - paramName: $Xgafv
        description: V1 error format.
        paramKey: $.xgafv
        in: query
        schema:
          type: string
          enum:
            - "1"
            - "2"
        required: false
      - paramName: accessToken
        description: OAuth access token.
        paramKey: access_token
        in: query
        schema:
          type: string
        required: false
      - paramName: alt
        description: Data format for response.
        paramKey: alt
        in: query
        schema:
          type: string
          enum:
            - json
            - media
            - proto
        required: false
      - paramName: callback
        description: JSONP
        paramKey: callback
        in: query
        schema:
          type: string
        required: false
      - paramName: fields
        description: Selector specifying which fields to include in a partial response.
        paramKey: fields
        in: query
        schema:
          type: string
        required: false
      - paramName: key
        description: API key. Your API key identifies your project and provides you with
          API access, quota, and reports. Required unless you provide an OAuth
          2.0 token.
        paramKey: key
        in: query
        schema:
          type: string
        required: false
      - paramName: oauthToken
        description: OAuth 2.0 token for the current user.
        paramKey: oauth_token
        in: query
        schema:
          type: string
        required: false
      - paramName: prettyPrint
        description: Returns response with indentations and line breaks.
        paramKey: prettyPrint
        in: query
        schema:
          type: boolean
        required: false
      - paramName: quotaUser
        description: Available to use for quota purposes for server-side applications.
          Can be any arbitrary string assigned to a user, but should not exceed
          40 characters.
        paramKey: quotaUser
        in: query
        schema:
          type: string
        required: false
      - paramName: uploadProtocol
        description: Upload protocol for media (e.g. "raw", "multipart").
        paramKey: upload_protocol
        in: query
        schema:
          type: string
        required: false
      - paramName: uploadType
        description: Legacy upload protocol for media (e.g. "media", "multipart").
        paramKey: uploadType
        in: query
        schema:
          type: string
        required: false
      - paramName: parent
        description: "Required. The parent resource of the `Permission`. Formats:
          `tunedModels/{tuned_model}` `corpora/{corpus}`"
        paramKey: parent
        in: path
        schema:
          type: string
        required: true
      - paramName: emailAddress
        description: Optional. Immutable. The email address of the user of group which
          this permission refers. Field is not set when permission's grantee
          type is EVERYONE.
        paramKey: emailAddress
        in: body
        schema:
          type: string
        required: false
      - paramName: granteeType
        description: Optional. Immutable. The type of the grantee.
        paramKey: granteeType
        in: body
        schema:
          type: string
          enum:
            - GRANTEE_TYPE_UNSPECIFIED
            - USER
            - GROUP
            - EVERYONE
        required: false
      - paramName: name
        description: "Output only. Identifier. The permission name. A unique name will
          be generated on create. Examples:
          tunedModels/{tuned_model}/permissions/{permission}
          corpora/{corpus}/permissions/{permission} Output only."
        paramKey: name
        in: body
        schema:
          type: string
        required: false
      - paramName: role
        description: Required. The role granted by this permission.
        paramKey: role
        in: body
        schema:
          type: string
          enum:
            - ROLE_UNSPECIFIED
            - OWNER
            - WRITER
            - READER
        required: false
    requestBodyType: json
  - moduleName: Tuned Models / Permissions / List
    method: get
    path: /v1beta/tunedModels/{parent}/permissions
    description: Lists permissions for the specific resource.
    externalDocs: ""
    params:
      - paramName: $Xgafv
        description: V1 error format.
        paramKey: $.xgafv
        in: query
        schema:
          type: string
          enum:
            - "1"
            - "2"
        required: false
      - paramName: accessToken
        description: OAuth access token.
        paramKey: access_token
        in: query
        schema:
          type: string
        required: false
      - paramName: alt
        description: Data format for response.
        paramKey: alt
        in: query
        schema:
          type: string
          enum:
            - json
            - media
            - proto
        required: false
      - paramName: callback
        description: JSONP
        paramKey: callback
        in: query
        schema:
          type: string
        required: false
      - paramName: fields
        description: Selector specifying which fields to include in a partial response.
        paramKey: fields
        in: query
        schema:
          type: string
        required: false
      - paramName: prettyPrint
        description: Returns response with indentations and line breaks.
        paramKey: prettyPrint
        in: query
        schema:
          type: boolean
        required: false
      - paramName: quotaUser
        description: Available to use for quota purposes for server-side applications.
          Can be any arbitrary string assigned to a user, but should not exceed
          40 characters.
        paramKey: quotaUser
        in: query
        schema:
          type: string
        required: false
      - paramName: uploadProtocol
        description: Upload protocol for media (e.g. "raw", "multipart").
        paramKey: upload_protocol
        in: query
        schema:
          type: string
        required: false
      - paramName: uploadType
        description: Legacy upload protocol for media (e.g. "media", "multipart").
        paramKey: uploadType
        in: query
        schema:
          type: string
        required: false
      - paramName: parent
        description: "Required. The parent resource of the permissions. Formats:
          `tunedModels/{tuned_model}` `corpora/{corpus}`"
        paramKey: parent
        in: path
        schema:
          type: string
        required: true
      - paramName: pageSize
        description: Optional. The maximum number of `Permission`s to return (per page).
          The service may return fewer permissions. If unspecified, at most 10
          permissions will be returned. This method returns at most 1000
          permissions per page, even if you pass larger page_size.
        paramKey: pageSize
        in: query
        schema:
          type: number
        required: false
      - paramName: pageToken
        description: Optional. A page token, received from a previous `ListPermissions`
          call. Provide the `page_token` returned by one request as an argument
          to the next request to retrieve the next page. When paginating, all
          other parameters provided to `ListPermissions` must match the call
          that provided the page token.
        paramKey: pageToken
        in: query
        schema:
          type: string
        required: false
