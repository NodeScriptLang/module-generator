id: github.stripped
displayName: GitHub
workspaceId:
  development: "**This"
  production: yasuWM51ktSz098e
baseUrl: https://api.github.com
description: GitHub's v3 REST API.
commonParams:
  - paramName: accessToken
    paramKey: Authorization
    required: true
    in: header
    prefix: Bearer
    description: GitHub Access Token
modules:
  - moduleName: Meta / Root
    method: get
    path: /
    description: Get Hypermedia links to resources accessible in GitHub's REST API
    externalDocs: https://docs.github.com/rest/meta/meta#github-api-root
    params: []
  - moduleName: Emojis / List
    method: get
    path: /emojis
    description: Lists all the emojis available to use on GitHub.
    externalDocs: https://docs.github.com/rest/emojis/emojis#get-emojis
    params: []
  - moduleName: Dependabot / Enterprise / List Alerts
    method: get
    path: /enterprises/{enterprise}/dependabot/alerts
    description: >-
      Lists Dependabot alerts for repositories that are owned by the specified
      enterprise.


      The authenticated user must be a member of the enterprise to use this
      endpoint.


      Alerts are only returned for organizations in the enterprise for which you
      are an organization owner or a security manager. For more information
      about security managers, see "[Managing security managers in your
      organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."


      OAuth app tokens and personal access tokens (classic) need the `repo` or
      `security_events` scope to use this endpoint.
    externalDocs: https://docs.github.com/rest/dependabot/alerts#list-dependabot-alerts-for-an-enterprise
    params:
      - paramName: enterprise
        description: The slug version of the enterprise name. You can also substitute
          this value with the enterprise id.
        paramKey: enterprise
        in: path
        schema:
          type: string
        required: true
      - paramName: state
        description: >-
          A comma-separated list of states. If specified, only alerts with these
          states will be returned.


          Can be: `auto_dismissed`, `dismissed`, `fixed`, `open`
        paramKey: state
        in: query
        schema:
          type: string
        required: false
      - paramName: severity
        description: >-
          A comma-separated list of severities. If specified, only alerts with
          these severities will be returned.


          Can be: `low`, `medium`, `high`, `critical`
        paramKey: severity
        in: query
        schema:
          type: string
        required: false
      - paramName: ecosystem
        description: >-
          A comma-separated list of ecosystems. If specified, only alerts for
          these ecosystems will be returned.


          Can be: `composer`, `go`, `maven`, `npm`, `nuget`, `pip`, `pub`,
          `rubygems`, `rust`
        paramKey: ecosystem
        in: query
        schema:
          type: string
        required: false
      - paramName: package
        description: A comma-separated list of package names. If specified, only alerts
          for these packages will be returned.
        paramKey: package
        in: query
        schema:
          type: string
        required: false
      - paramName: scope
        description: The scope of the vulnerable dependency. If specified, only alerts
          with this scope will be returned.
        paramKey: scope
        in: query
        schema:
          type: string
          enum:
            - development
            - runtime
        required: false
      - paramName: sort
        description: |-
          The property by which to sort the results.
          `created` means when the alert was created.
          `updated` means when the alert's state last changed.
        paramKey: sort
        in: query
        schema:
          type: string
          default: created
          enum:
            - created
            - updated
        required: false
      - paramName: direction
        description: The direction to sort the results by.
        paramKey: direction
        in: query
        schema:
          type: string
          default: desc
          enum:
            - asc
            - desc
        required: false
      - paramName: before
        description: A cursor, as given in the [Link
          header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers).
          If specified, the query only searches for results before this cursor.
          For more information, see "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: before
        in: query
        schema:
          type: string
        required: false
      - paramName: after
        description: A cursor, as given in the [Link
          header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers).
          If specified, the query only searches for results after this cursor.
          For more information, see "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: after
        in: query
        schema:
          type: string
        required: false
      - paramName: first
        description: >-
          **Deprecated**. The number of results per page (max 100), starting
          from the first matching result.

          This parameter must not be used in combination with `last`.

          Instead, use `per_page` in combination with `after` to fetch the first
          page of results.
        paramKey: first
        in: query
        schema:
          type: number
          minimum: 1
          maximum: 100
          default: 30
        required: false
      - paramName: last
        description: >-
          **Deprecated**. The number of results per page (max 100), starting
          from the last matching result.

          This parameter must not be used in combination with `first`.

          Instead, use `per_page` in combination with `before` to fetch the last
          page of results.
        paramKey: last
        in: query
        schema:
          type: number
          minimum: 1
          maximum: 100
        required: false
      - paramName: perPage
        description: The number of results per page (max 100). For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: per_page
        in: query
        schema:
          type: number
          default: 30
        required: false
  - moduleName: Activity / Public Events / List
    method: get
    path: /events
    description: >-
      > [!NOTE]

      > This API is not built to serve real-time use cases. Depending on the
      time of day, event latency can be anywhere from 30s to 6h.
    externalDocs: https://docs.github.com/rest/activity/events#list-public-events
    params:
      - paramName: perPage
        description: The number of results per page (max 100). For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: per_page
        in: query
        schema:
          type: number
          default: 30
        required: false
      - paramName: page
        description: The page number of the results to fetch. For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: page
        in: query
        schema:
          type: number
          default: 1
        required: false
  - moduleName: Activity / Feeds / Get
    method: get
    path: /feeds
    description: >-
      Lists the feeds available to the authenticated user. The response provides
      a URL for each feed. You can then get a specific feed by sending a request
      to one of the feed URLs.


      *   **Timeline**: The GitHub global public timeline

      *   **User**: The public timeline for any user, using `uri_template`. For
      more information, see
      "[Hypermedia](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#hypermedia)."

      *   **Current user public**: The public timeline for the authenticated
      user

      *   **Current user**: The private timeline for the authenticated user

      *   **Current user actor**: The private timeline for activity created by
      the authenticated user

      *   **Current user organizations**: The private timeline for the
      organizations the authenticated user is a member of.

      *   **Security advisories**: A collection of public announcements that
      provide information about security-related vulnerabilities in software on
      GitHub.


      By default, timeline resources are returned in JSON. You can specify the
      `application/atom+xml` type in the `Accept` header to return timeline
      resources in Atom format. For more information, see "[Media
      types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."


      > [!NOTE]

      > Private feeds are only returned when [authenticating via Basic
      Auth](https://docs.github.com/rest/authentication/authenticating-to-the-rest-api#using-basic-authentication)
      since current feed URIs use the older, non revocable auth tokens.
    externalDocs: https://docs.github.com/rest/activity/feeds#get-feeds
    params: []
  - moduleName: Gists / List
    method: get
    path: /gists
    description: "Lists the authenticated user's gists or if called anonymously,
      this endpoint returns all public gists:"
    externalDocs: https://docs.github.com/rest/gists/gists#list-gists-for-the-authenticated-user
    params:
      - paramName: since
        description: "Only show results that were last updated after the given time.
          This is a timestamp in [ISO
          8601](https://en.wikipedia.org/wiki/ISO_8601) format:
          `YYYY-MM-DDTHH:MM:SSZ`."
        paramKey: since
        in: query
        schema:
          type: string
        required: false
      - paramName: perPage
        description: The number of results per page (max 100). For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: per_page
        in: query
        schema:
          type: number
          default: 30
        required: false
      - paramName: page
        description: The page number of the results to fetch. For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: page
        in: query
        schema:
          type: number
          default: 1
        required: false
  - moduleName: Gists / Create
    method: post
    path: /gists
    description: >-
      Allows you to add a new gist with one or more files.


      > [!NOTE]

      > Don't name your files "gistfile" with a numerical suffix. This is the
      format of the automatic naming scheme that Gist uses internally.
    externalDocs: https://docs.github.com/rest/gists/gists#create-a-gist
    params:
      - paramName: description
        description: Description of the gist
        paramKey: description
        in: body
        schema:
          type: string
        required: false
      - paramName: files
        description: Names and content for the files that make up the gist
        paramKey: files
        in: body
        schema:
          type: any
        required: true
      - paramName: public
        description: ""
        paramKey: public
        in: body
        schema:
          type: any
        required: false
    requestBodyType: json
  - moduleName: Gists / Public / List
    method: get
    path: /gists/public
    description: >-
      List public gists sorted by most recently updated to least recently
      updated.


      Note: With
      [pagination](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api),
      you can fetch up to 3000 gists. For example, you can fetch 100 pages with
      30 gists per page or 30 pages with 100 gists per page.
    externalDocs: https://docs.github.com/rest/gists/gists#list-public-gists
    params:
      - paramName: since
        description: "Only show results that were last updated after the given time.
          This is a timestamp in [ISO
          8601](https://en.wikipedia.org/wiki/ISO_8601) format:
          `YYYY-MM-DDTHH:MM:SSZ`."
        paramKey: since
        in: query
        schema:
          type: string
        required: false
      - paramName: perPage
        description: The number of results per page (max 100). For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: per_page
        in: query
        schema:
          type: number
          default: 30
        required: false
      - paramName: page
        description: The page number of the results to fetch. For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: page
        in: query
        schema:
          type: number
          default: 1
        required: false
  - moduleName: Gists / Starred / List
    method: get
    path: /gists/starred
    description: "List the authenticated user's starred gists:"
    externalDocs: https://docs.github.com/rest/gists/gists#list-starred-gists
    params:
      - paramName: since
        description: "Only show results that were last updated after the given time.
          This is a timestamp in [ISO
          8601](https://en.wikipedia.org/wiki/ISO_8601) format:
          `YYYY-MM-DDTHH:MM:SSZ`."
        paramKey: since
        in: query
        schema:
          type: string
        required: false
      - paramName: perPage
        description: The number of results per page (max 100). For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: per_page
        in: query
        schema:
          type: number
          default: 30
        required: false
      - paramName: page
        description: The page number of the results to fetch. For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: page
        in: query
        schema:
          type: number
          default: 1
        required: false
  - moduleName: Gists / Get
    method: get
    path: /gists/{gist_id}
    description: >-
      Gets a specified gist.


      This endpoint supports the following custom media types. For more
      information, see "[Media
      types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."


      - **`application/vnd.github.raw+json`**: Returns the raw markdown. This is
      the default if you do not pass any specific media type.

      - **`application/vnd.github.base64+json`**: Returns the base64-encoded
      contents. This can be useful if your gist contains any invalid UTF-8
      sequences.
    externalDocs: https://docs.github.com/rest/gists/gists#get-a-gist
    params:
      - paramName: gistId
        description: The unique identifier of the gist.
        paramKey: gist_id
        in: path
        schema:
          type: string
        required: true
  - moduleName: Gists / Update
    method: patch
    path: /gists/{gist_id}
    description: >-
      Allows you to update a gist's description and to update, delete, or rename
      gist files. Files

      from the previous version of the gist that aren't explicitly changed
      during an edit

      are unchanged.


      At least one of `description` or `files` is required.


      This endpoint supports the following custom media types. For more
      information, see "[Media
      types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."


      - **`application/vnd.github.raw+json`**: Returns the raw markdown. This is
      the default if you do not pass any specific media type.

      - **`application/vnd.github.base64+json`**: Returns the base64-encoded
      contents. This can be useful if your gist contains any invalid UTF-8
      sequences.
    externalDocs: https://docs.github.com/rest/gists/gists#update-a-gist
    params:
      - paramName: gistId
        description: The unique identifier of the gist.
        paramKey: gist_id
        in: path
        schema:
          type: string
        required: true
      - paramName: description
        description: The description of the gist.
        paramKey: description
        in: body
        schema:
          type: string
        required: false
      - paramName: files
        description: >-
          The gist files to be updated, renamed, or deleted. Each `key` must
          match the current filename

          (including extension) of the targeted gist file. For example:
          `hello.py`.


          To delete a file, set the whole file to null. For example: `hello.py :
          null`. The file will also be

          deleted if the specified object does not contain at least one of
          `content` or `filename`.
        paramKey: files
        in: body
        schema:
          type: any
        required: false
    requestBodyType: json
  - moduleName: Gists / Delete
    method: delete
    path: /gists/{gist_id}
    description: ""
    externalDocs: https://docs.github.com/rest/gists/gists#delete-a-gist
    params:
      - paramName: gistId
        description: The unique identifier of the gist.
        paramKey: gist_id
        in: path
        schema:
          type: string
        required: true
  - moduleName: Gists / Comments / List
    method: get
    path: /gists/{gist_id}/comments
    description: >-
      Lists the comments on a gist.


      This endpoint supports the following custom media types. For more
      information, see "[Media
      types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."


      - **`application/vnd.github.raw+json`**: Returns the raw markdown. This is
      the default if you do not pass any specific media type.

      - **`application/vnd.github.base64+json`**: Returns the base64-encoded
      contents. This can be useful if your gist contains any invalid UTF-8
      sequences.
    externalDocs: https://docs.github.com/rest/gists/comments#list-gist-comments
    params:
      - paramName: gistId
        description: The unique identifier of the gist.
        paramKey: gist_id
        in: path
        schema:
          type: string
        required: true
      - paramName: perPage
        description: The number of results per page (max 100). For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: per_page
        in: query
        schema:
          type: number
          default: 30
        required: false
      - paramName: page
        description: The page number of the results to fetch. For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: page
        in: query
        schema:
          type: number
          default: 1
        required: false
  - moduleName: Gists / Comments / Create
    method: post
    path: /gists/{gist_id}/comments
    description: >-
      Creates a comment on a gist.


      This endpoint supports the following custom media types. For more
      information, see "[Media
      types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."


      - **`application/vnd.github.raw+json`**: Returns the raw markdown. This is
      the default if you do not pass any specific media type.

      - **`application/vnd.github.base64+json`**: Returns the base64-encoded
      contents. This can be useful if your gist contains any invalid UTF-8
      sequences.
    externalDocs: https://docs.github.com/rest/gists/comments#create-a-gist-comment
    params:
      - paramName: gistId
        description: The unique identifier of the gist.
        paramKey: gist_id
        in: path
        schema:
          type: string
        required: true
      - paramName: body
        description: The comment text.
        paramKey: body
        in: body
        schema:
          type: string
        required: true
    requestBodyType: json
  - moduleName: Gists / Comments / Get
    method: get
    path: /gists/{gist_id}/comments/{comment_id}
    description: >-
      Gets a comment on a gist.


      This endpoint supports the following custom media types. For more
      information, see "[Media
      types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."


      - **`application/vnd.github.raw+json`**: Returns the raw markdown. This is
      the default if you do not pass any specific media type.

      - **`application/vnd.github.base64+json`**: Returns the base64-encoded
      contents. This can be useful if your gist contains any invalid UTF-8
      sequences.
    externalDocs: https://docs.github.com/rest/gists/comments#get-a-gist-comment
    params:
      - paramName: gistId
        description: The unique identifier of the gist.
        paramKey: gist_id
        in: path
        schema:
          type: string
        required: true
      - paramName: commentId
        description: The unique identifier of the comment.
        paramKey: comment_id
        in: path
        schema:
          type: number
        required: true
  - moduleName: Gists / Comments / Update
    method: patch
    path: /gists/{gist_id}/comments/{comment_id}
    description: >-
      Updates a comment on a gist.


      This endpoint supports the following custom media types. For more
      information, see "[Media
      types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."


      - **`application/vnd.github.raw+json`**: Returns the raw markdown. This is
      the default if you do not pass any specific media type.

      - **`application/vnd.github.base64+json`**: Returns the base64-encoded
      contents. This can be useful if your gist contains any invalid UTF-8
      sequences.
    externalDocs: https://docs.github.com/rest/gists/comments#update-a-gist-comment
    params:
      - paramName: gistId
        description: The unique identifier of the gist.
        paramKey: gist_id
        in: path
        schema:
          type: string
        required: true
      - paramName: commentId
        description: The unique identifier of the comment.
        paramKey: comment_id
        in: path
        schema:
          type: number
        required: true
      - paramName: body
        description: The comment text.
        paramKey: body
        in: body
        schema:
          type: string
        required: true
    requestBodyType: json
  - moduleName: Gists / Comments / Delete
    method: delete
    path: /gists/{gist_id}/comments/{comment_id}
    description: ""
    externalDocs: https://docs.github.com/rest/gists/comments#delete-a-gist-comment
    params:
      - paramName: gistId
        description: The unique identifier of the gist.
        paramKey: gist_id
        in: path
        schema:
          type: string
        required: true
      - paramName: commentId
        description: The unique identifier of the comment.
        paramKey: comment_id
        in: path
        schema:
          type: number
        required: true
  - moduleName: Gists / Commits / List
    method: get
    path: /gists/{gist_id}/commits
    description: ""
    externalDocs: https://docs.github.com/rest/gists/gists#list-gist-commits
    params:
      - paramName: gistId
        description: The unique identifier of the gist.
        paramKey: gist_id
        in: path
        schema:
          type: string
        required: true
      - paramName: perPage
        description: The number of results per page (max 100). For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: per_page
        in: query
        schema:
          type: number
          default: 30
        required: false
      - paramName: page
        description: The page number of the results to fetch. For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: page
        in: query
        schema:
          type: number
          default: 1
        required: false
  - moduleName: Gists / Forks / List
    method: get
    path: /gists/{gist_id}/forks
    description: ""
    externalDocs: https://docs.github.com/rest/gists/gists#list-gist-forks
    params:
      - paramName: gistId
        description: The unique identifier of the gist.
        paramKey: gist_id
        in: path
        schema:
          type: string
        required: true
      - paramName: perPage
        description: The number of results per page (max 100). For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: per_page
        in: query
        schema:
          type: number
          default: 30
        required: false
      - paramName: page
        description: The page number of the results to fetch. For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: page
        in: query
        schema:
          type: number
          default: 1
        required: false
  - moduleName: Gists / Fork
    method: post
    path: /gists/{gist_id}/forks
    description: ""
    externalDocs: https://docs.github.com/rest/gists/gists#fork-a-gist
    params:
      - paramName: gistId
        description: The unique identifier of the gist.
        paramKey: gist_id
        in: path
        schema:
          type: string
        required: true
  - moduleName: Gists / Star / Check
    method: get
    path: /gists/{gist_id}/star
    description: ""
    externalDocs: https://docs.github.com/rest/gists/gists#check-if-a-gist-is-starred
    params:
      - paramName: gistId
        description: The unique identifier of the gist.
        paramKey: gist_id
        in: path
        schema:
          type: string
        required: true
  - moduleName: Gists / Star
    method: put
    path: /gists/{gist_id}/star
    description: Note that you'll need to set `Content-Length` to zero when calling
      out to this endpoint. For more information, see "[HTTP
      method](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#http-method)."
    externalDocs: https://docs.github.com/rest/gists/gists#star-a-gist
    params:
      - paramName: gistId
        description: The unique identifier of the gist.
        paramKey: gist_id
        in: path
        schema:
          type: string
        required: true
  - moduleName: Gists / Unstar
    method: delete
    path: /gists/{gist_id}/star
    description: ""
    externalDocs: https://docs.github.com/rest/gists/gists#unstar-a-gist
    params:
      - paramName: gistId
        description: The unique identifier of the gist.
        paramKey: gist_id
        in: path
        schema:
          type: string
        required: true
  - moduleName: Gists / Revision / Get
    method: get
    path: /gists/{gist_id}/{sha}
    description: >-
      Gets a specified gist revision.


      This endpoint supports the following custom media types. For more
      information, see "[Media
      types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."


      - **`application/vnd.github.raw+json`**: Returns the raw markdown. This is
      the default if you do not pass any specific media type.

      - **`application/vnd.github.base64+json`**: Returns the base64-encoded
      contents. This can be useful if your gist contains any invalid UTF-8
      sequences.
    externalDocs: https://docs.github.com/rest/gists/gists#get-a-gist-revision
    params:
      - paramName: gistId
        description: The unique identifier of the gist.
        paramKey: gist_id
        in: path
        schema:
          type: string
        required: true
      - paramName: sha
        description: ""
        paramKey: sha
        in: path
        schema:
          type: string
        required: true
  - moduleName: Issues / Authenticated User / List All
    method: get
    path: /issues
    description: >-
      List issues assigned to the authenticated user across all visible
      repositories including owned repositories, member

      repositories, and organization repositories. You can use the `filter`
      query parameter to fetch issues that are not

      necessarily assigned to you.


      > [!NOTE]

      > GitHub's REST API considers every pull request an issue, but not every
      issue is a pull request. For this reason, "Issues" endpoints may return
      both issues and pull requests in the response. You can identify pull
      requests by the `pull_request` key. Be aware that the `id` of a pull
      request returned from "Issues" endpoints will be an _issue id_. To find
      out the pull request id, use the "[List pull
      requests](https://docs.github.com/rest/pulls/pulls#list-pull-requests)"
      endpoint.


      This endpoint supports the following custom media types. For more
      information, see "[Media
      types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."


      - **`application/vnd.github.raw+json`**: Returns the raw markdown body.
      Response will include `body`. This is the default if you do not pass any
      specific media type.

      - **`application/vnd.github.text+json`**: Returns a text only
      representation of the markdown body. Response will include `body_text`.

      - **`application/vnd.github.html+json`**: Returns HTML rendered from the
      body's markdown. Response will include `body_html`.

      - **`application/vnd.github.full+json`**: Returns raw, text, and HTML
      representations. Response will include `body`, `body_text`, and
      `body_html`.
    externalDocs: https://docs.github.com/rest/issues/issues#list-issues-assigned-to-the-authenticated-user
    params:
      - paramName: filter
        description: Indicates which sorts of issues to return. `assigned` means issues
          assigned to you. `created` means issues created by you. `mentioned`
          means issues mentioning you. `subscribed` means issues you're
          subscribed to updates for. `all` or `repos` means all issues you can
          see, regardless of participation or creation.
        paramKey: filter
        in: query
        schema:
          type: string
          default: assigned
          enum:
            - assigned
            - created
            - mentioned
            - subscribed
            - repos
            - all
        required: false
      - paramName: state
        description: Indicates the state of the issues to return.
        paramKey: state
        in: query
        schema:
          type: string
          default: open
          enum:
            - open
            - closed
            - all
        required: false
      - paramName: labels
        description: "A list of comma separated label names. Example: `bug,ui,@high`"
        paramKey: labels
        in: query
        schema:
          type: string
        required: false
      - paramName: sort
        description: What to sort results by.
        paramKey: sort
        in: query
        schema:
          type: string
          default: created
          enum:
            - created
            - updated
            - comments
        required: false
      - paramName: direction
        description: The direction to sort the results by.
        paramKey: direction
        in: query
        schema:
          type: string
          default: desc
          enum:
            - asc
            - desc
        required: false
      - paramName: since
        description: "Only show results that were last updated after the given time.
          This is a timestamp in [ISO
          8601](https://en.wikipedia.org/wiki/ISO_8601) format:
          `YYYY-MM-DDTHH:MM:SSZ`."
        paramKey: since
        in: query
        schema:
          type: string
        required: false
      - paramName: collab
        description: ""
        paramKey: collab
        in: query
        schema:
          type: boolean
        required: false
      - paramName: orgs
        description: ""
        paramKey: orgs
        in: query
        schema:
          type: boolean
        required: false
      - paramName: owned
        description: ""
        paramKey: owned
        in: query
        schema:
          type: boolean
        required: false
      - paramName: pulls
        description: ""
        paramKey: pulls
        in: query
        schema:
          type: boolean
        required: false
      - paramName: perPage
        description: The number of results per page (max 100). For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: per_page
        in: query
        schema:
          type: number
          default: 30
        required: false
      - paramName: page
        description: The page number of the results to fetch. For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: page
        in: query
        schema:
          type: number
          default: 1
        required: false
  - moduleName: Meta / Meta / Get
    method: get
    path: /meta
    description: >-
      Returns meta information about GitHub, including a list of GitHub's IP
      addresses. For more information, see "[About GitHub's IP
      addresses](https://docs.github.com/articles/about-github-s-ip-addresses/)."


      The API's response also includes a list of GitHub's domain names.


      The values shown in the documentation's response are example values. You
      must always query the API directly to get the latest values.


      > [!NOTE]

      > This endpoint returns both IPv4 and IPv6 addresses. However, not all
      features support IPv6. You should refer to the specific documentation for
      each feature to determine if IPv6 is supported.
    externalDocs: https://docs.github.com/rest/meta/meta#get-apiname-meta-information
    params: []
  - moduleName: Activity / Repo Network / List Events
    method: get
    path: /networks/{owner}/{repo}/events
    description: >-
      > [!NOTE]

      > This API is not built to serve real-time use cases. Depending on the
      time of day, event latency can be anywhere from 30s to 6h.
    externalDocs: https://docs.github.com/rest/activity/events#list-public-events-for-a-network-of-repositories
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: perPage
        description: The number of results per page (max 100). For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: per_page
        in: query
        schema:
          type: number
          default: 30
        required: false
      - paramName: page
        description: The page number of the results to fetch. For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: page
        in: query
        schema:
          type: number
          default: 1
        required: false
  - moduleName: Activity / Notifications / List
    method: get
    path: /notifications
    description: List all notifications for the current user, sorted by most
      recently updated.
    externalDocs: https://docs.github.com/rest/activity/notifications#list-notifications-for-the-authenticated-user
    params:
      - paramName: all
        description: If `true`, show notifications marked as read.
        paramKey: all
        in: query
        schema:
          type: boolean
          default: false
        required: false
      - paramName: participating
        description: If `true`, only shows notifications in which the user is directly
          participating or mentioned.
        paramKey: participating
        in: query
        schema:
          type: boolean
          default: false
        required: false
      - paramName: since
        description: "Only show results that were last updated after the given time.
          This is a timestamp in [ISO
          8601](https://en.wikipedia.org/wiki/ISO_8601) format:
          `YYYY-MM-DDTHH:MM:SSZ`."
        paramKey: since
        in: query
        schema:
          type: string
        required: false
      - paramName: before
        description: "Only show notifications updated before the given time. This is a
          timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601)
          format: `YYYY-MM-DDTHH:MM:SSZ`."
        paramKey: before
        in: query
        schema:
          type: string
        required: false
      - paramName: page
        description: The page number of the results to fetch. For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: page
        in: query
        schema:
          type: number
          default: 1
        required: false
      - paramName: perPage
        description: The number of results per page (max 50). For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: per_page
        in: query
        schema:
          type: number
          default: 50
        required: false
  - moduleName: Activity / Notifications / Mark As Read
    method: put
    path: /notifications
    description: Marks all notifications as "read" for the current user. If the
      number of notifications is too large to complete in one request, you will
      receive a `202 Accepted` status and GitHub will run an asynchronous
      process to mark notifications as "read." To check whether any "unread"
      notifications remain, you can use the [List notifications for the
      authenticated
      user](https://docs.github.com/rest/activity/notifications#list-notifications-for-the-authenticated-user)
      endpoint and pass the query parameter `all=false`.
    externalDocs: https://docs.github.com/rest/activity/notifications#mark-notifications-as-read
    params:
      - paramName: lastReadAt
        description: "Describes the last point that notifications were checked. Anything
          updated since this time will not be marked as read. If you omit this
          parameter, all notifications are marked as read. This is a timestamp
          in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format:
          `YYYY-MM-DDTHH:MM:SSZ`. Default: The current timestamp."
        paramKey: last_read_at
        in: body
        schema:
          type: string
        required: false
      - paramName: read
        description: Whether the notification has been read.
        paramKey: read
        in: body
        schema:
          type: boolean
        required: false
    requestBodyType: json
  - moduleName: Activity / Thread / Get
    method: get
    path: /notifications/threads/{thread_id}
    description: Gets information about a notification thread.
    externalDocs: https://docs.github.com/rest/activity/notifications#get-a-thread
    params:
      - paramName: threadId
        description: The unique identifier of the notification thread. This corresponds
          to the value returned in the `id` field when you retrieve
          notifications (for example with the [`GET /notifications`
          operation](https://docs.github.com/rest/activity/notifications#list-notifications-for-the-authenticated-user)).
        paramKey: thread_id
        in: path
        schema:
          type: number
        required: true
  - moduleName: Activity / Thread / Mark As Read
    method: patch
    path: /notifications/threads/{thread_id}
    description: 'Marks a thread as "read." Marking a thread as "read" is equivalent
      to clicking a notification in your notification inbox on GitHub:
      https://github.com/notifications.'
    externalDocs: https://docs.github.com/rest/activity/notifications#mark-a-thread-as-read
    params:
      - paramName: threadId
        description: The unique identifier of the notification thread. This corresponds
          to the value returned in the `id` field when you retrieve
          notifications (for example with the [`GET /notifications`
          operation](https://docs.github.com/rest/activity/notifications#list-notifications-for-the-authenticated-user)).
        paramKey: thread_id
        in: path
        schema:
          type: number
        required: true
  - moduleName: Activity / Thread / Mark As Done
    method: delete
    path: /notifications/threads/{thread_id}
    description: 'Marks a thread as "done." Marking a thread as "done" is equivalent
      to marking a notification in your notification inbox on GitHub as done:
      https://github.com/notifications.'
    externalDocs: https://docs.github.com/rest/activity/notifications#mark-a-thread-as-done
    params:
      - paramName: threadId
        description: The unique identifier of the notification thread. This corresponds
          to the value returned in the `id` field when you retrieve
          notifications (for example with the [`GET /notifications`
          operation](https://docs.github.com/rest/activity/notifications#list-notifications-for-the-authenticated-user)).
        paramKey: thread_id
        in: path
        schema:
          type: number
        required: true
  - moduleName: Activity / Thread / Get Subscription
    method: get
    path: /notifications/threads/{thread_id}/subscription
    description: >-
      This checks to see if the current user is subscribed to a thread. You can
      also [get a repository
      subscription](https://docs.github.com/rest/activity/watching#get-a-repository-subscription).


      Note that subscriptions are only generated if a user is participating in a
      conversation--for example, they've replied to the thread, were
      **@mentioned**, or manually subscribe to a thread.
    externalDocs: https://docs.github.com/rest/activity/notifications#get-a-thread-subscription-for-the-authenticated-user
    params:
      - paramName: threadId
        description: The unique identifier of the notification thread. This corresponds
          to the value returned in the `id` field when you retrieve
          notifications (for example with the [`GET /notifications`
          operation](https://docs.github.com/rest/activity/notifications#list-notifications-for-the-authenticated-user)).
        paramKey: thread_id
        in: path
        schema:
          type: number
        required: true
  - moduleName: Activity / Thread / Set Subscription
    method: put
    path: /notifications/threads/{thread_id}/subscription
    description: >-
      If you are watching a repository, you receive notifications for all
      threads by default. Use this endpoint to ignore future notifications for
      threads until you comment on the thread or get an **@mention**.


      You can also use this endpoint to subscribe to threads that you are
      currently not receiving notifications for or to subscribed to threads that
      you have previously ignored.


      Unsubscribing from a conversation in a repository that you are not
      watching is functionally equivalent to the [Delete a thread
      subscription](https://docs.github.com/rest/activity/notifications#delete-a-thread-subscription)
      endpoint.
    externalDocs: https://docs.github.com/rest/activity/notifications#set-a-thread-subscription
    params:
      - paramName: threadId
        description: The unique identifier of the notification thread. This corresponds
          to the value returned in the `id` field when you retrieve
          notifications (for example with the [`GET /notifications`
          operation](https://docs.github.com/rest/activity/notifications#list-notifications-for-the-authenticated-user)).
        paramKey: thread_id
        in: path
        schema:
          type: number
        required: true
      - paramName: ignored
        description: Whether to block all notifications from a thread.
        paramKey: ignored
        in: body
        schema:
          type: boolean
          default: false
        required: false
    requestBodyType: json
  - moduleName: Activity / Thread / Delete Subscription
    method: delete
    path: /notifications/threads/{thread_id}/subscription
    description: Mutes all future notifications for a conversation until you comment
      on the thread or get an **@mention**. If you are watching the repository
      of the thread, you will still receive notifications. To ignore future
      notifications for a repository you are watching, use the [Set a thread
      subscription](https://docs.github.com/rest/activity/notifications#set-a-thread-subscription)
      endpoint and set `ignore` to `true`.
    externalDocs: https://docs.github.com/rest/activity/notifications#delete-a-thread-subscription
    params:
      - paramName: threadId
        description: The unique identifier of the notification thread. This corresponds
          to the value returned in the `id` field when you retrieve
          notifications (for example with the [`GET /notifications`
          operation](https://docs.github.com/rest/activity/notifications#list-notifications-for-the-authenticated-user)).
        paramKey: thread_id
        in: path
        schema:
          type: number
        required: true
  - moduleName: Meta / Octocat / Get
    method: get
    path: /octocat
    description: Get the octocat as ASCII art
    externalDocs: https://docs.github.com/rest/meta/meta#get-octocat
    params:
      - paramName: s
        description: The words to show in Octocat's speech bubble
        paramKey: s
        in: query
        schema:
          type: string
        required: false
  - moduleName: Orgs / List
    method: get
    path: /organizations
    description: >-
      Lists all organizations, in the order that they were created.


      > [!NOTE]

      > Pagination is powered exclusively by the `since` parameter. Use the
      [Link
      header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers)
      to get the URL for the next page of organizations.
    externalDocs: https://docs.github.com/rest/orgs/orgs#list-organizations
    params:
      - paramName: since
        description: An organization ID. Only return organizations with an ID greater
          than this ID.
        paramKey: since
        in: query
        schema:
          type: number
        required: false
      - paramName: perPage
        description: The number of results per page (max 100). For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: per_page
        in: query
        schema:
          type: number
          default: 30
        required: false
  - moduleName: Orgs / Get
    method: get
    path: /orgs/{org}
    description: >-
      Gets information about an organization.


      When the value of `two_factor_requirement_enabled` is `true`, the
      organization requires all members, billing managers, and outside
      collaborators to enable [two-factor
      authentication](https://docs.github.com/articles/securing-your-account-with-two-factor-authentication-2fa/).


      To see the full details about an organization, the authenticated user must
      be an organization owner.


      OAuth app tokens and personal access tokens (classic) need the `admin:org`
      scope to see the full details about an organization.


      To see information about an organization's GitHub plan, GitHub Apps need
      the `Organization plan` permission.
    externalDocs: https://docs.github.com/rest/orgs/orgs#get-an-organization
    params:
      - paramName: org
        description: The organization name. The name is not case sensitive.
        paramKey: org
        in: path
        schema:
          type: string
        required: true
  - moduleName: Orgs / Update
    method: patch
    path: /orgs/{org}
    description: >-
      > [!WARNING]

      > **Closing down notice:** GitHub will replace and discontinue
      `members_allowed_repository_creation_type` in favor of more granular
      permissions. The new input parameters are
      `members_can_create_public_repositories`,
      `members_can_create_private_repositories` for all organizations and
      `members_can_create_internal_repositories` for organizations associated
      with an enterprise account using GitHub Enterprise Cloud or GitHub
      Enterprise Server 2.20+. For more information, see the [blog
      post](https://developer.github.com/changes/2019-12-03-internal-visibility-changes).


      > [!WARNING]

      > **Closing down notice:** Code security product enablement for new
      repositories through the organization API is closing down. Please use
      [code security
      configurations](https://docs.github.com/rest/code-security/configurations#set-a-code-security-configuration-as-a-default-for-an-organization)
      to set defaults instead. For more information on setting a default
      security configuration, see the
      [changelog](https://github.blog/changelog/2024-07-09-sunsetting-security-settings-defaults-parameters-in-the-organizations-rest-api/).


      Updates the organization's profile and member privileges.


      The authenticated user must be an organization owner to use this endpoint.


      OAuth app tokens and personal access tokens (classic) need the `admin:org`
      or `repo` scope to use this endpoint.
    externalDocs: https://docs.github.com/rest/orgs/orgs#update-an-organization
    params:
      - paramName: org
        description: The organization name. The name is not case sensitive.
        paramKey: org
        in: path
        schema:
          type: string
        required: true
      - paramName: billingEmail
        description: Billing email address. This address is not publicized.
        paramKey: billing_email
        in: body
        schema:
          type: string
        required: false
      - paramName: company
        description: The company name.
        paramKey: company
        in: body
        schema:
          type: string
        required: false
      - paramName: email
        description: The publicly visible email address.
        paramKey: email
        in: body
        schema:
          type: string
        required: false
      - paramName: twitterUsername
        description: The Twitter username of the company.
        paramKey: twitter_username
        in: body
        schema:
          type: string
        required: false
      - paramName: location
        description: The location.
        paramKey: location
        in: body
        schema:
          type: string
        required: false
      - paramName: name
        description: The shorthand name of the company.
        paramKey: name
        in: body
        schema:
          type: string
        required: false
      - paramName: description
        description: The description of the company. The maximum size is 160 characters.
        paramKey: description
        in: body
        schema:
          type: string
        required: false
      - paramName: hasOrganizationProjects
        description: Whether an organization can use organization projects.
        paramKey: has_organization_projects
        in: body
        schema:
          type: boolean
        required: false
      - paramName: hasRepositoryProjects
        description: Whether repositories that belong to the organization can use
          repository projects.
        paramKey: has_repository_projects
        in: body
        schema:
          type: boolean
        required: false
      - paramName: defaultRepositoryPermission
        description: Default permission level members have for organization repositories.
        paramKey: default_repository_permission
        in: body
        schema:
          type: string
          default: read
          enum:
            - read
            - write
            - admin
            - none
        required: false
      - paramName: membersCanCreateRepositories
        description: Whether of non-admin organization members can create repositories.
          **Note:** A parameter can override this parameter. See
          `members_allowed_repository_creation_type` in this table for details.
        paramKey: members_can_create_repositories
        in: body
        schema:
          type: boolean
          default: true
        required: false
      - paramName: membersCanCreateInternalRepositories
        description: Whether organization members can create internal repositories,
          which are visible to all enterprise members. You can only allow
          members to create internal repositories if your organization is
          associated with an enterprise account using GitHub Enterprise Cloud or
          GitHub Enterprise Server 2.20+. For more information, see
          "[Restricting repository creation in your
          organization](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)"
          in the GitHub Help documentation.
        paramKey: members_can_create_internal_repositories
        in: body
        schema:
          type: boolean
        required: false
      - paramName: membersCanCreatePrivateRepositories
        description: Whether organization members can create private repositories, which
          are visible to organization members with permission. For more
          information, see "[Restricting repository creation in your
          organization](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)"
          in the GitHub Help documentation.
        paramKey: members_can_create_private_repositories
        in: body
        schema:
          type: boolean
        required: false
      - paramName: membersCanCreatePublicRepositories
        description: Whether organization members can create public repositories, which
          are visible to anyone. For more information, see "[Restricting
          repository creation in your
          organization](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)"
          in the GitHub Help documentation.
        paramKey: members_can_create_public_repositories
        in: body
        schema:
          type: boolean
        required: false
      - paramName: membersAllowedRepositoryCreationType
        description: >-
          Specifies which types of repositories non-admin organization members
          can create. `private` is only available to repositories that are part
          of an organization on GitHub Enterprise Cloud.

          **Note:** This parameter is closing down and will be removed in the
          future. Its return value ignores internal repositories. Using this
          parameter overrides values set in `members_can_create_repositories`.
          See the parameter deprecation notice in the operation description for
          details.
        paramKey: members_allowed_repository_creation_type
        in: body
        schema:
          type: string
          enum:
            - all
            - private
            - none
        required: false
      - paramName: membersCanCreatePages
        description: Whether organization members can create GitHub Pages sites.
          Existing published sites will not be impacted.
        paramKey: members_can_create_pages
        in: body
        schema:
          type: boolean
          default: true
        required: false
      - paramName: membersCanCreatePublicPages
        description: Whether organization members can create public GitHub Pages sites.
          Existing published sites will not be impacted.
        paramKey: members_can_create_public_pages
        in: body
        schema:
          type: boolean
          default: true
        required: false
      - paramName: membersCanCreatePrivatePages
        description: Whether organization members can create private GitHub Pages sites.
          Existing published sites will not be impacted.
        paramKey: members_can_create_private_pages
        in: body
        schema:
          type: boolean
          default: true
        required: false
      - paramName: membersCanForkPrivateRepositories
        description: Whether organization members can fork private organization
          repositories.
        paramKey: members_can_fork_private_repositories
        in: body
        schema:
          type: boolean
          default: false
        required: false
      - paramName: webCommitSignoffRequired
        description: Whether contributors to organization repositories are required to
          sign off on commits they make through GitHub's web interface.
        paramKey: web_commit_signoff_required
        in: body
        schema:
          type: boolean
          default: false
        required: false
      - paramName: blog
        description: ""
        paramKey: blog
        in: body
        schema:
          type: string
        required: false
      - paramName: advancedSecurityEnabledForNewRepositories
        description: >-
          **Endpoint closing down notice.** Please use [code security
          configurations](https://docs.github.com/rest/code-security/configurations)
          instead.


          Whether GitHub Advanced Security is automatically enabled for new
          repositories and repositories transferred to this organization.


          To use this parameter, you must have admin permissions for the
          repository or be an owner or security manager for the organization
          that owns the repository. For more information, see "[Managing
          security managers in your
          organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."


          You can check which security and analysis features are currently
          enabled by using a `GET /orgs/{org}` request.
        paramKey: advanced_security_enabled_for_new_repositories
        in: body
        schema:
          type: boolean
        required: false
      - paramName: dependabotAlertsEnabledForNewRepositories
        description: >-
          **Endpoint closing down notice.** Please use [code security
          configurations](https://docs.github.com/rest/code-security/configurations)
          instead.


          Whether Dependabot alerts are automatically enabled for new
          repositories and repositories transferred to this organization.


          To use this parameter, you must have admin permissions for the
          repository or be an owner or security manager for the organization
          that owns the repository. For more information, see "[Managing
          security managers in your
          organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."


          You can check which security and analysis features are currently
          enabled by using a `GET /orgs/{org}` request.
        paramKey: dependabot_alerts_enabled_for_new_repositories
        in: body
        schema:
          type: boolean
        required: false
      - paramName: dependabotSecurityUpdatesEnabledForNewRepositories
        description: >-
          **Endpoint closing down notice.** Please use [code security
          configurations](https://docs.github.com/rest/code-security/configurations)
          instead.


          Whether Dependabot security updates are automatically enabled for new
          repositories and repositories transferred to this organization.


          To use this parameter, you must have admin permissions for the
          repository or be an owner or security manager for the organization
          that owns the repository. For more information, see "[Managing
          security managers in your
          organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."


          You can check which security and analysis features are currently
          enabled by using a `GET /orgs/{org}` request.
        paramKey: dependabot_security_updates_enabled_for_new_repositories
        in: body
        schema:
          type: boolean
        required: false
      - paramName: dependencyGraphEnabledForNewRepositories
        description: >-
          **Endpoint closing down notice.** Please use [code security
          configurations](https://docs.github.com/rest/code-security/configurations)
          instead.


          Whether dependency graph is automatically enabled for new repositories
          and repositories transferred to this organization.


          To use this parameter, you must have admin permissions for the
          repository or be an owner or security manager for the organization
          that owns the repository. For more information, see "[Managing
          security managers in your
          organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."


          You can check which security and analysis features are currently
          enabled by using a `GET /orgs/{org}` request.
        paramKey: dependency_graph_enabled_for_new_repositories
        in: body
        schema:
          type: boolean
        required: false
      - paramName: secretScanningEnabledForNewRepositories
        description: >-
          **Endpoint closing down notice.** Please use [code security
          configurations](https://docs.github.com/rest/code-security/configurations)
          instead.


          Whether secret scanning is automatically enabled for new repositories
          and repositories transferred to this organization.


          To use this parameter, you must have admin permissions for the
          repository or be an owner or security manager for the organization
          that owns the repository. For more information, see "[Managing
          security managers in your
          organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."


          You can check which security and analysis features are currently
          enabled by using a `GET /orgs/{org}` request.
        paramKey: secret_scanning_enabled_for_new_repositories
        in: body
        schema:
          type: boolean
        required: false
      - paramName: secretScanningPushProtectionEnabledForNewRepositories
        description: >-
          **Endpoint closing down notice.** Please use [code security
          configurations](https://docs.github.com/rest/code-security/configurations)
          instead.


          Whether secret scanning push protection is automatically enabled for
          new repositories and repositories transferred to this organization.


          To use this parameter, you must have admin permissions for the
          repository or be an owner or security manager for the organization
          that owns the repository. For more information, see "[Managing
          security managers in your
          organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."


          You can check which security and analysis features are currently
          enabled by using a `GET /orgs/{org}` request.
        paramKey: secret_scanning_push_protection_enabled_for_new_repositories
        in: body
        schema:
          type: boolean
        required: false
      - paramName: secretScanningPushProtectionCustomLinkEnabled
        description: Whether a custom link is shown to contributors who are blocked from
          pushing a secret by push protection.
        paramKey: secret_scanning_push_protection_custom_link_enabled
        in: body
        schema:
          type: boolean
        required: false
      - paramName: secretScanningPushProtectionCustomLink
        description: If `secret_scanning_push_protection_custom_link_enabled` is true,
          the URL that will be displayed to contributors who are blocked from
          pushing a secret.
        paramKey: secret_scanning_push_protection_custom_link
        in: body
        schema:
          type: string
        required: false
      - paramName: deployKeysEnabledForRepositories
        description: Controls whether or not deploy keys may be added and used for
          repositories in the organization.
        paramKey: deploy_keys_enabled_for_repositories
        in: body
        schema:
          type: boolean
        required: false
    requestBodyType: json
  - moduleName: Orgs / Delete
    method: delete
    path: /orgs/{org}
    description: >-
      Deletes an organization and all its repositories.


      The organization login will be unavailable for 90 days after deletion.


      Please review the Terms of Service regarding account deletion before using
      this endpoint:


      https://docs.github.com/site-policy/github-terms/github-terms-of-service
    externalDocs: https://docs.github.com/rest/orgs/orgs#delete-an-organization
    params:
      - paramName: org
        description: The organization name. The name is not case sensitive.
        paramKey: org
        in: path
        schema:
          type: string
        required: true
  - moduleName: Orgs / Attestations / List
    method: get
    path: /orgs/{org}/attestations/{subject_digest}
    description: >-
      List a collection of artifact attestations with a given subject digest
      that are associated with repositories owned by an organization.


      The collection of attestations returned by this endpoint is filtered
      according to the authenticated user's permissions; if the authenticated
      user cannot read a repository, the attestations associated with that
      repository will not be included in the response. In addition, when using a
      fine-grained access token the `attestations:read` permission is required.


      **Please note:** in order to offer meaningful security benefits, an
      attestation's signature and timestamps **must** be cryptographically
      verified, and the identity of the attestation signer **must** be
      validated. Attestations can be verified using the [GitHub CLI `attestation
      verify` command](https://cli.github.com/manual/gh_attestation_verify). For
      more information, see [our guide on how to use artifact attestations to
      establish a build's
      provenance](https://docs.github.com/actions/security-guides/using-artifact-attestations-to-establish-provenance-for-builds).
    externalDocs: https://docs.github.com/rest/orgs/orgs#list-attestations
    params:
      - paramName: perPage
        description: The number of results per page (max 100). For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: per_page
        in: query
        schema:
          type: number
          default: 30
        required: false
      - paramName: before
        description: A cursor, as given in the [Link
          header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers).
          If specified, the query only searches for results before this cursor.
          For more information, see "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: before
        in: query
        schema:
          type: string
        required: false
      - paramName: after
        description: A cursor, as given in the [Link
          header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers).
          If specified, the query only searches for results after this cursor.
          For more information, see "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: after
        in: query
        schema:
          type: string
        required: false
      - paramName: org
        description: The organization name. The name is not case sensitive.
        paramKey: org
        in: path
        schema:
          type: string
        required: true
      - paramName: subjectDigest
        description: The parameter should be set to the attestation's subject's SHA256
          digest, in the form `sha256:HEX_DIGEST`.
        paramKey: subject_digest
        in: path
        schema:
          type: string
        required: true
  - moduleName: Orgs / Blocked Users / List
    method: get
    path: /orgs/{org}/blocks
    description: List the users blocked by an organization.
    externalDocs: https://docs.github.com/rest/orgs/blocking#list-users-blocked-by-an-organization
    params:
      - paramName: org
        description: The organization name. The name is not case sensitive.
        paramKey: org
        in: path
        schema:
          type: string
        required: true
      - paramName: perPage
        description: The number of results per page (max 100). For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: per_page
        in: query
        schema:
          type: number
          default: 30
        required: false
      - paramName: page
        description: The page number of the results to fetch. For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: page
        in: query
        schema:
          type: number
          default: 1
        required: false
  - moduleName: Orgs / Blocked Users / Check
    method: get
    path: /orgs/{org}/blocks/{username}
    description: Returns a 204 if the given user is blocked by the given
      organization. Returns a 404 if the organization is not blocking the user,
      or if the user account has been identified as spam by GitHub.
    externalDocs: https://docs.github.com/rest/orgs/blocking#check-if-a-user-is-blocked-by-an-organization
    params:
      - paramName: org
        description: The organization name. The name is not case sensitive.
        paramKey: org
        in: path
        schema:
          type: string
        required: true
      - paramName: username
        description: The handle for the GitHub user account.
        paramKey: username
        in: path
        schema:
          type: string
        required: true
  - moduleName: Orgs / Blocked Users / Block
    method: put
    path: /orgs/{org}/blocks/{username}
    description: Blocks the given user on behalf of the specified organization and
      returns a 204. If the organization cannot block the given user a 422 is
      returned.
    externalDocs: https://docs.github.com/rest/orgs/blocking#block-a-user-from-an-organization
    params:
      - paramName: org
        description: The organization name. The name is not case sensitive.
        paramKey: org
        in: path
        schema:
          type: string
        required: true
      - paramName: username
        description: The handle for the GitHub user account.
        paramKey: username
        in: path
        schema:
          type: string
        required: true
  - moduleName: Orgs / Blocked Users / Unblock
    method: delete
    path: /orgs/{org}/blocks/{username}
    description: Unblocks the given user on behalf of the specified organization.
    externalDocs: https://docs.github.com/rest/orgs/blocking#unblock-a-user-from-an-organization
    params:
      - paramName: org
        description: The organization name. The name is not case sensitive.
        paramKey: org
        in: path
        schema:
          type: string
        required: true
      - paramName: username
        description: The handle for the GitHub user account.
        paramKey: username
        in: path
        schema:
          type: string
        required: true
  - moduleName: Dependabot / Org / List Alerts
    method: get
    path: /orgs/{org}/dependabot/alerts
    description: >-
      Lists Dependabot alerts for an organization.


      The authenticated user must be an owner or security manager for the
      organization to use this endpoint.


      OAuth app tokens and personal access tokens (classic) need the
      `security_events` scope to use this endpoint. If this endpoint is only
      used with public repositories, the token can use the `public_repo` scope
      instead.
    externalDocs: https://docs.github.com/rest/dependabot/alerts#list-dependabot-alerts-for-an-organization
    params:
      - paramName: org
        description: The organization name. The name is not case sensitive.
        paramKey: org
        in: path
        schema:
          type: string
        required: true
      - paramName: state
        description: >-
          A comma-separated list of states. If specified, only alerts with these
          states will be returned.


          Can be: `auto_dismissed`, `dismissed`, `fixed`, `open`
        paramKey: state
        in: query
        schema:
          type: string
        required: false
      - paramName: severity
        description: >-
          A comma-separated list of severities. If specified, only alerts with
          these severities will be returned.


          Can be: `low`, `medium`, `high`, `critical`
        paramKey: severity
        in: query
        schema:
          type: string
        required: false
      - paramName: ecosystem
        description: >-
          A comma-separated list of ecosystems. If specified, only alerts for
          these ecosystems will be returned.


          Can be: `composer`, `go`, `maven`, `npm`, `nuget`, `pip`, `pub`,
          `rubygems`, `rust`
        paramKey: ecosystem
        in: query
        schema:
          type: string
        required: false
      - paramName: package
        description: A comma-separated list of package names. If specified, only alerts
          for these packages will be returned.
        paramKey: package
        in: query
        schema:
          type: string
        required: false
      - paramName: scope
        description: The scope of the vulnerable dependency. If specified, only alerts
          with this scope will be returned.
        paramKey: scope
        in: query
        schema:
          type: string
          enum:
            - development
            - runtime
        required: false
      - paramName: sort
        description: |-
          The property by which to sort the results.
          `created` means when the alert was created.
          `updated` means when the alert's state last changed.
        paramKey: sort
        in: query
        schema:
          type: string
          default: created
          enum:
            - created
            - updated
        required: false
      - paramName: direction
        description: The direction to sort the results by.
        paramKey: direction
        in: query
        schema:
          type: string
          default: desc
          enum:
            - asc
            - desc
        required: false
      - paramName: before
        description: A cursor, as given in the [Link
          header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers).
          If specified, the query only searches for results before this cursor.
          For more information, see "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: before
        in: query
        schema:
          type: string
        required: false
      - paramName: after
        description: A cursor, as given in the [Link
          header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers).
          If specified, the query only searches for results after this cursor.
          For more information, see "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: after
        in: query
        schema:
          type: string
        required: false
      - paramName: first
        description: >-
          **Deprecated**. The number of results per page (max 100), starting
          from the first matching result.

          This parameter must not be used in combination with `last`.

          Instead, use `per_page` in combination with `after` to fetch the first
          page of results.
        paramKey: first
        in: query
        schema:
          type: number
          minimum: 1
          maximum: 100
          default: 30
        required: false
      - paramName: last
        description: >-
          **Deprecated**. The number of results per page (max 100), starting
          from the last matching result.

          This parameter must not be used in combination with `first`.

          Instead, use `per_page` in combination with `before` to fetch the last
          page of results.
        paramKey: last
        in: query
        schema:
          type: number
          minimum: 1
          maximum: 100
        required: false
      - paramName: perPage
        description: The number of results per page (max 100). For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: per_page
        in: query
        schema:
          type: number
          default: 30
        required: false
  - moduleName: Dependabot / Org / Secrets / List
    method: get
    path: /orgs/{org}/dependabot/secrets
    description: >-
      Lists all secrets available in an organization without revealing their

      encrypted values.


      OAuth app tokens and personal access tokens (classic) need the `admin:org`
      scope to use this endpoint.
    externalDocs: https://docs.github.com/rest/dependabot/secrets#list-organization-secrets
    params:
      - paramName: org
        description: The organization name. The name is not case sensitive.
        paramKey: org
        in: path
        schema:
          type: string
        required: true
      - paramName: perPage
        description: The number of results per page (max 100). For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: per_page
        in: query
        schema:
          type: number
          default: 30
        required: false
      - paramName: page
        description: The page number of the results to fetch. For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: page
        in: query
        schema:
          type: number
          default: 1
        required: false
  - moduleName: Dependabot / Org / Secrets / Public Key
    method: get
    path: /orgs/{org}/dependabot/secrets/public-key
    description: >-
      Gets your public key, which you need to encrypt secrets. You need to

      encrypt a secret before you can create or update secrets.


      OAuth app tokens and personal access tokens (classic) need the `admin:org`
      scope to use this endpoint.
    externalDocs: https://docs.github.com/rest/dependabot/secrets#get-an-organization-public-key
    params:
      - paramName: org
        description: The organization name. The name is not case sensitive.
        paramKey: org
        in: path
        schema:
          type: string
        required: true
  - moduleName: Dependabot / Org / Secrets / Get
    method: get
    path: /orgs/{org}/dependabot/secrets/{secret_name}
    description: >-
      Gets a single organization secret without revealing its encrypted value.


      OAuth app tokens and personal access tokens (classic) need the `admin:org`
      scope to use this endpoint.
    externalDocs: https://docs.github.com/rest/dependabot/secrets#get-an-organization-secret
    params:
      - paramName: org
        description: The organization name. The name is not case sensitive.
        paramKey: org
        in: path
        schema:
          type: string
        required: true
      - paramName: secretName
        description: The name of the secret.
        paramKey: secret_name
        in: path
        schema:
          type: string
        required: true
  - moduleName: Dependabot / Org / Secrets / Create Or Update
    method: put
    path: /orgs/{org}/dependabot/secrets/{secret_name}
    description: >-
      Creates or updates an organization secret with an encrypted value. Encrypt
      your secret using

      [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages).
      For more information, see "[Encrypting secrets for the REST
      API](https://docs.github.com/rest/guides/encrypting-secrets-for-the-rest-api)."


      OAuth app tokens and personal access tokens (classic) need the `admin:org`
      scope to use this endpoint.
    externalDocs: https://docs.github.com/rest/dependabot/secrets#create-or-update-an-organization-secret
    params:
      - paramName: org
        description: The organization name. The name is not case sensitive.
        paramKey: org
        in: path
        schema:
          type: string
        required: true
      - paramName: secretName
        description: The name of the secret.
        paramKey: secret_name
        in: path
        schema:
          type: string
        required: true
      - paramName: encryptedValue
        description: Value for your secret, encrypted with
          [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages)
          using the public key retrieved from the [Get an organization public
          key](https://docs.github.com/rest/dependabot/secrets#get-an-organization-public-key)
          endpoint.
        paramKey: encrypted_value
        in: body
        schema:
          type: string
        required: false
      - paramName: keyId
        description: ID of the key you used to encrypt the secret.
        paramKey: key_id
        in: body
        schema:
          type: string
        required: false
      - paramName: visibility
        description: Which type of organization repositories have access to the
          organization secret. `selected` means only the repositories specified
          by `selected_repository_ids` can access the secret.
        paramKey: visibility
        in: body
        schema:
          type: string
          enum:
            - all
            - private
            - selected
        required: true
      - paramName: selectedRepositoryIds
        description: An array of repository ids that can access the organization secret.
          You can only provide a list of repository ids when the `visibility` is
          set to `selected`. You can manage the list of selected repositories
          using the [List selected repositories for an organization
          secret](https://docs.github.com/rest/dependabot/secrets#list-selected-repositories-for-an-organization-secret),
          [Set selected repositories for an organization
          secret](https://docs.github.com/rest/dependabot/secrets#set-selected-repositories-for-an-organization-secret),
          and [Remove selected repository from an organization
          secret](https://docs.github.com/rest/dependabot/secrets#remove-selected-repository-from-an-organization-secret)
          endpoints.
        paramKey: selected_repository_ids
        in: body
        schema:
          type: array
          items:
            type: any
        required: false
    requestBodyType: json
  - moduleName: Dependabot / Org / Secrets / Delete
    method: delete
    path: /orgs/{org}/dependabot/secrets/{secret_name}
    description: >-
      Deletes a secret in an organization using the secret name.


      OAuth app tokens and personal access tokens (classic) need the `admin:org`
      scope to use this endpoint.
    externalDocs: https://docs.github.com/rest/dependabot/secrets#delete-an-organization-secret
    params:
      - paramName: org
        description: The organization name. The name is not case sensitive.
        paramKey: org
        in: path
        schema:
          type: string
        required: true
      - paramName: secretName
        description: The name of the secret.
        paramKey: secret_name
        in: path
        schema:
          type: string
        required: true
  - moduleName: Dependabot / Org / Secrets / List Repositories
    method: get
    path: /orgs/{org}/dependabot/secrets/{secret_name}/repositories
    description: >-
      Lists all repositories that have been selected when the `visibility`

      for repository access to a secret is set to `selected`.


      OAuth app tokens and personal access tokens (classic) need the `admin:org`
      scope to use this endpoint.
    externalDocs: https://docs.github.com/rest/dependabot/secrets#list-selected-repositories-for-an-organization-secret
    params:
      - paramName: org
        description: The organization name. The name is not case sensitive.
        paramKey: org
        in: path
        schema:
          type: string
        required: true
      - paramName: secretName
        description: The name of the secret.
        paramKey: secret_name
        in: path
        schema:
          type: string
        required: true
      - paramName: page
        description: The page number of the results to fetch. For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: page
        in: query
        schema:
          type: number
          default: 1
        required: false
      - paramName: perPage
        description: The number of results per page (max 100). For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: per_page
        in: query
        schema:
          type: number
          default: 30
        required: false
  - moduleName: Dependabot / Org / Secrets / Set Repositories
    method: put
    path: /orgs/{org}/dependabot/secrets/{secret_name}/repositories
    description: >-
      Replaces all repositories for an organization secret when the `visibility`

      for repository access is set to `selected`. The visibility is set when you
      [Create

      or update an organization
      secret](https://docs.github.com/rest/dependabot/secrets#create-or-update-an-organization-secret).


      OAuth app tokens and personal access tokens (classic) need the `admin:org`
      scope to use this endpoint.
    externalDocs: https://docs.github.com/rest/dependabot/secrets#set-selected-repositories-for-an-organization-secret
    params:
      - paramName: org
        description: The organization name. The name is not case sensitive.
        paramKey: org
        in: path
        schema:
          type: string
        required: true
      - paramName: secretName
        description: The name of the secret.
        paramKey: secret_name
        in: path
        schema:
          type: string
        required: true
      - paramName: selectedRepositoryIds
        description: An array of repository ids that can access the organization secret.
          You can only provide a list of repository ids when the `visibility` is
          set to `selected`. You can add and remove individual repositories
          using the [Set selected repositories for an organization
          secret](https://docs.github.com/rest/dependabot/secrets#set-selected-repositories-for-an-organization-secret)
          and [Remove selected repository from an organization
          secret](https://docs.github.com/rest/dependabot/secrets#remove-selected-repository-from-an-organization-secret)
          endpoints.
        paramKey: selected_repository_ids
        in: body
        schema:
          type: array
          items:
            type: any
        required: true
    requestBodyType: json
  - moduleName: Dependabot / Org / Secrets / Add Repository
    method: put
    path: /orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}
    description: >-
      Adds a repository to an organization secret when the `visibility` for

      repository access is set to `selected`. The visibility is set when you
      [Create or

      update an organization
      secret](https://docs.github.com/rest/dependabot/secrets#create-or-update-an-organization-secret).


      OAuth app tokens and personal access tokens (classic) need the `admin:org`
      scope to use this endpoint.
    externalDocs: https://docs.github.com/rest/dependabot/secrets#add-selected-repository-to-an-organization-secret
    params:
      - paramName: org
        description: The organization name. The name is not case sensitive.
        paramKey: org
        in: path
        schema:
          type: string
        required: true
      - paramName: secretName
        description: The name of the secret.
        paramKey: secret_name
        in: path
        schema:
          type: string
        required: true
      - paramName: repositoryId
        description: ""
        paramKey: repository_id
        in: path
        schema:
          type: number
        required: true
  - moduleName: Dependabot / Org / Secrets / Remove Repository
    method: delete
    path: /orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}
    description: >-
      Removes a repository from an organization secret when the `visibility`

      for repository access is set to `selected`. The visibility is set when you
      [Create

      or update an organization
      secret](https://docs.github.com/rest/dependabot/secrets#create-or-update-an-organization-secret).


      OAuth app tokens and personal access tokens (classic) need the `admin:org`
      scope to use this endpoint.
    externalDocs: https://docs.github.com/rest/dependabot/secrets#remove-selected-repository-from-an-organization-secret
    params:
      - paramName: org
        description: The organization name. The name is not case sensitive.
        paramKey: org
        in: path
        schema:
          type: string
        required: true
      - paramName: secretName
        description: The name of the secret.
        paramKey: secret_name
        in: path
        schema:
          type: string
        required: true
      - paramName: repositoryId
        description: ""
        paramKey: repository_id
        in: path
        schema:
          type: number
        required: true
  - moduleName: Packages / Docker / List Conflicts
    method: get
    path: /orgs/{org}/docker/conflicts
    description: >-
      Lists all packages that are in a specific organization, are readable by
      the requesting user, and that encountered a conflict during a Docker
      migration.


      OAuth app tokens and personal access tokens (classic) need the
      `read:packages` scope to use this endpoint.
    externalDocs: https://docs.github.com/rest/packages/packages#get-list-of-conflicting-packages-during-docker-migration-for-organization
    params:
      - paramName: org
        description: The organization name. The name is not case sensitive.
        paramKey: org
        in: path
        schema:
          type: string
        required: true
  - moduleName: Activity / Org / List Public Events
    method: get
    path: /orgs/{org}/events
    description: >-
      > [!NOTE]

      > This API is not built to serve real-time use cases. Depending on the
      time of day, event latency can be anywhere from 30s to 6h.
    externalDocs: https://docs.github.com/rest/activity/events#list-public-organization-events
    params:
      - paramName: org
        description: The organization name. The name is not case sensitive.
        paramKey: org
        in: path
        schema:
          type: string
        required: true
      - paramName: perPage
        description: The number of results per page (max 100). For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: per_page
        in: query
        schema:
          type: number
          default: 30
        required: false
      - paramName: page
        description: The page number of the results to fetch. For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: page
        in: query
        schema:
          type: number
          default: 1
        required: false
  - moduleName: Orgs / Failed Invitations / List
    method: get
    path: /orgs/{org}/failed_invitations
    description: The return hash contains `failed_at` and `failed_reason` fields
      which represent the time at which the invitation failed and the reason for
      the failure.
    externalDocs: https://docs.github.com/rest/orgs/members#list-failed-organization-invitations
    params:
      - paramName: org
        description: The organization name. The name is not case sensitive.
        paramKey: org
        in: path
        schema:
          type: string
        required: true
      - paramName: perPage
        description: The number of results per page (max 100). For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: per_page
        in: query
        schema:
          type: number
          default: 30
        required: false
      - paramName: page
        description: The page number of the results to fetch. For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: page
        in: query
        schema:
          type: number
          default: 1
        required: false
  - moduleName: Orgs / Webhooks / List
    method: get
    path: /orgs/{org}/hooks
    description: >-
      You must be an organization owner to use this endpoint.


      OAuth app tokens and personal access tokens (classic) need
      `admin:org_hook` scope. OAuth apps cannot list, view, or edit

      webhooks that they did not create and users cannot list, view, or edit
      webhooks that were created by OAuth apps.
    externalDocs: https://docs.github.com/rest/orgs/webhooks#list-organization-webhooks
    params:
      - paramName: org
        description: The organization name. The name is not case sensitive.
        paramKey: org
        in: path
        schema:
          type: string
        required: true
      - paramName: perPage
        description: The number of results per page (max 100). For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: per_page
        in: query
        schema:
          type: number
          default: 30
        required: false
      - paramName: page
        description: The page number of the results to fetch. For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: page
        in: query
        schema:
          type: number
          default: 1
        required: false
  - moduleName: Orgs / Webhooks / Create
    method: post
    path: /orgs/{org}/hooks
    description: >-
      Create a hook that posts payloads in JSON format.


      You must be an organization owner to use this endpoint.


      OAuth app tokens and personal access tokens (classic) need
      `admin:org_hook` scope. OAuth apps cannot list, view, or

      edit webhooks that they did not create and users cannot list, view, or
      edit webhooks that were created by OAuth apps.
    externalDocs: https://docs.github.com/rest/orgs/webhooks#create-an-organization-webhook
    params:
      - paramName: org
        description: The organization name. The name is not case sensitive.
        paramKey: org
        in: path
        schema:
          type: string
        required: true
      - paramName: name
        description: Must be passed as "web".
        paramKey: name
        in: body
        schema:
          type: string
        required: true
      - paramName: config
        description: Key/value pairs to provide settings for this webhook.
        paramKey: config
        in: body
        schema:
          type: any
        required: true
      - paramName: events
        description: Determines what
          [events](https://docs.github.com/webhooks/event-payloads) the hook is
          triggered for. Set to `["*"]` to receive all possible events.
        paramKey: events
        in: body
        schema:
          type: array
          items:
            type: any
        required: false
      - paramName: active
        description: Determines if notifications are sent when the webhook is triggered.
          Set to `true` to send notifications.
        paramKey: active
        in: body
        schema:
          type: boolean
          default: true
        required: false
    requestBodyType: json
  - moduleName: Orgs / Webhooks / Get
    method: get
    path: /orgs/{org}/hooks/{hook_id}
    description: >-
      Returns a webhook configured in an organization. To get only the webhook

      `config` properties, see "[Get a webhook configuration for an
      organization](/rest/orgs/webhooks#get-a-webhook-configuration-for-an-organization).


      You must be an organization owner to use this endpoint.


      OAuth app tokens and personal access tokens (classic) need
      `admin:org_hook` scope. OAuth apps cannot list, view, or edit

      webhooks that they did not create and users cannot list, view, or edit
      webhooks that were created by OAuth apps.
    externalDocs: https://docs.github.com/rest/orgs/webhooks#get-an-organization-webhook
    params:
      - paramName: org
        description: The organization name. The name is not case sensitive.
        paramKey: org
        in: path
        schema:
          type: string
        required: true
      - paramName: hookId
        description: The unique identifier of the hook. You can find this value in the
          `X-GitHub-Hook-ID` header of a webhook delivery.
        paramKey: hook_id
        in: path
        schema:
          type: number
        required: true
  - moduleName: Orgs / Webhooks / Update
    method: patch
    path: /orgs/{org}/hooks/{hook_id}
    description: >-
      Updates a webhook configured in an organization. When you update a
      webhook,

      the `secret` will be overwritten. If you previously had a `secret` set,
      you must

      provide the same `secret` or set a new `secret` or the secret will be
      removed. If

      you are only updating individual webhook `config` properties, use "[Update
      a webhook

      configuration for an
      organization](/rest/orgs/webhooks#update-a-webhook-configuration-for-an-organization)".


      You must be an organization owner to use this endpoint.


      OAuth app tokens and personal access tokens (classic) need
      `admin:org_hook` scope. OAuth apps cannot list, view, or edit

      webhooks that they did not create and users cannot list, view, or edit
      webhooks that were created by OAuth apps.
    externalDocs: https://docs.github.com/rest/orgs/webhooks#update-an-organization-webhook
    params:
      - paramName: org
        description: The organization name. The name is not case sensitive.
        paramKey: org
        in: path
        schema:
          type: string
        required: true
      - paramName: hookId
        description: The unique identifier of the hook. You can find this value in the
          `X-GitHub-Hook-ID` header of a webhook delivery.
        paramKey: hook_id
        in: path
        schema:
          type: number
        required: true
      - paramName: config
        description: Key/value pairs to provide settings for this webhook.
        paramKey: config
        in: body
        schema:
          type: any
        required: false
      - paramName: events
        description: Determines what
          [events](https://docs.github.com/webhooks/event-payloads) the hook is
          triggered for.
        paramKey: events
        in: body
        schema:
          type: array
          items:
            type: any
        required: false
      - paramName: active
        description: Determines if notifications are sent when the webhook is triggered.
          Set to `true` to send notifications.
        paramKey: active
        in: body
        schema:
          type: boolean
          default: true
        required: false
      - paramName: name
        description: ""
        paramKey: name
        in: body
        schema:
          type: string
        required: false
    requestBodyType: json
  - moduleName: Orgs / Webhooks / Delete
    method: delete
    path: /orgs/{org}/hooks/{hook_id}
    description: >-
      You must be an organization owner to use this endpoint.


      OAuth app tokens and personal access tokens (classic) need
      `admin:org_hook` scope. OAuth apps cannot list, view, or edit

      webhooks that they did not create and users cannot list, view, or edit
      webhooks that were created by OAuth apps.
    externalDocs: https://docs.github.com/rest/orgs/webhooks#delete-an-organization-webhook
    params:
      - paramName: org
        description: The organization name. The name is not case sensitive.
        paramKey: org
        in: path
        schema:
          type: string
        required: true
      - paramName: hookId
        description: The unique identifier of the hook. You can find this value in the
          `X-GitHub-Hook-ID` header of a webhook delivery.
        paramKey: hook_id
        in: path
        schema:
          type: number
        required: true
  - moduleName: Orgs / Webhook Config / Get
    method: get
    path: /orgs/{org}/hooks/{hook_id}/config
    description: >-
      Returns the webhook configuration for an organization. To get more
      information about the webhook, including the `active` state and `events`,
      use "[Get an organization webhook
      ](/rest/orgs/webhooks#get-an-organization-webhook)."


      You must be an organization owner to use this endpoint.


      OAuth app tokens and personal access tokens (classic) need
      `admin:org_hook` scope. OAuth apps cannot list, view, or edit

      webhooks that they did not create and users cannot list, view, or edit
      webhooks that were created by OAuth apps.
    externalDocs: https://docs.github.com/rest/orgs/webhooks#get-a-webhook-configuration-for-an-organization
    params:
      - paramName: org
        description: The organization name. The name is not case sensitive.
        paramKey: org
        in: path
        schema:
          type: string
        required: true
      - paramName: hookId
        description: The unique identifier of the hook. You can find this value in the
          `X-GitHub-Hook-ID` header of a webhook delivery.
        paramKey: hook_id
        in: path
        schema:
          type: number
        required: true
  - moduleName: Orgs / Webhook Config / Update
    method: patch
    path: /orgs/{org}/hooks/{hook_id}/config
    description: >-
      Updates the webhook configuration for an organization. To update more
      information about the webhook, including the `active` state and `events`,
      use "[Update an organization webhook
      ](/rest/orgs/webhooks#update-an-organization-webhook)."


      You must be an organization owner to use this endpoint.


      OAuth app tokens and personal access tokens (classic) need
      `admin:org_hook` scope. OAuth apps cannot list, view, or edit

      webhooks that they did not create and users cannot list, view, or edit
      webhooks that were created by OAuth apps.
    externalDocs: https://docs.github.com/rest/orgs/webhooks#update-a-webhook-configuration-for-an-organization
    params:
      - paramName: org
        description: The organization name. The name is not case sensitive.
        paramKey: org
        in: path
        schema:
          type: string
        required: true
      - paramName: hookId
        description: The unique identifier of the hook. You can find this value in the
          `X-GitHub-Hook-ID` header of a webhook delivery.
        paramKey: hook_id
        in: path
        schema:
          type: number
        required: true
      - paramName: url
        description: The URL to which the payloads will be delivered.
        paramKey: url
        in: body
        schema:
          type: string
        required: false
      - paramName: contentType
        description: The media type used to serialize the payloads. Supported values
          include `json` and `form`. The default is `form`.
        paramKey: content_type
        in: body
        schema:
          type: string
        required: false
      - paramName: secret
        description: If provided, the `secret` will be used as the `key` to generate the
          HMAC hex digest value for [delivery signature
          headers](https://docs.github.com/webhooks/event-payloads/#delivery-headers).
        paramKey: secret
        in: body
        schema:
          type: string
        required: false
      - paramName: insecureSsl
        description: ""
        paramKey: insecure_ssl
        in: body
        schema:
          type: any
        required: false
    requestBodyType: json
  - moduleName: Orgs / Webhook Deliveries / List
    method: get
    path: /orgs/{org}/hooks/{hook_id}/deliveries
    description: >-
      Returns a list of webhook deliveries for a webhook configured in an
      organization.


      You must be an organization owner to use this endpoint.


      OAuth app tokens and personal access tokens (classic) need
      `admin:org_hook` scope. OAuth apps cannot list, view, or edit

      webhooks that they did not create and users cannot list, view, or edit
      webhooks that were created by OAuth apps.
    externalDocs: https://docs.github.com/rest/orgs/webhooks#list-deliveries-for-an-organization-webhook
    params:
      - paramName: org
        description: The organization name. The name is not case sensitive.
        paramKey: org
        in: path
        schema:
          type: string
        required: true
      - paramName: hookId
        description: The unique identifier of the hook. You can find this value in the
          `X-GitHub-Hook-ID` header of a webhook delivery.
        paramKey: hook_id
        in: path
        schema:
          type: number
        required: true
      - paramName: perPage
        description: The number of results per page (max 100). For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: per_page
        in: query
        schema:
          type: number
          default: 30
        required: false
      - paramName: cursor
        description: "Used for pagination: the starting delivery from which the page of
          deliveries is fetched. Refer to the `link` header for the next and
          previous page cursors."
        paramKey: cursor
        in: query
        schema:
          type: string
        required: false
  - moduleName: Orgs / Webhook Delivery / Get
    method: get
    path: /orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}
    description: >-
      Returns a delivery for a webhook configured in an organization.


      You must be an organization owner to use this endpoint.


      OAuth app tokens and personal access tokens (classic) need
      `admin:org_hook` scope. OAuth apps cannot list, view, or edit

      webhooks that they did not create and users cannot list, view, or edit
      webhooks that were created by OAuth apps.
    externalDocs: https://docs.github.com/rest/orgs/webhooks#get-a-webhook-delivery-for-an-organization-webhook
    params:
      - paramName: org
        description: The organization name. The name is not case sensitive.
        paramKey: org
        in: path
        schema:
          type: string
        required: true
      - paramName: hookId
        description: The unique identifier of the hook. You can find this value in the
          `X-GitHub-Hook-ID` header of a webhook delivery.
        paramKey: hook_id
        in: path
        schema:
          type: number
        required: true
      - paramName: deliveryId
        description: ""
        paramKey: delivery_id
        in: path
        schema:
          type: number
        required: true
  - moduleName: Orgs / Webhook Delivery / Redeliver
    method: post
    path: /orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}/attempts
    description: >-
      Redeliver a delivery for a webhook configured in an organization.


      You must be an organization owner to use this endpoint.


      OAuth app tokens and personal access tokens (classic) need
      `admin:org_hook` scope. OAuth apps cannot list, view, or edit

      webhooks that they did not create and users cannot list, view, or edit
      webhooks that were created by OAuth apps.
    externalDocs: https://docs.github.com/rest/orgs/webhooks#redeliver-a-delivery-for-an-organization-webhook
    params:
      - paramName: org
        description: The organization name. The name is not case sensitive.
        paramKey: org
        in: path
        schema:
          type: string
        required: true
      - paramName: hookId
        description: The unique identifier of the hook. You can find this value in the
          `X-GitHub-Hook-ID` header of a webhook delivery.
        paramKey: hook_id
        in: path
        schema:
          type: number
        required: true
      - paramName: deliveryId
        description: ""
        paramKey: delivery_id
        in: path
        schema:
          type: number
        required: true
  - moduleName: Orgs / Webhook / Ping
    method: post
    path: /orgs/{org}/hooks/{hook_id}/pings
    description: >-
      This will trigger a [ping
      event](https://docs.github.com/webhooks/#ping-event)

      to be sent to the hook.


      You must be an organization owner to use this endpoint.


      OAuth app tokens and personal access tokens (classic) need
      `admin:org_hook` scope. OAuth apps cannot list, view, or edit

      webhooks that they did not create and users cannot list, view, or edit
      webhooks that were created by OAuth apps.
    externalDocs: https://docs.github.com/rest/orgs/webhooks#ping-an-organization-webhook
    params:
      - paramName: org
        description: The organization name. The name is not case sensitive.
        paramKey: org
        in: path
        schema:
          type: string
        required: true
      - paramName: hookId
        description: The unique identifier of the hook. You can find this value in the
          `X-GitHub-Hook-ID` header of a webhook delivery.
        paramKey: hook_id
        in: path
        schema:
          type: number
        required: true
  - moduleName: API Insights / Route Stats / Get By Actor
    method: get
    path: /orgs/{org}/insights/api/route-stats/{actor_type}/{actor_id}
    description: Get API request count statistics for an actor broken down by route
      within a specified time frame.
    externalDocs: https://docs.github.com/rest/orgs/api-insights#get-route-stats-by-actor
    params:
      - paramName: org
        description: The organization name. The name is not case sensitive.
        paramKey: org
        in: path
        schema:
          type: string
        required: true
      - paramName: actorType
        description: The type of the actor
        paramKey: actor_type
        in: path
        schema:
          type: string
          enum:
            - installations
            - classic_pats
            - fine_grained_pats
            - oauth_apps
            - github_apps_user_to_server
        required: true
      - paramName: actorId
        description: The ID of the actor
        paramKey: actor_id
        in: path
        schema:
          type: number
        required: true
      - paramName: minTimestamp
        description: "The minimum timestamp to query for stats. This is a timestamp in
          [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format:
          `YYYY-MM-DDTHH:MM:SSZ`."
        paramKey: min_timestamp
        in: query
        schema:
          type: string
        required: true
      - paramName: maxTimestamp
        description: "The maximum timestamp to query for stats. Defaults to the time 30
          days ago. This is a timestamp in [ISO
          8601](https://en.wikipedia.org/wiki/ISO_8601) format:
          `YYYY-MM-DDTHH:MM:SSZ`."
        paramKey: max_timestamp
        in: query
        schema:
          type: string
        required: false
      - paramName: page
        description: The page number of the results to fetch. For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: page
        in: query
        schema:
          type: number
          default: 1
        required: false
      - paramName: perPage
        description: The number of results per page (max 100). For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: per_page
        in: query
        schema:
          type: number
          default: 30
        required: false
      - paramName: direction
        description: The direction to sort the results by.
        paramKey: direction
        in: query
        schema:
          type: string
          default: desc
          enum:
            - asc
            - desc
        required: false
      - paramName: sort
        description: The property to sort the results by.
        paramKey: sort
        in: query
        schema:
          type: array
          items:
            type: any
        required: false
  - moduleName: API Insights / Subject Stats / Get
    method: get
    path: /orgs/{org}/insights/api/subject-stats
    description: Get API request statistics for all subjects within an organization
      within a specified time frame. Subjects can be users or GitHub Apps.
    externalDocs: https://docs.github.com/rest/orgs/api-insights#get-subject-stats
    params:
      - paramName: org
        description: The organization name. The name is not case sensitive.
        paramKey: org
        in: path
        schema:
          type: string
        required: true
      - paramName: minTimestamp
        description: "The minimum timestamp to query for stats. This is a timestamp in
          [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format:
          `YYYY-MM-DDTHH:MM:SSZ`."
        paramKey: min_timestamp
        in: query
        schema:
          type: string
        required: true
      - paramName: maxTimestamp
        description: "The maximum timestamp to query for stats. Defaults to the time 30
          days ago. This is a timestamp in [ISO
          8601](https://en.wikipedia.org/wiki/ISO_8601) format:
          `YYYY-MM-DDTHH:MM:SSZ`."
        paramKey: max_timestamp
        in: query
        schema:
          type: string
        required: false
      - paramName: page
        description: The page number of the results to fetch. For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: page
        in: query
        schema:
          type: number
          default: 1
        required: false
      - paramName: perPage
        description: The number of results per page (max 100). For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: per_page
        in: query
        schema:
          type: number
          default: 30
        required: false
      - paramName: direction
        description: The direction to sort the results by.
        paramKey: direction
        in: query
        schema:
          type: string
          default: desc
          enum:
            - asc
            - desc
        required: false
      - paramName: sort
        description: The property to sort the results by.
        paramKey: sort
        in: query
        schema:
          type: array
          items:
            type: any
        required: false
  - moduleName: API Insights / Summary Stats / Get
    method: get
    path: /orgs/{org}/insights/api/summary-stats
    description: Get overall statistics of API requests made within an organization
      by all users and apps within a specified time frame.
    externalDocs: https://docs.github.com/rest/orgs/api-insights#get-summary-stats
    params:
      - paramName: org
        description: The organization name. The name is not case sensitive.
        paramKey: org
        in: path
        schema:
          type: string
        required: true
      - paramName: minTimestamp
        description: "The minimum timestamp to query for stats. This is a timestamp in
          [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format:
          `YYYY-MM-DDTHH:MM:SSZ`."
        paramKey: min_timestamp
        in: query
        schema:
          type: string
        required: true
      - paramName: maxTimestamp
        description: "The maximum timestamp to query for stats. Defaults to the time 30
          days ago. This is a timestamp in [ISO
          8601](https://en.wikipedia.org/wiki/ISO_8601) format:
          `YYYY-MM-DDTHH:MM:SSZ`."
        paramKey: max_timestamp
        in: query
        schema:
          type: string
        required: false
  - moduleName: API Insights / Summary Stats / Get By User
    method: get
    path: /orgs/{org}/insights/api/summary-stats/users/{user_id}
    description: Get overall statistics of API requests within the organization for a user.
    externalDocs: https://docs.github.com/rest/orgs/api-insights#get-summary-stats-by-user
    params:
      - paramName: org
        description: The organization name. The name is not case sensitive.
        paramKey: org
        in: path
        schema:
          type: string
        required: true
      - paramName: userId
        description: The ID of the user to query for stats
        paramKey: user_id
        in: path
        schema:
          type: string
        required: true
      - paramName: minTimestamp
        description: "The minimum timestamp to query for stats. This is a timestamp in
          [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format:
          `YYYY-MM-DDTHH:MM:SSZ`."
        paramKey: min_timestamp
        in: query
        schema:
          type: string
        required: true
      - paramName: maxTimestamp
        description: "The maximum timestamp to query for stats. Defaults to the time 30
          days ago. This is a timestamp in [ISO
          8601](https://en.wikipedia.org/wiki/ISO_8601) format:
          `YYYY-MM-DDTHH:MM:SSZ`."
        paramKey: max_timestamp
        in: query
        schema:
          type: string
        required: false
  - moduleName: API Insights / Summary Stats / Get By Actor
    method: get
    path: /orgs/{org}/insights/api/summary-stats/{actor_type}/{actor_id}
    description: Get overall statistics of API requests within the organization made
      by a specific actor. Actors can be GitHub App installations, OAuth apps or
      other tokens on behalf of a user.
    externalDocs: https://docs.github.com/rest/orgs/api-insights#get-summary-stats-by-actor
    params:
      - paramName: org
        description: The organization name. The name is not case sensitive.
        paramKey: org
        in: path
        schema:
          type: string
        required: true
      - paramName: minTimestamp
        description: "The minimum timestamp to query for stats. This is a timestamp in
          [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format:
          `YYYY-MM-DDTHH:MM:SSZ`."
        paramKey: min_timestamp
        in: query
        schema:
          type: string
        required: true
      - paramName: maxTimestamp
        description: "The maximum timestamp to query for stats. Defaults to the time 30
          days ago. This is a timestamp in [ISO
          8601](https://en.wikipedia.org/wiki/ISO_8601) format:
          `YYYY-MM-DDTHH:MM:SSZ`."
        paramKey: max_timestamp
        in: query
        schema:
          type: string
        required: false
      - paramName: actorType
        description: The type of the actor
        paramKey: actor_type
        in: path
        schema:
          type: string
          enum:
            - installations
            - classic_pats
            - fine_grained_pats
            - oauth_apps
            - github_apps_user_to_server
        required: true
      - paramName: actorId
        description: The ID of the actor
        paramKey: actor_id
        in: path
        schema:
          type: number
        required: true
  - moduleName: API Insights / Time Stats / Get
    method: get
    path: /orgs/{org}/insights/api/time-stats
    description: Get the number of API requests and rate-limited requests made
      within an organization over a specified time period.
    externalDocs: https://docs.github.com/rest/orgs/api-insights#get-time-stats
    params:
      - paramName: org
        description: The organization name. The name is not case sensitive.
        paramKey: org
        in: path
        schema:
          type: string
        required: true
      - paramName: minTimestamp
        description: "The minimum timestamp to query for stats. This is a timestamp in
          [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format:
          `YYYY-MM-DDTHH:MM:SSZ`."
        paramKey: min_timestamp
        in: query
        schema:
          type: string
        required: true
      - paramName: maxTimestamp
        description: "The maximum timestamp to query for stats. Defaults to the time 30
          days ago. This is a timestamp in [ISO
          8601](https://en.wikipedia.org/wiki/ISO_8601) format:
          `YYYY-MM-DDTHH:MM:SSZ`."
        paramKey: max_timestamp
        in: query
        schema:
          type: string
        required: false
      - paramName: timestampIncrement
        description: The increment of time used to breakdown the query results (5m, 10m,
          1h, etc.)
        paramKey: timestamp_increment
        in: query
        schema:
          type: string
        required: true
  - moduleName: API Insights / Time Stats / Get By User
    method: get
    path: /orgs/{org}/insights/api/time-stats/users/{user_id}
    description: Get the number of API requests and rate-limited requests made
      within an organization by a specific user over a specified time period.
    externalDocs: https://docs.github.com/rest/orgs/api-insights#get-time-stats-by-user
    params:
      - paramName: org
        description: The organization name. The name is not case sensitive.
        paramKey: org
        in: path
        schema:
          type: string
        required: true
      - paramName: userId
        description: The ID of the user to query for stats
        paramKey: user_id
        in: path
        schema:
          type: string
        required: true
      - paramName: minTimestamp
        description: "The minimum timestamp to query for stats. This is a timestamp in
          [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format:
          `YYYY-MM-DDTHH:MM:SSZ`."
        paramKey: min_timestamp
        in: query
        schema:
          type: string
        required: true
      - paramName: maxTimestamp
        description: "The maximum timestamp to query for stats. Defaults to the time 30
          days ago. This is a timestamp in [ISO
          8601](https://en.wikipedia.org/wiki/ISO_8601) format:
          `YYYY-MM-DDTHH:MM:SSZ`."
        paramKey: max_timestamp
        in: query
        schema:
          type: string
        required: false
      - paramName: timestampIncrement
        description: The increment of time used to breakdown the query results (5m, 10m,
          1h, etc.)
        paramKey: timestamp_increment
        in: query
        schema:
          type: string
        required: true
  - moduleName: API Insights / Time Stats / Get By Actor
    method: get
    path: /orgs/{org}/insights/api/time-stats/{actor_type}/{actor_id}
    description: Get the number of API requests and rate-limited requests made
      within an organization by a specific actor within a specified time period.
    externalDocs: https://docs.github.com/rest/orgs/api-insights#get-time-stats-by-actor
    params:
      - paramName: org
        description: The organization name. The name is not case sensitive.
        paramKey: org
        in: path
        schema:
          type: string
        required: true
      - paramName: actorType
        description: The type of the actor
        paramKey: actor_type
        in: path
        schema:
          type: string
          enum:
            - installations
            - classic_pats
            - fine_grained_pats
            - oauth_apps
            - github_apps_user_to_server
        required: true
      - paramName: actorId
        description: The ID of the actor
        paramKey: actor_id
        in: path
        schema:
          type: number
        required: true
      - paramName: minTimestamp
        description: "The minimum timestamp to query for stats. This is a timestamp in
          [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format:
          `YYYY-MM-DDTHH:MM:SSZ`."
        paramKey: min_timestamp
        in: query
        schema:
          type: string
        required: true
      - paramName: maxTimestamp
        description: "The maximum timestamp to query for stats. Defaults to the time 30
          days ago. This is a timestamp in [ISO
          8601](https://en.wikipedia.org/wiki/ISO_8601) format:
          `YYYY-MM-DDTHH:MM:SSZ`."
        paramKey: max_timestamp
        in: query
        schema:
          type: string
        required: false
      - paramName: timestampIncrement
        description: The increment of time used to breakdown the query results (5m, 10m,
          1h, etc.)
        paramKey: timestamp_increment
        in: query
        schema:
          type: string
        required: true
  - moduleName: API Insights / User Stats / Get
    method: get
    path: /orgs/{org}/insights/api/user-stats/{user_id}
    description: Get API usage statistics within an organization for a user broken
      down by the type of access.
    externalDocs: https://docs.github.com/rest/orgs/api-insights#get-user-stats
    params:
      - paramName: org
        description: The organization name. The name is not case sensitive.
        paramKey: org
        in: path
        schema:
          type: string
        required: true
      - paramName: userId
        description: The ID of the user to query for stats
        paramKey: user_id
        in: path
        schema:
          type: string
        required: true
      - paramName: minTimestamp
        description: "The minimum timestamp to query for stats. This is a timestamp in
          [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format:
          `YYYY-MM-DDTHH:MM:SSZ`."
        paramKey: min_timestamp
        in: query
        schema:
          type: string
        required: true
      - paramName: maxTimestamp
        description: "The maximum timestamp to query for stats. Defaults to the time 30
          days ago. This is a timestamp in [ISO
          8601](https://en.wikipedia.org/wiki/ISO_8601) format:
          `YYYY-MM-DDTHH:MM:SSZ`."
        paramKey: max_timestamp
        in: query
        schema:
          type: string
        required: false
      - paramName: page
        description: The page number of the results to fetch. For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: page
        in: query
        schema:
          type: number
          default: 1
        required: false
      - paramName: perPage
        description: The number of results per page (max 100). For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: per_page
        in: query
        schema:
          type: number
          default: 30
        required: false
      - paramName: direction
        description: The direction to sort the results by.
        paramKey: direction
        in: query
        schema:
          type: string
          default: desc
          enum:
            - asc
            - desc
        required: false
      - paramName: sort
        description: The property to sort the results by.
        paramKey: sort
        in: query
        schema:
          type: array
          items:
            type: any
        required: false
  - moduleName: Orgs / App Installations / List
    method: get
    path: /orgs/{org}/installations
    description: >-
      Lists all GitHub Apps in an organization. The installation count includes

      all GitHub Apps installed on repositories in the organization.


      The authenticated user must be an organization owner to use this endpoint.


      OAuth app tokens and personal access tokens (classic) need the
      `admin:read` scope to use this endpoint.
    externalDocs: https://docs.github.com/rest/orgs/orgs#list-app-installations-for-an-organization
    params:
      - paramName: org
        description: The organization name. The name is not case sensitive.
        paramKey: org
        in: path
        schema:
          type: string
        required: true
      - paramName: perPage
        description: The number of results per page (max 100). For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: per_page
        in: query
        schema:
          type: number
          default: 30
        required: false
      - paramName: page
        description: The page number of the results to fetch. For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: page
        in: query
        schema:
          type: number
          default: 1
        required: false
  - moduleName: Orgs / Invitations / List
    method: get
    path: /orgs/{org}/invitations
    description: >-
      The return hash contains a `role` field which refers to the Organization

      Invitation role and will be one of the following values: `direct_member`,
      `admin`,

      `billing_manager`, or `hiring_manager`. If the invitee is not a GitHub

      member, the `login` field in the return hash will be `null`.
    externalDocs: https://docs.github.com/rest/orgs/members#list-pending-organization-invitations
    params:
      - paramName: org
        description: The organization name. The name is not case sensitive.
        paramKey: org
        in: path
        schema:
          type: string
        required: true
      - paramName: perPage
        description: The number of results per page (max 100). For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: per_page
        in: query
        schema:
          type: number
          default: 30
        required: false
      - paramName: page
        description: The page number of the results to fetch. For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: page
        in: query
        schema:
          type: number
          default: 1
        required: false
      - paramName: role
        description: Filter invitations by their member role.
        paramKey: role
        in: query
        schema:
          type: string
          default: all
          enum:
            - all
            - admin
            - direct_member
            - billing_manager
            - hiring_manager
        required: false
      - paramName: invitationSource
        description: Filter invitations by their invitation source.
        paramKey: invitation_source
        in: query
        schema:
          type: string
          default: all
          enum:
            - all
            - member
            - scim
        required: false
  - moduleName: Orgs / Invitations / Create
    method: post
    path: /orgs/{org}/invitations
    description: >-
      Invite people to an organization by using their GitHub user ID or their
      email address. In order to create invitations in an organization, the
      authenticated user must be an organization owner.


      This endpoint triggers
      [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications).
      Creating content too quickly using this endpoint may result in secondary
      rate limiting. For more information, see "[Rate limits for the
      API](https://docs.github.com/rest/using-the-rest-api/rate-limits-for-the-rest-api#about-secondary-rate-limits)"

      and "[Best practices for using the REST
      API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api)."
    externalDocs: https://docs.github.com/rest/orgs/members#create-an-organization-invitation
    params:
      - paramName: org
        description: The organization name. The name is not case sensitive.
        paramKey: org
        in: path
        schema:
          type: string
        required: true
      - paramName: inviteeId
        description: "**Required unless you provide `email`**. GitHub user ID for the
          person you are inviting."
        paramKey: invitee_id
        in: body
        schema:
          type: number
        required: false
      - paramName: email
        description: "**Required unless you provide `invitee_id`**. Email address of the
          person you are inviting, which can be an existing GitHub user."
        paramKey: email
        in: body
        schema:
          type: string
        required: false
      - paramName: role
        description: >-
          The role for the new member.
           * `admin` - Organization owners with full administrative rights to the organization and complete access to all repositories and teams.
           * `direct_member` - Non-owner organization members with ability to see other members and join teams by invitation.
           * `billing_manager` - Non-owner organization members with ability to manage the billing settings of your organization.
           * `reinstate` - The previous role assigned to the invitee before they were removed from your organization. Can be one of the roles listed above. Only works if the invitee was previously part of your organization.
        paramKey: role
        in: body
        schema:
          type: string
          default: direct_member
          enum:
            - admin
            - direct_member
            - billing_manager
            - reinstate
        required: false
      - paramName: teamIds
        description: Specify IDs for the teams you want to invite new members to.
        paramKey: team_ids
        in: body
        schema:
          type: array
          items:
            type: any
        required: false
    requestBodyType: json
  - moduleName: Orgs / Invitation / Cancel
    method: delete
    path: /orgs/{org}/invitations/{invitation_id}
    description: >-
      Cancel an organization invitation. In order to cancel an organization
      invitation, the authenticated user must be an organization owner.


      This endpoint triggers
      [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications).
    externalDocs: https://docs.github.com/rest/orgs/members#cancel-an-organization-invitation
    params:
      - paramName: org
        description: The organization name. The name is not case sensitive.
        paramKey: org
        in: path
        schema:
          type: string
        required: true
      - paramName: invitationId
        description: The unique identifier of the invitation.
        paramKey: invitation_id
        in: path
        schema:
          type: number
        required: true
  - moduleName: Orgs / Invitation / List Teams
    method: get
    path: /orgs/{org}/invitations/{invitation_id}/teams
    description: List all teams associated with an invitation. In order to see
      invitations in an organization, the authenticated user must be an
      organization owner.
    externalDocs: https://docs.github.com/rest/orgs/members#list-organization-invitation-teams
    params:
      - paramName: org
        description: The organization name. The name is not case sensitive.
        paramKey: org
        in: path
        schema:
          type: string
        required: true
      - paramName: invitationId
        description: The unique identifier of the invitation.
        paramKey: invitation_id
        in: path
        schema:
          type: number
        required: true
      - paramName: perPage
        description: The number of results per page (max 100). For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: per_page
        in: query
        schema:
          type: number
          default: 30
        required: false
      - paramName: page
        description: The page number of the results to fetch. For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: page
        in: query
        schema:
          type: number
          default: 1
        required: false
  - moduleName: Org / Issues / List
    method: get
    path: /orgs/{org}/issues
    description: >-
      List issues in an organization assigned to the authenticated user.


      > [!NOTE]

      > GitHub's REST API considers every pull request an issue, but not every
      issue is a pull request. For this reason, "Issues" endpoints may return
      both issues and pull requests in the response. You can identify pull
      requests by the `pull_request` key. Be aware that the `id` of a pull
      request returned from "Issues" endpoints will be an _issue id_. To find
      out the pull request id, use the "[List pull
      requests](https://docs.github.com/rest/pulls/pulls#list-pull-requests)"
      endpoint.


      This endpoint supports the following custom media types. For more
      information, see "[Media
      types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."


      - **`application/vnd.github.raw+json`**: Returns the raw markdown body.
      Response will include `body`. This is the default if you do not pass any
      specific media type.

      - **`application/vnd.github.text+json`**: Returns a text only
      representation of the markdown body. Response will include `body_text`.

      - **`application/vnd.github.html+json`**: Returns HTML rendered from the
      body's markdown. Response will include `body_html`.

      - **`application/vnd.github.full+json`**: Returns raw, text, and HTML
      representations. Response will include `body`, `body_text`, and
      `body_html`.
    externalDocs: https://docs.github.com/rest/issues/issues#list-organization-issues-assigned-to-the-authenticated-user
    params:
      - paramName: org
        description: The organization name. The name is not case sensitive.
        paramKey: org
        in: path
        schema:
          type: string
        required: true
      - paramName: filter
        description: Indicates which sorts of issues to return. `assigned` means issues
          assigned to you. `created` means issues created by you. `mentioned`
          means issues mentioning you. `subscribed` means issues you're
          subscribed to updates for. `all` or `repos` means all issues you can
          see, regardless of participation or creation.
        paramKey: filter
        in: query
        schema:
          type: string
          default: assigned
          enum:
            - assigned
            - created
            - mentioned
            - subscribed
            - repos
            - all
        required: false
      - paramName: state
        description: Indicates the state of the issues to return.
        paramKey: state
        in: query
        schema:
          type: string
          default: open
          enum:
            - open
            - closed
            - all
        required: false
      - paramName: labels
        description: "A list of comma separated label names. Example: `bug,ui,@high`"
        paramKey: labels
        in: query
        schema:
          type: string
        required: false
      - paramName: sort
        description: What to sort results by.
        paramKey: sort
        in: query
        schema:
          type: string
          default: created
          enum:
            - created
            - updated
            - comments
        required: false
      - paramName: direction
        description: The direction to sort the results by.
        paramKey: direction
        in: query
        schema:
          type: string
          default: desc
          enum:
            - asc
            - desc
        required: false
      - paramName: since
        description: "Only show results that were last updated after the given time.
          This is a timestamp in [ISO
          8601](https://en.wikipedia.org/wiki/ISO_8601) format:
          `YYYY-MM-DDTHH:MM:SSZ`."
        paramKey: since
        in: query
        schema:
          type: string
        required: false
      - paramName: perPage
        description: The number of results per page (max 100). For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: per_page
        in: query
        schema:
          type: number
          default: 30
        required: false
      - paramName: page
        description: The page number of the results to fetch. For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: page
        in: query
        schema:
          type: number
          default: 1
        required: false
  - moduleName: Orgs / Members / List
    method: get
    path: /orgs/{org}/members
    description: List all users who are members of an organization. If the
      authenticated user is also a member of this organization then both
      concealed and public members will be returned.
    externalDocs: https://docs.github.com/rest/orgs/members#list-organization-members
    params:
      - paramName: org
        description: The organization name. The name is not case sensitive.
        paramKey: org
        in: path
        schema:
          type: string
        required: true
      - paramName: filter
        description: Filter members returned in the list. `2fa_disabled` means that only
          members without [two-factor
          authentication](https://github.com/blog/1614-two-factor-authentication)
          enabled will be returned. This options is only available for
          organization owners.
        paramKey: filter
        in: query
        schema:
          type: string
          default: all
          enum:
            - 2fa_disabled
            - all
        required: false
      - paramName: role
        description: Filter members returned by their role.
        paramKey: role
        in: query
        schema:
          type: string
          default: all
          enum:
            - all
            - admin
            - member
        required: false
      - paramName: perPage
        description: The number of results per page (max 100). For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: per_page
        in: query
        schema:
          type: number
          default: 30
        required: false
      - paramName: page
        description: The page number of the results to fetch. For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: page
        in: query
        schema:
          type: number
          default: 1
        required: false
  - moduleName: Orgs / Membership / Check
    method: get
    path: /orgs/{org}/members/{username}
    description: Check if a user is, publicly or privately, a member of the organization.
    externalDocs: https://docs.github.com/rest/orgs/members#check-organization-membership-for-a-user
    params:
      - paramName: org
        description: The organization name. The name is not case sensitive.
        paramKey: org
        in: path
        schema:
          type: string
        required: true
      - paramName: username
        description: The handle for the GitHub user account.
        paramKey: username
        in: path
        schema:
          type: string
        required: true
  - moduleName: Orgs / Member / Remove
    method: delete
    path: /orgs/{org}/members/{username}
    description: Removing a user from this list will remove them from all teams and
      they will no longer have any access to the organization's repositories.
    externalDocs: https://docs.github.com/rest/orgs/members#remove-an-organization-member
    params:
      - paramName: org
        description: The organization name. The name is not case sensitive.
        paramKey: org
        in: path
        schema:
          type: string
        required: true
      - paramName: username
        description: The handle for the GitHub user account.
        paramKey: username
        in: path
        schema:
          type: string
        required: true
  - moduleName: Orgs / User Membership / Get
    method: get
    path: /orgs/{org}/memberships/{username}
    description: In order to get a user's membership with an organization, the
      authenticated user must be an organization member. The `state` parameter
      in the response can be used to identify the user's membership status.
    externalDocs: https://docs.github.com/rest/orgs/members#get-organization-membership-for-a-user
    params:
      - paramName: org
        description: The organization name. The name is not case sensitive.
        paramKey: org
        in: path
        schema:
          type: string
        required: true
      - paramName: username
        description: The handle for the GitHub user account.
        paramKey: username
        in: path
        schema:
          type: string
        required: true
  - moduleName: Orgs / User Membership / Set
    method: put
    path: /orgs/{org}/memberships/{username}
    description: >-
      Only authenticated organization owners can add a member to the
      organization or update the member's role.


      *   If the authenticated user is _adding_ a member to the organization,
      the invited user will receive an email inviting them to the organization.
      The user's [membership
      status](https://docs.github.com/rest/orgs/members#get-organization-membership-for-a-user)
      will be `pending` until they accept the invitation.

      *   Authenticated users can _update_ a user's membership by passing the
      `role` parameter. If the authenticated user changes a member's role to
      `admin`, the affected user will receive an email notifying them that
      they've been made an organization owner. If the authenticated user changes
      an owner's role to `member`, no email will be sent.


      **Rate limits**


      To prevent abuse, organization owners are limited to creating 50
      organization invitations for an organization within a 24 hour period. If
      the organization is more than one month old or on a paid plan, the limit
      is 500 invitations per 24 hour period.
    externalDocs: https://docs.github.com/rest/orgs/members#set-organization-membership-for-a-user
    params:
      - paramName: org
        description: The organization name. The name is not case sensitive.
        paramKey: org
        in: path
        schema:
          type: string
        required: true
      - paramName: username
        description: The handle for the GitHub user account.
        paramKey: username
        in: path
        schema:
          type: string
        required: true
      - paramName: role
        description: >-
          The role to give the user in the organization. Can be one of:
           * `admin` - The user will become an owner of the organization.
           * `member` - The user will become a non-owner member of the organization.
        paramKey: role
        in: body
        schema:
          type: string
          default: member
          enum:
            - admin
            - member
        required: false
    requestBodyType: json
  - moduleName: Orgs / User Membership / Remove
    method: delete
    path: /orgs/{org}/memberships/{username}
    description: >-
      In order to remove a user's membership with an organization, the
      authenticated user must be an organization owner.


      If the specified user is an active member of the organization, this will
      remove them from the organization. If the specified user has been invited
      to the organization, this will cancel their invitation. The specified user
      will receive an email notification in both cases.
    externalDocs: https://docs.github.com/rest/orgs/members#remove-organization-membership-for-a-user
    params:
      - paramName: org
        description: The organization name. The name is not case sensitive.
        paramKey: org
        in: path
        schema:
          type: string
        required: true
      - paramName: username
        description: The handle for the GitHub user account.
        paramKey: username
        in: path
        schema:
          type: string
        required: true
  - moduleName: Orgs / Roles / List
    method: get
    path: /orgs/{org}/organization-roles
    description: >-
      Lists the organization roles available in this organization. For more
      information on organization roles, see "[Using organization
      roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/using-organization-roles)."


      To use this endpoint, the authenticated user must be one of:


      - An administrator for the organization.

      - A user, or a user on a team, with the fine-grained permissions of
      `read_organization_custom_org_role` in the organization.


      OAuth app tokens and personal access tokens (classic) need the `admin:org`
      scope to use this endpoint.
    externalDocs: https://docs.github.com/rest/orgs/organization-roles#get-all-organization-roles-for-an-organization
    params:
      - paramName: org
        description: The organization name. The name is not case sensitive.
        paramKey: org
        in: path
        schema:
          type: string
        required: true
  - moduleName: Orgs / Role / Revoke All Teams
    method: delete
    path: /orgs/{org}/organization-roles/teams/{team_slug}
    description: >-
      Removes all assigned organization roles from a team. For more information
      on organization roles, see "[Using organization
      roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/using-organization-roles)."


      The authenticated user must be an administrator for the organization to
      use this endpoint.


      OAuth app tokens and personal access tokens (classic) need the `admin:org`
      scope to use this endpoint.
    externalDocs: https://docs.github.com/rest/orgs/organization-roles#remove-all-organization-roles-for-a-team
    params:
      - paramName: org
        description: The organization name. The name is not case sensitive.
        paramKey: org
        in: path
        schema:
          type: string
        required: true
      - paramName: teamSlug
        description: The slug of the team name.
        paramKey: team_slug
        in: path
        schema:
          type: string
        required: true
  - moduleName: Orgs / Role / Assign Team
    method: put
    path: /orgs/{org}/organization-roles/teams/{team_slug}/{role_id}
    description: >-
      Assigns an organization role to a team in an organization. For more
      information on organization roles, see "[Using organization
      roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/using-organization-roles)."


      The authenticated user must be an administrator for the organization to
      use this endpoint.


      OAuth app tokens and personal access tokens (classic) need the `admin:org`
      scope to use this endpoint.
    externalDocs: https://docs.github.com/rest/orgs/organization-roles#assign-an-organization-role-to-a-team
    params:
      - paramName: org
        description: The organization name. The name is not case sensitive.
        paramKey: org
        in: path
        schema:
          type: string
        required: true
      - paramName: teamSlug
        description: The slug of the team name.
        paramKey: team_slug
        in: path
        schema:
          type: string
        required: true
      - paramName: roleId
        description: The unique identifier of the role.
        paramKey: role_id
        in: path
        schema:
          type: number
        required: true
  - moduleName: Orgs / Role / Revoke Team
    method: delete
    path: /orgs/{org}/organization-roles/teams/{team_slug}/{role_id}
    description: >-
      Removes an organization role from a team. For more information on
      organization roles, see "[Using organization
      roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/using-organization-roles)."


      The authenticated user must be an administrator for the organization to
      use this endpoint.


      OAuth app tokens and personal access tokens (classic) need the `admin:org`
      scope to use this endpoint.
    externalDocs: https://docs.github.com/rest/orgs/organization-roles#remove-an-organization-role-from-a-team
    params:
      - paramName: org
        description: The organization name. The name is not case sensitive.
        paramKey: org
        in: path
        schema:
          type: string
        required: true
      - paramName: teamSlug
        description: The slug of the team name.
        paramKey: team_slug
        in: path
        schema:
          type: string
        required: true
      - paramName: roleId
        description: The unique identifier of the role.
        paramKey: role_id
        in: path
        schema:
          type: number
        required: true
  - moduleName: Orgs / Role / Revoke All Users
    method: delete
    path: /orgs/{org}/organization-roles/users/{username}
    description: >-
      Revokes all assigned organization roles from a user. For more information
      on organization roles, see "[Using organization
      roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/using-organization-roles)."


      The authenticated user must be an administrator for the organization to
      use this endpoint.


      OAuth app tokens and personal access tokens (classic) need the `admin:org`
      scope to use this endpoint.
    externalDocs: https://docs.github.com/rest/orgs/organization-roles#remove-all-organization-roles-for-a-user
    params:
      - paramName: org
        description: The organization name. The name is not case sensitive.
        paramKey: org
        in: path
        schema:
          type: string
        required: true
      - paramName: username
        description: The handle for the GitHub user account.
        paramKey: username
        in: path
        schema:
          type: string
        required: true
  - moduleName: Orgs / Role / Assign User
    method: put
    path: /orgs/{org}/organization-roles/users/{username}/{role_id}
    description: >-
      Assigns an organization role to a member of an organization. For more
      information on organization roles, see "[Using organization
      roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/using-organization-roles)."


      The authenticated user must be an administrator for the organization to
      use this endpoint.


      OAuth app tokens and personal access tokens (classic) need the `admin:org`
      scope to use this endpoint.
    externalDocs: https://docs.github.com/rest/orgs/organization-roles#assign-an-organization-role-to-a-user
    params:
      - paramName: org
        description: The organization name. The name is not case sensitive.
        paramKey: org
        in: path
        schema:
          type: string
        required: true
      - paramName: username
        description: The handle for the GitHub user account.
        paramKey: username
        in: path
        schema:
          type: string
        required: true
      - paramName: roleId
        description: The unique identifier of the role.
        paramKey: role_id
        in: path
        schema:
          type: number
        required: true
  - moduleName: Orgs / Role / Revoke User
    method: delete
    path: /orgs/{org}/organization-roles/users/{username}/{role_id}
    description: >-
      Remove an organization role from a user. For more information on
      organization roles, see "[Using organization
      roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/using-organization-roles)."


      The authenticated user must be an administrator for the organization to
      use this endpoint.


      OAuth app tokens and personal access tokens (classic) need the `admin:org`
      scope to use this endpoint.
    externalDocs: https://docs.github.com/rest/orgs/organization-roles#remove-an-organization-role-from-a-user
    params:
      - paramName: org
        description: The organization name. The name is not case sensitive.
        paramKey: org
        in: path
        schema:
          type: string
        required: true
      - paramName: username
        description: The handle for the GitHub user account.
        paramKey: username
        in: path
        schema:
          type: string
        required: true
      - paramName: roleId
        description: The unique identifier of the role.
        paramKey: role_id
        in: path
        schema:
          type: number
        required: true
  - moduleName: Orgs / Role / Get
    method: get
    path: /orgs/{org}/organization-roles/{role_id}
    description: >-
      Gets an organization role that is available to this organization. For more
      information on organization roles, see "[Using organization
      roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/using-organization-roles)."


      To use this endpoint, the authenticated user must be one of:


      - An administrator for the organization.

      - A user, or a user on a team, with the fine-grained permissions of
      `read_organization_custom_org_role` in the organization.


      OAuth app tokens and personal access tokens (classic) need the `admin:org`
      scope to use this endpoint.
    externalDocs: https://docs.github.com/rest/orgs/organization-roles#get-an-organization-role
    params:
      - paramName: org
        description: The organization name. The name is not case sensitive.
        paramKey: org
        in: path
        schema:
          type: string
        required: true
      - paramName: roleId
        description: The unique identifier of the role.
        paramKey: role_id
        in: path
        schema:
          type: number
        required: true
  - moduleName: Orgs / Role / List Teams
    method: get
    path: /orgs/{org}/organization-roles/{role_id}/teams
    description: >-
      Lists the teams that are assigned to an organization role. For more
      information on organization roles, see "[Using organization
      roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/using-organization-roles)."


      To use this endpoint, you must be an administrator for the organization.


      OAuth app tokens and personal access tokens (classic) need the `admin:org`
      scope to use this endpoint.
    externalDocs: https://docs.github.com/rest/orgs/organization-roles#list-teams-that-are-assigned-to-an-organization-role
    params:
      - paramName: org
        description: The organization name. The name is not case sensitive.
        paramKey: org
        in: path
        schema:
          type: string
        required: true
      - paramName: roleId
        description: The unique identifier of the role.
        paramKey: role_id
        in: path
        schema:
          type: number
        required: true
      - paramName: perPage
        description: The number of results per page (max 100). For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: per_page
        in: query
        schema:
          type: number
          default: 30
        required: false
      - paramName: page
        description: The page number of the results to fetch. For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: page
        in: query
        schema:
          type: number
          default: 1
        required: false
  - moduleName: Orgs / Role / List Users
    method: get
    path: /orgs/{org}/organization-roles/{role_id}/users
    description: >-
      Lists organization members that are assigned to an organization role. For
      more information on organization roles, see "[Using organization
      roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/using-organization-roles)."


      To use this endpoint, you must be an administrator for the organization.


      OAuth app tokens and personal access tokens (classic) need the `admin:org`
      scope to use this endpoint.
    externalDocs: https://docs.github.com/rest/orgs/organization-roles#list-users-that-are-assigned-to-an-organization-role
    params:
      - paramName: org
        description: The organization name. The name is not case sensitive.
        paramKey: org
        in: path
        schema:
          type: string
        required: true
      - paramName: roleId
        description: The unique identifier of the role.
        paramKey: role_id
        in: path
        schema:
          type: number
        required: true
      - paramName: perPage
        description: The number of results per page (max 100). For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: per_page
        in: query
        schema:
          type: number
          default: 30
        required: false
      - paramName: page
        description: The page number of the results to fetch. For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: page
        in: query
        schema:
          type: number
          default: 1
        required: false
  - moduleName: Orgs / Outside Collaborators / List
    method: get
    path: /orgs/{org}/outside_collaborators
    description: List all users who are outside collaborators of an organization.
    externalDocs: https://docs.github.com/rest/orgs/outside-collaborators#list-outside-collaborators-for-an-organization
    params:
      - paramName: org
        description: The organization name. The name is not case sensitive.
        paramKey: org
        in: path
        schema:
          type: string
        required: true
      - paramName: filter
        description: Filter the list of outside collaborators. `2fa_disabled` means that
          only outside collaborators without [two-factor
          authentication](https://github.com/blog/1614-two-factor-authentication)
          enabled will be returned.
        paramKey: filter
        in: query
        schema:
          type: string
          default: all
          enum:
            - 2fa_disabled
            - all
        required: false
      - paramName: perPage
        description: The number of results per page (max 100). For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: per_page
        in: query
        schema:
          type: number
          default: 30
        required: false
      - paramName: page
        description: The page number of the results to fetch. For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: page
        in: query
        schema:
          type: number
          default: 1
        required: false
  - moduleName: Orgs / Member / Convert To Collaborator
    method: put
    path: /orgs/{org}/outside_collaborators/{username}
    description: When an organization member is converted to an outside
      collaborator, they'll only have access to the repositories that their
      current team membership allows. The user will no longer be a member of the
      organization. For more information, see "[Converting an organization
      member to an outside
      collaborator](https://docs.github.com/articles/converting-an-organization-member-to-an-outside-collaborator/)".
      Converting an organization member to an outside collaborator may be
      restricted by enterprise administrators. For more information, see
      "[Enforcing repository management policies in your
      enterprise](https://docs.github.com/admin/policies/enforcing-policies-for-your-enterprise/enforcing-repository-management-policies-in-your-enterprise#enforcing-a-policy-for-inviting-outside-collaborators-to-repositories)."
    externalDocs: https://docs.github.com/rest/orgs/outside-collaborators#convert-an-organization-member-to-outside-collaborator
    params:
      - paramName: org
        description: The organization name. The name is not case sensitive.
        paramKey: org
        in: path
        schema:
          type: string
        required: true
      - paramName: username
        description: The handle for the GitHub user account.
        paramKey: username
        in: path
        schema:
          type: string
        required: true
      - paramName: async
        description: When set to `true`, the request will be performed asynchronously.
          Returns a 202 status code when the job is successfully queued.
        paramKey: async
        in: body
        schema:
          type: boolean
          default: false
        required: false
    requestBodyType: json
  - moduleName: Orgs / Outside Collaborator / Remove
    method: delete
    path: /orgs/{org}/outside_collaborators/{username}
    description: Removing a user from this list will remove them from all the
      organization's repositories.
    externalDocs: https://docs.github.com/rest/orgs/outside-collaborators#remove-outside-collaborator-from-an-organization
    params:
      - paramName: org
        description: The organization name. The name is not case sensitive.
        paramKey: org
        in: path
        schema:
          type: string
        required: true
      - paramName: username
        description: The handle for the GitHub user account.
        paramKey: username
        in: path
        schema:
          type: string
        required: true
  - moduleName: Packages / List Packages For Org
    method: get
    path: /orgs/{org}/packages
    description: >-
      Lists packages in an organization readable by the user.


      OAuth app tokens and personal access tokens (classic) need the
      `read:packages` scope to use this endpoint. For more information, see
      "[About permissions for GitHub
      Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
    externalDocs: https://docs.github.com/rest/packages/packages#list-packages-for-an-organization
    params:
      - paramName: packageType
        description: The type of supported package. Packages in GitHub's Gradle registry
          have the type `maven`. Docker images pushed to GitHub's Container
          registry (`ghcr.io`) have the type `container`. You can use the type
          `docker` to find images that were pushed to GitHub's Docker registry
          (`docker.pkg.github.com`), even if these have now been migrated to the
          Container registry.
        paramKey: package_type
        in: query
        schema:
          type: string
          enum:
            - npm
            - maven
            - rubygems
            - docker
            - nuget
            - container
        required: true
      - paramName: org
        description: The organization name. The name is not case sensitive.
        paramKey: org
        in: path
        schema:
          type: string
        required: true
      - paramName: visibility
        description: >-
          The selected visibility of the packages.  This parameter is optional
          and only filters an existing result set.


          The `internal` visibility is only supported for GitHub Packages
          registries that allow for granular permissions. For other ecosystems
          `internal` is synonymous with `private`.

          For the list of GitHub Packages registries that support granular
          permissions, see "[About permissions for GitHub
          Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages)."
        paramKey: visibility
        in: query
        schema:
          type: string
          enum:
            - public
            - private
            - internal
        required: false
      - paramName: page
        description: The page number of the results to fetch. For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: page
        in: query
        schema:
          type: number
          default: 1
        required: false
      - paramName: perPage
        description: The number of results per page (max 100). For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: per_page
        in: query
        schema:
          type: number
          default: 30
        required: false
  - moduleName: Packages / Get Package For Org
    method: get
    path: /orgs/{org}/packages/{package_type}/{package_name}
    description: >-
      Gets a specific package in an organization.


      OAuth app tokens and personal access tokens (classic) need the
      `read:packages` scope to use this endpoint. For more information, see
      "[About permissions for GitHub
      Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
    externalDocs: https://docs.github.com/rest/packages/packages#get-a-package-for-an-organization
    params:
      - paramName: packageType
        description: The type of supported package. Packages in GitHub's Gradle registry
          have the type `maven`. Docker images pushed to GitHub's Container
          registry (`ghcr.io`) have the type `container`. You can use the type
          `docker` to find images that were pushed to GitHub's Docker registry
          (`docker.pkg.github.com`), even if these have now been migrated to the
          Container registry.
        paramKey: package_type
        in: path
        schema:
          type: string
          enum:
            - npm
            - maven
            - rubygems
            - docker
            - nuget
            - container
        required: true
      - paramName: packageName
        description: The name of the package.
        paramKey: package_name
        in: path
        schema:
          type: string
        required: true
      - paramName: org
        description: The organization name. The name is not case sensitive.
        paramKey: org
        in: path
        schema:
          type: string
        required: true
  - moduleName: Packages / Delete Package For Org
    method: delete
    path: /orgs/{org}/packages/{package_type}/{package_name}
    description: >-
      Deletes an entire package in an organization. You cannot delete a public
      package if any version of the package has more than 5,000 downloads. In
      this scenario, contact GitHub support for further assistance.


      The authenticated user must have admin permissions in the organization to
      use this endpoint. If the `package_type` belongs to a GitHub Packages
      registry that supports granular permissions, the authenticated user must
      also have admin permissions to the package. For the list of these
      registries, see "[About permissions for GitHub
      Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages)."


      OAuth app tokens and personal access tokens (classic) need the
      `read:packages` and `delete:packages` scopes to use this endpoint. For
      more information, see "[About permissions for GitHub
      Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
    externalDocs: https://docs.github.com/rest/packages/packages#delete-a-package-for-an-organization
    params:
      - paramName: packageType
        description: The type of supported package. Packages in GitHub's Gradle registry
          have the type `maven`. Docker images pushed to GitHub's Container
          registry (`ghcr.io`) have the type `container`. You can use the type
          `docker` to find images that were pushed to GitHub's Docker registry
          (`docker.pkg.github.com`), even if these have now been migrated to the
          Container registry.
        paramKey: package_type
        in: path
        schema:
          type: string
          enum:
            - npm
            - maven
            - rubygems
            - docker
            - nuget
            - container
        required: true
      - paramName: packageName
        description: The name of the package.
        paramKey: package_name
        in: path
        schema:
          type: string
        required: true
      - paramName: org
        description: The organization name. The name is not case sensitive.
        paramKey: org
        in: path
        schema:
          type: string
        required: true
  - moduleName: Packages / Restore Package For Org
    method: post
    path: /orgs/{org}/packages/{package_type}/{package_name}/restore
    description: >-
      Restores an entire package in an organization.


      You can restore a deleted package under the following conditions:
        - The package was deleted within the last 30 days.
        - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package's namespace first.

      The authenticated user must have admin permissions in the organization to
      use this endpoint. If the `package_type` belongs to a GitHub Packages
      registry that supports granular permissions, the authenticated user must
      also have admin permissions to the package. For the list of these
      registries, see "[About permissions for GitHub
      Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages)."


      OAuth app tokens and personal access tokens (classic) need the
      `read:packages` and `write:packages` scopes to use this endpoint. For more
      information, see "[About permissions for GitHub
      Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
    externalDocs: https://docs.github.com/rest/packages/packages#restore-a-package-for-an-organization
    params:
      - paramName: packageType
        description: The type of supported package. Packages in GitHub's Gradle registry
          have the type `maven`. Docker images pushed to GitHub's Container
          registry (`ghcr.io`) have the type `container`. You can use the type
          `docker` to find images that were pushed to GitHub's Docker registry
          (`docker.pkg.github.com`), even if these have now been migrated to the
          Container registry.
        paramKey: package_type
        in: path
        schema:
          type: string
          enum:
            - npm
            - maven
            - rubygems
            - docker
            - nuget
            - container
        required: true
      - paramName: packageName
        description: The name of the package.
        paramKey: package_name
        in: path
        schema:
          type: string
        required: true
      - paramName: org
        description: The organization name. The name is not case sensitive.
        paramKey: org
        in: path
        schema:
          type: string
        required: true
      - paramName: token
        description: package token
        paramKey: token
        in: query
        schema:
          type: string
        required: false
  - moduleName: Packages / Get Versions For Package
    method: get
    path: /orgs/{org}/packages/{package_type}/{package_name}/versions
    description: >-
      Lists package versions for a package owned by an organization.


      OAuth app tokens and personal access tokens (classic) need the
      `read:packages` scope to use this endpoint. For more information, see
      "[About permissions for GitHub
      Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
    externalDocs: https://docs.github.com/rest/packages/packages#list-package-versions-for-a-package-owned-by-an-organization
    params:
      - paramName: packageType
        description: The type of supported package. Packages in GitHub's Gradle registry
          have the type `maven`. Docker images pushed to GitHub's Container
          registry (`ghcr.io`) have the type `container`. You can use the type
          `docker` to find images that were pushed to GitHub's Docker registry
          (`docker.pkg.github.com`), even if these have now been migrated to the
          Container registry.
        paramKey: package_type
        in: path
        schema:
          type: string
          enum:
            - npm
            - maven
            - rubygems
            - docker
            - nuget
            - container
        required: true
      - paramName: packageName
        description: The name of the package.
        paramKey: package_name
        in: path
        schema:
          type: string
        required: true
      - paramName: org
        description: The organization name. The name is not case sensitive.
        paramKey: org
        in: path
        schema:
          type: string
        required: true
      - paramName: page
        description: The page number of the results to fetch. For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: page
        in: query
        schema:
          type: number
          default: 1
        required: false
      - paramName: perPage
        description: The number of results per page (max 100). For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: per_page
        in: query
        schema:
          type: number
          default: 30
        required: false
      - paramName: state
        description: The state of the package, either active or deleted.
        paramKey: state
        in: query
        schema:
          type: string
          default: active
          enum:
            - active
            - deleted
        required: false
  - moduleName: Packages / Get Package Version For Org
    method: get
    path: /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}
    description: >-
      Gets a specific package version in an organization.


      OAuth app tokens and personal access tokens (classic) need the
      `read:packages` scope to use this endpoint. For more information, see
      "[About permissions for GitHub
      Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
    externalDocs: https://docs.github.com/rest/packages/packages#get-a-package-version-for-an-organization
    params:
      - paramName: packageType
        description: The type of supported package. Packages in GitHub's Gradle registry
          have the type `maven`. Docker images pushed to GitHub's Container
          registry (`ghcr.io`) have the type `container`. You can use the type
          `docker` to find images that were pushed to GitHub's Docker registry
          (`docker.pkg.github.com`), even if these have now been migrated to the
          Container registry.
        paramKey: package_type
        in: path
        schema:
          type: string
          enum:
            - npm
            - maven
            - rubygems
            - docker
            - nuget
            - container
        required: true
      - paramName: packageName
        description: The name of the package.
        paramKey: package_name
        in: path
        schema:
          type: string
        required: true
      - paramName: org
        description: The organization name. The name is not case sensitive.
        paramKey: org
        in: path
        schema:
          type: string
        required: true
      - paramName: packageVersionId
        description: Unique identifier of the package version.
        paramKey: package_version_id
        in: path
        schema:
          type: number
        required: true
  - moduleName: Packages / Delete Package Version For Org
    method: delete
    path: /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}
    description: >-
      Deletes a specific package version in an organization. If the package is
      public and the package version has more than 5,000 downloads, you cannot
      delete the package version. In this scenario, contact GitHub support for
      further assistance.


      The authenticated user must have admin permissions in the organization to
      use this endpoint. If the `package_type` belongs to a GitHub Packages
      registry that supports granular permissions, the authenticated user must
      also have admin permissions to the package. For the list of these
      registries, see "[About permissions for GitHub
      Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages)."


      OAuth app tokens and personal access tokens (classic) need the
      `read:packages` and `delete:packages` scopes to use this endpoint. For
      more information, see "[About permissions for GitHub
      Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
    externalDocs: https://docs.github.com/rest/packages/packages#delete-package-version-for-an-organization
    params:
      - paramName: packageType
        description: The type of supported package. Packages in GitHub's Gradle registry
          have the type `maven`. Docker images pushed to GitHub's Container
          registry (`ghcr.io`) have the type `container`. You can use the type
          `docker` to find images that were pushed to GitHub's Docker registry
          (`docker.pkg.github.com`), even if these have now been migrated to the
          Container registry.
        paramKey: package_type
        in: path
        schema:
          type: string
          enum:
            - npm
            - maven
            - rubygems
            - docker
            - nuget
            - container
        required: true
      - paramName: packageName
        description: The name of the package.
        paramKey: package_name
        in: path
        schema:
          type: string
        required: true
      - paramName: org
        description: The organization name. The name is not case sensitive.
        paramKey: org
        in: path
        schema:
          type: string
        required: true
      - paramName: packageVersionId
        description: Unique identifier of the package version.
        paramKey: package_version_id
        in: path
        schema:
          type: number
        required: true
  - moduleName: Packages / Restore Package Version For Org
    method: post
    path: /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore
    description: >-
      Restores a specific package version in an organization.


      You can restore a deleted package under the following conditions:
        - The package was deleted within the last 30 days.
        - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package's namespace first.

      The authenticated user must have admin permissions in the organization to
      use this endpoint. If the `package_type` belongs to a GitHub Packages
      registry that supports granular permissions, the authenticated user must
      also have admin permissions to the package. For the list of these
      registries, see "[About permissions for GitHub
      Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages)."


      OAuth app tokens and personal access tokens (classic) need the
      `read:packages` and `write:packages` scopes to use this endpoint. For more
      information, see "[About permissions for GitHub
      Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
    externalDocs: https://docs.github.com/rest/packages/packages#restore-package-version-for-an-organization
    params:
      - paramName: packageType
        description: The type of supported package. Packages in GitHub's Gradle registry
          have the type `maven`. Docker images pushed to GitHub's Container
          registry (`ghcr.io`) have the type `container`. You can use the type
          `docker` to find images that were pushed to GitHub's Docker registry
          (`docker.pkg.github.com`), even if these have now been migrated to the
          Container registry.
        paramKey: package_type
        in: path
        schema:
          type: string
          enum:
            - npm
            - maven
            - rubygems
            - docker
            - nuget
            - container
        required: true
      - paramName: packageName
        description: The name of the package.
        paramKey: package_name
        in: path
        schema:
          type: string
        required: true
      - paramName: org
        description: The organization name. The name is not case sensitive.
        paramKey: org
        in: path
        schema:
          type: string
        required: true
      - paramName: packageVersionId
        description: Unique identifier of the package version.
        paramKey: package_version_id
        in: path
        schema:
          type: number
        required: true
  - moduleName: Orgs / PAT Grant Requests / List
    method: get
    path: /orgs/{org}/personal-access-token-requests
    description: >-
      Lists requests from organization members to access organization resources
      with a fine-grained personal access token.


      Only GitHub Apps can use this endpoint.
    externalDocs: https://docs.github.com/rest/orgs/personal-access-tokens#list-requests-to-access-organization-resources-with-fine-grained-personal-access-tokens
    params:
      - paramName: org
        description: The organization name. The name is not case sensitive.
        paramKey: org
        in: path
        schema:
          type: string
        required: true
      - paramName: perPage
        description: The number of results per page (max 100). For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: per_page
        in: query
        schema:
          type: number
          default: 30
        required: false
      - paramName: page
        description: The page number of the results to fetch. For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: page
        in: query
        schema:
          type: number
          default: 1
        required: false
      - paramName: sort
        description: The property by which to sort the results.
        paramKey: sort
        in: query
        schema:
          type: string
          default: created_at
          enum:
            - created_at
        required: false
      - paramName: direction
        description: The direction to sort the results by.
        paramKey: direction
        in: query
        schema:
          type: string
          default: desc
          enum:
            - asc
            - desc
        required: false
      - paramName: owner
        description: A list of owner usernames to use to filter the results.
        paramKey: owner
        in: query
        schema:
          type: array
          items:
            type: any
        required: false
      - paramName: repository
        description: The name of the repository to use to filter the results.
        paramKey: repository
        in: query
        schema:
          type: string
        required: false
      - paramName: permission
        description: The permission to use to filter the results.
        paramKey: permission
        in: query
        schema:
          type: string
        required: false
      - paramName: lastUsedBefore
        description: "Only show fine-grained personal access tokens used before the
          given time. This is a timestamp in [ISO
          8601](https://en.wikipedia.org/wiki/ISO_8601) format:
          `YYYY-MM-DDTHH:MM:SSZ`."
        paramKey: last_used_before
        in: query
        schema:
          type: string
        required: false
      - paramName: lastUsedAfter
        description: "Only show fine-grained personal access tokens used after the given
          time. This is a timestamp in [ISO
          8601](https://en.wikipedia.org/wiki/ISO_8601) format:
          `YYYY-MM-DDTHH:MM:SSZ`."
        paramKey: last_used_after
        in: query
        schema:
          type: string
        required: false
  - moduleName: Orgs / PAT Grant Requests / Review In Bulk
    method: post
    path: /orgs/{org}/personal-access-token-requests
    description: >-
      Approves or denies multiple pending requests to access organization
      resources via a fine-grained personal access token.


      Only GitHub Apps can use this endpoint.
    externalDocs: https://docs.github.com/rest/orgs/personal-access-tokens#review-requests-to-access-organization-resources-with-fine-grained-personal-access-tokens
    params:
      - paramName: org
        description: The organization name. The name is not case sensitive.
        paramKey: org
        in: path
        schema:
          type: string
        required: true
      - paramName: patRequestIds
        description: Unique identifiers of the requests for access via fine-grained
          personal access token. Must be formed of between 1 and 100
          `pat_request_id` values.
        paramKey: pat_request_ids
        in: body
        schema:
          type: array
          items:
            type: any
        required: false
      - paramName: action
        description: Action to apply to the requests.
        paramKey: action
        in: body
        schema:
          type: string
          enum:
            - approve
            - deny
        required: true
      - paramName: reason
        description: Reason for approving or denying the requests. Max 1024 characters.
        paramKey: reason
        in: body
        schema:
          type: string
        required: false
    requestBodyType: json
  - moduleName: Orgs / PAT Grant Request / Review
    method: post
    path: /orgs/{org}/personal-access-token-requests/{pat_request_id}
    description: >-
      Approves or denies a pending request to access organization resources via
      a fine-grained personal access token.


      Only GitHub Apps can use this endpoint.
    externalDocs: https://docs.github.com/rest/orgs/personal-access-tokens#review-a-request-to-access-organization-resources-with-a-fine-grained-personal-access-token
    params:
      - paramName: org
        description: The organization name. The name is not case sensitive.
        paramKey: org
        in: path
        schema:
          type: string
        required: true
      - paramName: patRequestId
        description: Unique identifier of the request for access via fine-grained
          personal access token.
        paramKey: pat_request_id
        in: path
        schema:
          type: number
        required: true
      - paramName: action
        description: Action to apply to the request.
        paramKey: action
        in: body
        schema:
          type: string
          enum:
            - approve
            - deny
        required: true
      - paramName: reason
        description: Reason for approving or denying the request. Max 1024 characters.
        paramKey: reason
        in: body
        schema:
          type: string
        required: false
    requestBodyType: json
  - moduleName: Orgs / PAT Grant Request / List Repositories
    method: get
    path: /orgs/{org}/personal-access-token-requests/{pat_request_id}/repositories
    description: >-
      Lists the repositories a fine-grained personal access token request is
      requesting access to.


      Only GitHub Apps can use this endpoint.
    externalDocs: https://docs.github.com/rest/orgs/personal-access-tokens#list-repositories-requested-to-be-accessed-by-a-fine-grained-personal-access-token
    params:
      - paramName: org
        description: The organization name. The name is not case sensitive.
        paramKey: org
        in: path
        schema:
          type: string
        required: true
      - paramName: patRequestId
        description: Unique identifier of the request for access via fine-grained
          personal access token.
        paramKey: pat_request_id
        in: path
        schema:
          type: number
        required: true
      - paramName: perPage
        description: The number of results per page (max 100). For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: per_page
        in: query
        schema:
          type: number
          default: 30
        required: false
      - paramName: page
        description: The page number of the results to fetch. For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: page
        in: query
        schema:
          type: number
          default: 1
        required: false
  - moduleName: Orgs / PAT Grants / List
    method: get
    path: /orgs/{org}/personal-access-tokens
    description: >-
      Lists approved fine-grained personal access tokens owned by organization
      members that can access organization resources.


      Only GitHub Apps can use this endpoint.
    externalDocs: https://docs.github.com/rest/orgs/personal-access-tokens#list-fine-grained-personal-access-tokens-with-access-to-organization-resources
    params:
      - paramName: org
        description: The organization name. The name is not case sensitive.
        paramKey: org
        in: path
        schema:
          type: string
        required: true
      - paramName: perPage
        description: The number of results per page (max 100). For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: per_page
        in: query
        schema:
          type: number
          default: 30
        required: false
      - paramName: page
        description: The page number of the results to fetch. For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: page
        in: query
        schema:
          type: number
          default: 1
        required: false
      - paramName: sort
        description: The property by which to sort the results.
        paramKey: sort
        in: query
        schema:
          type: string
          default: created_at
          enum:
            - created_at
        required: false
      - paramName: direction
        description: The direction to sort the results by.
        paramKey: direction
        in: query
        schema:
          type: string
          default: desc
          enum:
            - asc
            - desc
        required: false
      - paramName: owner
        description: A list of owner usernames to use to filter the results.
        paramKey: owner
        in: query
        schema:
          type: array
          items:
            type: any
        required: false
      - paramName: repository
        description: The name of the repository to use to filter the results.
        paramKey: repository
        in: query
        schema:
          type: string
        required: false
      - paramName: permission
        description: The permission to use to filter the results.
        paramKey: permission
        in: query
        schema:
          type: string
        required: false
      - paramName: lastUsedBefore
        description: "Only show fine-grained personal access tokens used before the
          given time. This is a timestamp in [ISO
          8601](https://en.wikipedia.org/wiki/ISO_8601) format:
          `YYYY-MM-DDTHH:MM:SSZ`."
        paramKey: last_used_before
        in: query
        schema:
          type: string
        required: false
      - paramName: lastUsedAfter
        description: "Only show fine-grained personal access tokens used after the given
          time. This is a timestamp in [ISO
          8601](https://en.wikipedia.org/wiki/ISO_8601) format:
          `YYYY-MM-DDTHH:MM:SSZ`."
        paramKey: last_used_after
        in: query
        schema:
          type: string
        required: false
  - moduleName: Orgs / PAT Accesses / Update
    method: post
    path: /orgs/{org}/personal-access-tokens
    description: >-
      Updates the access organization members have to organization resources via
      fine-grained personal access tokens. Limited to revoking a token's
      existing access.


      Only GitHub Apps can use this endpoint.
    externalDocs: https://docs.github.com/rest/orgs/personal-access-tokens#update-the-access-to-organization-resources-via-fine-grained-personal-access-tokens
    params:
      - paramName: org
        description: The organization name. The name is not case sensitive.
        paramKey: org
        in: path
        schema:
          type: string
        required: true
      - paramName: action
        description: Action to apply to the fine-grained personal access token.
        paramKey: action
        in: body
        schema:
          type: string
          enum:
            - revoke
        required: true
      - paramName: patIds
        description: The IDs of the fine-grained personal access tokens.
        paramKey: pat_ids
        in: body
        schema:
          type: array
          items:
            type: any
        required: true
    requestBodyType: json
  - moduleName: Orgs / PAT Access / Update
    method: post
    path: /orgs/{org}/personal-access-tokens/{pat_id}
    description: >-
      Updates the access an organization member has to organization resources
      via a fine-grained personal access token. Limited to revoking the token's
      existing access. Limited to revoking a token's existing access.


      Only GitHub Apps can use this endpoint.
    externalDocs: https://docs.github.com/rest/orgs/personal-access-tokens#update-the-access-a-fine-grained-personal-access-token-has-to-organization-resources
    params:
      - paramName: org
        description: The organization name. The name is not case sensitive.
        paramKey: org
        in: path
        schema:
          type: string
        required: true
      - paramName: patId
        description: The unique identifier of the fine-grained personal access token.
        paramKey: pat_id
        in: path
        schema:
          type: number
        required: true
      - paramName: action
        description: Action to apply to the fine-grained personal access token.
        paramKey: action
        in: body
        schema:
          type: string
          enum:
            - revoke
        required: true
    requestBodyType: json
  - moduleName: Orgs / PAT Grant / List Repositories
    method: get
    path: /orgs/{org}/personal-access-tokens/{pat_id}/repositories
    description: |-
      Lists the repositories a fine-grained personal access token has access to.

      Only GitHub Apps can use this endpoint.
    externalDocs: https://docs.github.com/rest/orgs/personal-access-tokens#list-repositories-a-fine-grained-personal-access-token-has-access-to
    params:
      - paramName: org
        description: The organization name. The name is not case sensitive.
        paramKey: org
        in: path
        schema:
          type: string
        required: true
      - paramName: patId
        description: Unique identifier of the fine-grained personal access token.
        paramKey: pat_id
        in: path
        schema:
          type: number
        required: true
      - paramName: perPage
        description: The number of results per page (max 100). For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: per_page
        in: query
        schema:
          type: number
          default: 30
        required: false
      - paramName: page
        description: The page number of the results to fetch. For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: page
        in: query
        schema:
          type: number
          default: 1
        required: false
  - moduleName: Projects / Org / List
    method: get
    path: /orgs/{org}/projects
    description: Lists the projects in an organization. Returns a `404 Not Found`
      status if projects are disabled in the organization. If you do not have
      sufficient privileges to perform this action, a `401 Unauthorized` or `410
      Gone` status is returned.
    externalDocs: https://docs.github.com/rest/projects/projects#list-organization-projects
    params:
      - paramName: org
        description: The organization name. The name is not case sensitive.
        paramKey: org
        in: path
        schema:
          type: string
        required: true
      - paramName: state
        description: Indicates the state of the projects to return.
        paramKey: state
        in: query
        schema:
          type: string
          default: open
          enum:
            - open
            - closed
            - all
        required: false
      - paramName: perPage
        description: The number of results per page (max 100). For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: per_page
        in: query
        schema:
          type: number
          default: 30
        required: false
      - paramName: page
        description: The page number of the results to fetch. For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: page
        in: query
        schema:
          type: number
          default: 1
        required: false
  - moduleName: Projects / Org / Create
    method: post
    path: /orgs/{org}/projects
    description: Creates an organization project board. Returns a `410 Gone` status
      if projects are disabled in the organization or if the organization does
      not have existing classic projects. If you do not have sufficient
      privileges to perform this action, a `401 Unauthorized` or `410 Gone`
      status is returned.
    externalDocs: https://docs.github.com/rest/projects/projects#create-an-organization-project
    params:
      - paramName: org
        description: The organization name. The name is not case sensitive.
        paramKey: org
        in: path
        schema:
          type: string
        required: true
      - paramName: name
        description: The name of the project.
        paramKey: name
        in: body
        schema:
          type: string
        required: true
      - paramName: body
        description: The description of the project.
        paramKey: body
        in: body
        schema:
          type: string
        required: false
    requestBodyType: json
  - moduleName: Orgs / Custom Properties / Get
    method: get
    path: /orgs/{org}/properties/schema
    description: |-
      Gets all custom properties defined for an organization.
      Organization members can read these properties.
    externalDocs: https://docs.github.com/rest/orgs/custom-properties#get-all-custom-properties-for-an-organization
    params:
      - paramName: org
        description: The organization name. The name is not case sensitive.
        paramKey: org
        in: path
        schema:
          type: string
        required: true
  - moduleName: Orgs / Custom Properties / Create Or Update
    method: patch
    path: /orgs/{org}/properties/schema
    description: >-
      Creates new or updates existing custom properties defined for an
      organization in a batch.


      To use this endpoint, the authenticated user must be one of:
        - An administrator for the organization.
        - A user, or a user on a team, with the fine-grained permission of `custom_properties_org_definitions_manager` in the organization.
    externalDocs: https://docs.github.com/rest/orgs/custom-properties#create-or-update-custom-properties-for-an-organization
    params:
      - paramName: org
        description: The organization name. The name is not case sensitive.
        paramKey: org
        in: path
        schema:
          type: string
        required: true
      - paramName: properties
        description: The array of custom properties to create or update.
        paramKey: properties
        in: body
        schema:
          type: array
          items:
            type: any
        required: true
    requestBodyType: json
  - moduleName: Orgs / Custom Property / Get
    method: get
    path: /orgs/{org}/properties/schema/{custom_property_name}
    description: |-
      Gets a custom property that is defined for an organization.
      Organization members can read these properties.
    externalDocs: https://docs.github.com/rest/orgs/custom-properties#get-a-custom-property-for-an-organization
    params:
      - paramName: org
        description: The organization name. The name is not case sensitive.
        paramKey: org
        in: path
        schema:
          type: string
        required: true
      - paramName: customPropertyName
        description: The custom property name
        paramKey: custom_property_name
        in: path
        schema:
          type: string
        required: true
  - moduleName: Orgs / Custom Property / Create Or Update
    method: put
    path: /orgs/{org}/properties/schema/{custom_property_name}
    description: >-
      Creates a new or updates an existing custom property that is defined for
      an organization.


      To use this endpoint, the authenticated user must be one of:

      - An administrator for the organization.

      - A user, or a user on a team, with the fine-grained permission of
      `custom_properties_org_definitions_manager` in the organization.
    externalDocs: https://docs.github.com/rest/orgs/custom-properties#create-or-update-a-custom-property-for-an-organization
    params:
      - paramName: org
        description: The organization name. The name is not case sensitive.
        paramKey: org
        in: path
        schema:
          type: string
        required: true
      - paramName: customPropertyName
        description: The custom property name
        paramKey: custom_property_name
        in: path
        schema:
          type: string
        required: true
      - paramName: valueType
        description: The type of the value for the property
        paramKey: value_type
        in: body
        schema:
          type: string
          enum:
            - string
            - single_select
            - multi_select
            - true_false
        required: true
      - paramName: required
        description: Whether the property is required.
        paramKey: required
        in: body
        schema:
          type: boolean
        required: false
      - paramName: defaultValue
        description: Default value of the property
        paramKey: default_value
        in: body
        schema:
          type: any
        required: false
      - paramName: description
        description: Short description of the property
        paramKey: description
        in: body
        schema:
          type: string
        required: false
      - paramName: allowedValues
        description: |-
          An ordered list of the allowed values of the property.
          The property can have up to 200 allowed values.
        paramKey: allowed_values
        in: body
        schema:
          type: array
          items:
            type: any
        required: false
    requestBodyType: json
  - moduleName: Orgs / Custom Property / Remove
    method: delete
    path: /orgs/{org}/properties/schema/{custom_property_name}
    description: >-
      Removes a custom property that is defined for an organization.


      To use this endpoint, the authenticated user must be one of:
        - An administrator for the organization.
        - A user, or a user on a team, with the fine-grained permission of `custom_properties_org_definitions_manager` in the organization.
    externalDocs: https://docs.github.com/rest/orgs/custom-properties#remove-a-custom-property-for-an-organization
    params:
      - paramName: org
        description: The organization name. The name is not case sensitive.
        paramKey: org
        in: path
        schema:
          type: string
        required: true
      - paramName: customPropertyName
        description: The custom property name
        paramKey: custom_property_name
        in: path
        schema:
          type: string
        required: true
  - moduleName: Orgs / List Repos By Properties
    method: get
    path: /orgs/{org}/properties/values
    description: |-
      Lists organization repositories with all of their custom property values.
      Organization members can read these properties.
    externalDocs: https://docs.github.com/rest/orgs/custom-properties#list-custom-property-values-for-organization-repositories
    params:
      - paramName: org
        description: The organization name. The name is not case sensitive.
        paramKey: org
        in: path
        schema:
          type: string
        required: true
      - paramName: perPage
        description: The number of results per page (max 100). For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: per_page
        in: query
        schema:
          type: number
          default: 30
        required: false
      - paramName: page
        description: The page number of the results to fetch. For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: page
        in: query
        schema:
          type: number
          default: 1
        required: false
      - paramName: repositoryQuery
        description: Finds repositories in the organization with a query containing one
          or more search keywords and qualifiers. Qualifiers allow you to limit
          your search to specific areas of GitHub. The REST API supports the
          same qualifiers as the web interface for GitHub. To learn more about
          the format of the query, see [Constructing a search
          query](https://docs.github.com/rest/search/search#constructing-a-search-query).
          See "[Searching for
          repositories](https://docs.github.com/articles/searching-for-repositories/)"
          for a detailed list of qualifiers.
        paramKey: repository_query
        in: query
        schema:
          type: string
        required: false
  - moduleName: Orgs / Custom Property Values / Create Or Update For Repos
    method: patch
    path: /orgs/{org}/properties/values
    description: >-
      Create new or update existing custom property values for repositories in a
      batch that belong to an organization.

      Each target repository will have its custom property values updated to
      match the values provided in the request.


      A maximum of 30 repositories can be updated in a single request.


      Using a value of `null` for a custom property will remove or 'unset' the
      property value from the repository.


      To use this endpoint, the authenticated user must be one of:
        - An administrator for the organization.
        - A user, or a user on a team, with the fine-grained permission of `custom_properties_org_values_editor` in the organization.
    externalDocs: https://docs.github.com/rest/orgs/custom-properties#create-or-update-custom-property-values-for-organization-repositories
    params:
      - paramName: org
        description: The organization name. The name is not case sensitive.
        paramKey: org
        in: path
        schema:
          type: string
        required: true
      - paramName: repositoryNames
        description: The names of repositories that the custom property values will be
          applied to.
        paramKey: repository_names
        in: body
        schema:
          type: array
          items:
            type: any
        required: true
      - paramName: properties
        description: List of custom property names and associated values to apply to the
          repositories.
        paramKey: properties
        in: body
        schema:
          type: array
          items:
            type: any
        required: true
    requestBodyType: json
  - moduleName: Orgs / Public Members / List
    method: get
    path: /orgs/{org}/public_members
    description: Members of an organization can choose to have their membership
      publicized or not.
    externalDocs: https://docs.github.com/rest/orgs/members#list-public-organization-members
    params:
      - paramName: org
        description: The organization name. The name is not case sensitive.
        paramKey: org
        in: path
        schema:
          type: string
        required: true
      - paramName: perPage
        description: The number of results per page (max 100). For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: per_page
        in: query
        schema:
          type: number
          default: 30
        required: false
      - paramName: page
        description: The page number of the results to fetch. For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: page
        in: query
        schema:
          type: number
          default: 1
        required: false
  - moduleName: Orgs / Public Membership / Check
    method: get
    path: /orgs/{org}/public_members/{username}
    description: Check if the provided user is a public member of the organization.
    externalDocs: https://docs.github.com/rest/orgs/members#check-public-organization-membership-for-a-user
    params:
      - paramName: org
        description: The organization name. The name is not case sensitive.
        paramKey: org
        in: path
        schema:
          type: string
        required: true
      - paramName: username
        description: The handle for the GitHub user account.
        paramKey: username
        in: path
        schema:
          type: string
        required: true
  - moduleName: Orgs / Public Membership / Set
    method: put
    path: /orgs/{org}/public_members/{username}
    description: >-
      The user can publicize their own membership. (A user cannot publicize the
      membership for another user.)


      Note that you'll need to set `Content-Length` to zero when calling out to
      this endpoint. For more information, see "[HTTP
      method](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#http-method)."
    externalDocs: https://docs.github.com/rest/orgs/members#set-public-organization-membership-for-the-authenticated-user
    params:
      - paramName: org
        description: The organization name. The name is not case sensitive.
        paramKey: org
        in: path
        schema:
          type: string
        required: true
      - paramName: username
        description: The handle for the GitHub user account.
        paramKey: username
        in: path
        schema:
          type: string
        required: true
  - moduleName: Orgs / Public Membership / Remove
    method: delete
    path: /orgs/{org}/public_members/{username}
    description: Removes the public membership for the authenticated user from the
      specified organization, unless public visibility is enforced by default.
    externalDocs: https://docs.github.com/rest/orgs/members#remove-public-organization-membership-for-the-authenticated-user
    params:
      - paramName: org
        description: The organization name. The name is not case sensitive.
        paramKey: org
        in: path
        schema:
          type: string
        required: true
      - paramName: username
        description: The handle for the GitHub user account.
        paramKey: username
        in: path
        schema:
          type: string
        required: true
  - moduleName: Repos / Org / List
    method: get
    path: /orgs/{org}/repos
    description: >-
      Lists repositories for the specified organization.


      > [!NOTE]

      > In order to see the `security_and_analysis` block for a repository you
      must have admin permissions for the repository or be an owner or security
      manager for the organization that owns the repository. For more
      information, see "[Managing security managers in your
      organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
    externalDocs: https://docs.github.com/rest/repos/repos#list-organization-repositories
    params:
      - paramName: org
        description: The organization name. The name is not case sensitive.
        paramKey: org
        in: path
        schema:
          type: string
        required: true
      - paramName: type
        description: Specifies the types of repositories you want returned.
        paramKey: type
        in: query
        schema:
          type: string
          default: all
          enum:
            - all
            - public
            - private
            - forks
            - sources
            - member
        required: false
      - paramName: sort
        description: The property to sort the results by.
        paramKey: sort
        in: query
        schema:
          type: string
          default: created
          enum:
            - created
            - updated
            - pushed
            - full_name
        required: false
      - paramName: direction
        description: "The order to sort by. Default: `asc` when using `full_name`,
          otherwise `desc`."
        paramKey: direction
        in: query
        schema:
          type: string
          enum:
            - asc
            - desc
        required: false
      - paramName: perPage
        description: The number of results per page (max 100). For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: per_page
        in: query
        schema:
          type: number
          default: 30
        required: false
      - paramName: page
        description: The page number of the results to fetch. For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: page
        in: query
        schema:
          type: number
          default: 1
        required: false
  - moduleName: Repos / Org / Create
    method: post
    path: /orgs/{org}/repos
    description: >-
      Creates a new repository in the specified organization. The authenticated
      user must be a member of the organization.


      OAuth app tokens and personal access tokens (classic) need the
      `public_repo` or `repo` scope to create a public repository, and `repo`
      scope to create a private repository.
    externalDocs: https://docs.github.com/rest/repos/repos#create-an-organization-repository
    params:
      - paramName: org
        description: The organization name. The name is not case sensitive.
        paramKey: org
        in: path
        schema:
          type: string
        required: true
      - paramName: name
        description: The name of the repository.
        paramKey: name
        in: body
        schema:
          type: string
        required: true
      - paramName: description
        description: A short description of the repository.
        paramKey: description
        in: body
        schema:
          type: string
        required: false
      - paramName: homepage
        description: A URL with more information about the repository.
        paramKey: homepage
        in: body
        schema:
          type: string
        required: false
      - paramName: private
        description: Whether the repository is private.
        paramKey: private
        in: body
        schema:
          type: boolean
          default: false
        required: false
      - paramName: visibility
        description: The visibility of the repository.
        paramKey: visibility
        in: body
        schema:
          type: string
          enum:
            - public
            - private
        required: false
      - paramName: hasIssues
        description: Either `true` to enable issues for this repository or `false` to
          disable them.
        paramKey: has_issues
        in: body
        schema:
          type: boolean
          default: true
        required: false
      - paramName: hasProjects
        description: Either `true` to enable projects for this repository or `false` to
          disable them. **Note:** If you're creating a repository in an
          organization that has disabled repository projects, the default is
          `false`, and if you pass `true`, the API returns an error.
        paramKey: has_projects
        in: body
        schema:
          type: boolean
          default: true
        required: false
      - paramName: hasWiki
        description: Either `true` to enable the wiki for this repository or `false` to
          disable it.
        paramKey: has_wiki
        in: body
        schema:
          type: boolean
          default: true
        required: false
      - paramName: hasDownloads
        description: Whether downloads are enabled.
        paramKey: has_downloads
        in: body
        schema:
          type: boolean
          default: true
        required: false
      - paramName: isTemplate
        description: Either `true` to make this repo available as a template repository
          or `false` to prevent it.
        paramKey: is_template
        in: body
        schema:
          type: boolean
          default: false
        required: false
      - paramName: teamId
        description: The id of the team that will be granted access to this repository.
          This is only valid when creating a repository in an organization.
        paramKey: team_id
        in: body
        schema:
          type: number
        required: false
      - paramName: autoInit
        description: Pass `true` to create an initial commit with empty README.
        paramKey: auto_init
        in: body
        schema:
          type: boolean
          default: false
        required: false
      - paramName: gitignoreTemplate
        description: Desired language or platform [.gitignore
          template](https://github.com/github/gitignore) to apply. Use the name
          of the template without the extension. For example, "Haskell".
        paramKey: gitignore_template
        in: body
        schema:
          type: string
        required: false
      - paramName: licenseTemplate
        description: Choose an [open source license
          template](https://choosealicense.com/) that best suits your needs, and
          then use the [license
          keyword](https://docs.github.com/articles/licensing-a-repository/#searching-github-by-license-type)
          as the `license_template` string. For example, "mit" or "mpl-2.0".
        paramKey: license_template
        in: body
        schema:
          type: string
        required: false
      - paramName: allowSquashMerge
        description: Either `true` to allow squash-merging pull requests, or `false` to
          prevent squash-merging.
        paramKey: allow_squash_merge
        in: body
        schema:
          type: boolean
          default: true
        required: false
      - paramName: allowMergeCommit
        description: Either `true` to allow merging pull requests with a merge commit,
          or `false` to prevent merging pull requests with merge commits.
        paramKey: allow_merge_commit
        in: body
        schema:
          type: boolean
          default: true
        required: false
      - paramName: allowRebaseMerge
        description: Either `true` to allow rebase-merging pull requests, or `false` to
          prevent rebase-merging.
        paramKey: allow_rebase_merge
        in: body
        schema:
          type: boolean
          default: true
        required: false
      - paramName: allowAutoMerge
        description: Either `true` to allow auto-merge on pull requests, or `false` to
          disallow auto-merge.
        paramKey: allow_auto_merge
        in: body
        schema:
          type: boolean
          default: false
        required: false
      - paramName: deleteBranchOnMerge
        description: Either `true` to allow automatically deleting head branches when
          pull requests are merged, or `false` to prevent automatic deletion.
          **The authenticated user must be an organization owner to set this
          property to `true`.**
        paramKey: delete_branch_on_merge
        in: body
        schema:
          type: boolean
          default: false
        required: false
      - paramName: useSquashPrTitleAsDefault
        description: Either `true` to allow squash-merge commits to use pull request
          title, or `false` to use commit message. **This property is closing
          down. Please use `squash_merge_commit_title` instead.
        paramKey: use_squash_pr_title_as_default
        in: body
        schema:
          type: boolean
          default: false
        required: false
      - paramName: squashMergeCommitTitle
        description: >-
          Required when using `squash_merge_commit_message`.


          The default value for a squash merge commit title:


          - `PR_TITLE` - default to the pull request's title.

          - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one
          commit) or the pull request's title (when more than one commit).
        paramKey: squash_merge_commit_title
        in: body
        schema:
          type: string
          enum:
            - PR_TITLE
            - COMMIT_OR_PR_TITLE
        required: false
      - paramName: squashMergeCommitMessage
        description: |-
          The default value for a squash merge commit message:

          - `PR_BODY` - default to the pull request's body.
          - `COMMIT_MESSAGES` - default to the branch's commit messages.
          - `BLANK` - default to a blank commit message.
        paramKey: squash_merge_commit_message
        in: body
        schema:
          type: string
          enum:
            - PR_BODY
            - COMMIT_MESSAGES
            - BLANK
        required: false
      - paramName: mergeCommitTitle
        description: >-
          Required when using `merge_commit_message`.


          The default value for a merge commit title.


          - `PR_TITLE` - default to the pull request's title.

          - `MERGE_MESSAGE` - default to the classic title for a merge message
          (e.g., Merge pull request #123 from branch-name).
        paramKey: merge_commit_title
        in: body
        schema:
          type: string
          enum:
            - PR_TITLE
            - MERGE_MESSAGE
        required: false
      - paramName: mergeCommitMessage
        description: |-
          The default value for a merge commit message.

          - `PR_TITLE` - default to the pull request's title.
          - `PR_BODY` - default to the pull request's body.
          - `BLANK` - default to a blank commit message.
        paramKey: merge_commit_message
        in: body
        schema:
          type: string
          enum:
            - PR_BODY
            - PR_TITLE
            - BLANK
        required: false
      - paramName: customProperties
        description: The custom properties for the new repository. The keys are the
          custom property names, and the values are the corresponding custom
          property values.
        paramKey: custom_properties
        in: body
        schema:
          type: any
        required: false
    requestBodyType: json
  - moduleName: Repos / Org / Rulesets / Get
    method: get
    path: /orgs/{org}/rulesets
    description: Get all the repository rulesets for an organization.
    externalDocs: https://docs.github.com/rest/orgs/rules#get-all-organization-repository-rulesets
    params:
      - paramName: org
        description: The organization name. The name is not case sensitive.
        paramKey: org
        in: path
        schema:
          type: string
        required: true
      - paramName: perPage
        description: The number of results per page (max 100). For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: per_page
        in: query
        schema:
          type: number
          default: 30
        required: false
      - paramName: page
        description: The page number of the results to fetch. For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: page
        in: query
        schema:
          type: number
          default: 1
        required: false
      - paramName: targets
        description: >
          A comma-separated list of rule targets to filter by.

          If provided, only rulesets that apply to the specified targets will be
          returned.

          For example, `branch,tag,push`.
        paramKey: targets
        in: query
        schema:
          type: string
        required: false
  - moduleName: Repos / Org / Ruleset / Create
    method: post
    path: /orgs/{org}/rulesets
    description: Create a repository ruleset for an organization.
    externalDocs: https://docs.github.com/rest/orgs/rules#create-an-organization-repository-ruleset
    params:
      - paramName: org
        description: The organization name. The name is not case sensitive.
        paramKey: org
        in: path
        schema:
          type: string
        required: true
      - paramName: name
        description: The name of the ruleset.
        paramKey: name
        in: body
        schema:
          type: string
        required: true
      - paramName: target
        description: The target of the ruleset
        paramKey: target
        in: body
        schema:
          type: string
          default: branch
          enum:
            - branch
            - tag
            - push
        required: false
      - paramName: enforcement
        description: The enforcement level of the ruleset. `evaluate` allows admins to
          test rules before enforcing them. Admins can view insights on the Rule
          Insights page (`evaluate` is only available with GitHub Enterprise).
        paramKey: enforcement
        in: body
        schema:
          type: string
          enum:
            - disabled
            - active
            - evaluate
        required: true
      - paramName: bypassActors
        description: The actors that can bypass the rules in this ruleset
        paramKey: bypass_actors
        in: body
        schema:
          type: array
          items:
            type: any
        required: false
      - paramName: conditions
        description: >-
          Conditions for an organization ruleset.

          The branch and tag rulesets conditions object should contain both
          `repository_name` and `ref_name` properties, or both `repository_id`
          and `ref_name` properties, or both `repository_property` and
          `ref_name` properties.

          The push rulesets conditions object does not require the `ref_name`
          property.
        paramKey: conditions
        in: body
        schema:
          type: any
        required: false
      - paramName: rules
        description: An array of rules within the ruleset.
        paramKey: rules
        in: body
        schema:
          type: array
          items:
            type: any
        required: false
    requestBodyType: json
  - moduleName: Repos / Org / Rule Suites / Get
    method: get
    path: /orgs/{org}/rulesets/rule-suites
    description: >-
      Lists suites of rule evaluations at the organization level.

      For more information, see "[Managing rulesets for repositories in your
      organization](https://docs.github.com/organizations/managing-organization-settings/managing-rulesets-for-repositories-in-your-organization#viewing-insights-for-rulesets)."
    externalDocs: https://docs.github.com/rest/orgs/rule-suites#list-organization-rule-suites
    params:
      - paramName: org
        description: The organization name. The name is not case sensitive.
        paramKey: org
        in: path
        schema:
          type: string
        required: true
      - paramName: ref
        description: The name of the ref. Cannot contain wildcard characters. Optionally
          prefix with `refs/heads/` to limit to branches or `refs/tags/` to
          limit to tags. Omit the prefix to search across all refs. When
          specified, only rule evaluations triggered for this ref will be
          returned.
        paramKey: ref
        in: query
        schema:
          type: string
        required: false
      - paramName: repositoryName
        description: The name of the repository to filter on. When specified, only rule
          evaluations from this repository will be returned.
        paramKey: repository_name
        in: query
        schema:
          type: number
        required: false
      - paramName: timePeriod
        description: >-
          The time period to filter by.


          For example, `day` will filter for rule suites that occurred in the
          past 24 hours, and `week` will filter for insights that occurred in
          the past 7 days (168 hours).
        paramKey: time_period
        in: query
        schema:
          type: string
          default: day
          enum:
            - hour
            - day
            - week
            - month
        required: false
      - paramName: actorName
        description: The handle for the GitHub user account to filter on. When
          specified, only rule evaluations triggered by this actor will be
          returned.
        paramKey: actor_name
        in: query
        schema:
          type: string
        required: false
      - paramName: ruleSuiteResult
        description: The rule results to filter on. When specified, only suites with
          this result will be returned.
        paramKey: rule_suite_result
        in: query
        schema:
          type: string
          default: all
          enum:
            - pass
            - fail
            - bypass
            - all
        required: false
      - paramName: perPage
        description: The number of results per page (max 100). For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: per_page
        in: query
        schema:
          type: number
          default: 30
        required: false
      - paramName: page
        description: The page number of the results to fetch. For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: page
        in: query
        schema:
          type: number
          default: 1
        required: false
  - moduleName: Repos / Org / Rule Suite / Get
    method: get
    path: /orgs/{org}/rulesets/rule-suites/{rule_suite_id}
    description: >-
      Gets information about a suite of rule evaluations from within an
      organization.

      For more information, see "[Managing rulesets for repositories in your
      organization](https://docs.github.com/organizations/managing-organization-settings/managing-rulesets-for-repositories-in-your-organization#viewing-insights-for-rulesets)."
    externalDocs: https://docs.github.com/rest/orgs/rule-suites#get-an-organization-rule-suite
    params:
      - paramName: org
        description: The organization name. The name is not case sensitive.
        paramKey: org
        in: path
        schema:
          type: string
        required: true
      - paramName: ruleSuiteId
        description: >-
          The unique identifier of the rule suite result.

          To get this ID, you can use [GET
          /repos/{owner}/{repo}/rulesets/rule-suites](https://docs.github.com/rest/repos/rule-suites#list-repository-rule-suites)

          for repositories and [GET
          /orgs/{org}/rulesets/rule-suites](https://docs.github.com/rest/orgs/rule-suites#list-organization-rule-suites)

          for organizations.
        paramKey: rule_suite_id
        in: path
        schema:
          type: number
        required: true
  - moduleName: Repos / Org / Ruleset / Get
    method: get
    path: /orgs/{org}/rulesets/{ruleset_id}
    description: >-
      Get a repository ruleset for an organization.


      **Note:** To prevent leaking sensitive information, the `bypass_actors`
      property is only returned if the user

      making the API request has write access to the ruleset.
    externalDocs: https://docs.github.com/rest/orgs/rules#get-an-organization-repository-ruleset
    params:
      - paramName: org
        description: The organization name. The name is not case sensitive.
        paramKey: org
        in: path
        schema:
          type: string
        required: true
      - paramName: rulesetId
        description: The ID of the ruleset.
        paramKey: ruleset_id
        in: path
        schema:
          type: number
        required: true
  - moduleName: Repos / Org / Ruleset / Update
    method: put
    path: /orgs/{org}/rulesets/{ruleset_id}
    description: Update a ruleset for an organization.
    externalDocs: https://docs.github.com/rest/orgs/rules#update-an-organization-repository-ruleset
    params:
      - paramName: org
        description: The organization name. The name is not case sensitive.
        paramKey: org
        in: path
        schema:
          type: string
        required: true
      - paramName: rulesetId
        description: The ID of the ruleset.
        paramKey: ruleset_id
        in: path
        schema:
          type: number
        required: true
      - paramName: name
        description: The name of the ruleset.
        paramKey: name
        in: body
        schema:
          type: string
        required: false
      - paramName: target
        description: The target of the ruleset
        paramKey: target
        in: body
        schema:
          type: string
          enum:
            - branch
            - tag
            - push
        required: false
      - paramName: enforcement
        description: The enforcement level of the ruleset. `evaluate` allows admins to
          test rules before enforcing them. Admins can view insights on the Rule
          Insights page (`evaluate` is only available with GitHub Enterprise).
        paramKey: enforcement
        in: body
        schema:
          type: string
          enum:
            - disabled
            - active
            - evaluate
        required: false
      - paramName: bypassActors
        description: The actors that can bypass the rules in this ruleset
        paramKey: bypass_actors
        in: body
        schema:
          type: array
          items:
            type: any
        required: false
      - paramName: conditions
        description: >-
          Conditions for an organization ruleset.

          The branch and tag rulesets conditions object should contain both
          `repository_name` and `ref_name` properties, or both `repository_id`
          and `ref_name` properties, or both `repository_property` and
          `ref_name` properties.

          The push rulesets conditions object does not require the `ref_name`
          property.
        paramKey: conditions
        in: body
        schema:
          type: any
        required: false
      - paramName: rules
        description: An array of rules within the ruleset.
        paramKey: rules
        in: body
        schema:
          type: array
          items:
            type: any
        required: false
    requestBodyType: json
  - moduleName: Repos / Org / Ruleset / Delete
    method: delete
    path: /orgs/{org}/rulesets/{ruleset_id}
    description: Delete a ruleset for an organization.
    externalDocs: https://docs.github.com/rest/orgs/rules#delete-an-organization-repository-ruleset
    params:
      - paramName: org
        description: The organization name. The name is not case sensitive.
        paramKey: org
        in: path
        schema:
          type: string
        required: true
      - paramName: rulesetId
        description: The ID of the ruleset.
        paramKey: ruleset_id
        in: path
        schema:
          type: number
        required: true
  - moduleName: Orgs / Security Manager Teams / List
    method: get
    path: /orgs/{org}/security-managers
    description: >-
      Lists teams that are security managers for an organization. For more
      information, see "[Managing security managers in your
      organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."


      The authenticated user must be an administrator or security manager for
      the organization to use this endpoint.


      OAuth app tokens and personal access tokens (classic) need the `read:org`
      scope to use this endpoint.
    externalDocs: https://docs.github.com/rest/orgs/security-managers#list-security-manager-teams
    params:
      - paramName: org
        description: The organization name. The name is not case sensitive.
        paramKey: org
        in: path
        schema:
          type: string
        required: true
  - moduleName: Orgs / Security Manager Team / Add
    method: put
    path: /orgs/{org}/security-managers/teams/{team_slug}
    description: >-
      Adds a team as a security manager for an organization. For more
      information, see "[Managing security for an
      organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)
      for an organization."


      The authenticated user must be an administrator for the organization to
      use this endpoint.


      OAuth app tokens and personal access tokens (classic) need the `write:org`
      scope to use this endpoint.
    externalDocs: https://docs.github.com/rest/orgs/security-managers#add-a-security-manager-team
    params:
      - paramName: org
        description: The organization name. The name is not case sensitive.
        paramKey: org
        in: path
        schema:
          type: string
        required: true
      - paramName: teamSlug
        description: The slug of the team name.
        paramKey: team_slug
        in: path
        schema:
          type: string
        required: true
  - moduleName: Orgs / Security Manager Team / Remove
    method: delete
    path: /orgs/{org}/security-managers/teams/{team_slug}
    description: >-
      Removes the security manager role from a team for an organization. For
      more information, see "[Managing security managers in your
      organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)
      team from an organization."


      The authenticated user must be an administrator for the organization to
      use this endpoint.


      OAuth app tokens and personal access tokens (classic) need the `admin:org`
      scope to use this endpoint.
    externalDocs: https://docs.github.com/rest/orgs/security-managers#remove-a-security-manager-team
    params:
      - paramName: org
        description: The organization name. The name is not case sensitive.
        paramKey: org
        in: path
        schema:
          type: string
        required: true
      - paramName: teamSlug
        description: The slug of the team name.
        paramKey: team_slug
        in: path
        schema:
          type: string
        required: true
  - moduleName: Teams / List
    method: get
    path: /orgs/{org}/teams
    description: Lists all teams in an organization that are visible to the
      authenticated user.
    externalDocs: https://docs.github.com/rest/teams/teams#list-teams
    params:
      - paramName: org
        description: The organization name. The name is not case sensitive.
        paramKey: org
        in: path
        schema:
          type: string
        required: true
      - paramName: perPage
        description: The number of results per page (max 100). For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: per_page
        in: query
        schema:
          type: number
          default: 30
        required: false
      - paramName: page
        description: The page number of the results to fetch. For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: page
        in: query
        schema:
          type: number
          default: 1
        required: false
  - moduleName: Teams / Create
    method: post
    path: /orgs/{org}/teams
    description: >-
      To create a team, the authenticated user must be a member or owner of
      `{org}`. By default, organization members can create teams. Organization
      owners can limit team creation to organization owners. For more
      information, see "[Setting team creation
      permissions](https://docs.github.com/articles/setting-team-creation-permissions-in-your-organization)."


      When you create a new team, you automatically become a team maintainer
      without explicitly adding yourself to the optional array of `maintainers`.
      For more information, see "[About
      teams](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/about-teams)".
    externalDocs: https://docs.github.com/rest/teams/teams#create-a-team
    params:
      - paramName: org
        description: The organization name. The name is not case sensitive.
        paramKey: org
        in: path
        schema:
          type: string
        required: true
      - paramName: name
        description: The name of the team.
        paramKey: name
        in: body
        schema:
          type: string
        required: true
      - paramName: description
        description: The description of the team.
        paramKey: description
        in: body
        schema:
          type: string
        required: false
      - paramName: maintainers
        description: List GitHub IDs for organization members who will become team
          maintainers.
        paramKey: maintainers
        in: body
        schema:
          type: array
          items:
            type: any
        required: false
      - paramName: repoNames
        description: The full name (e.g., "organization-name/repository-name") of
          repositories to add the team to.
        paramKey: repo_names
        in: body
        schema:
          type: array
          items:
            type: any
        required: false
      - paramName: privacy
        description: >-
          The level of privacy this team should have. The options are:

          **For a non-nested team:**
           * `secret` - only visible to organization owners and members of this team.
           * `closed` - visible to all members of this organization.
          Default: `secret`

          **For a parent or child team:**
           * `closed` - visible to all members of this organization.
          Default for child team: `closed`
        paramKey: privacy
        in: body
        schema:
          type: string
          enum:
            - secret
            - closed
        required: false
      - paramName: notificationSetting
        description: >-
          The notification setting the team has chosen. The options are:
           * `notifications_enabled` - team members receive notifications when the team is @mentioned.
           * `notifications_disabled` - no one receives notifications.
          Default: `notifications_enabled`
        paramKey: notification_setting
        in: body
        schema:
          type: string
          enum:
            - notifications_enabled
            - notifications_disabled
        required: false
      - paramName: permission
        description: "**Closing down notice**. The permission that new repositories will
          be added to the team with when none is specified."
        paramKey: permission
        in: body
        schema:
          type: string
          default: pull
          enum:
            - pull
            - push
        required: false
      - paramName: parentTeamId
        description: The ID of a team to set as the parent team.
        paramKey: parent_team_id
        in: body
        schema:
          type: number
        required: false
    requestBodyType: json
  - moduleName: Teams / Get By Name
    method: get
    path: /orgs/{org}/teams/{team_slug}
    description: >-
      Gets a team using the team's `slug`. To create the `slug`, GitHub replaces
      special characters in the `name` string, changes all words to lowercase,
      and replaces spaces with a `-` separator. For example, `"My TEam Näme"`
      would become `my-team-name`.


      > [!NOTE]

      > You can also specify a team by `org_id` and `team_id` using the route
      `GET /organizations/{org_id}/team/{team_id}`.
    externalDocs: https://docs.github.com/rest/teams/teams#get-a-team-by-name
    params:
      - paramName: org
        description: The organization name. The name is not case sensitive.
        paramKey: org
        in: path
        schema:
          type: string
        required: true
      - paramName: teamSlug
        description: The slug of the team name.
        paramKey: team_slug
        in: path
        schema:
          type: string
        required: true
  - moduleName: Teams / Update
    method: patch
    path: /orgs/{org}/teams/{team_slug}
    description: >-
      To edit a team, the authenticated user must either be an organization
      owner or a team maintainer.


      > [!NOTE]

      > You can also specify a team by `org_id` and `team_id` using the route
      `PATCH /organizations/{org_id}/team/{team_id}`.
    externalDocs: https://docs.github.com/rest/teams/teams#update-a-team
    params:
      - paramName: org
        description: The organization name. The name is not case sensitive.
        paramKey: org
        in: path
        schema:
          type: string
        required: true
      - paramName: teamSlug
        description: The slug of the team name.
        paramKey: team_slug
        in: path
        schema:
          type: string
        required: true
      - paramName: name
        description: The name of the team.
        paramKey: name
        in: body
        schema:
          type: string
        required: false
      - paramName: description
        description: The description of the team.
        paramKey: description
        in: body
        schema:
          type: string
        required: false
      - paramName: privacy
        description: >-
          The level of privacy this team should have. Editing teams without
          specifying this parameter leaves `privacy` intact. When a team is
          nested, the `privacy` for parent teams cannot be `secret`. The options
          are:

          **For a non-nested team:**
           * `secret` - only visible to organization owners and members of this team.
           * `closed` - visible to all members of this organization.
          **For a parent or child team:**
           * `closed` - visible to all members of this organization.
        paramKey: privacy
        in: body
        schema:
          type: string
          enum:
            - secret
            - closed
        required: false
      - paramName: notificationSetting
        description: >-
          The notification setting the team has chosen. Editing teams without
          specifying this parameter leaves `notification_setting` intact. The
          options are:
           * `notifications_enabled` - team members receive notifications when the team is @mentioned.
           * `notifications_disabled` - no one receives notifications.
        paramKey: notification_setting
        in: body
        schema:
          type: string
          enum:
            - notifications_enabled
            - notifications_disabled
        required: false
      - paramName: permission
        description: "**Closing down notice**. The permission that new repositories will
          be added to the team with when none is specified."
        paramKey: permission
        in: body
        schema:
          type: string
          default: pull
          enum:
            - pull
            - push
            - admin
        required: false
      - paramName: parentTeamId
        description: The ID of a team to set as the parent team.
        paramKey: parent_team_id
        in: body
        schema:
          type: number
        required: false
    requestBodyType: json
  - moduleName: Teams / Delete
    method: delete
    path: /orgs/{org}/teams/{team_slug}
    description: >-
      To delete a team, the authenticated user must be an organization owner or
      team maintainer.


      If you are an organization owner, deleting a parent team will delete all
      of its child teams as well.


      > [!NOTE]

      > You can also specify a team by `org_id` and `team_id` using the route
      `DELETE /organizations/{org_id}/team/{team_id}`.
    externalDocs: https://docs.github.com/rest/teams/teams#delete-a-team
    params:
      - paramName: org
        description: The organization name. The name is not case sensitive.
        paramKey: org
        in: path
        schema:
          type: string
        required: true
      - paramName: teamSlug
        description: The slug of the team name.
        paramKey: team_slug
        in: path
        schema:
          type: string
        required: true
  - moduleName: Teams / Discussions / List
    method: get
    path: /orgs/{org}/teams/{team_slug}/discussions
    description: >-
      List all discussions on a team's page.


      > [!NOTE]

      > You can also specify a team by `org_id` and `team_id` using the route
      `GET /organizations/{org_id}/team/{team_id}/discussions`.


      OAuth app tokens and personal access tokens (classic) need the
      `read:discussion` scope to use this endpoint.
    externalDocs: https://docs.github.com/rest/teams/discussions#list-discussions
    params:
      - paramName: org
        description: The organization name. The name is not case sensitive.
        paramKey: org
        in: path
        schema:
          type: string
        required: true
      - paramName: teamSlug
        description: The slug of the team name.
        paramKey: team_slug
        in: path
        schema:
          type: string
        required: true
      - paramName: direction
        description: The direction to sort the results by.
        paramKey: direction
        in: query
        schema:
          type: string
          default: desc
          enum:
            - asc
            - desc
        required: false
      - paramName: perPage
        description: The number of results per page (max 100). For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: per_page
        in: query
        schema:
          type: number
          default: 30
        required: false
      - paramName: page
        description: The page number of the results to fetch. For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: page
        in: query
        schema:
          type: number
          default: 1
        required: false
      - paramName: pinned
        description: Pinned discussions only filter
        paramKey: pinned
        in: query
        schema:
          type: string
        required: false
  - moduleName: Teams / Discussions / Create
    method: post
    path: /orgs/{org}/teams/{team_slug}/discussions
    description: >-
      Creates a new discussion post on a team's page.


      This endpoint triggers
      [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications).
      Creating content too quickly using this endpoint may result in secondary
      rate limiting. For more information, see "[Rate limits for the
      API](https://docs.github.com/rest/using-the-rest-api/rate-limits-for-the-rest-api#about-secondary-rate-limits)"
      and "[Best practices for using the REST
      API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api)."


      > [!NOTE]

      > You can also specify a team by `org_id` and `team_id` using the route
      `POST /organizations/{org_id}/team/{team_id}/discussions`.


      OAuth app tokens and personal access tokens (classic) need the
      `write:discussion` scope to use this endpoint.
    externalDocs: https://docs.github.com/rest/teams/discussions#create-a-discussion
    params:
      - paramName: org
        description: The organization name. The name is not case sensitive.
        paramKey: org
        in: path
        schema:
          type: string
        required: true
      - paramName: teamSlug
        description: The slug of the team name.
        paramKey: team_slug
        in: path
        schema:
          type: string
        required: true
      - paramName: title
        description: The discussion post's title.
        paramKey: title
        in: body
        schema:
          type: string
        required: true
      - paramName: body
        description: The discussion post's body text.
        paramKey: body
        in: body
        schema:
          type: string
        required: true
      - paramName: private
        description: Private posts are only visible to team members, organization
          owners, and team maintainers. Public posts are visible to all members
          of the organization. Set to `true` to create a private post.
        paramKey: private
        in: body
        schema:
          type: boolean
          default: false
        required: false
    requestBodyType: json
  - moduleName: Teams / Discussion / Get
    method: get
    path: /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}
    description: >-
      Get a specific discussion on a team's page.


      > [!NOTE]

      > You can also specify a team by `org_id` and `team_id` using the route
      `GET
      /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}`.


      OAuth app tokens and personal access tokens (classic) need the
      `read:discussion` scope to use this endpoint.
    externalDocs: https://docs.github.com/rest/teams/discussions#get-a-discussion
    params:
      - paramName: org
        description: The organization name. The name is not case sensitive.
        paramKey: org
        in: path
        schema:
          type: string
        required: true
      - paramName: teamSlug
        description: The slug of the team name.
        paramKey: team_slug
        in: path
        schema:
          type: string
        required: true
      - paramName: discussionNumber
        description: The number that identifies the discussion.
        paramKey: discussion_number
        in: path
        schema:
          type: number
        required: true
  - moduleName: Teams / Discussion / Update
    method: patch
    path: /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}
    description: >-
      Edits the title and body text of a discussion post. Only the parameters
      you provide are updated.


      > [!NOTE]

      > You can also specify a team by `org_id` and `team_id` using the route
      `PATCH
      /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}`.


      OAuth app tokens and personal access tokens (classic) need the
      `write:discussion` scope to use this endpoint.
    externalDocs: https://docs.github.com/rest/teams/discussions#update-a-discussion
    params:
      - paramName: org
        description: The organization name. The name is not case sensitive.
        paramKey: org
        in: path
        schema:
          type: string
        required: true
      - paramName: teamSlug
        description: The slug of the team name.
        paramKey: team_slug
        in: path
        schema:
          type: string
        required: true
      - paramName: discussionNumber
        description: The number that identifies the discussion.
        paramKey: discussion_number
        in: path
        schema:
          type: number
        required: true
      - paramName: title
        description: The discussion post's title.
        paramKey: title
        in: body
        schema:
          type: string
        required: false
      - paramName: body
        description: The discussion post's body text.
        paramKey: body
        in: body
        schema:
          type: string
        required: false
    requestBodyType: json
  - moduleName: Teams / Discussion / Delete
    method: delete
    path: /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}
    description: >-
      Delete a discussion from a team's page.


      > [!NOTE]

      > You can also specify a team by `org_id` and `team_id` using the route
      `DELETE
      /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}`.


      OAuth app tokens and personal access tokens (classic) need the
      `write:discussion` scope to use this endpoint.
    externalDocs: https://docs.github.com/rest/teams/discussions#delete-a-discussion
    params:
      - paramName: org
        description: The organization name. The name is not case sensitive.
        paramKey: org
        in: path
        schema:
          type: string
        required: true
      - paramName: teamSlug
        description: The slug of the team name.
        paramKey: team_slug
        in: path
        schema:
          type: string
        required: true
      - paramName: discussionNumber
        description: The number that identifies the discussion.
        paramKey: discussion_number
        in: path
        schema:
          type: number
        required: true
  - moduleName: Teams / Discussion Comments / List
    method: get
    path: /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments
    description: >-
      List all comments on a team discussion.


      > [!NOTE]

      > You can also specify a team by `org_id` and `team_id` using the route
      `GET
      /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments`.


      OAuth app tokens and personal access tokens (classic) need the
      `read:discussion` scope to use this endpoint.
    externalDocs: https://docs.github.com/rest/teams/discussion-comments#list-discussion-comments
    params:
      - paramName: org
        description: The organization name. The name is not case sensitive.
        paramKey: org
        in: path
        schema:
          type: string
        required: true
      - paramName: teamSlug
        description: The slug of the team name.
        paramKey: team_slug
        in: path
        schema:
          type: string
        required: true
      - paramName: discussionNumber
        description: The number that identifies the discussion.
        paramKey: discussion_number
        in: path
        schema:
          type: number
        required: true
      - paramName: direction
        description: The direction to sort the results by.
        paramKey: direction
        in: query
        schema:
          type: string
          default: desc
          enum:
            - asc
            - desc
        required: false
      - paramName: perPage
        description: The number of results per page (max 100). For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: per_page
        in: query
        schema:
          type: number
          default: 30
        required: false
      - paramName: page
        description: The page number of the results to fetch. For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: page
        in: query
        schema:
          type: number
          default: 1
        required: false
  - moduleName: Teams / Discussion Comments / Create
    method: post
    path: /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments
    description: >-
      Creates a new comment on a team discussion.


      This endpoint triggers
      [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications).
      Creating content too quickly using this endpoint may result in secondary
      rate limiting. For more information, see "[Rate limits for the
      API](https://docs.github.com/rest/using-the-rest-api/rate-limits-for-the-rest-api#about-secondary-rate-limits)"
      and "[Best practices for using the REST
      API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api)."


      > [!NOTE]

      > You can also specify a team by `org_id` and `team_id` using the route
      `POST
      /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments`.


      OAuth app tokens and personal access tokens (classic) need the
      `write:discussion` scope to use this endpoint.
    externalDocs: https://docs.github.com/rest/teams/discussion-comments#create-a-discussion-comment
    params:
      - paramName: org
        description: The organization name. The name is not case sensitive.
        paramKey: org
        in: path
        schema:
          type: string
        required: true
      - paramName: teamSlug
        description: The slug of the team name.
        paramKey: team_slug
        in: path
        schema:
          type: string
        required: true
      - paramName: discussionNumber
        description: The number that identifies the discussion.
        paramKey: discussion_number
        in: path
        schema:
          type: number
        required: true
      - paramName: body
        description: The discussion comment's body text.
        paramKey: body
        in: body
        schema:
          type: string
        required: true
    requestBodyType: json
  - moduleName: Teams / Discussion Comment / Get
    method: get
    path: /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}
    description: >-
      Get a specific comment on a team discussion.


      > [!NOTE]

      > You can also specify a team by `org_id` and `team_id` using the route
      `GET
      /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments/{comment_number}`.


      OAuth app tokens and personal access tokens (classic) need the
      `read:discussion` scope to use this endpoint.
    externalDocs: https://docs.github.com/rest/teams/discussion-comments#get-a-discussion-comment
    params:
      - paramName: org
        description: The organization name. The name is not case sensitive.
        paramKey: org
        in: path
        schema:
          type: string
        required: true
      - paramName: teamSlug
        description: The slug of the team name.
        paramKey: team_slug
        in: path
        schema:
          type: string
        required: true
      - paramName: discussionNumber
        description: The number that identifies the discussion.
        paramKey: discussion_number
        in: path
        schema:
          type: number
        required: true
      - paramName: commentNumber
        description: The number that identifies the comment.
        paramKey: comment_number
        in: path
        schema:
          type: number
        required: true
  - moduleName: Teams / Discussion Comment / Update
    method: patch
    path: /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}
    description: >-
      Edits the body text of a discussion comment.


      > [!NOTE]

      > You can also specify a team by `org_id` and `team_id` using the route
      `PATCH
      /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments/{comment_number}`.


      OAuth app tokens and personal access tokens (classic) need the
      `write:discussion` scope to use this endpoint.
    externalDocs: https://docs.github.com/rest/teams/discussion-comments#update-a-discussion-comment
    params:
      - paramName: org
        description: The organization name. The name is not case sensitive.
        paramKey: org
        in: path
        schema:
          type: string
        required: true
      - paramName: teamSlug
        description: The slug of the team name.
        paramKey: team_slug
        in: path
        schema:
          type: string
        required: true
      - paramName: discussionNumber
        description: The number that identifies the discussion.
        paramKey: discussion_number
        in: path
        schema:
          type: number
        required: true
      - paramName: commentNumber
        description: The number that identifies the comment.
        paramKey: comment_number
        in: path
        schema:
          type: number
        required: true
      - paramName: body
        description: The discussion comment's body text.
        paramKey: body
        in: body
        schema:
          type: string
        required: true
    requestBodyType: json
  - moduleName: Teams / Discussion Comment / Delete
    method: delete
    path: /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}
    description: >-
      Deletes a comment on a team discussion.


      > [!NOTE]

      > You can also specify a team by `org_id` and `team_id` using the route
      `DELETE
      /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments/{comment_number}`.


      OAuth app tokens and personal access tokens (classic) need the
      `write:discussion` scope to use this endpoint.
    externalDocs: https://docs.github.com/rest/teams/discussion-comments#delete-a-discussion-comment
    params:
      - paramName: org
        description: The organization name. The name is not case sensitive.
        paramKey: org
        in: path
        schema:
          type: string
        required: true
      - paramName: teamSlug
        description: The slug of the team name.
        paramKey: team_slug
        in: path
        schema:
          type: string
        required: true
      - paramName: discussionNumber
        description: The number that identifies the discussion.
        paramKey: discussion_number
        in: path
        schema:
          type: number
        required: true
      - paramName: commentNumber
        description: The number that identifies the comment.
        paramKey: comment_number
        in: path
        schema:
          type: number
        required: true
  - moduleName: Reactions / Team Discussion Comment / List
    method: get
    path: /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions
    description: >-
      List the reactions to a [team discussion
      comment](https://docs.github.com/rest/teams/discussion-comments#get-a-discussion-comment).


      > [!NOTE]

      > You can also specify a team by `org_id` and `team_id` using the route
      `GET
      /organizations/:org_id/team/:team_id/discussions/:discussion_number/comments/:comment_number/reactions`.


      OAuth app tokens and personal access tokens (classic) need the
      `read:discussion` scope to use this endpoint.
    externalDocs: https://docs.github.com/rest/reactions/reactions#list-reactions-for-a-team-discussion-comment
    params:
      - paramName: org
        description: The organization name. The name is not case sensitive.
        paramKey: org
        in: path
        schema:
          type: string
        required: true
      - paramName: teamSlug
        description: The slug of the team name.
        paramKey: team_slug
        in: path
        schema:
          type: string
        required: true
      - paramName: discussionNumber
        description: The number that identifies the discussion.
        paramKey: discussion_number
        in: path
        schema:
          type: number
        required: true
      - paramName: commentNumber
        description: The number that identifies the comment.
        paramKey: comment_number
        in: path
        schema:
          type: number
        required: true
      - paramName: content
        description: Returns a single [reaction
          type](https://docs.github.com/rest/reactions/reactions#about-reactions).
          Omit this parameter to list all reactions to a team discussion
          comment.
        paramKey: content
        in: query
        schema:
          type: string
          enum:
            - "+1"
            - "-1"
            - laugh
            - confused
            - heart
            - hooray
            - rocket
            - eyes
        required: false
      - paramName: perPage
        description: The number of results per page (max 100). For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: per_page
        in: query
        schema:
          type: number
          default: 30
        required: false
      - paramName: page
        description: The page number of the results to fetch. For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: page
        in: query
        schema:
          type: number
          default: 1
        required: false
  - moduleName: Reactions / Team Discussion Comment / Create
    method: post
    path: /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions
    description: >-
      Create a reaction to a [team discussion
      comment](https://docs.github.com/rest/teams/discussion-comments#get-a-discussion-comment).


      A response with an HTTP `200` status means that you already added the
      reaction type to this team discussion comment.


      > [!NOTE]

      > You can also specify a team by `org_id` and `team_id` using the route
      `POST
      /organizations/:org_id/team/:team_id/discussions/:discussion_number/comments/:comment_number/reactions`.


      OAuth app tokens and personal access tokens (classic) need the
      `write:discussion` scope to use this endpoint.
    externalDocs: https://docs.github.com/rest/reactions/reactions#create-reaction-for-a-team-discussion-comment
    params:
      - paramName: org
        description: The organization name. The name is not case sensitive.
        paramKey: org
        in: path
        schema:
          type: string
        required: true
      - paramName: teamSlug
        description: The slug of the team name.
        paramKey: team_slug
        in: path
        schema:
          type: string
        required: true
      - paramName: discussionNumber
        description: The number that identifies the discussion.
        paramKey: discussion_number
        in: path
        schema:
          type: number
        required: true
      - paramName: commentNumber
        description: The number that identifies the comment.
        paramKey: comment_number
        in: path
        schema:
          type: number
        required: true
      - paramName: content
        description: The [reaction
          type](https://docs.github.com/rest/reactions/reactions#about-reactions)
          to add to the team discussion comment.
        paramKey: content
        in: body
        schema:
          type: string
          enum:
            - "+1"
            - "-1"
            - laugh
            - confused
            - heart
            - hooray
            - rocket
            - eyes
        required: true
    requestBodyType: json
  - moduleName: Reactions / Team Discussion Comment / Delete
    method: delete
    path: /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions/{reaction_id}
    description: >-
      > [!NOTE]

      > You can also specify a team or organization with `team_id` and `org_id`
      using the route `DELETE
      /organizations/:org_id/team/:team_id/discussions/:discussion_number/comments/:comment_number/reactions/:reaction_id`.


      Delete a reaction to a [team discussion
      comment](https://docs.github.com/rest/teams/discussion-comments#get-a-discussion-comment).


      OAuth app tokens and personal access tokens (classic) need the
      `write:discussion` scope to use this endpoint.
    externalDocs: https://docs.github.com/rest/reactions/reactions#delete-team-discussion-comment-reaction
    params:
      - paramName: org
        description: The organization name. The name is not case sensitive.
        paramKey: org
        in: path
        schema:
          type: string
        required: true
      - paramName: teamSlug
        description: The slug of the team name.
        paramKey: team_slug
        in: path
        schema:
          type: string
        required: true
      - paramName: discussionNumber
        description: The number that identifies the discussion.
        paramKey: discussion_number
        in: path
        schema:
          type: number
        required: true
      - paramName: commentNumber
        description: The number that identifies the comment.
        paramKey: comment_number
        in: path
        schema:
          type: number
        required: true
      - paramName: reactionId
        description: The unique identifier of the reaction.
        paramKey: reaction_id
        in: path
        schema:
          type: number
        required: true
  - moduleName: Reactions / Team Discussion / List
    method: get
    path: /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions
    description: >-
      List the reactions to a [team
      discussion](https://docs.github.com/rest/teams/discussions#get-a-discussion).


      > [!NOTE]

      > You can also specify a team by `org_id` and `team_id` using the route
      `GET
      /organizations/:org_id/team/:team_id/discussions/:discussion_number/reactions`.


      OAuth app tokens and personal access tokens (classic) need the
      `read:discussion` scope to use this endpoint.
    externalDocs: https://docs.github.com/rest/reactions/reactions#list-reactions-for-a-team-discussion
    params:
      - paramName: org
        description: The organization name. The name is not case sensitive.
        paramKey: org
        in: path
        schema:
          type: string
        required: true
      - paramName: teamSlug
        description: The slug of the team name.
        paramKey: team_slug
        in: path
        schema:
          type: string
        required: true
      - paramName: discussionNumber
        description: The number that identifies the discussion.
        paramKey: discussion_number
        in: path
        schema:
          type: number
        required: true
      - paramName: content
        description: Returns a single [reaction
          type](https://docs.github.com/rest/reactions/reactions#about-reactions).
          Omit this parameter to list all reactions to a team discussion.
        paramKey: content
        in: query
        schema:
          type: string
          enum:
            - "+1"
            - "-1"
            - laugh
            - confused
            - heart
            - hooray
            - rocket
            - eyes
        required: false
      - paramName: perPage
        description: The number of results per page (max 100). For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: per_page
        in: query
        schema:
          type: number
          default: 30
        required: false
      - paramName: page
        description: The page number of the results to fetch. For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: page
        in: query
        schema:
          type: number
          default: 1
        required: false
  - moduleName: Reactions / Team Discussion / Create
    method: post
    path: /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions
    description: >-
      Create a reaction to a [team
      discussion](https://docs.github.com/rest/teams/discussions#get-a-discussion).


      A response with an HTTP `200` status means that you already added the
      reaction type to this team discussion.


      > [!NOTE]

      > You can also specify a team by `org_id` and `team_id` using the route
      `POST
      /organizations/:org_id/team/:team_id/discussions/:discussion_number/reactions`.


      OAuth app tokens and personal access tokens (classic) need the
      `write:discussion` scope to use this endpoint.
    externalDocs: https://docs.github.com/rest/reactions/reactions#create-reaction-for-a-team-discussion
    params:
      - paramName: org
        description: The organization name. The name is not case sensitive.
        paramKey: org
        in: path
        schema:
          type: string
        required: true
      - paramName: teamSlug
        description: The slug of the team name.
        paramKey: team_slug
        in: path
        schema:
          type: string
        required: true
      - paramName: discussionNumber
        description: The number that identifies the discussion.
        paramKey: discussion_number
        in: path
        schema:
          type: number
        required: true
      - paramName: content
        description: The [reaction
          type](https://docs.github.com/rest/reactions/reactions#about-reactions)
          to add to the team discussion.
        paramKey: content
        in: body
        schema:
          type: string
          enum:
            - "+1"
            - "-1"
            - laugh
            - confused
            - heart
            - hooray
            - rocket
            - eyes
        required: true
    requestBodyType: json
  - moduleName: Reactions / Team Discussion / Delete
    method: delete
    path: /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions/{reaction_id}
    description: >-
      > [!NOTE]

      > You can also specify a team or organization with `team_id` and `org_id`
      using the route `DELETE
      /organizations/:org_id/team/:team_id/discussions/:discussion_number/reactions/:reaction_id`.


      Delete a reaction to a [team
      discussion](https://docs.github.com/rest/teams/discussions#get-a-discussion).


      OAuth app tokens and personal access tokens (classic) need the
      `write:discussion` scope to use this endpoint.
    externalDocs: https://docs.github.com/rest/reactions/reactions#delete-team-discussion-reaction
    params:
      - paramName: org
        description: The organization name. The name is not case sensitive.
        paramKey: org
        in: path
        schema:
          type: string
        required: true
      - paramName: teamSlug
        description: The slug of the team name.
        paramKey: team_slug
        in: path
        schema:
          type: string
        required: true
      - paramName: discussionNumber
        description: The number that identifies the discussion.
        paramKey: discussion_number
        in: path
        schema:
          type: number
        required: true
      - paramName: reactionId
        description: The unique identifier of the reaction.
        paramKey: reaction_id
        in: path
        schema:
          type: number
        required: true
  - moduleName: Teams / Pending Invitations / List
    method: get
    path: /orgs/{org}/teams/{team_slug}/invitations
    description: >-
      The return hash contains a `role` field which refers to the Organization
      Invitation role and will be one of the following values: `direct_member`,
      `admin`, `billing_manager`, `hiring_manager`, or `reinstate`. If the
      invitee is not a GitHub member, the `login` field in the return hash will
      be `null`.


      > [!NOTE]

      > You can also specify a team by `org_id` and `team_id` using the route
      `GET /organizations/{org_id}/team/{team_id}/invitations`.
    externalDocs: https://docs.github.com/rest/teams/members#list-pending-team-invitations
    params:
      - paramName: org
        description: The organization name. The name is not case sensitive.
        paramKey: org
        in: path
        schema:
          type: string
        required: true
      - paramName: teamSlug
        description: The slug of the team name.
        paramKey: team_slug
        in: path
        schema:
          type: string
        required: true
      - paramName: perPage
        description: The number of results per page (max 100). For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: per_page
        in: query
        schema:
          type: number
          default: 30
        required: false
      - paramName: page
        description: The page number of the results to fetch. For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: page
        in: query
        schema:
          type: number
          default: 1
        required: false
  - moduleName: Teams / Members / List
    method: get
    path: /orgs/{org}/teams/{team_slug}/members
    description: >-
      Team members will include the members of child teams.


      To list members in a team, the team must be visible to the authenticated
      user.
    externalDocs: https://docs.github.com/rest/teams/members#list-team-members
    params:
      - paramName: org
        description: The organization name. The name is not case sensitive.
        paramKey: org
        in: path
        schema:
          type: string
        required: true
      - paramName: teamSlug
        description: The slug of the team name.
        paramKey: team_slug
        in: path
        schema:
          type: string
        required: true
      - paramName: role
        description: Filters members returned by their role in the team.
        paramKey: role
        in: query
        schema:
          type: string
          default: all
          enum:
            - member
            - maintainer
            - all
        required: false
      - paramName: perPage
        description: The number of results per page (max 100). For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: per_page
        in: query
        schema:
          type: number
          default: 30
        required: false
      - paramName: page
        description: The page number of the results to fetch. For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: page
        in: query
        schema:
          type: number
          default: 1
        required: false
  - moduleName: Teams / Membership / Get
    method: get
    path: /orgs/{org}/teams/{team_slug}/memberships/{username}
    description: >-
      Team members will include the members of child teams.


      To get a user's membership with a team, the team must be visible to the
      authenticated user.


      > [!NOTE]

      > You can also specify a team by `org_id` and `team_id` using the route
      `GET /organizations/{org_id}/team/{team_id}/memberships/{username}`.


      > [!NOTE]

      > The response contains the `state` of the membership and the member's
      `role`.


      The `role` for organization owners is set to `maintainer`. For more
      information about `maintainer` roles, see [Create a
      team](https://docs.github.com/rest/teams/teams#create-a-team).
    externalDocs: https://docs.github.com/rest/teams/members#get-team-membership-for-a-user
    params:
      - paramName: org
        description: The organization name. The name is not case sensitive.
        paramKey: org
        in: path
        schema:
          type: string
        required: true
      - paramName: teamSlug
        description: The slug of the team name.
        paramKey: team_slug
        in: path
        schema:
          type: string
        required: true
      - paramName: username
        description: The handle for the GitHub user account.
        paramKey: username
        in: path
        schema:
          type: string
        required: true
  - moduleName: Teams / Membership / Add Or Update
    method: put
    path: /orgs/{org}/teams/{team_slug}/memberships/{username}
    description: >-
      Adds an organization member to a team. An authenticated organization owner
      or team maintainer can add organization members to a team.


      Team synchronization is available for organizations using GitHub
      Enterprise Cloud. For more information, see [GitHub's
      products](https://docs.github.com/github/getting-started-with-github/githubs-products)
      in the GitHub Help documentation.


      > [!NOTE]

      > When you have team synchronization set up for a team with your
      organization's identity provider (IdP), you will see an error if you
      attempt to use the API for making changes to the team's membership. If you
      have access to manage group membership in your IdP, you can manage GitHub
      team membership through your identity provider, which automatically adds
      and removes team members in an organization. For more information, see
      "[Synchronizing teams between your identity provider and
      GitHub](https://docs.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."


      An organization owner can add someone who is not part of the team's
      organization to a team. When an organization owner adds someone to a team
      who is not an organization member, this endpoint will send an invitation
      to the person via email. This newly-created membership will be in the
      "pending" state until the person accepts the invitation, at which point
      the membership will transition to the "active" state and the user will be
      added as a member of the team.


      If the user is already a member of the team, this endpoint will update the
      role of the team member's role. To update the membership of a team member,
      the authenticated user must be an organization owner or a team maintainer.


      > [!NOTE]

      > You can also specify a team by `org_id` and `team_id` using the route
      `PUT /organizations/{org_id}/team/{team_id}/memberships/{username}`.
    externalDocs: https://docs.github.com/rest/teams/members#add-or-update-team-membership-for-a-user
    params:
      - paramName: org
        description: The organization name. The name is not case sensitive.
        paramKey: org
        in: path
        schema:
          type: string
        required: true
      - paramName: teamSlug
        description: The slug of the team name.
        paramKey: team_slug
        in: path
        schema:
          type: string
        required: true
      - paramName: username
        description: The handle for the GitHub user account.
        paramKey: username
        in: path
        schema:
          type: string
        required: true
      - paramName: role
        description: The role that this user should have in the team.
        paramKey: role
        in: body
        schema:
          type: string
          default: member
          enum:
            - member
            - maintainer
        required: false
    requestBodyType: json
  - moduleName: Teams / Membership / Remove
    method: delete
    path: /orgs/{org}/teams/{team_slug}/memberships/{username}
    description: >-
      To remove a membership between a user and a team, the authenticated user
      must have 'admin' permissions to the team or be an owner of the
      organization that the team is associated with. Removing team membership
      does not delete the user, it just removes their membership from the team.


      Team synchronization is available for organizations using GitHub
      Enterprise Cloud. For more information, see [GitHub's
      products](https://docs.github.com/github/getting-started-with-github/githubs-products)
      in the GitHub Help documentation.


      > [!NOTE]

      > When you have team synchronization set up for a team with your
      organization's identity provider (IdP), you will see an error if you
      attempt to use the API for making changes to the team's membership. If you
      have access to manage group membership in your IdP, you can manage GitHub
      team membership through your identity provider, which automatically adds
      and removes team members in an organization. For more information, see
      "[Synchronizing teams between your identity provider and
      GitHub](https://docs.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."


      > [!NOTE]

      > You can also specify a team by `org_id` and `team_id` using the route
      `DELETE /organizations/{org_id}/team/{team_id}/memberships/{username}`.
    externalDocs: https://docs.github.com/rest/teams/members#remove-team-membership-for-a-user
    params:
      - paramName: org
        description: The organization name. The name is not case sensitive.
        paramKey: org
        in: path
        schema:
          type: string
        required: true
      - paramName: teamSlug
        description: The slug of the team name.
        paramKey: team_slug
        in: path
        schema:
          type: string
        required: true
      - paramName: username
        description: The handle for the GitHub user account.
        paramKey: username
        in: path
        schema:
          type: string
        required: true
  - moduleName: Teams / Projects / List
    method: get
    path: /orgs/{org}/teams/{team_slug}/projects
    description: >-
      Lists the organization projects for a team.


      > [!NOTE]

      > You can also specify a team by `org_id` and `team_id` using the route
      `GET /organizations/{org_id}/team/{team_id}/projects`.
    externalDocs: https://docs.github.com/rest/teams/teams#list-team-projects
    params:
      - paramName: org
        description: The organization name. The name is not case sensitive.
        paramKey: org
        in: path
        schema:
          type: string
        required: true
      - paramName: teamSlug
        description: The slug of the team name.
        paramKey: team_slug
        in: path
        schema:
          type: string
        required: true
      - paramName: perPage
        description: The number of results per page (max 100). For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: per_page
        in: query
        schema:
          type: number
          default: 30
        required: false
      - paramName: page
        description: The page number of the results to fetch. For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: page
        in: query
        schema:
          type: number
          default: 1
        required: false
  - moduleName: Teams / Project / Check Permissions
    method: get
    path: /orgs/{org}/teams/{team_slug}/projects/{project_id}
    description: >-
      Checks whether a team has `read`, `write`, or `admin` permissions for an
      organization project. The response includes projects inherited from a
      parent team.


      > [!NOTE]

      > You can also specify a team by `org_id` and `team_id` using the route
      `GET /organizations/{org_id}/team/{team_id}/projects/{project_id}`.
    externalDocs: https://docs.github.com/rest/teams/teams#check-team-permissions-for-a-project
    params:
      - paramName: org
        description: The organization name. The name is not case sensitive.
        paramKey: org
        in: path
        schema:
          type: string
        required: true
      - paramName: teamSlug
        description: The slug of the team name.
        paramKey: team_slug
        in: path
        schema:
          type: string
        required: true
      - paramName: projectId
        description: The unique identifier of the project.
        paramKey: project_id
        in: path
        schema:
          type: number
        required: true
  - moduleName: Teams / Project / Add Or Update Permissions
    method: put
    path: /orgs/{org}/teams/{team_slug}/projects/{project_id}
    description: >-
      Adds an organization project to a team. To add a project to a team or
      update the team's permission on a project, the authenticated user must
      have `admin` permissions for the project. The project and team must be
      part of the same organization.


      > [!NOTE]

      > You can also specify a team by `org_id` and `team_id` using the route
      `PUT /organizations/{org_id}/team/{team_id}/projects/{project_id}`.
    externalDocs: https://docs.github.com/rest/teams/teams#add-or-update-team-project-permissions
    params:
      - paramName: org
        description: The organization name. The name is not case sensitive.
        paramKey: org
        in: path
        schema:
          type: string
        required: true
      - paramName: teamSlug
        description: The slug of the team name.
        paramKey: team_slug
        in: path
        schema:
          type: string
        required: true
      - paramName: projectId
        description: The unique identifier of the project.
        paramKey: project_id
        in: path
        schema:
          type: number
        required: true
      - paramName: permission
        description: "The permission to grant to the team for this project. Default: the
          team's `permission` attribute will be used to determine what
          permission to grant the team on this project. Note that, if you choose
          not to pass any parameters, you'll need to set `Content-Length` to
          zero when calling this endpoint. For more information, see \"[HTTP
          method](https://docs.github.com/rest/guides/getting-started-with-the-\
          rest-api#http-method).\""
        paramKey: permission
        in: body
        schema:
          type: string
          enum:
            - read
            - write
            - admin
        required: false
    requestBodyType: json
  - moduleName: Teams / Project / Remove
    method: delete
    path: /orgs/{org}/teams/{team_slug}/projects/{project_id}
    description: >-
      Removes an organization project from a team. An organization owner or a
      team maintainer can remove any project from the team. To remove a project
      from a team as an organization member, the authenticated user must have
      `read` access to both the team and project, or `admin` access to the team
      or project. This endpoint removes the project from the team, but does not
      delete the project.


      > [!NOTE]

      > You can also specify a team by `org_id` and `team_id` using the route
      `DELETE /organizations/{org_id}/team/{team_id}/projects/{project_id}`.
    externalDocs: https://docs.github.com/rest/teams/teams#remove-a-project-from-a-team
    params:
      - paramName: org
        description: The organization name. The name is not case sensitive.
        paramKey: org
        in: path
        schema:
          type: string
        required: true
      - paramName: teamSlug
        description: The slug of the team name.
        paramKey: team_slug
        in: path
        schema:
          type: string
        required: true
      - paramName: projectId
        description: The unique identifier of the project.
        paramKey: project_id
        in: path
        schema:
          type: number
        required: true
  - moduleName: Teams / Repos / List
    method: get
    path: /orgs/{org}/teams/{team_slug}/repos
    description: >-
      Lists a team's repositories visible to the authenticated user.


      > [!NOTE]

      > You can also specify a team by `org_id` and `team_id` using the route
      `GET /organizations/{org_id}/team/{team_id}/repos`.
    externalDocs: https://docs.github.com/rest/teams/teams#list-team-repositories
    params:
      - paramName: org
        description: The organization name. The name is not case sensitive.
        paramKey: org
        in: path
        schema:
          type: string
        required: true
      - paramName: teamSlug
        description: The slug of the team name.
        paramKey: team_slug
        in: path
        schema:
          type: string
        required: true
      - paramName: perPage
        description: The number of results per page (max 100). For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: per_page
        in: query
        schema:
          type: number
          default: 30
        required: false
      - paramName: page
        description: The page number of the results to fetch. For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: page
        in: query
        schema:
          type: number
          default: 1
        required: false
  - moduleName: Teams / Repo / Check Permissions
    method: get
    path: /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}
    description: >-
      Checks whether a team has `admin`, `push`, `maintain`, `triage`, or `pull`
      permission for a repository. Repositories inherited through a parent team
      will also be checked.


      You can also get information about the specified repository, including
      what permissions the team grants on it, by passing the following custom
      [media
      type](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types/)
      via the `application/vnd.github.v3.repository+json` accept header.


      If a team doesn't have permission for the repository, you will receive a
      `404 Not Found` response status.


      If the repository is private, you must have at least `read` permission for
      that repository, and your token must have the `repo` or `admin:org` scope.
      Otherwise, you will receive a `404 Not Found` response status.


      > [!NOTE]

      > You can also specify a team by `org_id` and `team_id` using the route
      `GET /organizations/{org_id}/team/{team_id}/repos/{owner}/{repo}`.
    externalDocs: https://docs.github.com/rest/teams/teams#check-team-permissions-for-a-repository
    params:
      - paramName: org
        description: The organization name. The name is not case sensitive.
        paramKey: org
        in: path
        schema:
          type: string
        required: true
      - paramName: teamSlug
        description: The slug of the team name.
        paramKey: team_slug
        in: path
        schema:
          type: string
        required: true
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
  - moduleName: Teams / Repo / Add Or Update Permissions
    method: put
    path: /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}
    description: >-
      To add a repository to a team or update the team's permission on a
      repository, the authenticated user must have admin access to the
      repository, and must be able to see the team. The repository must be owned
      by the organization, or a direct fork of a repository owned by the
      organization. You will get a `422 Unprocessable Entity` status if you
      attempt to add a repository to a team that is not owned by the
      organization. Note that, if you choose not to pass any parameters, you'll
      need to set `Content-Length` to zero when calling out to this endpoint.
      For more information, see "[HTTP
      method](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#http-method)."


      > [!NOTE]

      > You can also specify a team by `org_id` and `team_id` using the route
      `PUT /organizations/{org_id}/team/{team_id}/repos/{owner}/{repo}`.


      For more information about the permission levels, see "[Repository
      permission levels for an
      organization](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/repository-permission-levels-for-an-organization#permission-levels-for-repositories-owned-by-an-organization)".
    externalDocs: https://docs.github.com/rest/teams/teams#add-or-update-team-repository-permissions
    params:
      - paramName: org
        description: The organization name. The name is not case sensitive.
        paramKey: org
        in: path
        schema:
          type: string
        required: true
      - paramName: teamSlug
        description: The slug of the team name.
        paramKey: team_slug
        in: path
        schema:
          type: string
        required: true
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: permission
        description: "The permission to grant the team on this repository. We accept the
          following permissions to be set: `pull`, `triage`, `push`, `maintain`,
          `admin` and you can also specify a custom repository role name, if the
          owning organization has defined any. If no permission is specified,
          the team's `permission` attribute will be used to determine what
          permission to grant the team on this repository."
        paramKey: permission
        in: body
        schema:
          type: string
        required: false
    requestBodyType: json
  - moduleName: Teams / Repo / Remove
    method: delete
    path: /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}
    description: >-
      If the authenticated user is an organization owner or a team maintainer,
      they can remove any repositories from the team. To remove a repository
      from a team as an organization member, the authenticated user must have
      admin access to the repository and must be able to see the team. This does
      not delete the repository, it just removes it from the team.


      > [!NOTE]

      > You can also specify a team by `org_id` and `team_id` using the route
      `DELETE /organizations/{org_id}/team/{team_id}/repos/{owner}/{repo}`.
    externalDocs: https://docs.github.com/rest/teams/teams#remove-a-repository-from-a-team
    params:
      - paramName: org
        description: The organization name. The name is not case sensitive.
        paramKey: org
        in: path
        schema:
          type: string
        required: true
      - paramName: teamSlug
        description: The slug of the team name.
        paramKey: team_slug
        in: path
        schema:
          type: string
        required: true
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
  - moduleName: Teams / Child Teams / List
    method: get
    path: /orgs/{org}/teams/{team_slug}/teams
    description: >-
      Lists the child teams of the team specified by `{team_slug}`.


      > [!NOTE]

      > You can also specify a team by `org_id` and `team_id` using the route
      `GET /organizations/{org_id}/team/{team_id}/teams`.
    externalDocs: https://docs.github.com/rest/teams/teams#list-child-teams
    params:
      - paramName: org
        description: The organization name. The name is not case sensitive.
        paramKey: org
        in: path
        schema:
          type: string
        required: true
      - paramName: teamSlug
        description: The slug of the team name.
        paramKey: team_slug
        in: path
        schema:
          type: string
        required: true
      - paramName: perPage
        description: The number of results per page (max 100). For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: per_page
        in: query
        schema:
          type: number
          default: 30
        required: false
      - paramName: page
        description: The page number of the results to fetch. For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: page
        in: query
        schema:
          type: number
          default: 1
        required: false
  - moduleName: Orgs / Security Product / Enable Or Disable
    method: post
    path: /orgs/{org}/{security_product}/{enablement}
    description: >-
      > [!WARNING]

      > **Closing down notice:** The ability to enable or disable a security
      feature for all eligible repositories in an organization is closing down.
      Please use [code security
      configurations](https://docs.github.com/rest/code-security/configurations)
      instead. For more information, see the
      [changelog](https://github.blog/changelog/2024-07-22-deprecation-of-api-endpoint-to-enable-or-disable-a-security-feature-for-an-organization/).


      Enables or disables the specified security feature for all eligible
      repositories in an organization. For more information, see "[Managing
      security managers in your
      organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."


      The authenticated user must be an organization owner or be member of a
      team with the security manager role to use this endpoint.


      OAuth app tokens and personal access tokens (classic) need the
      `admin:org`, `write:org`, or `repo` scopes to use this endpoint.
    externalDocs: https://docs.github.com/rest/orgs/orgs#enable-or-disable-a-security-feature-for-an-organization
    params:
      - paramName: org
        description: The organization name. The name is not case sensitive.
        paramKey: org
        in: path
        schema:
          type: string
        required: true
      - paramName: securityProduct
        description: The security feature to enable or disable.
        paramKey: security_product
        in: path
        schema:
          type: string
          enum:
            - dependency_graph
            - dependabot_alerts
            - dependabot_security_updates
            - advanced_security
            - code_scanning_default_setup
            - secret_scanning
            - secret_scanning_push_protection
        required: true
      - paramName: enablement
        description: >-
          The action to take.


          `enable_all` means to enable the specified security feature for all
          repositories in the organization.

          `disable_all` means to disable the specified security feature for all
          repositories in the organization.
        paramKey: enablement
        in: path
        schema:
          type: string
          enum:
            - enable_all
            - disable_all
        required: true
      - paramName: requestBody
        paramKey: ""
        description: ""
        in: body_raw
        schema:
          type: any
        required: true
    requestBodyType: json
  - moduleName: Projects / Card / Get
    method: get
    path: /projects/columns/cards/{card_id}
    description: Gets information about a project card.
    externalDocs: https://docs.github.com/rest/projects/cards#get-a-project-card
    params:
      - paramName: cardId
        description: The unique identifier of the card.
        paramKey: card_id
        in: path
        schema:
          type: number
        required: true
  - moduleName: Projects / Card / Update
    method: patch
    path: /projects/columns/cards/{card_id}
    description: ""
    externalDocs: https://docs.github.com/rest/projects/cards#update-an-existing-project-card
    params:
      - paramName: cardId
        description: The unique identifier of the card.
        paramKey: card_id
        in: path
        schema:
          type: number
        required: true
      - paramName: note
        description: The project card's note
        paramKey: note
        in: body
        schema:
          type: string
        required: false
      - paramName: archived
        description: Whether or not the card is archived
        paramKey: archived
        in: body
        schema:
          type: boolean
        required: false
    requestBodyType: json
  - moduleName: Projects / Card / Delete
    method: delete
    path: /projects/columns/cards/{card_id}
    description: Deletes a project card
    externalDocs: https://docs.github.com/rest/projects/cards#delete-a-project-card
    params:
      - paramName: cardId
        description: The unique identifier of the card.
        paramKey: card_id
        in: path
        schema:
          type: number
        required: true
  - moduleName: Projects / Card / Move
    method: post
    path: /projects/columns/cards/{card_id}/moves
    description: ""
    externalDocs: https://docs.github.com/rest/projects/cards#move-a-project-card
    params:
      - paramName: cardId
        description: The unique identifier of the card.
        paramKey: card_id
        in: path
        schema:
          type: number
        required: true
      - paramName: position
        description: "The position of the card in a column. Can be one of: `top`,
          `bottom`, or `after:<card_id>` to place after the specified card."
        paramKey: position
        in: body
        schema:
          type: string
        required: true
      - paramName: columnId
        description: The unique identifier of the column the card should be moved to
        paramKey: column_id
        in: body
        schema:
          type: number
        required: false
    requestBodyType: json
  - moduleName: Projects / Column / Get
    method: get
    path: /projects/columns/{column_id}
    description: Gets information about a project column.
    externalDocs: https://docs.github.com/rest/projects/columns#get-a-project-column
    params:
      - paramName: columnId
        description: The unique identifier of the column.
        paramKey: column_id
        in: path
        schema:
          type: number
        required: true
  - moduleName: Projects / Column / Update
    method: patch
    path: /projects/columns/{column_id}
    description: ""
    externalDocs: https://docs.github.com/rest/projects/columns#update-an-existing-project-column
    params:
      - paramName: columnId
        description: The unique identifier of the column.
        paramKey: column_id
        in: path
        schema:
          type: number
        required: true
      - paramName: name
        description: Name of the project column
        paramKey: name
        in: body
        schema:
          type: string
        required: true
    requestBodyType: json
  - moduleName: Projects / Column / Delete
    method: delete
    path: /projects/columns/{column_id}
    description: Deletes a project column.
    externalDocs: https://docs.github.com/rest/projects/columns#delete-a-project-column
    params:
      - paramName: columnId
        description: The unique identifier of the column.
        paramKey: column_id
        in: path
        schema:
          type: number
        required: true
  - moduleName: Projects / Cards / List
    method: get
    path: /projects/columns/{column_id}/cards
    description: Lists the project cards in a project.
    externalDocs: https://docs.github.com/rest/projects/cards#list-project-cards
    params:
      - paramName: columnId
        description: The unique identifier of the column.
        paramKey: column_id
        in: path
        schema:
          type: number
        required: true
      - paramName: archivedState
        description: Filters the project cards that are returned by the card's state.
        paramKey: archived_state
        in: query
        schema:
          type: string
          default: not_archived
          enum:
            - all
            - archived
            - not_archived
        required: false
      - paramName: perPage
        description: The number of results per page (max 100). For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: per_page
        in: query
        schema:
          type: number
          default: 30
        required: false
      - paramName: page
        description: The page number of the results to fetch. For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: page
        in: query
        schema:
          type: number
          default: 1
        required: false
  - moduleName: Projects / Card / Create
    method: post
    path: /projects/columns/{column_id}/cards
    description: ""
    externalDocs: https://docs.github.com/rest/projects/cards#create-a-project-card
    params:
      - paramName: columnId
        description: The unique identifier of the column.
        paramKey: column_id
        in: path
        schema:
          type: number
        required: true
      - paramName: requestBody
        paramKey: ""
        description: ""
        in: body_raw
        schema:
          type: any
        required: true
    requestBodyType: json
  - moduleName: Projects / Column / Move
    method: post
    path: /projects/columns/{column_id}/moves
    description: ""
    externalDocs: https://docs.github.com/rest/projects/columns#move-a-project-column
    params:
      - paramName: columnId
        description: The unique identifier of the column.
        paramKey: column_id
        in: path
        schema:
          type: number
        required: true
      - paramName: position
        description: "The position of the column in a project. Can be one of: `first`,
          `last`, or `after:<column_id>` to place after the specified column."
        paramKey: position
        in: body
        schema:
          type: string
        required: true
    requestBodyType: json
  - moduleName: Projects / Get
    method: get
    path: /projects/{project_id}
    description: Gets a project by its `id`. Returns a `404 Not Found` status if
      projects are disabled. If you do not have sufficient privileges to perform
      this action, a `401 Unauthorized` or `410 Gone` status is returned.
    externalDocs: https://docs.github.com/rest/projects/projects#get-a-project
    params:
      - paramName: projectId
        description: The unique identifier of the project.
        paramKey: project_id
        in: path
        schema:
          type: number
        required: true
  - moduleName: Projects / Update
    method: patch
    path: /projects/{project_id}
    description: Updates a project board's information. Returns a `404 Not Found`
      status if projects are disabled. If you do not have sufficient privileges
      to perform this action, a `401 Unauthorized` or `410 Gone` status is
      returned.
    externalDocs: https://docs.github.com/rest/projects/projects#update-a-project
    params:
      - paramName: projectId
        description: The unique identifier of the project.
        paramKey: project_id
        in: path
        schema:
          type: number
        required: true
      - paramName: name
        description: Name of the project
        paramKey: name
        in: body
        schema:
          type: string
        required: false
      - paramName: body
        description: Body of the project
        paramKey: body
        in: body
        schema:
          type: string
        required: false
      - paramName: state
        description: State of the project; either 'open' or 'closed'
        paramKey: state
        in: body
        schema:
          type: string
        required: false
      - paramName: organizationPermission
        description: The baseline permission that all organization members have on this
          project
        paramKey: organization_permission
        in: body
        schema:
          type: string
          enum:
            - read
            - write
            - admin
            - none
        required: false
      - paramName: private
        description: Whether or not this project can be seen by everyone.
        paramKey: private
        in: body
        schema:
          type: boolean
        required: false
    requestBodyType: json
  - moduleName: Projects / Delete
    method: delete
    path: /projects/{project_id}
    description: Deletes a project board. Returns a `404 Not Found` status if
      projects are disabled.
    externalDocs: https://docs.github.com/rest/projects/projects#delete-a-project
    params:
      - paramName: projectId
        description: The unique identifier of the project.
        paramKey: project_id
        in: path
        schema:
          type: number
        required: true
  - moduleName: Projects / Collaborators / List
    method: get
    path: /projects/{project_id}/collaborators
    description: Lists the collaborators for an organization project. For a project,
      the list of collaborators includes outside collaborators, organization
      members that are direct collaborators, organization members with access
      through team memberships, organization members with access through default
      organization permissions, and organization owners. You must be an
      organization owner or a project `admin` to list collaborators.
    externalDocs: https://docs.github.com/rest/projects/collaborators#list-project-collaborators
    params:
      - paramName: projectId
        description: The unique identifier of the project.
        paramKey: project_id
        in: path
        schema:
          type: number
        required: true
      - paramName: affiliation
        description: Filters the collaborators by their affiliation. `outside` means
          outside collaborators of a project that are not a member of the
          project's organization. `direct` means collaborators with permissions
          to a project, regardless of organization membership status. `all`
          means all collaborators the authenticated user can see.
        paramKey: affiliation
        in: query
        schema:
          type: string
          default: all
          enum:
            - outside
            - direct
            - all
        required: false
      - paramName: perPage
        description: The number of results per page (max 100). For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: per_page
        in: query
        schema:
          type: number
          default: 30
        required: false
      - paramName: page
        description: The page number of the results to fetch. For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: page
        in: query
        schema:
          type: number
          default: 1
        required: false
  - moduleName: Projects / Collaborator / Add
    method: put
    path: /projects/{project_id}/collaborators/{username}
    description: Adds a collaborator to an organization project and sets their
      permission level. You must be an organization owner or a project `admin`
      to add a collaborator.
    externalDocs: https://docs.github.com/rest/projects/collaborators#add-project-collaborator
    params:
      - paramName: projectId
        description: The unique identifier of the project.
        paramKey: project_id
        in: path
        schema:
          type: number
        required: true
      - paramName: username
        description: The handle for the GitHub user account.
        paramKey: username
        in: path
        schema:
          type: string
        required: true
      - paramName: permission
        description: The permission to grant the collaborator.
        paramKey: permission
        in: body
        schema:
          type: string
          default: write
          enum:
            - read
            - write
            - admin
        required: false
    requestBodyType: json
  - moduleName: Projects / Collaborator / Remove
    method: delete
    path: /projects/{project_id}/collaborators/{username}
    description: Removes a collaborator from an organization project. You must be an
      organization owner or a project `admin` to remove a collaborator.
    externalDocs: https://docs.github.com/rest/projects/collaborators#remove-user-as-a-collaborator
    params:
      - paramName: projectId
        description: The unique identifier of the project.
        paramKey: project_id
        in: path
        schema:
          type: number
        required: true
      - paramName: username
        description: The handle for the GitHub user account.
        paramKey: username
        in: path
        schema:
          type: string
        required: true
  - moduleName: Projects / User Permission / Get
    method: get
    path: /projects/{project_id}/collaborators/{username}/permission
    description: "Returns the collaborator's permission level for an organization
      project. Possible values for the `permission` key: `admin`, `write`,
      `read`, `none`. You must be an organization owner or a project `admin` to
      review a user's permission level."
    externalDocs: https://docs.github.com/rest/projects/collaborators#get-project-permission-for-a-user
    params:
      - paramName: projectId
        description: The unique identifier of the project.
        paramKey: project_id
        in: path
        schema:
          type: number
        required: true
      - paramName: username
        description: The handle for the GitHub user account.
        paramKey: username
        in: path
        schema:
          type: string
        required: true
  - moduleName: Projects / Columns / List
    method: get
    path: /projects/{project_id}/columns
    description: Lists the project columns in a project.
    externalDocs: https://docs.github.com/rest/projects/columns#list-project-columns
    params:
      - paramName: projectId
        description: The unique identifier of the project.
        paramKey: project_id
        in: path
        schema:
          type: number
        required: true
      - paramName: perPage
        description: The number of results per page (max 100). For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: per_page
        in: query
        schema:
          type: number
          default: 30
        required: false
      - paramName: page
        description: The page number of the results to fetch. For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: page
        in: query
        schema:
          type: number
          default: 1
        required: false
  - moduleName: Projects / Column / Create
    method: post
    path: /projects/{project_id}/columns
    description: Creates a new project column.
    externalDocs: https://docs.github.com/rest/projects/columns#create-a-project-column
    params:
      - paramName: projectId
        description: The unique identifier of the project.
        paramKey: project_id
        in: path
        schema:
          type: number
        required: true
      - paramName: name
        description: Name of the project column
        paramKey: name
        in: body
        schema:
          type: string
        required: true
    requestBodyType: json
  - moduleName: Repos / Get
    method: get
    path: /repos/{owner}/{repo}
    description: >-
      The `parent` and `source` objects are present when the repository is a
      fork. `parent` is the repository this repository was forked from, `source`
      is the ultimate source for the network.


      > [!NOTE]

      > In order to see the `security_and_analysis` block for a repository you
      must have admin permissions for the repository or be an owner or security
      manager for the organization that owns the repository. For more
      information, see "[Managing security managers in your
      organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
    externalDocs: https://docs.github.com/rest/repos/repos#get-a-repository
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
  - moduleName: Repos / Update
    method: patch
    path: /repos/{owner}/{repo}
    description: "**Note**: To edit a repository's topics, use the [Replace all
      repository
      topics](https://docs.github.com/rest/repos/repos#replace-all-repository-t\
      opics) endpoint."
    externalDocs: https://docs.github.com/rest/repos/repos#update-a-repository
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: name
        description: The name of the repository.
        paramKey: name
        in: body
        schema:
          type: string
        required: false
      - paramName: description
        description: A short description of the repository.
        paramKey: description
        in: body
        schema:
          type: string
        required: false
      - paramName: homepage
        description: A URL with more information about the repository.
        paramKey: homepage
        in: body
        schema:
          type: string
        required: false
      - paramName: private
        description: >-
          Either `true` to make the repository private or `false` to make it
          public. Default: `false`.

          **Note**: You will get a `422` error if the organization restricts
          [changing repository
          visibility](https://docs.github.com/articles/repository-permission-levels-for-an-organization#changing-the-visibility-of-repositories)
          to organization owners and a non-owner tries to change the value of
          private.
        paramKey: private
        in: body
        schema:
          type: boolean
          default: false
        required: false
      - paramName: visibility
        description: The visibility of the repository.
        paramKey: visibility
        in: body
        schema:
          type: string
          enum:
            - public
            - private
        required: false
      - paramName: securityAndAnalysis
        description: >-
          Specify which security and analysis features to enable or disable for
          the repository.


          To use this parameter, you must have admin permissions for the
          repository or be an owner or security manager for the organization
          that owns the repository. For more information, see "[Managing
          security managers in your
          organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."


          For example, to enable GitHub Advanced Security, use this data in the
          body of the `PATCH` request:

          `{ "security_and_analysis": {"advanced_security": { "status":
          "enabled" } } }`.


          You can check which security and analysis features are currently
          enabled by using a `GET /repos/{owner}/{repo}` request.
        paramKey: security_and_analysis
        in: body
        schema:
          type: any
        required: false
      - paramName: hasIssues
        description: Either `true` to enable issues for this repository or `false` to
          disable them.
        paramKey: has_issues
        in: body
        schema:
          type: boolean
          default: true
        required: false
      - paramName: hasProjects
        description: Either `true` to enable projects for this repository or `false` to
          disable them. **Note:** If you're creating a repository in an
          organization that has disabled repository projects, the default is
          `false`, and if you pass `true`, the API returns an error.
        paramKey: has_projects
        in: body
        schema:
          type: boolean
          default: true
        required: false
      - paramName: hasWiki
        description: Either `true` to enable the wiki for this repository or `false` to
          disable it.
        paramKey: has_wiki
        in: body
        schema:
          type: boolean
          default: true
        required: false
      - paramName: isTemplate
        description: Either `true` to make this repo available as a template repository
          or `false` to prevent it.
        paramKey: is_template
        in: body
        schema:
          type: boolean
          default: false
        required: false
      - paramName: defaultBranch
        description: Updates the default branch for this repository.
        paramKey: default_branch
        in: body
        schema:
          type: string
        required: false
      - paramName: allowSquashMerge
        description: Either `true` to allow squash-merging pull requests, or `false` to
          prevent squash-merging.
        paramKey: allow_squash_merge
        in: body
        schema:
          type: boolean
          default: true
        required: false
      - paramName: allowMergeCommit
        description: Either `true` to allow merging pull requests with a merge commit,
          or `false` to prevent merging pull requests with merge commits.
        paramKey: allow_merge_commit
        in: body
        schema:
          type: boolean
          default: true
        required: false
      - paramName: allowRebaseMerge
        description: Either `true` to allow rebase-merging pull requests, or `false` to
          prevent rebase-merging.
        paramKey: allow_rebase_merge
        in: body
        schema:
          type: boolean
          default: true
        required: false
      - paramName: allowAutoMerge
        description: Either `true` to allow auto-merge on pull requests, or `false` to
          disallow auto-merge.
        paramKey: allow_auto_merge
        in: body
        schema:
          type: boolean
          default: false
        required: false
      - paramName: deleteBranchOnMerge
        description: Either `true` to allow automatically deleting head branches when
          pull requests are merged, or `false` to prevent automatic deletion.
        paramKey: delete_branch_on_merge
        in: body
        schema:
          type: boolean
          default: false
        required: false
      - paramName: allowUpdateBranch
        description: Either `true` to always allow a pull request head branch that is
          behind its base branch to be updated even if it is not required to be
          up to date before merging, or false otherwise.
        paramKey: allow_update_branch
        in: body
        schema:
          type: boolean
          default: false
        required: false
      - paramName: useSquashPrTitleAsDefault
        description: Either `true` to allow squash-merge commits to use pull request
          title, or `false` to use commit message. **This property is closing
          down. Please use `squash_merge_commit_title` instead.
        paramKey: use_squash_pr_title_as_default
        in: body
        schema:
          type: boolean
          default: false
        required: false
      - paramName: squashMergeCommitTitle
        description: >-
          Required when using `squash_merge_commit_message`.


          The default value for a squash merge commit title:


          - `PR_TITLE` - default to the pull request's title.

          - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one
          commit) or the pull request's title (when more than one commit).
        paramKey: squash_merge_commit_title
        in: body
        schema:
          type: string
          enum:
            - PR_TITLE
            - COMMIT_OR_PR_TITLE
        required: false
      - paramName: squashMergeCommitMessage
        description: |-
          The default value for a squash merge commit message:

          - `PR_BODY` - default to the pull request's body.
          - `COMMIT_MESSAGES` - default to the branch's commit messages.
          - `BLANK` - default to a blank commit message.
        paramKey: squash_merge_commit_message
        in: body
        schema:
          type: string
          enum:
            - PR_BODY
            - COMMIT_MESSAGES
            - BLANK
        required: false
      - paramName: mergeCommitTitle
        description: >-
          Required when using `merge_commit_message`.


          The default value for a merge commit title.


          - `PR_TITLE` - default to the pull request's title.

          - `MERGE_MESSAGE` - default to the classic title for a merge message
          (e.g., Merge pull request #123 from branch-name).
        paramKey: merge_commit_title
        in: body
        schema:
          type: string
          enum:
            - PR_TITLE
            - MERGE_MESSAGE
        required: false
      - paramName: mergeCommitMessage
        description: |-
          The default value for a merge commit message.

          - `PR_TITLE` - default to the pull request's title.
          - `PR_BODY` - default to the pull request's body.
          - `BLANK` - default to a blank commit message.
        paramKey: merge_commit_message
        in: body
        schema:
          type: string
          enum:
            - PR_BODY
            - PR_TITLE
            - BLANK
        required: false
      - paramName: archived
        description: Whether to archive this repository. `false` will unarchive a
          previously archived repository.
        paramKey: archived
        in: body
        schema:
          type: boolean
          default: false
        required: false
      - paramName: allowForking
        description: Either `true` to allow private forks, or `false` to prevent private
          forks.
        paramKey: allow_forking
        in: body
        schema:
          type: boolean
          default: false
        required: false
      - paramName: webCommitSignoffRequired
        description: Either `true` to require contributors to sign off on web-based
          commits, or `false` to not require contributors to sign off on
          web-based commits.
        paramKey: web_commit_signoff_required
        in: body
        schema:
          type: boolean
          default: false
        required: false
    requestBodyType: json
  - moduleName: Repos / Delete
    method: delete
    path: /repos/{owner}/{repo}
    description: >-
      Deleting a repository requires admin access.


      If an organization owner has configured the organization to prevent
      members from deleting organization-owned

      repositories, you will get a `403 Forbidden` response.


      OAuth app tokens and personal access tokens (classic) need the
      `delete_repo` scope to use this endpoint.
    externalDocs: https://docs.github.com/rest/repos/repos#delete-a-repository
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
  - moduleName: Repos / Activities / List
    method: get
    path: /repos/{owner}/{repo}/activity
    description: >-
      Lists a detailed history of changes to a repository, such as pushes,
      merges, force pushes, and branch changes, and associates these changes
      with commits and users.


      For more information about viewing repository activity,

      see "[Viewing activity and data for your
      repository](https://docs.github.com/repositories/viewing-activity-and-data-for-your-repository)."
    externalDocs: https://docs.github.com/rest/repos/repos#list-repository-activities
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: direction
        description: The direction to sort the results by.
        paramKey: direction
        in: query
        schema:
          type: string
          default: desc
          enum:
            - asc
            - desc
        required: false
      - paramName: perPage
        description: The number of results per page (max 100). For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: per_page
        in: query
        schema:
          type: number
          default: 30
        required: false
      - paramName: before
        description: A cursor, as given in the [Link
          header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers).
          If specified, the query only searches for results before this cursor.
          For more information, see "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: before
        in: query
        schema:
          type: string
        required: false
      - paramName: after
        description: A cursor, as given in the [Link
          header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers).
          If specified, the query only searches for results after this cursor.
          For more information, see "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: after
        in: query
        schema:
          type: string
        required: false
      - paramName: ref
        description: >-
          The Git reference for the activities you want to list.


          The `ref` for a branch can be formatted either as
          `refs/heads/BRANCH_NAME` or `BRANCH_NAME`, where `BRANCH_NAME` is the
          name of your branch.
        paramKey: ref
        in: query
        schema:
          type: string
        required: false
      - paramName: actor
        description: The GitHub username to use to filter by the actor who performed the
          activity.
        paramKey: actor
        in: query
        schema:
          type: string
        required: false
      - paramName: timePeriod
        description: >-
          The time period to filter by.


          For example, `day` will filter for activity that occurred in the past
          24 hours, and `week` will filter for activity that occurred in the
          past 7 days (168 hours).
        paramKey: time_period
        in: query
        schema:
          type: string
          enum:
            - day
            - week
            - month
            - quarter
            - year
        required: false
      - paramName: activityType
        description: >-
          The activity type to filter by.


          For example, you can choose to filter by "force_push", to see all
          force pushes to the repository.
        paramKey: activity_type
        in: query
        schema:
          type: string
          enum:
            - push
            - force_push
            - branch_creation
            - branch_deletion
            - pr_merge
            - merge_queue_merge
        required: false
  - moduleName: Issues / List Assignees
    method: get
    path: /repos/{owner}/{repo}/assignees
    description: Lists the [available
      assignees](https://docs.github.com/articles/assigning-issues-and-pull-requests-to-other-github-users/)
      for issues in a repository.
    externalDocs: https://docs.github.com/rest/issues/assignees#list-assignees
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: perPage
        description: The number of results per page (max 100). For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: per_page
        in: query
        schema:
          type: number
          default: 30
        required: false
      - paramName: page
        description: The page number of the results to fetch. For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: page
        in: query
        schema:
          type: number
          default: 1
        required: false
  - moduleName: Issues / Check Repo Assignee
    method: get
    path: /repos/{owner}/{repo}/assignees/{assignee}
    description: >-
      Checks if a user has permission to be assigned to an issue in this
      repository.


      If the `assignee` can be assigned to issues in the repository, a `204`
      header with no content is returned.


      Otherwise a `404` status code is returned.
    externalDocs: https://docs.github.com/rest/issues/assignees#check-if-a-user-can-be-assigned
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: assignee
        description: ""
        paramKey: assignee
        in: path
        schema:
          type: string
        required: true
  - moduleName: Repos / Attestation / Create
    method: post
    path: /repos/{owner}/{repo}/attestations
    description: >-
      Store an artifact attestation and associate it with a repository.


      The authenticated user must have write permission to the repository and,
      if using a fine-grained access token, the `attestations:write` permission
      is required.


      Artifact attestations are meant to be created using the [attest
      action](https://github.com/actions/attest). For more information, see our
      guide on [using artifact attestations to establish a build's
      provenance](https://docs.github.com/actions/security-guides/using-artifact-attestations-to-establish-provenance-for-builds).
    externalDocs: https://docs.github.com/rest/repos/repos#create-an-attestation
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: bundle
        description: >-
          The attestation's Sigstore Bundle.

          Refer to the [Sigstore Bundle
          Specification](https://github.com/sigstore/protobuf-specs/blob/main/protos/sigstore_bundle.proto)
          for more information.
        paramKey: bundle
        in: body
        schema:
          type: any
        required: true
    requestBodyType: json
  - moduleName: Repos / Attestations / List
    method: get
    path: /repos/{owner}/{repo}/attestations/{subject_digest}
    description: >-
      List a collection of artifact attestations with a given subject digest
      that are associated with a repository.


      The authenticated user making the request must have read access to the
      repository. In addition, when using a fine-grained access token the
      `attestations:read` permission is required.


      **Please note:** in order to offer meaningful security benefits, an
      attestation's signature and timestamps **must** be cryptographically
      verified, and the identity of the attestation signer **must** be
      validated. Attestations can be verified using the [GitHub CLI `attestation
      verify` command](https://cli.github.com/manual/gh_attestation_verify). For
      more information, see [our guide on how to use artifact attestations to
      establish a build's
      provenance](https://docs.github.com/actions/security-guides/using-artifact-attestations-to-establish-provenance-for-builds).
    externalDocs: https://docs.github.com/rest/repos/repos#list-attestations
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: perPage
        description: The number of results per page (max 100). For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: per_page
        in: query
        schema:
          type: number
          default: 30
        required: false
      - paramName: before
        description: A cursor, as given in the [Link
          header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers).
          If specified, the query only searches for results before this cursor.
          For more information, see "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: before
        in: query
        schema:
          type: string
        required: false
      - paramName: after
        description: A cursor, as given in the [Link
          header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers).
          If specified, the query only searches for results after this cursor.
          For more information, see "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: after
        in: query
        schema:
          type: string
        required: false
      - paramName: subjectDigest
        description: The parameter should be set to the attestation's subject's SHA256
          digest, in the form `sha256:HEX_DIGEST`.
        paramKey: subject_digest
        in: path
        schema:
          type: string
        required: true
  - moduleName: Repos / Autolinks / List
    method: get
    path: /repos/{owner}/{repo}/autolinks
    description: >-
      Gets all autolinks that are configured for a repository.


      Information about autolinks are only available to repository
      administrators.
    externalDocs: https://docs.github.com/rest/repos/autolinks#get-all-autolinks-of-a-repository
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
  - moduleName: Repos / Autolink / Create
    method: post
    path: /repos/{owner}/{repo}/autolinks
    description: Users with admin access to the repository can create an autolink.
    externalDocs: https://docs.github.com/rest/repos/autolinks#create-an-autolink-reference-for-a-repository
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: keyPrefix
        description: This prefix appended by certain characters will generate a link any
          time it is found in an issue, pull request, or commit.
        paramKey: key_prefix
        in: body
        schema:
          type: string
        required: true
      - paramName: urlTemplate
        description: The URL must contain `<num>` for the reference number. `<num>`
          matches different characters depending on the value of
          `is_alphanumeric`.
        paramKey: url_template
        in: body
        schema:
          type: string
        required: true
      - paramName: isAlphanumeric
        description: Whether this autolink reference matches alphanumeric characters. If
          true, the `<num>` parameter of the `url_template` matches alphanumeric
          characters `A-Z` (case insensitive), `0-9`, and `-`. If false, this
          autolink reference only matches numeric characters.
        paramKey: is_alphanumeric
        in: body
        schema:
          type: boolean
          default: true
        required: false
    requestBodyType: json
  - moduleName: Repos / Autolink / Get
    method: get
    path: /repos/{owner}/{repo}/autolinks/{autolink_id}
    description: >-
      This returns a single autolink reference by ID that was configured for the
      given repository.


      Information about autolinks are only available to repository
      administrators.
    externalDocs: https://docs.github.com/rest/repos/autolinks#get-an-autolink-reference-of-a-repository
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: autolinkId
        description: The unique identifier of the autolink.
        paramKey: autolink_id
        in: path
        schema:
          type: number
        required: true
  - moduleName: Repos / Autolink / Delete
    method: delete
    path: /repos/{owner}/{repo}/autolinks/{autolink_id}
    description: >-
      This deletes a single autolink reference by ID that was configured for the
      given repository.


      Information about autolinks are only available to repository
      administrators.
    externalDocs: https://docs.github.com/rest/repos/autolinks#delete-an-autolink-reference-from-a-repository
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: autolinkId
        description: The unique identifier of the autolink.
        paramKey: autolink_id
        in: path
        schema:
          type: number
        required: true
  - moduleName: Repos / Automated Security Fixes / Check
    method: get
    path: /repos/{owner}/{repo}/automated-security-fixes
    description: Shows whether automated security fixes are enabled, disabled or
      paused for a repository. The authenticated user must have admin read
      access to the repository. For more information, see "[Configuring
      automated security
      fixes](https://docs.github.com/articles/configuring-automated-security-fixes)".
    externalDocs: https://docs.github.com/rest/repos/repos#check-if-automated-security-fixes-are-enabled-for-a-repository
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
  - moduleName: Repos / Automated Security Fixes / Enable
    method: put
    path: /repos/{owner}/{repo}/automated-security-fixes
    description: Enables automated security fixes for a repository. The
      authenticated user must have admin access to the repository. For more
      information, see "[Configuring automated security
      fixes](https://docs.github.com/articles/configuring-automated-security-fixes)".
    externalDocs: https://docs.github.com/rest/repos/repos#enable-automated-security-fixes
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
  - moduleName: Repos / Automated Security Fixes / Disable
    method: delete
    path: /repos/{owner}/{repo}/automated-security-fixes
    description: Disables automated security fixes for a repository. The
      authenticated user must have admin access to the repository. For more
      information, see "[Configuring automated security
      fixes](https://docs.github.com/articles/configuring-automated-security-fixes)".
    externalDocs: https://docs.github.com/rest/repos/repos#disable-automated-security-fixes
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
  - moduleName: Repos / Branches / List
    method: get
    path: /repos/{owner}/{repo}/branches
    description: ""
    externalDocs: https://docs.github.com/rest/branches/branches#list-branches
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: protected
        description: Setting to `true` returns only branches protected by branch
          protections or rulesets. When set to `false`, only unprotected
          branches are returned. Omitting this parameter returns all branches.
        paramKey: protected
        in: query
        schema:
          type: boolean
        required: false
      - paramName: perPage
        description: The number of results per page (max 100). For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: per_page
        in: query
        schema:
          type: number
          default: 30
        required: false
      - paramName: page
        description: The page number of the results to fetch. For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: page
        in: query
        schema:
          type: number
          default: 1
        required: false
  - moduleName: Repos / Branch / Get
    method: get
    path: /repos/{owner}/{repo}/branches/{branch}
    description: ""
    externalDocs: https://docs.github.com/rest/branches/branches#get-a-branch
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: branch
        description: The name of the branch. Cannot contain wildcard characters. To use
          wildcard characters in branch names, use [the GraphQL
          API](https://docs.github.com/graphql).
        paramKey: branch
        in: path
        schema:
          type: string
        required: true
  - moduleName: Repos / Branch Protection / Get
    method: get
    path: /repos/{owner}/{repo}/branches/{branch}/protection
    description: Protected branches are available in public repositories with GitHub
      Free and GitHub Free for organizations, and in public and private
      repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and
      GitHub Enterprise Server. For more information, see [GitHub's
      products](https://docs.github.com/github/getting-started-with-github/githubs-products)
      in the GitHub Help documentation.
    externalDocs: https://docs.github.com/rest/branches/branch-protection#get-branch-protection
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: branch
        description: The name of the branch. Cannot contain wildcard characters. To use
          wildcard characters in branch names, use [the GraphQL
          API](https://docs.github.com/graphql).
        paramKey: branch
        in: path
        schema:
          type: string
        required: true
  - moduleName: Repos / Branch Protection / Update
    method: put
    path: /repos/{owner}/{repo}/branches/{branch}/protection
    description: >-
      Protected branches are available in public repositories with GitHub Free
      and GitHub Free for organizations, and in public and private repositories
      with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub
      Enterprise Server. For more information, see [GitHub's
      products](https://docs.github.com/github/getting-started-with-github/githubs-products)
      in the GitHub Help documentation.


      Protecting a branch requires admin or owner permissions to the repository.


      > [!NOTE]

      > Passing new arrays of `users` and `teams` replaces their previous
      values.


      > [!NOTE]

      > The list of users, apps, and teams in total is limited to 100 items.
    externalDocs: https://docs.github.com/rest/branches/branch-protection#update-branch-protection
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: branch
        description: The name of the branch. Cannot contain wildcard characters. To use
          wildcard characters in branch names, use [the GraphQL
          API](https://docs.github.com/graphql).
        paramKey: branch
        in: path
        schema:
          type: string
        required: true
      - paramName: requiredStatusChecks
        description: Require status checks to pass before merging. Set to `null` to disable.
        paramKey: required_status_checks
        in: body
        schema:
          type: any
        required: true
      - paramName: enforceAdmins
        description: Enforce all configured restrictions for administrators. Set to
          `true` to enforce required status checks for repository
          administrators. Set to `null` to disable.
        paramKey: enforce_admins
        in: body
        schema:
          type: boolean
        required: true
      - paramName: requiredPullRequestReviews
        description: Require at least one approving review on a pull request, before
          merging. Set to `null` to disable.
        paramKey: required_pull_request_reviews
        in: body
        schema:
          type: any
        required: true
      - paramName: restrictions
        description: Restrict who can push to the protected branch. User, app, and team
          `restrictions` are only available for organization-owned repositories.
          Set to `null` to disable.
        paramKey: restrictions
        in: body
        schema:
          type: any
        required: true
      - paramName: requiredLinearHistory
        description: 'Enforces a linear commit Git history, which prevents anyone from
          pushing merge commits to a branch. Set to `true` to enforce a linear
          commit history. Set to `false` to disable a linear commit Git history.
          Your repository must allow squash merging or rebase merging before you
          can enable a linear commit history. Default: `false`. For more
          information, see "[Requiring a linear commit
          history](https://docs.github.com/github/administering-a-repository/requiring-a-linear-commit-history)"
          in the GitHub Help documentation.'
        paramKey: required_linear_history
        in: body
        schema:
          type: boolean
        required: false
      - paramName: allowForcePushes
        description: 'Permits force pushes to the protected branch by anyone with write
          access to the repository. Set to `true` to allow force pushes. Set to
          `false` or `null` to block force pushes. Default: `false`. For more
          information, see "[Enabling force pushes to a protected
          branch](https://docs.github.com/github/administering-a-repository/enabling-force-pushes-to-a-protected-branch)"
          in the GitHub Help documentation."'
        paramKey: allow_force_pushes
        in: body
        schema:
          type: boolean
        required: false
      - paramName: allowDeletions
        description: 'Allows deletion of the protected branch by anyone with write
          access to the repository. Set to `false` to prevent deletion of the
          protected branch. Default: `false`. For more information, see
          "[Enabling force pushes to a protected
          branch](https://docs.github.com/github/administering-a-repository/enabling-force-pushes-to-a-protected-branch)"
          in the GitHub Help documentation.'
        paramKey: allow_deletions
        in: body
        schema:
          type: boolean
        required: false
      - paramName: blockCreations
        description: "If set to `true`, the `restrictions` branch protection settings
          which limits who can push will also block pushes which create new
          branches, unless the push is initiated by a user, team, or app which
          has the ability to push. Set to `true` to restrict new branch
          creation. Default: `false`."
        paramKey: block_creations
        in: body
        schema:
          type: boolean
        required: false
      - paramName: requiredConversationResolution
        description: "Requires all conversations on code to be resolved before a pull
          request can be merged into a branch that matches this rule. Set to
          `false` to disable. Default: `false`."
        paramKey: required_conversation_resolution
        in: body
        schema:
          type: boolean
        required: false
      - paramName: lockBranch
        description: "Whether to set the branch as read-only. If this is true, users
          will not be able to push to the branch. Default: `false`."
        paramKey: lock_branch
        in: body
        schema:
          type: boolean
          default: false
        required: false
      - paramName: allowForkSyncing
        description: "Whether users can pull changes from upstream when the branch is
          locked. Set to `true` to allow fork syncing. Set to `false` to prevent
          fork syncing. Default: `false`."
        paramKey: allow_fork_syncing
        in: body
        schema:
          type: boolean
          default: false
        required: false
    requestBodyType: json
  - moduleName: Repos / Branch Protection / Delete
    method: delete
    path: /repos/{owner}/{repo}/branches/{branch}/protection
    description: Protected branches are available in public repositories with GitHub
      Free and GitHub Free for organizations, and in public and private
      repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and
      GitHub Enterprise Server. For more information, see [GitHub's
      products](https://docs.github.com/github/getting-started-with-github/githubs-products)
      in the GitHub Help documentation.
    externalDocs: https://docs.github.com/rest/branches/branch-protection#delete-branch-protection
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: branch
        description: The name of the branch. Cannot contain wildcard characters. To use
          wildcard characters in branch names, use [the GraphQL
          API](https://docs.github.com/graphql).
        paramKey: branch
        in: path
        schema:
          type: string
        required: true
  - moduleName: Repos / Admin Branch Protection / Get
    method: get
    path: /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins
    description: Protected branches are available in public repositories with GitHub
      Free and GitHub Free for organizations, and in public and private
      repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and
      GitHub Enterprise Server. For more information, see [GitHub's
      products](https://docs.github.com/github/getting-started-with-github/githubs-products)
      in the GitHub Help documentation.
    externalDocs: https://docs.github.com/rest/branches/branch-protection#get-admin-branch-protection
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: branch
        description: The name of the branch. Cannot contain wildcard characters. To use
          wildcard characters in branch names, use [the GraphQL
          API](https://docs.github.com/graphql).
        paramKey: branch
        in: path
        schema:
          type: string
        required: true
  - moduleName: Repos / Admin Branch Protection / Set
    method: post
    path: /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins
    description: >-
      Protected branches are available in public repositories with GitHub Free
      and GitHub Free for organizations, and in public and private repositories
      with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub
      Enterprise Server. For more information, see [GitHub's
      products](https://docs.github.com/github/getting-started-with-github/githubs-products)
      in the GitHub Help documentation.


      Adding admin enforcement requires admin or owner permissions to the
      repository and branch protection to be enabled.
    externalDocs: https://docs.github.com/rest/branches/branch-protection#set-admin-branch-protection
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: branch
        description: The name of the branch. Cannot contain wildcard characters. To use
          wildcard characters in branch names, use [the GraphQL
          API](https://docs.github.com/graphql).
        paramKey: branch
        in: path
        schema:
          type: string
        required: true
  - moduleName: Repos / Admin Branch Protection / Delete
    method: delete
    path: /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins
    description: >-
      Protected branches are available in public repositories with GitHub Free
      and GitHub Free for organizations, and in public and private repositories
      with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub
      Enterprise Server. For more information, see [GitHub's
      products](https://docs.github.com/github/getting-started-with-github/githubs-products)
      in the GitHub Help documentation.


      Removing admin enforcement requires admin or owner permissions to the
      repository and branch protection to be enabled.
    externalDocs: https://docs.github.com/rest/branches/branch-protection#delete-admin-branch-protection
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: branch
        description: The name of the branch. Cannot contain wildcard characters. To use
          wildcard characters in branch names, use [the GraphQL
          API](https://docs.github.com/graphql).
        paramKey: branch
        in: path
        schema:
          type: string
        required: true
  - moduleName: Repos / Pull Request Review Protection / Get
    method: get
    path: /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews
    description: Protected branches are available in public repositories with GitHub
      Free and GitHub Free for organizations, and in public and private
      repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and
      GitHub Enterprise Server. For more information, see [GitHub's
      products](https://docs.github.com/github/getting-started-with-github/githubs-products)
      in the GitHub Help documentation.
    externalDocs: https://docs.github.com/rest/branches/branch-protection#get-pull-request-review-protection
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: branch
        description: The name of the branch. Cannot contain wildcard characters. To use
          wildcard characters in branch names, use [the GraphQL
          API](https://docs.github.com/graphql).
        paramKey: branch
        in: path
        schema:
          type: string
        required: true
  - moduleName: Repos / Pull Request Review Protection / Update
    method: patch
    path: /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews
    description: >-
      Protected branches are available in public repositories with GitHub Free
      and GitHub Free for organizations, and in public and private repositories
      with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub
      Enterprise Server. For more information, see [GitHub's
      products](https://docs.github.com/github/getting-started-with-github/githubs-products)
      in the GitHub Help documentation.


      Updating pull request review enforcement requires admin or owner
      permissions to the repository and branch protection to be enabled.


      > [!NOTE]

      > Passing new arrays of `users` and `teams` replaces their previous
      values.
    externalDocs: https://docs.github.com/rest/branches/branch-protection#update-pull-request-review-protection
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: branch
        description: The name of the branch. Cannot contain wildcard characters. To use
          wildcard characters in branch names, use [the GraphQL
          API](https://docs.github.com/graphql).
        paramKey: branch
        in: path
        schema:
          type: string
        required: true
      - paramName: dismissalRestrictions
        description: Specify which users, teams, and apps can dismiss pull request
          reviews. Pass an empty `dismissal_restrictions` object to disable.
          User and team `dismissal_restrictions` are only available for
          organization-owned repositories. Omit this parameter for personal
          repositories.
        paramKey: dismissal_restrictions
        in: body
        schema:
          type: any
        required: false
      - paramName: dismissStaleReviews
        description: Set to `true` if you want to automatically dismiss approving
          reviews when someone pushes a new commit.
        paramKey: dismiss_stale_reviews
        in: body
        schema:
          type: boolean
        required: false
      - paramName: requireCodeOwnerReviews
        description: Blocks merging pull requests until [code
          owners](https://docs.github.com/articles/about-code-owners/) have
          reviewed.
        paramKey: require_code_owner_reviews
        in: body
        schema:
          type: boolean
        required: false
      - paramName: requiredApprovingReviewCount
        description: Specifies the number of reviewers required to approve pull
          requests. Use a number between 1 and 6 or 0 to not require reviewers.
        paramKey: required_approving_review_count
        in: body
        schema:
          type: number
        required: false
      - paramName: requireLastPushApproval
        description: "Whether the most recent push must be approved by someone other
          than the person who pushed it. Default: `false`"
        paramKey: require_last_push_approval
        in: body
        schema:
          type: boolean
          default: false
        required: false
      - paramName: bypassPullRequestAllowances
        description: Allow specific users, teams, or apps to bypass pull request
          requirements.
        paramKey: bypass_pull_request_allowances
        in: body
        schema:
          type: any
        required: false
    requestBodyType: json
  - moduleName: Repos / Pull Request Review Protection / Delete
    method: delete
    path: /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews
    description: Protected branches are available in public repositories with GitHub
      Free and GitHub Free for organizations, and in public and private
      repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and
      GitHub Enterprise Server. For more information, see [GitHub's
      products](https://docs.github.com/github/getting-started-with-github/githubs-products)
      in the GitHub Help documentation.
    externalDocs: https://docs.github.com/rest/branches/branch-protection#delete-pull-request-review-protection
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: branch
        description: The name of the branch. Cannot contain wildcard characters. To use
          wildcard characters in branch names, use [the GraphQL
          API](https://docs.github.com/graphql).
        paramKey: branch
        in: path
        schema:
          type: string
        required: true
  - moduleName: Repos / Commit Signature Protection / Get
    method: get
    path: /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures
    description: >-
      Protected branches are available in public repositories with GitHub Free
      and GitHub Free for organizations, and in public and private repositories
      with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub
      Enterprise Server. For more information, see [GitHub's
      products](https://docs.github.com/github/getting-started-with-github/githubs-products)
      in the GitHub Help documentation.


      When authenticated with admin or owner permissions to the repository, you
      can use this endpoint to check whether a branch requires signed commits.
      An enabled status of `true` indicates you must sign commits on this
      branch. For more information, see [Signing commits with
      GPG](https://docs.github.com/articles/signing-commits-with-gpg) in GitHub
      Help.


      > [!NOTE]

      > You must enable branch protection to require signed commits.
    externalDocs: https://docs.github.com/rest/branches/branch-protection#get-commit-signature-protection
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: branch
        description: The name of the branch. Cannot contain wildcard characters. To use
          wildcard characters in branch names, use [the GraphQL
          API](https://docs.github.com/graphql).
        paramKey: branch
        in: path
        schema:
          type: string
        required: true
  - moduleName: Repos / Commit Signature Protection / Create
    method: post
    path: /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures
    description: >-
      Protected branches are available in public repositories with GitHub Free
      and GitHub Free for organizations, and in public and private repositories
      with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub
      Enterprise Server. For more information, see [GitHub's
      products](https://docs.github.com/github/getting-started-with-github/githubs-products)
      in the GitHub Help documentation.


      When authenticated with admin or owner permissions to the repository, you
      can use this endpoint to require signed commits on a branch. You must
      enable branch protection to require signed commits.
    externalDocs: https://docs.github.com/rest/branches/branch-protection#create-commit-signature-protection
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: branch
        description: The name of the branch. Cannot contain wildcard characters. To use
          wildcard characters in branch names, use [the GraphQL
          API](https://docs.github.com/graphql).
        paramKey: branch
        in: path
        schema:
          type: string
        required: true
  - moduleName: Repos / Commit Signature Protection / Delete
    method: delete
    path: /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures
    description: >-
      Protected branches are available in public repositories with GitHub Free
      and GitHub Free for organizations, and in public and private repositories
      with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub
      Enterprise Server. For more information, see [GitHub's
      products](https://docs.github.com/github/getting-started-with-github/githubs-products)
      in the GitHub Help documentation.


      When authenticated with admin or owner permissions to the repository, you
      can use this endpoint to disable required signed commits on a branch. You
      must enable branch protection to require signed commits.
    externalDocs: https://docs.github.com/rest/branches/branch-protection#delete-commit-signature-protection
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: branch
        description: The name of the branch. Cannot contain wildcard characters. To use
          wildcard characters in branch names, use [the GraphQL
          API](https://docs.github.com/graphql).
        paramKey: branch
        in: path
        schema:
          type: string
        required: true
  - moduleName: Repos / Status Checks Protection / Get
    method: get
    path: /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks
    description: Protected branches are available in public repositories with GitHub
      Free and GitHub Free for organizations, and in public and private
      repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and
      GitHub Enterprise Server. For more information, see [GitHub's
      products](https://docs.github.com/github/getting-started-with-github/githubs-products)
      in the GitHub Help documentation.
    externalDocs: https://docs.github.com/rest/branches/branch-protection#get-status-checks-protection
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: branch
        description: The name of the branch. Cannot contain wildcard characters. To use
          wildcard characters in branch names, use [the GraphQL
          API](https://docs.github.com/graphql).
        paramKey: branch
        in: path
        schema:
          type: string
        required: true
  - moduleName: Repos / Status Checks Protection / Update
    method: patch
    path: /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks
    description: >-
      Protected branches are available in public repositories with GitHub Free
      and GitHub Free for organizations, and in public and private repositories
      with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub
      Enterprise Server. For more information, see [GitHub's
      products](https://docs.github.com/github/getting-started-with-github/githubs-products)
      in the GitHub Help documentation.


      Updating required status checks requires admin or owner permissions to the
      repository and branch protection to be enabled.
    externalDocs: https://docs.github.com/rest/branches/branch-protection#update-status-check-protection
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: branch
        description: The name of the branch. Cannot contain wildcard characters. To use
          wildcard characters in branch names, use [the GraphQL
          API](https://docs.github.com/graphql).
        paramKey: branch
        in: path
        schema:
          type: string
        required: true
      - paramName: strict
        description: Require branches to be up to date before merging.
        paramKey: strict
        in: body
        schema:
          type: boolean
        required: false
      - paramName: contexts
        description: "**Closing down notice**: The list of status checks to require in
          order to merge into this branch. If any of these checks have recently
          been set by a particular GitHub App, they will be required to come
          from that app in future for the branch to merge. Use `checks` instead
          of `contexts` for more fine-grained control."
        paramKey: contexts
        in: body
        schema:
          type: array
          items:
            type: any
        required: false
      - paramName: checks
        description: The list of status checks to require in order to merge into this
          branch.
        paramKey: checks
        in: body
        schema:
          type: array
          items:
            type: any
        required: false
    requestBodyType: json
  - moduleName: Repos / Status Checks Protection / Remove
    method: delete
    path: /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks
    description: Protected branches are available in public repositories with GitHub
      Free and GitHub Free for organizations, and in public and private
      repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and
      GitHub Enterprise Server. For more information, see [GitHub's
      products](https://docs.github.com/github/getting-started-with-github/githubs-products)
      in the GitHub Help documentation.
    externalDocs: https://docs.github.com/rest/branches/branch-protection#remove-status-check-protection
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: branch
        description: The name of the branch. Cannot contain wildcard characters. To use
          wildcard characters in branch names, use [the GraphQL
          API](https://docs.github.com/graphql).
        paramKey: branch
        in: path
        schema:
          type: string
        required: true
  - moduleName: Repos / Status Check Contexts / Get All
    method: get
    path: /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts
    description: Protected branches are available in public repositories with GitHub
      Free and GitHub Free for organizations, and in public and private
      repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and
      GitHub Enterprise Server. For more information, see [GitHub's
      products](https://docs.github.com/github/getting-started-with-github/githubs-products)
      in the GitHub Help documentation.
    externalDocs: https://docs.github.com/rest/branches/branch-protection#get-all-status-check-contexts
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: branch
        description: The name of the branch. Cannot contain wildcard characters. To use
          wildcard characters in branch names, use [the GraphQL
          API](https://docs.github.com/graphql).
        paramKey: branch
        in: path
        schema:
          type: string
        required: true
  - moduleName: Repos / Status Check Contexts / Add
    method: post
    path: /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts
    description: Protected branches are available in public repositories with GitHub
      Free and GitHub Free for organizations, and in public and private
      repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and
      GitHub Enterprise Server. For more information, see [GitHub's
      products](https://docs.github.com/github/getting-started-with-github/githubs-products)
      in the GitHub Help documentation.
    externalDocs: https://docs.github.com/rest/branches/branch-protection#add-status-check-contexts
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: branch
        description: The name of the branch. Cannot contain wildcard characters. To use
          wildcard characters in branch names, use [the GraphQL
          API](https://docs.github.com/graphql).
        paramKey: branch
        in: path
        schema:
          type: string
        required: true
      - paramName: requestBody
        paramKey: ""
        description: ""
        in: body_raw
        schema:
          type: any
        required: true
    requestBodyType: json
  - moduleName: Repos / Status Check Contexts / Set
    method: put
    path: /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts
    description: Protected branches are available in public repositories with GitHub
      Free and GitHub Free for organizations, and in public and private
      repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and
      GitHub Enterprise Server. For more information, see [GitHub's
      products](https://docs.github.com/github/getting-started-with-github/githubs-products)
      in the GitHub Help documentation.
    externalDocs: https://docs.github.com/rest/branches/branch-protection#set-status-check-contexts
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: branch
        description: The name of the branch. Cannot contain wildcard characters. To use
          wildcard characters in branch names, use [the GraphQL
          API](https://docs.github.com/graphql).
        paramKey: branch
        in: path
        schema:
          type: string
        required: true
      - paramName: requestBody
        paramKey: ""
        description: ""
        in: body_raw
        schema:
          type: any
        required: true
    requestBodyType: json
  - moduleName: Repos / Status Check Contexts / Remove
    method: delete
    path: /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts
    description: Protected branches are available in public repositories with GitHub
      Free and GitHub Free for organizations, and in public and private
      repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and
      GitHub Enterprise Server. For more information, see [GitHub's
      products](https://docs.github.com/github/getting-started-with-github/githubs-products)
      in the GitHub Help documentation.
    externalDocs: https://docs.github.com/rest/branches/branch-protection#remove-status-check-contexts
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: branch
        description: The name of the branch. Cannot contain wildcard characters. To use
          wildcard characters in branch names, use [the GraphQL
          API](https://docs.github.com/graphql).
        paramKey: branch
        in: path
        schema:
          type: string
        required: true
      - paramName: requestBody
        paramKey: ""
        description: ""
        in: body_raw
        schema:
          type: any
        required: true
    requestBodyType: json
  - moduleName: Repos / Access Restrictions / Get
    method: get
    path: /repos/{owner}/{repo}/branches/{branch}/protection/restrictions
    description: >-
      Protected branches are available in public repositories with GitHub Free
      and GitHub Free for organizations, and in public and private repositories
      with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub
      Enterprise Server. For more information, see [GitHub's
      products](https://docs.github.com/github/getting-started-with-github/githubs-products)
      in the GitHub Help documentation.


      Lists who has access to this protected branch.


      > [!NOTE]

      > Users, apps, and teams `restrictions` are only available for
      organization-owned repositories.
    externalDocs: https://docs.github.com/rest/branches/branch-protection#get-access-restrictions
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: branch
        description: The name of the branch. Cannot contain wildcard characters. To use
          wildcard characters in branch names, use [the GraphQL
          API](https://docs.github.com/graphql).
        paramKey: branch
        in: path
        schema:
          type: string
        required: true
  - moduleName: Repos / Access Restrictions / Delete
    method: delete
    path: /repos/{owner}/{repo}/branches/{branch}/protection/restrictions
    description: >-
      Protected branches are available in public repositories with GitHub Free
      and GitHub Free for organizations, and in public and private repositories
      with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub
      Enterprise Server. For more information, see [GitHub's
      products](https://docs.github.com/github/getting-started-with-github/githubs-products)
      in the GitHub Help documentation.


      Disables the ability to restrict who can push to this branch.
    externalDocs: https://docs.github.com/rest/branches/branch-protection#delete-access-restrictions
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: branch
        description: The name of the branch. Cannot contain wildcard characters. To use
          wildcard characters in branch names, use [the GraphQL
          API](https://docs.github.com/graphql).
        paramKey: branch
        in: path
        schema:
          type: string
        required: true
  - moduleName: Repos / Apps With Access / Get
    method: get
    path: /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps
    description: >-
      Protected branches are available in public repositories with GitHub Free
      and GitHub Free for organizations, and in public and private repositories
      with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub
      Enterprise Server. For more information, see [GitHub's
      products](https://docs.github.com/github/getting-started-with-github/githubs-products)
      in the GitHub Help documentation.


      Lists the GitHub Apps that have push access to this branch. Only GitHub
      Apps that are installed on the repository and that have been granted write
      access to the repository contents can be added as authorized actors on a
      protected branch.
    externalDocs: https://docs.github.com/rest/branches/branch-protection#get-apps-with-access-to-the-protected-branch
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: branch
        description: The name of the branch. Cannot contain wildcard characters. To use
          wildcard characters in branch names, use [the GraphQL
          API](https://docs.github.com/graphql).
        paramKey: branch
        in: path
        schema:
          type: string
        required: true
  - moduleName: Repos / App Access Restrictions / Add
    method: post
    path: /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps
    description: >-
      Protected branches are available in public repositories with GitHub Free
      and GitHub Free for organizations, and in public and private repositories
      with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub
      Enterprise Server. For more information, see [GitHub's
      products](https://docs.github.com/github/getting-started-with-github/githubs-products)
      in the GitHub Help documentation.


      Grants the specified apps push access for this branch. Only GitHub Apps
      that are installed on the repository and that have been granted write
      access to the repository contents can be added as authorized actors on a
      protected branch.
    externalDocs: https://docs.github.com/rest/branches/branch-protection#add-app-access-restrictions
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: branch
        description: The name of the branch. Cannot contain wildcard characters. To use
          wildcard characters in branch names, use [the GraphQL
          API](https://docs.github.com/graphql).
        paramKey: branch
        in: path
        schema:
          type: string
        required: true
      - paramName: apps
        description: "The GitHub Apps that have push access to this branch. Use the
          slugified version of the app name. **Note**: The list of users, apps,
          and teams in total is limited to 100 items."
        paramKey: apps
        in: body
        schema:
          type: array
          items:
            type: any
        required: true
        example:
          apps:
            - my-app
    requestBodyType: json
  - moduleName: Repos / App Access Restrictions / Set
    method: put
    path: /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps
    description: >-
      Protected branches are available in public repositories with GitHub Free
      and GitHub Free for organizations, and in public and private repositories
      with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub
      Enterprise Server. For more information, see [GitHub's
      products](https://docs.github.com/github/getting-started-with-github/githubs-products)
      in the GitHub Help documentation.


      Replaces the list of apps that have push access to this branch. This
      removes all apps that previously had push access and grants push access to
      the new list of apps. Only GitHub Apps that are installed on the
      repository and that have been granted write access to the repository
      contents can be added as authorized actors on a protected branch.
    externalDocs: https://docs.github.com/rest/branches/branch-protection#set-app-access-restrictions
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: branch
        description: The name of the branch. Cannot contain wildcard characters. To use
          wildcard characters in branch names, use [the GraphQL
          API](https://docs.github.com/graphql).
        paramKey: branch
        in: path
        schema:
          type: string
        required: true
      - paramName: apps
        description: "The GitHub Apps that have push access to this branch. Use the
          slugified version of the app name. **Note**: The list of users, apps,
          and teams in total is limited to 100 items."
        paramKey: apps
        in: body
        schema:
          type: array
          items:
            type: any
        required: true
        example:
          apps:
            - my-app
    requestBodyType: json
  - moduleName: Repos / App Access Restrictions / Remove
    method: delete
    path: /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps
    description: >-
      Protected branches are available in public repositories with GitHub Free
      and GitHub Free for organizations, and in public and private repositories
      with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub
      Enterprise Server. For more information, see [GitHub's
      products](https://docs.github.com/github/getting-started-with-github/githubs-products)
      in the GitHub Help documentation.


      Removes the ability of an app to push to this branch. Only GitHub Apps
      that are installed on the repository and that have been granted write
      access to the repository contents can be added as authorized actors on a
      protected branch.
    externalDocs: https://docs.github.com/rest/branches/branch-protection#remove-app-access-restrictions
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: branch
        description: The name of the branch. Cannot contain wildcard characters. To use
          wildcard characters in branch names, use [the GraphQL
          API](https://docs.github.com/graphql).
        paramKey: branch
        in: path
        schema:
          type: string
        required: true
      - paramName: apps
        description: "The GitHub Apps that have push access to this branch. Use the
          slugified version of the app name. **Note**: The list of users, apps,
          and teams in total is limited to 100 items."
        paramKey: apps
        in: body
        schema:
          type: array
          items:
            type: any
        required: true
        example:
          apps:
            - my-app
    requestBodyType: json
  - moduleName: Repos / Teams With Access / Get
    method: get
    path: /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams
    description: >-
      Protected branches are available in public repositories with GitHub Free
      and GitHub Free for organizations, and in public and private repositories
      with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub
      Enterprise Server. For more information, see [GitHub's
      products](https://docs.github.com/github/getting-started-with-github/githubs-products)
      in the GitHub Help documentation.


      Lists the teams who have push access to this branch. The list includes
      child teams.
    externalDocs: https://docs.github.com/rest/branches/branch-protection#get-teams-with-access-to-the-protected-branch
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: branch
        description: The name of the branch. Cannot contain wildcard characters. To use
          wildcard characters in branch names, use [the GraphQL
          API](https://docs.github.com/graphql).
        paramKey: branch
        in: path
        schema:
          type: string
        required: true
  - moduleName: Repos / Team Access Restrictions / Add
    method: post
    path: /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams
    description: >-
      Protected branches are available in public repositories with GitHub Free
      and GitHub Free for organizations, and in public and private repositories
      with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub
      Enterprise Server. For more information, see [GitHub's
      products](https://docs.github.com/github/getting-started-with-github/githubs-products)
      in the GitHub Help documentation.


      Grants the specified teams push access for this branch. You can also give
      push access to child teams.
    externalDocs: https://docs.github.com/rest/branches/branch-protection#add-team-access-restrictions
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: branch
        description: The name of the branch. Cannot contain wildcard characters. To use
          wildcard characters in branch names, use [the GraphQL
          API](https://docs.github.com/graphql).
        paramKey: branch
        in: path
        schema:
          type: string
        required: true
      - paramName: requestBody
        paramKey: ""
        description: ""
        in: body_raw
        schema:
          type: any
        required: true
    requestBodyType: json
  - moduleName: Repos / Team Access Restrictions / Set
    method: put
    path: /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams
    description: >-
      Protected branches are available in public repositories with GitHub Free
      and GitHub Free for organizations, and in public and private repositories
      with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub
      Enterprise Server. For more information, see [GitHub's
      products](https://docs.github.com/github/getting-started-with-github/githubs-products)
      in the GitHub Help documentation.


      Replaces the list of teams that have push access to this branch. This
      removes all teams that previously had push access and grants push access
      to the new list of teams. Team restrictions include child teams.
    externalDocs: https://docs.github.com/rest/branches/branch-protection#set-team-access-restrictions
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: branch
        description: The name of the branch. Cannot contain wildcard characters. To use
          wildcard characters in branch names, use [the GraphQL
          API](https://docs.github.com/graphql).
        paramKey: branch
        in: path
        schema:
          type: string
        required: true
      - paramName: requestBody
        paramKey: ""
        description: ""
        in: body_raw
        schema:
          type: any
        required: true
    requestBodyType: json
  - moduleName: Repos / Team Access Restrictions / Remove
    method: delete
    path: /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams
    description: >-
      Protected branches are available in public repositories with GitHub Free
      and GitHub Free for organizations, and in public and private repositories
      with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub
      Enterprise Server. For more information, see [GitHub's
      products](https://docs.github.com/github/getting-started-with-github/githubs-products)
      in the GitHub Help documentation.


      Removes the ability of a team to push to this branch. You can also remove
      push access for child teams.
    externalDocs: https://docs.github.com/rest/branches/branch-protection#remove-team-access-restrictions
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: branch
        description: The name of the branch. Cannot contain wildcard characters. To use
          wildcard characters in branch names, use [the GraphQL
          API](https://docs.github.com/graphql).
        paramKey: branch
        in: path
        schema:
          type: string
        required: true
      - paramName: requestBody
        paramKey: ""
        description: ""
        in: body_raw
        schema:
          type: any
        required: true
    requestBodyType: json
  - moduleName: Repos / Users With Access / Get
    method: get
    path: /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users
    description: >-
      Protected branches are available in public repositories with GitHub Free
      and GitHub Free for organizations, and in public and private repositories
      with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub
      Enterprise Server. For more information, see [GitHub's
      products](https://docs.github.com/github/getting-started-with-github/githubs-products)
      in the GitHub Help documentation.


      Lists the people who have push access to this branch.
    externalDocs: https://docs.github.com/rest/branches/branch-protection#get-users-with-access-to-the-protected-branch
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: branch
        description: The name of the branch. Cannot contain wildcard characters. To use
          wildcard characters in branch names, use [the GraphQL
          API](https://docs.github.com/graphql).
        paramKey: branch
        in: path
        schema:
          type: string
        required: true
  - moduleName: Repos / User Access Restrictions / Add
    method: post
    path: /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users
    description: >-
      Protected branches are available in public repositories with GitHub Free
      and GitHub Free for organizations, and in public and private repositories
      with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub
      Enterprise Server. For more information, see [GitHub's
      products](https://docs.github.com/github/getting-started-with-github/githubs-products)
      in the GitHub Help documentation.


      Grants the specified people push access for this branch.


      | Type    |
      Description                                                                                                                   |

      | ------- |
      -----------------------------------------------------------------------------------------------------------------------------
      |

      | `array` | Usernames for people who can have push access. **Note**: The
      list of users, apps, and teams in total is limited to 100 items. |
    externalDocs: https://docs.github.com/rest/branches/branch-protection#add-user-access-restrictions
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: branch
        description: The name of the branch. Cannot contain wildcard characters. To use
          wildcard characters in branch names, use [the GraphQL
          API](https://docs.github.com/graphql).
        paramKey: branch
        in: path
        schema:
          type: string
        required: true
      - paramName: users
        description: The username for users
        paramKey: users
        in: body
        schema:
          type: array
          items:
            type: any
        required: true
        example:
          users:
            - mona
    requestBodyType: json
  - moduleName: Repos / User Access Restrictions / Set
    method: put
    path: /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users
    description: >-
      Protected branches are available in public repositories with GitHub Free
      and GitHub Free for organizations, and in public and private repositories
      with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub
      Enterprise Server. For more information, see [GitHub's
      products](https://docs.github.com/github/getting-started-with-github/githubs-products)
      in the GitHub Help documentation.


      Replaces the list of people that have push access to this branch. This
      removes all people that previously had push access and grants push access
      to the new list of people.


      | Type    |
      Description                                                                                                                   |

      | ------- |
      -----------------------------------------------------------------------------------------------------------------------------
      |

      | `array` | Usernames for people who can have push access. **Note**: The
      list of users, apps, and teams in total is limited to 100 items. |
    externalDocs: https://docs.github.com/rest/branches/branch-protection#set-user-access-restrictions
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: branch
        description: The name of the branch. Cannot contain wildcard characters. To use
          wildcard characters in branch names, use [the GraphQL
          API](https://docs.github.com/graphql).
        paramKey: branch
        in: path
        schema:
          type: string
        required: true
      - paramName: users
        description: The username for users
        paramKey: users
        in: body
        schema:
          type: array
          items:
            type: any
        required: true
        example:
          users:
            - mona
    requestBodyType: json
  - moduleName: Repos / User Access Restrictions / Remove
    method: delete
    path: /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users
    description: >-
      Protected branches are available in public repositories with GitHub Free
      and GitHub Free for organizations, and in public and private repositories
      with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub
      Enterprise Server. For more information, see [GitHub's
      products](https://docs.github.com/github/getting-started-with-github/githubs-products)
      in the GitHub Help documentation.


      Removes the ability of a user to push to this branch.


      | Type    |
      Description                                                                                                                                   |

      | ------- |
      ---------------------------------------------------------------------------------------------------------------------------------------------
      |

      | `array` | Usernames of the people who should no longer have push access.
      **Note**: The list of users, apps, and teams in total is limited to 100
      items. |
    externalDocs: https://docs.github.com/rest/branches/branch-protection#remove-user-access-restrictions
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: branch
        description: The name of the branch. Cannot contain wildcard characters. To use
          wildcard characters in branch names, use [the GraphQL
          API](https://docs.github.com/graphql).
        paramKey: branch
        in: path
        schema:
          type: string
        required: true
      - paramName: users
        description: The username for users
        paramKey: users
        in: body
        schema:
          type: array
          items:
            type: any
        required: true
        example:
          users:
            - mona
    requestBodyType: json
  - moduleName: Repos / Branch / Rename
    method: post
    path: /repos/{owner}/{repo}/branches/{branch}/rename
    description: >-
      Renames a branch in a repository.


      > [!NOTE]

      > Although the API responds immediately, the branch rename process might
      take some extra time to complete in the background. You won't be able to
      push to the old branch name while the rename process is in progress. For
      more information, see "[Renaming a
      branch](https://docs.github.com/github/administering-a-repository/renaming-a-branch)".


      The authenticated user must have push access to the branch. If the branch
      is the default branch, the authenticated user must also have admin or
      owner permissions.


      In order to rename the default branch, fine-grained access tokens also
      need the `administration:write` repository permission.
    externalDocs: https://docs.github.com/rest/branches/branches#rename-a-branch
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: branch
        description: The name of the branch. Cannot contain wildcard characters. To use
          wildcard characters in branch names, use [the GraphQL
          API](https://docs.github.com/graphql).
        paramKey: branch
        in: path
        schema:
          type: string
        required: true
      - paramName: newName
        description: The new name of the branch.
        paramKey: new_name
        in: body
        schema:
          type: string
        required: true
    requestBodyType: json
  - moduleName: Repos / Codeowners Errors / Get
    method: get
    path: /repos/{owner}/{repo}/codeowners/errors
    description: >-
      List any syntax errors that are detected in the CODEOWNERS

      file.


      For more information about the correct CODEOWNERS syntax,

      see "[About code
      owners](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/customizing-your-repository/about-code-owners)."
    externalDocs: https://docs.github.com/rest/repos/repos#list-codeowners-errors
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: ref
        description: "A branch, tag or commit name used to determine which version of
          the CODEOWNERS file to use. Default: the repository's default branch
          (e.g. `main`)"
        paramKey: ref
        in: query
        schema:
          type: string
        required: false
  - moduleName: Repos / Collaborators / List
    method: get
    path: /repos/{owner}/{repo}/collaborators
    description: >-
      For organization-owned repositories, the list of collaborators includes
      outside collaborators, organization members that are direct collaborators,
      organization members with access through team memberships, organization
      members with access through default organization permissions, and
      organization owners.

      Organization members with write, maintain, or admin privileges on the
      organization-owned repository can use this endpoint.


      Team members will include the members of child teams.


      The authenticated user must have push access to the repository to use this
      endpoint.


      OAuth app tokens and personal access tokens (classic) need the `read:org`
      and `repo` scopes to use this endpoint.
    externalDocs: https://docs.github.com/rest/collaborators/collaborators#list-repository-collaborators
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: affiliation
        description: Filter collaborators returned by their affiliation. `outside` means
          all outside collaborators of an organization-owned repository.
          `direct` means all collaborators with permissions to an
          organization-owned repository, regardless of organization membership
          status. `all` means all collaborators the authenticated user can see.
        paramKey: affiliation
        in: query
        schema:
          type: string
          default: all
          enum:
            - outside
            - direct
            - all
        required: false
      - paramName: permission
        description: Filter collaborators by the permissions they have on the
          repository. If not specified, all collaborators will be returned.
        paramKey: permission
        in: query
        schema:
          type: string
          enum:
            - pull
            - triage
            - push
            - maintain
            - admin
        required: false
      - paramName: perPage
        description: The number of results per page (max 100). For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: per_page
        in: query
        schema:
          type: number
          default: 30
        required: false
      - paramName: page
        description: The page number of the results to fetch. For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: page
        in: query
        schema:
          type: number
          default: 1
        required: false
  - moduleName: Repos / Collaborator / Check
    method: get
    path: /repos/{owner}/{repo}/collaborators/{username}
    description: >-
      For organization-owned repositories, the list of collaborators includes
      outside collaborators, organization members that are direct collaborators,
      organization members with access through team memberships, organization
      members with access through default organization permissions, and
      organization owners.


      Team members will include the members of child teams.


      The authenticated user must have push access to the repository to use this
      endpoint.


      OAuth app tokens and personal access tokens (classic) need the `read:org`
      and `repo` scopes to use this endpoint.
    externalDocs: https://docs.github.com/rest/collaborators/collaborators#check-if-a-user-is-a-repository-collaborator
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: username
        description: The handle for the GitHub user account.
        paramKey: username
        in: path
        schema:
          type: string
        required: true
  - moduleName: Repos / Collaborator / Add
    method: put
    path: /repos/{owner}/{repo}/collaborators/{username}
    description: >-
      This endpoint triggers
      [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications).
      Creating content too quickly using this endpoint may result in secondary
      rate limiting. For more information, see "[Rate limits for the
      API](https://docs.github.com/rest/using-the-rest-api/rate-limits-for-the-rest-api#about-secondary-rate-limits)"
      and "[Best practices for using the REST
      API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api)."


      Adding an outside collaborator may be restricted by enterprise
      administrators. For more information, see "[Enforcing repository
      management policies in your
      enterprise](https://docs.github.com/admin/policies/enforcing-policies-for-your-enterprise/enforcing-repository-management-policies-in-your-enterprise#enforcing-a-policy-for-inviting-outside-collaborators-to-repositories)."


      For more information on permission levels, see "[Repository permission
      levels for an
      organization](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/repository-permission-levels-for-an-organization#permission-levels-for-repositories-owned-by-an-organization)".
      There are restrictions on which permissions can be granted to organization
      members when an organization base role is in place. In this case, the
      permission being given must be equal to or higher than the org base
      permission. Otherwise, the request will fail with:


      ```

      Cannot assign {member} permission of {role name}

      ```


      Note that, if you choose not to pass any parameters, you'll need to set
      `Content-Length` to zero when calling out to this endpoint. For more
      information, see "[HTTP
      method](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#http-method)."


      The invitee will receive a notification that they have been invited to the
      repository, which they must accept or decline. They may do this via the
      notifications page, the email they receive, or by using the
      [API](https://docs.github.com/rest/collaborators/invitations).


      **Updating an existing collaborator's permission level**


      The endpoint can also be used to change the permissions of an existing
      collaborator without first removing and re-adding the collaborator. To
      change the permissions, use the same endpoint and pass a different
      `permission` parameter. The response will be a `204`, with no other
      indication that the permission level changed.


      **Rate limits**


      You are limited to sending 50 invitations to a repository per 24 hour
      period. Note there is no limit if you are inviting organization members to
      an organization repository.
    externalDocs: https://docs.github.com/rest/collaborators/collaborators#add-a-repository-collaborator
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: username
        description: The handle for the GitHub user account.
        paramKey: username
        in: path
        schema:
          type: string
        required: true
      - paramName: permission
        description: "The permission to grant the collaborator. **Only valid on
          organization-owned repositories.** We accept the following permissions
          to be set: `pull`, `triage`, `push`, `maintain`, `admin` and you can
          also specify a custom repository role name, if the owning organization
          has defined any."
        paramKey: permission
        in: body
        schema:
          type: string
          default: push
        required: false
    requestBodyType: json
  - moduleName: Repos / Collaborator / Remove
    method: delete
    path: /repos/{owner}/{repo}/collaborators/{username}
    description: >-
      Removes a collaborator from a repository.


      To use this endpoint, the authenticated user must either be an
      administrator of the repository or target themselves for removal.


      This endpoint also:

      - Cancels any outstanding invitations

      - Unasigns the user from any issues

      - Removes access to organization projects if the user is not an
      organization member and is not a collaborator on any other organization
      repositories.

      - Unstars the repository

      - Updates access permissions to packages


      Removing a user as a collaborator has the following effects on forks:
       - If the user had access to a fork through their membership to this repository, the user will also be removed from the fork.
       - If the user had their own fork of the repository, the fork will be deleted.
       - If the user still has read access to the repository, open pull requests by this user from a fork will be denied.

      > [!NOTE]

      > A user can still have access to the repository through organization
      permissions like base repository permissions.


      Although the API responds immediately, the additional permission updates
      might take some extra time to complete in the background.


      For more information on fork permissions, see "[About permissions and
      visibility of
      forks](https://docs.github.com/pull-requests/collaborating-with-pull-requests/working-with-forks/about-permissions-and-visibility-of-forks)".
    externalDocs: https://docs.github.com/rest/collaborators/collaborators#remove-a-repository-collaborator
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: username
        description: The handle for the GitHub user account.
        paramKey: username
        in: path
        schema:
          type: string
        required: true
  - moduleName: Repos / Collaborator Permission / Get
    method: get
    path: /repos/{owner}/{repo}/collaborators/{username}/permission
    description: >-
      Checks the repository permission of a collaborator. The possible
      repository

      permissions are `admin`, `write`, `read`, and `none`.


      *Note*: The `permission` attribute provides the legacy base roles of
      `admin`, `write`, `read`, and `none`, where the

      `maintain` role is mapped to `write` and the `triage` role is mapped to
      `read`. To determine the role assigned to the

      collaborator, see the `role_name` attribute, which will provide the full
      role name, including custom roles. The

      `permissions` hash can also be used to determine which base level of
      access the collaborator has to the repository.
    externalDocs: https://docs.github.com/rest/collaborators/collaborators#get-repository-permissions-for-a-user
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: username
        description: The handle for the GitHub user account.
        paramKey: username
        in: path
        schema:
          type: string
        required: true
  - moduleName: Repos / Commit Comments / List
    method: get
    path: /repos/{owner}/{repo}/comments
    description: >-
      Lists the commit comments for a specified repository. Comments are ordered
      by ascending ID.


      This endpoint supports the following custom media types. For more
      information, see "[Media
      types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."


      - **`application/vnd.github-commitcomment.raw+json`**: Returns the raw
      markdown body. Response will include `body`. This is the default if you do
      not pass any specific media type.

      - **`application/vnd.github-commitcomment.text+json`**: Returns a text
      only representation of the markdown body. Response will include
      `body_text`.

      - **`application/vnd.github-commitcomment.html+json`**: Returns HTML
      rendered from the body's markdown. Response will include `body_html`.

      - **`application/vnd.github-commitcomment.full+json`**: Returns raw, text,
      and HTML representations. Response will include `body`, `body_text`, and
      `body_html`.
    externalDocs: https://docs.github.com/rest/commits/comments#list-commit-comments-for-a-repository
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: perPage
        description: The number of results per page (max 100). For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: per_page
        in: query
        schema:
          type: number
          default: 30
        required: false
      - paramName: page
        description: The page number of the results to fetch. For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: page
        in: query
        schema:
          type: number
          default: 1
        required: false
  - moduleName: Repos / Commit Comment / Get
    method: get
    path: /repos/{owner}/{repo}/comments/{comment_id}
    description: >-
      Gets a specified commit comment.


      This endpoint supports the following custom media types. For more
      information, see "[Media
      types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."


      - **`application/vnd.github-commitcomment.raw+json`**: Returns the raw
      markdown body. Response will include `body`. This is the default if you do
      not pass any specific media type.

      - **`application/vnd.github-commitcomment.text+json`**: Returns a text
      only representation of the markdown body. Response will include
      `body_text`.

      - **`application/vnd.github-commitcomment.html+json`**: Returns HTML
      rendered from the body's markdown. Response will include `body_html`.

      - **`application/vnd.github-commitcomment.full+json`**: Returns raw, text,
      and HTML representations. Response will include `body`, `body_text`, and
      `body_html`.
    externalDocs: https://docs.github.com/rest/commits/comments#get-a-commit-comment
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: commentId
        description: The unique identifier of the comment.
        paramKey: comment_id
        in: path
        schema:
          type: number
        required: true
  - moduleName: Repos / Commit Comment / Update
    method: patch
    path: /repos/{owner}/{repo}/comments/{comment_id}
    description: >-
      Updates the contents of a specified commit comment.


      This endpoint supports the following custom media types. For more
      information, see "[Media
      types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."


      - **`application/vnd.github-commitcomment.raw+json`**: Returns the raw
      markdown body. Response will include `body`. This is the default if you do
      not pass any specific media type.

      - **`application/vnd.github-commitcomment.text+json`**: Returns a text
      only representation of the markdown body. Response will include
      `body_text`.

      - **`application/vnd.github-commitcomment.html+json`**: Returns HTML
      rendered from the body's markdown. Response will include `body_html`.

      - **`application/vnd.github-commitcomment.full+json`**: Returns raw, text,
      and HTML representations. Response will include `body`, `body_text`, and
      `body_html`.
    externalDocs: https://docs.github.com/rest/commits/comments#update-a-commit-comment
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: commentId
        description: The unique identifier of the comment.
        paramKey: comment_id
        in: path
        schema:
          type: number
        required: true
      - paramName: body
        description: The contents of the comment
        paramKey: body
        in: body
        schema:
          type: string
        required: true
    requestBodyType: json
  - moduleName: Repos / Commit Comment / Delete
    method: delete
    path: /repos/{owner}/{repo}/comments/{comment_id}
    description: ""
    externalDocs: https://docs.github.com/rest/commits/comments#delete-a-commit-comment
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: commentId
        description: The unique identifier of the comment.
        paramKey: comment_id
        in: path
        schema:
          type: number
        required: true
  - moduleName: Reactions / Commit Comment / List
    method: get
    path: /repos/{owner}/{repo}/comments/{comment_id}/reactions
    description: List the reactions to a [commit
      comment](https://docs.github.com/rest/commits/comments#get-a-commit-comment).
    externalDocs: https://docs.github.com/rest/reactions/reactions#list-reactions-for-a-commit-comment
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: commentId
        description: The unique identifier of the comment.
        paramKey: comment_id
        in: path
        schema:
          type: number
        required: true
      - paramName: content
        description: Returns a single [reaction
          type](https://docs.github.com/rest/reactions/reactions#about-reactions).
          Omit this parameter to list all reactions to a commit comment.
        paramKey: content
        in: query
        schema:
          type: string
          enum:
            - "+1"
            - "-1"
            - laugh
            - confused
            - heart
            - hooray
            - rocket
            - eyes
        required: false
      - paramName: perPage
        description: The number of results per page (max 100). For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: per_page
        in: query
        schema:
          type: number
          default: 30
        required: false
      - paramName: page
        description: The page number of the results to fetch. For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: page
        in: query
        schema:
          type: number
          default: 1
        required: false
  - moduleName: Reactions / Commit Comment / Create
    method: post
    path: /repos/{owner}/{repo}/comments/{comment_id}/reactions
    description: Create a reaction to a [commit
      comment](https://docs.github.com/rest/commits/comments#get-a-commit-comment).
      A response with an HTTP `200` status means that you already added the
      reaction type to this commit comment.
    externalDocs: https://docs.github.com/rest/reactions/reactions#create-reaction-for-a-commit-comment
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: commentId
        description: The unique identifier of the comment.
        paramKey: comment_id
        in: path
        schema:
          type: number
        required: true
      - paramName: content
        description: The [reaction
          type](https://docs.github.com/rest/reactions/reactions#about-reactions)
          to add to the commit comment.
        paramKey: content
        in: body
        schema:
          type: string
          enum:
            - "+1"
            - "-1"
            - laugh
            - confused
            - heart
            - hooray
            - rocket
            - eyes
        required: true
    requestBodyType: json
  - moduleName: Reactions / Commit Comment / Delete
    method: delete
    path: /repos/{owner}/{repo}/comments/{comment_id}/reactions/{reaction_id}
    description: >-
      > [!NOTE]

      > You can also specify a repository by `repository_id` using the route
      `DELETE
      /repositories/:repository_id/comments/:comment_id/reactions/:reaction_id`.


      Delete a reaction to a [commit
      comment](https://docs.github.com/rest/commits/comments#get-a-commit-comment).
    externalDocs: https://docs.github.com/rest/reactions/reactions#delete-a-commit-comment-reaction
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: commentId
        description: The unique identifier of the comment.
        paramKey: comment_id
        in: path
        schema:
          type: number
        required: true
      - paramName: reactionId
        description: The unique identifier of the reaction.
        paramKey: reaction_id
        in: path
        schema:
          type: number
        required: true
  - moduleName: Repos / Commits / List
    method: get
    path: /repos/{owner}/{repo}/commits
    description: >-
      **Signature verification object**


      The response will include a `verification` object that describes the
      result of verifying the commit's signature. The following fields are
      included in the `verification` object:


      | Name | Type | Description |

      | ---- | ---- | ----------- |

      | `verified` | `boolean` | Indicates whether GitHub considers the
      signature in this commit to be verified. |

      | `reason` | `string` | The reason for verified value. Possible values and
      their meanings are enumerated in table below. |

      | `signature` | `string` | The signature that was extracted from the
      commit. |

      | `payload` | `string` | The value that was signed. |


      These are the possible values for `reason` in the `verification` object:


      | Value | Description |

      | ----- | ----------- |

      | `expired_key` | The key that made the signature is expired. |

      | `not_signing_key` | The "signing" flag is not among the usage flags in
      the GPG key that made the signature. |

      | `gpgverify_error` | There was an error communicating with the signature
      verification service. |

      | `gpgverify_unavailable` | The signature verification service is
      currently unavailable. |

      | `unsigned` | The object does not include a signature. |

      | `unknown_signature_type` | A non-PGP signature was found in the commit.
      |

      | `no_user` | No user was associated with the `committer` email address in
      the commit. |

      | `unverified_email` | The `committer` email address in the commit was
      associated with a user, but the email address is not verified on their
      account. |

      | `bad_email` | The `committer` email address in the commit is not
      included in the identities of the PGP key that made the signature. |

      | `unknown_key` | The key that made the signature has not been registered
      with any user's account. |

      | `malformed_signature` | There was an error parsing the signature. |

      | `invalid` | The signature could not be cryptographically verified using
      the key whose key-id was found in the signature. |

      | `valid` | None of the above errors applied, so the signature is
      considered to be verified. |
    externalDocs: https://docs.github.com/rest/commits/commits#list-commits
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: sha
        description: "SHA or branch to start listing commits from. Default: the
          repository’s default branch (usually `main`)."
        paramKey: sha
        in: query
        schema:
          type: string
        required: false
      - paramName: path
        description: Only commits containing this file path will be returned.
        paramKey: path
        in: query
        schema:
          type: string
        required: false
      - paramName: author
        description: GitHub username or email address to use to filter by commit author.
        paramKey: author
        in: query
        schema:
          type: string
        required: false
      - paramName: committer
        description: GitHub username or email address to use to filter by commit committer.
        paramKey: committer
        in: query
        schema:
          type: string
        required: false
      - paramName: since
        description: "Only show results that were last updated after the given time.
          This is a timestamp in [ISO
          8601](https://en.wikipedia.org/wiki/ISO_8601) format:
          `YYYY-MM-DDTHH:MM:SSZ`. Due to limitations of Git, timestamps must be
          between 1970-01-01 and 2099-12-31 (inclusive) or unexpected results
          may be returned."
        paramKey: since
        in: query
        schema:
          type: string
        required: false
      - paramName: until
        description: "Only commits before this date will be returned. This is a
          timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601)
          format: `YYYY-MM-DDTHH:MM:SSZ`. Due to limitations of Git, timestamps
          must be between 1970-01-01 and 2099-12-31 (inclusive) or unexpected
          results may be returned."
        paramKey: until
        in: query
        schema:
          type: string
        required: false
      - paramName: perPage
        description: The number of results per page (max 100). For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: per_page
        in: query
        schema:
          type: number
          default: 30
        required: false
      - paramName: page
        description: The page number of the results to fetch. For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: page
        in: query
        schema:
          type: number
          default: 1
        required: false
  - moduleName: Repos / Branches For Head Commit / List
    method: get
    path: /repos/{owner}/{repo}/commits/{commit_sha}/branches-where-head
    description: >-
      Protected branches are available in public repositories with GitHub Free
      and GitHub Free for organizations, and in public and private repositories
      with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub
      Enterprise Server. For more information, see [GitHub's
      products](https://docs.github.com/github/getting-started-with-github/githubs-products)
      in the GitHub Help documentation.


      Returns all branches where the given commit SHA is the HEAD, or latest
      commit for the branch.
    externalDocs: https://docs.github.com/rest/commits/commits#list-branches-for-head-commit
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: commitSha
        description: The SHA of the commit.
        paramKey: commit_sha
        in: path
        schema:
          type: string
        required: true
  - moduleName: Repos / Comments For Commit / List
    method: get
    path: /repos/{owner}/{repo}/commits/{commit_sha}/comments
    description: >-
      Lists the comments for a specified commit.


      This endpoint supports the following custom media types. For more
      information, see "[Media
      types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."


      - **`application/vnd.github-commitcomment.raw+json`**: Returns the raw
      markdown body. Response will include `body`. This is the default if you do
      not pass any specific media type.

      - **`application/vnd.github-commitcomment.text+json`**: Returns a text
      only representation of the markdown body. Response will include
      `body_text`.

      - **`application/vnd.github-commitcomment.html+json`**: Returns HTML
      rendered from the body's markdown. Response will include `body_html`.

      - **`application/vnd.github-commitcomment.full+json`**: Returns raw, text,
      and HTML representations. Response will include `body`, `body_text`, and
      `body_html`.
    externalDocs: https://docs.github.com/rest/commits/comments#list-commit-comments
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: commitSha
        description: The SHA of the commit.
        paramKey: commit_sha
        in: path
        schema:
          type: string
        required: true
      - paramName: perPage
        description: The number of results per page (max 100). For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: per_page
        in: query
        schema:
          type: number
          default: 30
        required: false
      - paramName: page
        description: The page number of the results to fetch. For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: page
        in: query
        schema:
          type: number
          default: 1
        required: false
  - moduleName: Repos / Comment For Commit / Create
    method: post
    path: /repos/{owner}/{repo}/commits/{commit_sha}/comments
    description: >-
      Create a comment for a commit using its `:commit_sha`.


      This endpoint triggers
      [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications).
      Creating content too quickly using this endpoint may result in secondary
      rate limiting. For more information, see "[Rate limits for the
      API](https://docs.github.com/rest/using-the-rest-api/rate-limits-for-the-rest-api#about-secondary-rate-limits)"
      and "[Best practices for using the REST
      API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api)."


      This endpoint supports the following custom media types. For more
      information, see "[Media
      types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."


      - **`application/vnd.github-commitcomment.raw+json`**: Returns the raw
      markdown body. Response will include `body`. This is the default if you do
      not pass any specific media type.

      - **`application/vnd.github-commitcomment.text+json`**: Returns a text
      only representation of the markdown body. Response will include
      `body_text`.

      - **`application/vnd.github-commitcomment.html+json`**: Returns HTML
      rendered from the body's markdown. Response will include `body_html`.

      - **`application/vnd.github-commitcomment.full+json`**: Returns raw, text,
      and HTML representations. Response will include `body`, `body_text`, and
      `body_html`.
    externalDocs: https://docs.github.com/rest/commits/comments#create-a-commit-comment
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: commitSha
        description: The SHA of the commit.
        paramKey: commit_sha
        in: path
        schema:
          type: string
        required: true
      - paramName: body
        description: The contents of the comment.
        paramKey: body
        in: body
        schema:
          type: string
        required: true
      - paramName: path
        description: Relative path of the file to comment on.
        paramKey: path
        in: body
        schema:
          type: string
        required: false
      - paramName: position
        description: Line index in the diff to comment on.
        paramKey: position
        in: body
        schema:
          type: number
        required: false
      - paramName: line
        description: "**Closing down notice**. Use **position** parameter instead. Line
          number in the file to comment on."
        paramKey: line
        in: body
        schema:
          type: number
        required: false
    requestBodyType: json
  - moduleName: Repos / Pull Requests For Commit / List
    method: get
    path: /repos/{owner}/{repo}/commits/{commit_sha}/pulls
    description: >-
      Lists the merged pull request that introduced the commit to the
      repository. If the commit is not present in the default branch, will only
      return open pull requests associated with the commit.


      To list the open or merged pull requests associated with a branch, you can
      set the `commit_sha` parameter to the branch name.
    externalDocs: https://docs.github.com/rest/commits/commits#list-pull-requests-associated-with-a-commit
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: commitSha
        description: The SHA of the commit.
        paramKey: commit_sha
        in: path
        schema:
          type: string
        required: true
      - paramName: perPage
        description: The number of results per page (max 100). For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: per_page
        in: query
        schema:
          type: number
          default: 30
        required: false
      - paramName: page
        description: The page number of the results to fetch. For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: page
        in: query
        schema:
          type: number
          default: 1
        required: false
  - moduleName: Repos / Commit / Get
    method: get
    path: /repos/{owner}/{repo}/commits/{ref}
    description: >-
      Returns the contents of a single commit reference. You must have `read`
      access for the repository to use this endpoint.


      > [!NOTE]

      > If there are more than 300 files in the commit diff and the default JSON
      media type is requested, the response will include pagination link headers
      for the remaining files, up to a limit of 3000 files. Each page contains
      the static commit information, and the only changes are to the file
      listing.


      This endpoint supports the following custom media types. For more
      information, see "[Media
      types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
      Pagination query parameters are not supported for these media types.


      - **`application/vnd.github.diff`**: Returns the diff of the commit.
      Larger diffs may time out and return a 5xx status code.

      - **`application/vnd.github.patch`**: Returns the patch of the commit.
      Diffs with binary data will have no `patch` property. Larger diffs may
      time out and return a 5xx status code.

      - **`application/vnd.github.sha`**: Returns the commit's SHA-1 hash. You
      can use this endpoint to check if a remote reference's SHA-1 hash is the
      same as your local reference's SHA-1 hash by providing the local SHA-1
      reference as the ETag.


      **Signature verification object**


      The response will include a `verification` object that describes the
      result of verifying the commit's signature. The following fields are
      included in the `verification` object:


      | Name | Type | Description |

      | ---- | ---- | ----------- |

      | `verified` | `boolean` | Indicates whether GitHub considers the
      signature in this commit to be verified. |

      | `reason` | `string` | The reason for verified value. Possible values and
      their meanings are enumerated in table below. |

      | `signature` | `string` | The signature that was extracted from the
      commit. |

      | `payload` | `string` | The value that was signed. |


      These are the possible values for `reason` in the `verification` object:


      | Value | Description |

      | ----- | ----------- |

      | `expired_key` | The key that made the signature is expired. |

      | `not_signing_key` | The "signing" flag is not among the usage flags in
      the GPG key that made the signature. |

      | `gpgverify_error` | There was an error communicating with the signature
      verification service. |

      | `gpgverify_unavailable` | The signature verification service is
      currently unavailable. |

      | `unsigned` | The object does not include a signature. |

      | `unknown_signature_type` | A non-PGP signature was found in the commit.
      |

      | `no_user` | No user was associated with the `committer` email address in
      the commit. |

      | `unverified_email` | The `committer` email address in the commit was
      associated with a user, but the email address is not verified on their
      account. |

      | `bad_email` | The `committer` email address in the commit is not
      included in the identities of the PGP key that made the signature. |

      | `unknown_key` | The key that made the signature has not been registered
      with any user's account. |

      | `malformed_signature` | There was an error parsing the signature. |

      | `invalid` | The signature could not be cryptographically verified using
      the key whose key-id was found in the signature. |

      | `valid` | None of the above errors applied, so the signature is
      considered to be verified. |
    externalDocs: https://docs.github.com/rest/commits/commits#get-a-commit
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: page
        description: The page number of the results to fetch. For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: page
        in: query
        schema:
          type: number
          default: 1
        required: false
      - paramName: perPage
        description: The number of results per page (max 100). For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: per_page
        in: query
        schema:
          type: number
          default: 30
        required: false
      - paramName: ref
        description: The commit reference. Can be a commit SHA, branch name
          (`heads/BRANCH_NAME`), or tag name (`tags/TAG_NAME`). For more
          information, see "[Git
          References](https://git-scm.com/book/en/v2/Git-Internals-Git-References)"
          in the Git documentation.
        paramKey: ref
        in: path
        schema:
          type: string
        required: true
  - moduleName: Repos / Combined Status For Ref / Get
    method: get
    path: /repos/{owner}/{repo}/commits/{ref}/status
    description: >-
      Users with pull access in a repository can access a combined view of
      commit statuses for a given ref. The ref can be a SHA, a branch name, or a
      tag name.



      Additionally, a combined `state` is returned. The `state` is one of:


      *   **failure** if any of the contexts report as `error` or `failure`

      *   **pending** if there are no statuses or a context is `pending`

      *   **success** if the latest status for all contexts is `success`
    externalDocs: https://docs.github.com/rest/commits/statuses#get-the-combined-status-for-a-specific-reference
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: ref
        description: The commit reference. Can be a commit SHA, branch name
          (`heads/BRANCH_NAME`), or tag name (`tags/TAG_NAME`). For more
          information, see "[Git
          References](https://git-scm.com/book/en/v2/Git-Internals-Git-References)"
          in the Git documentation.
        paramKey: ref
        in: path
        schema:
          type: string
        required: true
      - paramName: perPage
        description: The number of results per page (max 100). For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: per_page
        in: query
        schema:
          type: number
          default: 30
        required: false
      - paramName: page
        description: The page number of the results to fetch. For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: page
        in: query
        schema:
          type: number
          default: 1
        required: false
  - moduleName: Repos / Statuses For Ref / List
    method: get
    path: /repos/{owner}/{repo}/commits/{ref}/statuses
    description: >-
      Users with pull access in a repository can view commit statuses for a
      given ref. The ref can be a SHA, a branch name, or a tag name. Statuses
      are returned in reverse chronological order. The first status in the list
      will be the latest one.


      This resource is also available via a legacy route: `GET
      /repos/:owner/:repo/statuses/:ref`.
    externalDocs: https://docs.github.com/rest/commits/statuses#list-commit-statuses-for-a-reference
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: ref
        description: The commit reference. Can be a commit SHA, branch name
          (`heads/BRANCH_NAME`), or tag name (`tags/TAG_NAME`). For more
          information, see "[Git
          References](https://git-scm.com/book/en/v2/Git-Internals-Git-References)"
          in the Git documentation.
        paramKey: ref
        in: path
        schema:
          type: string
        required: true
      - paramName: perPage
        description: The number of results per page (max 100). For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: per_page
        in: query
        schema:
          type: number
          default: 30
        required: false
      - paramName: page
        description: The page number of the results to fetch. For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: page
        in: query
        schema:
          type: number
          default: 1
        required: false
  - moduleName: Repos / Community Profile / Get
    method: get
    path: /repos/{owner}/{repo}/community/profile
    description: >-
      Returns all community profile metrics for a repository. The repository
      cannot be a fork.


      The returned metrics include an overall health score, the repository
      description, the presence of documentation, the

      detected code of conduct, the detected license, and the presence of
      ISSUE\_TEMPLATE, PULL\_REQUEST\_TEMPLATE,

      README, and CONTRIBUTING files.


      The `health_percentage` score is defined as a percentage of how many of

      the recommended community health files are present. For more information,
      see

      "[About community profiles for public
      repositories](https://docs.github.com/communities/setting-up-your-project-for-healthy-contributions/about-community-profiles-for-public-repositories)."


      `content_reports_enabled` is only returned for organization-owned
      repositories.
    externalDocs: https://docs.github.com/rest/metrics/community#get-community-profile-metrics
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
  - moduleName: Repos / Commits / Compare
    method: get
    path: /repos/{owner}/{repo}/compare/{basehead}
    description: >-
      Compares two commits against one another. You can compare refs (branches
      or tags) and commit SHAs in the same repository, or you can compare refs
      and commit SHAs that exist in different repositories within the same
      repository network, including fork branches. For more information about
      how to view a repository's network, see "[Understanding connections
      between
      repositories](https://docs.github.com/repositories/viewing-activity-and-data-for-your-repository/understanding-connections-between-repositories)."


      This endpoint is equivalent to running the `git log BASE..HEAD` command,
      but it returns commits in a different order. The `git log BASE..HEAD`
      command returns commits in reverse chronological order, whereas the API
      returns commits in chronological order.


      This endpoint supports the following custom media types. For more
      information, see "[Media
      types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."


      - **`application/vnd.github.diff`**: Returns the diff of the commit.

      - **`application/vnd.github.patch`**: Returns the patch of the commit.
      Diffs with binary data will have no `patch` property.


      The API response includes details about the files that were changed
      between the two commits. This includes the status of the change (if a file
      was added, removed, modified, or renamed), and details of the change
      itself. For example, files with a `renamed` status have a
      `previous_filename` field showing the previous filename of the file, and
      files with a `modified` status have a `patch` field showing the changes
      made to the file.


      When calling this endpoint without any paging parameter (`per_page` or
      `page`), the returned list is limited to 250 commits, and the last commit
      in the list is the most recent of the entire comparison.


      **Working with large comparisons**


      To process a response with a large number of commits, use a query
      parameter (`per_page` or `page`) to paginate the results. When using
      pagination:


      - The list of changed files is only shown on the first page of results,
      and it includes up to 300 changed files for the entire comparison.

      - The results are returned in chronological order, but the last commit in
      the returned list may not be the most recent one in the entire set if
      there are more pages of results.


      For more information on working with pagination, see "[Using pagination in
      the REST
      API](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api)."


      **Signature verification object**


      The response will include a `verification` object that describes the
      result of verifying the commit's signature. The `verification` object
      includes the following fields:


      | Name | Type | Description |

      | ---- | ---- | ----------- |

      | `verified` | `boolean` | Indicates whether GitHub considers the
      signature in this commit to be verified. |

      | `reason` | `string` | The reason for verified value. Possible values and
      their meanings are enumerated in table below. |

      | `signature` | `string` | The signature that was extracted from the
      commit. |

      | `payload` | `string` | The value that was signed. |


      These are the possible values for `reason` in the `verification` object:


      | Value | Description |

      | ----- | ----------- |

      | `expired_key` | The key that made the signature is expired. |

      | `not_signing_key` | The "signing" flag is not among the usage flags in
      the GPG key that made the signature. |

      | `gpgverify_error` | There was an error communicating with the signature
      verification service. |

      | `gpgverify_unavailable` | The signature verification service is
      currently unavailable. |

      | `unsigned` | The object does not include a signature. |

      | `unknown_signature_type` | A non-PGP signature was found in the commit.
      |

      | `no_user` | No user was associated with the `committer` email address in
      the commit. |

      | `unverified_email` | The `committer` email address in the commit was
      associated with a user, but the email address is not verified on their
      account. |

      | `bad_email` | The `committer` email address in the commit is not
      included in the identities of the PGP key that made the signature. |

      | `unknown_key` | The key that made the signature has not been registered
      with any user's account. |

      | `malformed_signature` | There was an error parsing the signature. |

      | `invalid` | The signature could not be cryptographically verified using
      the key whose key-id was found in the signature. |

      | `valid` | None of the above errors applied, so the signature is
      considered to be verified. |
    externalDocs: https://docs.github.com/rest/commits/commits#compare-two-commits
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: page
        description: The page number of the results to fetch. For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: page
        in: query
        schema:
          type: number
          default: 1
        required: false
      - paramName: perPage
        description: The number of results per page (max 100). For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: per_page
        in: query
        schema:
          type: number
          default: 30
        required: false
      - paramName: basehead
        description: The base branch and head branch to compare. This parameter expects
          the format `BASE...HEAD`. Both must be branch names in `repo`. To
          compare with a branch that exists in a different repository in the
          same network as `repo`, the `basehead` parameter expects the format
          `USERNAME:BASE...USERNAME:HEAD`.
        paramKey: basehead
        in: path
        schema:
          type: string
        required: true
  - moduleName: Repos / Content / Get
    method: get
    path: /repos/{owner}/{repo}/contents/{path}
    description: >-
      Gets the contents of a file or directory in a repository. Specify the file
      path or directory with the `path` parameter. If you omit the `path`
      parameter, you will receive the contents of the repository's root
      directory.


      This endpoint supports the following custom media types. For more
      information, see "[Media
      types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."


      - **`application/vnd.github.raw+json`**: Returns the raw file contents for
      files and symlinks.

      - **`application/vnd.github.html+json`**: Returns the file contents in
      HTML. Markup languages are rendered to HTML using GitHub's open-source
      [Markup library](https://github.com/github/markup).

      - **`application/vnd.github.object+json`**: Returns the contents in a
      consistent object format regardless of the content type. For example,
      instead of an array of objects for a directory, the response will be an
      object with an `entries` attribute containing the array of objects.


      If the content is a directory, the response will be an array of objects,
      one object for each item in the directory. When listing the contents of a
      directory, submodules have their "type" specified as "file". Logically,
      the value _should_ be "submodule". This behavior exists [for backwards
      compatibility purposes](https://git.io/v1YCW). In the next major version
      of the API, the type will be returned as "submodule".


      If the content is a symlink and the symlink's target is a normal file in
      the repository, then the API responds with the content of the file.
      Otherwise, the API responds with an object describing the symlink itself.


      If the content is a submodule, the `submodule_git_url` field identifies
      the location of the submodule repository, and the `sha` identifies a
      specific commit within the submodule repository. Git uses the given URL
      when cloning the submodule repository, and checks out the submodule at
      that specific commit. If the submodule repository is not hosted on
      github.com, the Git URLs (`git_url` and `_links["git"]`) and the
      github.com URLs (`html_url` and `_links["html"]`) will have null values.


      **Notes**:


      - To get a repository's contents recursively, you can [recursively get the
      tree](https://docs.github.com/rest/git/trees#get-a-tree).

      - This API has an upper limit of 1,000 files for a directory. If you need
      to retrieve

      more files, use the [Git Trees
      API](https://docs.github.com/rest/git/trees#get-a-tree).

      - Download URLs expire and are meant to be used just once. To ensure the
      download URL does not expire, please use the contents API to obtain a
      fresh download URL for each download.

      - If the requested file's size is:
        - 1 MB or smaller: All features of this endpoint are supported.
        - Between 1-100 MB: Only the `raw` or `object` custom media types are supported. Both will work as normal, except that when using the `object` media type, the `content` field will be an empty
      string and the `encoding` field will be `"none"`. To get the contents of
      these larger files, use the `raw` media type.
        - Greater than 100 MB: This endpoint is not supported.
    externalDocs: https://docs.github.com/rest/repos/contents#get-repository-content
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: path
        description: path parameter
        paramKey: path
        in: path
        schema:
          type: string
        required: true
      - paramName: ref
        description: "The name of the commit/branch/tag. Default: the repository’s
          default branch."
        paramKey: ref
        in: query
        schema:
          type: string
        required: false
  - moduleName: Repos / File Contents / Create Or Update
    method: put
    path: /repos/{owner}/{repo}/contents/{path}
    description: >-
      Creates a new file or replaces an existing file in a repository.


      > [!NOTE]

      > If you use this endpoint and the "[Delete a
      file](https://docs.github.com/rest/repos/contents/#delete-a-file)"
      endpoint in parallel, the concurrent requests will conflict and you will
      receive errors. You must use these endpoints serially instead.


      OAuth app tokens and personal access tokens (classic) need the `repo`
      scope to use this endpoint. The `workflow` scope is also required in order
      to modify files in the `.github/workflows` directory.
    externalDocs: https://docs.github.com/rest/repos/contents#create-or-update-file-contents
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: path
        description: path parameter
        paramKey: path
        in: path
        schema:
          type: string
        required: true
      - paramName: message
        description: The commit message.
        paramKey: message
        in: body
        schema:
          type: string
        required: true
      - paramName: content
        description: The new file content, using Base64 encoding.
        paramKey: content
        in: body
        schema:
          type: string
        required: true
      - paramName: sha
        description: "**Required if you are updating a file**. The blob SHA of the file
          being replaced."
        paramKey: sha
        in: body
        schema:
          type: string
        required: false
      - paramName: branch
        description: "The branch name. Default: the repository’s default branch."
        paramKey: branch
        in: body
        schema:
          type: string
        required: false
      - paramName: committer
        description: "The person that committed the file. Default: the authenticated user."
        paramKey: committer
        in: body
        schema:
          type: any
        required: false
      - paramName: author
        description: "The author of the file. Default: The `committer` or the
          authenticated user if you omit `committer`."
        paramKey: author
        in: body
        schema:
          type: any
        required: false
    requestBodyType: json
  - moduleName: Repos / File / Delete
    method: delete
    path: /repos/{owner}/{repo}/contents/{path}
    description: >-
      Deletes a file in a repository.


      You can provide an additional `committer` parameter, which is an object
      containing information about the committer. Or, you can provide an
      `author` parameter, which is an object containing information about the
      author.


      The `author` section is optional and is filled in with the `committer`
      information if omitted. If the `committer` information is omitted, the
      authenticated user's information is used.


      You must provide values for both `name` and `email`, whether you choose to
      use `author` or `committer`. Otherwise, you'll receive a `422` status
      code.


      > [!NOTE]

      > If you use this endpoint and the "[Create or update file
      contents](https://docs.github.com/rest/repos/contents/#create-or-update-file-contents)"
      endpoint in parallel, the concurrent requests will conflict and you will
      receive errors. You must use these endpoints serially instead.
    externalDocs: https://docs.github.com/rest/repos/contents#delete-a-file
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: path
        description: path parameter
        paramKey: path
        in: path
        schema:
          type: string
        required: true
      - paramName: message
        description: The commit message.
        paramKey: message
        in: body
        schema:
          type: string
        required: true
      - paramName: sha
        description: The blob SHA of the file being deleted.
        paramKey: sha
        in: body
        schema:
          type: string
        required: true
      - paramName: branch
        description: "The branch name. Default: the repository’s default branch"
        paramKey: branch
        in: body
        schema:
          type: string
        required: false
      - paramName: committer
        description: object containing information about the committer.
        paramKey: committer
        in: body
        schema:
          type: any
        required: false
      - paramName: author
        description: object containing information about the author.
        paramKey: author
        in: body
        schema:
          type: any
        required: false
    requestBodyType: json
  - moduleName: Repos / Contributors / List
    method: get
    path: /repos/{owner}/{repo}/contributors
    description: >-
      Lists contributors to the specified repository and sorts them by the
      number of commits per contributor in descending order. This endpoint may
      return information that is a few hours old because the GitHub REST API
      caches contributor data to improve performance.


      GitHub identifies contributors by author email address. This endpoint
      groups contribution counts by GitHub user, which includes all associated
      email addresses. To improve performance, only the first 500 author email
      addresses in the repository link to GitHub users. The rest will appear as
      anonymous contributors without associated GitHub user information.
    externalDocs: https://docs.github.com/rest/repos/repos#list-repository-contributors
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: anon
        description: Set to `1` or `true` to include anonymous contributors in results.
        paramKey: anon
        in: query
        schema:
          type: string
        required: false
      - paramName: perPage
        description: The number of results per page (max 100). For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: per_page
        in: query
        schema:
          type: number
          default: 30
        required: false
      - paramName: page
        description: The page number of the results to fetch. For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: page
        in: query
        schema:
          type: number
          default: 1
        required: false
  - moduleName: Dependabot / Repo / List Alerts
    method: get
    path: /repos/{owner}/{repo}/dependabot/alerts
    description: OAuth app tokens and personal access tokens (classic) need the
      `security_events` scope to use this endpoint. If this endpoint is only
      used with public repositories, the token can use the `public_repo` scope
      instead.
    externalDocs: https://docs.github.com/rest/dependabot/alerts#list-dependabot-alerts-for-a-repository
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: state
        description: >-
          A comma-separated list of states. If specified, only alerts with these
          states will be returned.


          Can be: `auto_dismissed`, `dismissed`, `fixed`, `open`
        paramKey: state
        in: query
        schema:
          type: string
        required: false
      - paramName: severity
        description: >-
          A comma-separated list of severities. If specified, only alerts with
          these severities will be returned.


          Can be: `low`, `medium`, `high`, `critical`
        paramKey: severity
        in: query
        schema:
          type: string
        required: false
      - paramName: ecosystem
        description: >-
          A comma-separated list of ecosystems. If specified, only alerts for
          these ecosystems will be returned.


          Can be: `composer`, `go`, `maven`, `npm`, `nuget`, `pip`, `pub`,
          `rubygems`, `rust`
        paramKey: ecosystem
        in: query
        schema:
          type: string
        required: false
      - paramName: package
        description: A comma-separated list of package names. If specified, only alerts
          for these packages will be returned.
        paramKey: package
        in: query
        schema:
          type: string
        required: false
      - paramName: manifest
        description: A comma-separated list of full manifest paths. If specified, only
          alerts for these manifests will be returned.
        paramKey: manifest
        in: query
        schema:
          type: string
        required: false
      - paramName: scope
        description: The scope of the vulnerable dependency. If specified, only alerts
          with this scope will be returned.
        paramKey: scope
        in: query
        schema:
          type: string
          enum:
            - development
            - runtime
        required: false
      - paramName: sort
        description: |-
          The property by which to sort the results.
          `created` means when the alert was created.
          `updated` means when the alert's state last changed.
        paramKey: sort
        in: query
        schema:
          type: string
          default: created
          enum:
            - created
            - updated
        required: false
      - paramName: direction
        description: The direction to sort the results by.
        paramKey: direction
        in: query
        schema:
          type: string
          default: desc
          enum:
            - asc
            - desc
        required: false
      - paramName: page
        description: "**Closing down notice**. Page number of the results to fetch. Use
          cursor-based pagination with `before` or `after` instead."
        paramKey: page
        in: query
        schema:
          type: number
          default: 1
        required: false
      - paramName: perPage
        description: The number of results per page (max 100). For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: per_page
        in: query
        schema:
          type: number
          default: 30
        required: false
      - paramName: before
        description: A cursor, as given in the [Link
          header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers).
          If specified, the query only searches for results before this cursor.
          For more information, see "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: before
        in: query
        schema:
          type: string
        required: false
      - paramName: after
        description: A cursor, as given in the [Link
          header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers).
          If specified, the query only searches for results after this cursor.
          For more information, see "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: after
        in: query
        schema:
          type: string
        required: false
      - paramName: first
        description: >-
          **Deprecated**. The number of results per page (max 100), starting
          from the first matching result.

          This parameter must not be used in combination with `last`.

          Instead, use `per_page` in combination with `after` to fetch the first
          page of results.
        paramKey: first
        in: query
        schema:
          type: number
          minimum: 1
          maximum: 100
          default: 30
        required: false
      - paramName: last
        description: >-
          **Deprecated**. The number of results per page (max 100), starting
          from the last matching result.

          This parameter must not be used in combination with `first`.

          Instead, use `per_page` in combination with `before` to fetch the last
          page of results.
        paramKey: last
        in: query
        schema:
          type: number
          minimum: 1
          maximum: 100
        required: false
  - moduleName: Dependabot / Repo / Get Alert
    method: get
    path: /repos/{owner}/{repo}/dependabot/alerts/{alert_number}
    description: OAuth app tokens and personal access tokens (classic) need the
      `security_events` scope to use this endpoint. If this endpoint is only
      used with public repositories, the token can use the `public_repo` scope
      instead.
    externalDocs: https://docs.github.com/rest/dependabot/alerts#get-a-dependabot-alert
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: alertNumber
        description: >-
          The number that identifies a Dependabot alert in its repository.

          You can find this at the end of the URL for a Dependabot alert within
          GitHub,

          or in `number` fields in the response from the

          `GET /repos/{owner}/{repo}/dependabot/alerts` operation.
        paramKey: alert_number
        in: path
        schema:
          type: number
        required: true
  - moduleName: Dependabot / Repo / Update Alert
    method: patch
    path: /repos/{owner}/{repo}/dependabot/alerts/{alert_number}
    description: >-
      The authenticated user must have access to security alerts for the
      repository to use this endpoint. For more information, see "[Granting
      access to security
      alerts](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-security-and-analysis-settings-for-your-repository#granting-access-to-security-alerts)."


      OAuth app tokens and personal access tokens (classic) need the
      `security_events` scope to use this endpoint. If this endpoint is only
      used with public repositories, the token can use the `public_repo` scope
      instead.
    externalDocs: https://docs.github.com/rest/dependabot/alerts#update-a-dependabot-alert
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: alertNumber
        description: >-
          The number that identifies a Dependabot alert in its repository.

          You can find this at the end of the URL for a Dependabot alert within
          GitHub,

          or in `number` fields in the response from the

          `GET /repos/{owner}/{repo}/dependabot/alerts` operation.
        paramKey: alert_number
        in: path
        schema:
          type: number
        required: true
      - paramName: state
        description: >-
          The state of the Dependabot alert.

          A `dismissed_reason` must be provided when setting the state to
          `dismissed`.
        paramKey: state
        in: body
        schema:
          type: string
          enum:
            - dismissed
            - open
        required: true
      - paramName: dismissedReason
        description: "**Required when `state` is `dismissed`.** A reason for dismissing
          the alert."
        paramKey: dismissed_reason
        in: body
        schema:
          type: string
          enum:
            - fix_started
            - inaccurate
            - no_bandwidth
            - not_used
            - tolerable_risk
        required: false
      - paramName: dismissedComment
        description: An optional comment associated with dismissing the alert.
        paramKey: dismissed_comment
        in: body
        schema:
          type: string
        required: false
    requestBodyType: json
  - moduleName: Dependabot / Repo / Secrets / List
    method: get
    path: /repos/{owner}/{repo}/dependabot/secrets
    description: >-
      Lists all secrets available in a repository without revealing their
      encrypted

      values.


      OAuth app tokens and personal access tokens (classic) need the `repo`
      scope to use this endpoint.
    externalDocs: https://docs.github.com/rest/dependabot/secrets#list-repository-secrets
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: perPage
        description: The number of results per page (max 100). For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: per_page
        in: query
        schema:
          type: number
          default: 30
        required: false
      - paramName: page
        description: The page number of the results to fetch. For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: page
        in: query
        schema:
          type: number
          default: 1
        required: false
  - moduleName: Dependabot / Repo / Secrets / Public Key
    method: get
    path: /repos/{owner}/{repo}/dependabot/secrets/public-key
    description: >-
      Gets your public key, which you need to encrypt secrets. You need to

      encrypt a secret before you can create or update secrets. Anyone with read
      access

      to the repository can use this endpoint.


      OAuth app tokens and personal access tokens (classic) need the `repo`
      scope to use this endpoint if the repository is private.
    externalDocs: https://docs.github.com/rest/dependabot/secrets#get-a-repository-public-key
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
  - moduleName: Dependabot / Repo / Secrets / Get
    method: get
    path: /repos/{owner}/{repo}/dependabot/secrets/{secret_name}
    description: >-
      Gets a single repository secret without revealing its encrypted value.


      OAuth app tokens and personal access tokens (classic) need the `repo`
      scope to use this endpoint.
    externalDocs: https://docs.github.com/rest/dependabot/secrets#get-a-repository-secret
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: secretName
        description: The name of the secret.
        paramKey: secret_name
        in: path
        schema:
          type: string
        required: true
  - moduleName: Dependabot / Repo / Secrets / Create Or Update
    method: put
    path: /repos/{owner}/{repo}/dependabot/secrets/{secret_name}
    description: >-
      Creates or updates a repository secret with an encrypted value. Encrypt
      your secret using

      [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages).
      For more information, see "[Encrypting secrets for the REST
      API](https://docs.github.com/rest/guides/encrypting-secrets-for-the-rest-api)."


      OAuth app tokens and personal access tokens (classic) need the `repo`
      scope to use this endpoint.
    externalDocs: https://docs.github.com/rest/dependabot/secrets#create-or-update-a-repository-secret
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: secretName
        description: The name of the secret.
        paramKey: secret_name
        in: path
        schema:
          type: string
        required: true
      - paramName: encryptedValue
        description: Value for your secret, encrypted with
          [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages)
          using the public key retrieved from the [Get a repository public
          key](https://docs.github.com/rest/dependabot/secrets#get-a-repository-public-key)
          endpoint.
        paramKey: encrypted_value
        in: body
        schema:
          type: string
        required: false
      - paramName: keyId
        description: ID of the key you used to encrypt the secret.
        paramKey: key_id
        in: body
        schema:
          type: string
        required: false
    requestBodyType: json
  - moduleName: Dependabot / Repo / Secrets / Delete
    method: delete
    path: /repos/{owner}/{repo}/dependabot/secrets/{secret_name}
    description: >-
      Deletes a secret in a repository using the secret name.


      OAuth app tokens and personal access tokens (classic) need the `repo`
      scope to use this endpoint.
    externalDocs: https://docs.github.com/rest/dependabot/secrets#delete-a-repository-secret
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: secretName
        description: The name of the secret.
        paramKey: secret_name
        in: path
        schema:
          type: string
        required: true
  - moduleName: Repos / Deployments / List
    method: get
    path: /repos/{owner}/{repo}/deployments
    description: "Simple filtering of deployments is available via query parameters:"
    externalDocs: https://docs.github.com/rest/deployments/deployments#list-deployments
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: sha
        description: The SHA recorded at creation time.
        paramKey: sha
        in: query
        schema:
          type: string
          default: none
        required: false
      - paramName: ref
        description: The name of the ref. This can be a branch, tag, or SHA.
        paramKey: ref
        in: query
        schema:
          type: string
          default: none
        required: false
      - paramName: task
        description: The name of the task for the deployment (e.g., `deploy` or
          `deploy:migrations`).
        paramKey: task
        in: query
        schema:
          type: string
          default: none
        required: false
      - paramName: environment
        description: The name of the environment that was deployed to (e.g., `staging`
          or `production`).
        paramKey: environment
        in: query
        schema:
          type: string
          default: none
        required: false
      - paramName: perPage
        description: The number of results per page (max 100). For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: per_page
        in: query
        schema:
          type: number
          default: 30
        required: false
      - paramName: page
        description: The page number of the results to fetch. For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: page
        in: query
        schema:
          type: number
          default: 1
        required: false
  - moduleName: Repos / Deployment / Create
    method: post
    path: /repos/{owner}/{repo}/deployments
    description: >-
      Deployments offer a few configurable parameters with certain defaults.


      The `ref` parameter can be any named branch, tag, or SHA. At GitHub we
      often deploy branches and verify them

      before we merge a pull request.


      The `environment` parameter allows deployments to be issued to different
      runtime environments. Teams often have

      multiple environments for verifying their applications, such as
      `production`, `staging`, and `qa`. This parameter

      makes it easier to track which environments have requested deployments.
      The default environment is `production`.


      The `auto_merge` parameter is used to ensure that the requested ref is not
      behind the repository's default branch. If

      the ref _is_ behind the default branch for the repository, we will attempt
      to merge it for you. If the merge succeeds,

      the API will return a successful merge commit. If merge conflicts prevent
      the merge from succeeding, the API will

      return a failure response.


      By default, [commit
      statuses](https://docs.github.com/rest/commits/statuses) for every
      submitted context must be in a `success`

      state. The `required_contexts` parameter allows you to specify a subset of
      contexts that must be `success`, or to

      specify contexts that have not yet been submitted. You are not required to
      use commit statuses to deploy. If you do

      not require any contexts or create any commit statuses, the deployment
      will always succeed.


      The `payload` parameter is available for any extra information that a
      deployment system might need. It is a JSON text

      field that will be passed on when a deployment event is dispatched.


      The `task` parameter is used by the deployment system to allow different
      execution paths. In the web world this might

      be `deploy:migrations` to run schema changes on the system. In the
      compiled world this could be a flag to compile an

      application with debugging enabled.


      Merged branch response:


      You will see this response when GitHub automatically merges the base
      branch into the topic branch instead of creating

      a deployment. This auto-merge happens when:

      *   Auto-merge option is enabled in the repository

      *   Topic branch does not include the latest changes on the base branch,
      which is `master` in the response example

      *   There are no merge conflicts


      If there are no new commits in the base branch, a new request to create a
      deployment should give a successful

      response.


      Merge conflict response:


      This error happens when the `auto_merge` option is enabled and when the
      default branch (in this case `master`), can't

      be merged into the branch that's being deployed (in this case
      `topic-branch`), due to merge conflicts.


      Failed commit status checks:


      This error happens when the `required_contexts` parameter indicates that
      one or more contexts need to have a `success`

      status for the commit to be deployed, but one or more of the required
      contexts do not have a state of `success`.


      OAuth app tokens and personal access tokens (classic) need the `repo` or
      `repo_deployment` scope to use this endpoint.
    externalDocs: https://docs.github.com/rest/deployments/deployments#create-a-deployment
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: ref
        description: The ref to deploy. This can be a branch, tag, or SHA.
        paramKey: ref
        in: body
        schema:
          type: string
        required: true
      - paramName: task
        description: Specifies a task to execute (e.g., `deploy` or `deploy:migrations`).
        paramKey: task
        in: body
        schema:
          type: string
          default: deploy
        required: false
      - paramName: autoMerge
        description: Attempts to automatically merge the default branch into the
          requested ref, if it's behind the default branch.
        paramKey: auto_merge
        in: body
        schema:
          type: boolean
          default: true
        required: false
      - paramName: requiredContexts
        description: The [status](https://docs.github.com/rest/commits/statuses)
          contexts to verify against commit status checks. If you omit this
          parameter, GitHub verifies all unique contexts before creating a
          deployment. To bypass checking entirely, pass an empty array. Defaults
          to all unique contexts.
        paramKey: required_contexts
        in: body
        schema:
          type: array
          items:
            type: any
        required: false
      - paramName: payload
        description: ""
        paramKey: payload
        in: body
        schema:
          type: any
        required: false
      - paramName: environment
        description: Name for the target deployment environment (e.g., `production`,
          `staging`, `qa`).
        paramKey: environment
        in: body
        schema:
          type: string
          default: production
        required: false
      - paramName: description
        description: Short description of the deployment.
        paramKey: description
        in: body
        schema:
          type: string
          default: ""
        required: false
      - paramName: transientEnvironment
        description: "Specifies if the given environment is specific to the deployment
          and will no longer exist at some point in the future. Default:
          `false`"
        paramKey: transient_environment
        in: body
        schema:
          type: boolean
          default: false
        required: false
      - paramName: productionEnvironment
        description: "Specifies if the given environment is one that end-users directly
          interact with. Default: `true` when `environment` is `production` and
          `false` otherwise."
        paramKey: production_environment
        in: body
        schema:
          type: boolean
        required: false
    requestBodyType: json
  - moduleName: Repos / Deployment / Get
    method: get
    path: /repos/{owner}/{repo}/deployments/{deployment_id}
    description: ""
    externalDocs: https://docs.github.com/rest/deployments/deployments#get-a-deployment
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: deploymentId
        description: deployment_id parameter
        paramKey: deployment_id
        in: path
        schema:
          type: number
        required: true
  - moduleName: Repos / Deployment / Delete
    method: delete
    path: /repos/{owner}/{repo}/deployments/{deployment_id}
    description: >-
      If the repository only has one deployment, you can delete the deployment
      regardless of its status. If the repository has more than one deployment,
      you can only delete inactive deployments. This ensures that repositories
      with multiple deployments will always have an active deployment.


      To set a deployment as inactive, you must:


      *   Create a new deployment that is active so that the system has a record
      of the current state, then delete the previously active deployment.

      *   Mark the active deployment as inactive by adding any non-successful
      deployment status.


      For more information, see "[Create a
      deployment](https://docs.github.com/rest/deployments/deployments/#create-a-deployment)"
      and "[Create a deployment
      status](https://docs.github.com/rest/deployments/statuses#create-a-deployment-status)."


      OAuth app tokens and personal access tokens (classic) need the `repo` or
      `repo_deployment` scope to use this endpoint.
    externalDocs: https://docs.github.com/rest/deployments/deployments#delete-a-deployment
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: deploymentId
        description: deployment_id parameter
        paramKey: deployment_id
        in: path
        schema:
          type: number
        required: true
  - moduleName: Repos / Deployment Statuses / List
    method: get
    path: /repos/{owner}/{repo}/deployments/{deployment_id}/statuses
    description: "Users with pull access can view deployment statuses for a deployment:"
    externalDocs: https://docs.github.com/rest/deployments/statuses#list-deployment-statuses
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: deploymentId
        description: deployment_id parameter
        paramKey: deployment_id
        in: path
        schema:
          type: number
        required: true
      - paramName: perPage
        description: The number of results per page (max 100). For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: per_page
        in: query
        schema:
          type: number
          default: 30
        required: false
      - paramName: page
        description: The page number of the results to fetch. For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: page
        in: query
        schema:
          type: number
          default: 1
        required: false
  - moduleName: Repos / Deployment Status / Create
    method: post
    path: /repos/{owner}/{repo}/deployments/{deployment_id}/statuses
    description: >-
      Users with `push` access can create deployment statuses for a given
      deployment.


      OAuth app tokens and personal access tokens (classic) need the
      `repo_deployment` scope to use this endpoint.
    externalDocs: https://docs.github.com/rest/deployments/statuses#create-a-deployment-status
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: deploymentId
        description: deployment_id parameter
        paramKey: deployment_id
        in: path
        schema:
          type: number
        required: true
      - paramName: state
        description: The state of the status. When you set a transient deployment to
          `inactive`, the deployment will be shown as `destroyed` in GitHub.
        paramKey: state
        in: body
        schema:
          type: string
          enum:
            - error
            - failure
            - inactive
            - in_progress
            - queued
            - pending
            - success
        required: true
      - paramName: targetUrl
        description: >-
          The target URL to associate with this status. This URL should contain
          output to keep the user updated while the task is running or serve as
          historical information for what happened in the deployment.


          > [!NOTE]

          > It's recommended to use the `log_url` parameter, which replaces
          `target_url`.
        paramKey: target_url
        in: body
        schema:
          type: string
          default: ""
        required: false
      - paramName: logUrl
        description: "The full URL of the deployment's output. This parameter replaces
          `target_url`. We will continue to accept `target_url` to support
          legacy uses, but we recommend replacing `target_url` with `log_url`.
          Setting `log_url` will automatically set `target_url` to the same
          value. Default: `\"\"`"
        paramKey: log_url
        in: body
        schema:
          type: string
          default: ""
        required: false
      - paramName: description
        description: A short description of the status. The maximum description length
          is 140 characters.
        paramKey: description
        in: body
        schema:
          type: string
          default: ""
        required: false
      - paramName: environment
        description: Name for the target deployment environment, which can be changed
          when setting a deploy status. For example, `production`, `staging`, or
          `qa`. If not defined, the environment of the previous status on the
          deployment will be used, if it exists. Otherwise, the environment of
          the deployment will be used.
        paramKey: environment
        in: body
        schema:
          type: string
        required: false
      - paramName: environmentUrl
        description: 'Sets the URL for accessing your environment. Default: `""`'
        paramKey: environment_url
        in: body
        schema:
          type: string
          default: ""
        required: false
      - paramName: autoInactive
        description: "Adds a new `inactive` status to all prior non-transient,
          non-production environment deployments with the same repository and
          `environment` name as the created status's deployment. An `inactive`
          status is only added to deployments that had a `success` state.
          Default: `true`"
        paramKey: auto_inactive
        in: body
        schema:
          type: boolean
        required: false
    requestBodyType: json
  - moduleName: Repos / Deployment Status / Get
    method: get
    path: /repos/{owner}/{repo}/deployments/{deployment_id}/statuses/{status_id}
    description: "Users with pull access can view a deployment status for a deployment:"
    externalDocs: https://docs.github.com/rest/deployments/statuses#get-a-deployment-status
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: deploymentId
        description: deployment_id parameter
        paramKey: deployment_id
        in: path
        schema:
          type: number
        required: true
      - paramName: statusId
        description: ""
        paramKey: status_id
        in: path
        schema:
          type: number
        required: true
  - moduleName: Repos / Dispatch Event / Create
    method: post
    path: /repos/{owner}/{repo}/dispatches
    description: >-
      You can use this endpoint to trigger a webhook event called
      `repository_dispatch` when you want activity that happens outside of
      GitHub to trigger a GitHub Actions workflow or GitHub App webhook. You
      must configure your GitHub Actions workflow or GitHub App to run when the
      `repository_dispatch` event occurs. For an example `repository_dispatch`
      webhook payload, see
      "[RepositoryDispatchEvent](https://docs.github.com/webhooks/event-payloads/#repository_dispatch)."


      The `client_payload` parameter is available for any extra information that
      your workflow might need. This parameter is a JSON payload that will be
      passed on when the webhook event is dispatched. For example, the
      `client_payload` can include a message that a user would like to send
      using a GitHub Actions workflow. Or the `client_payload` can be used as a
      test to debug your workflow.


      This input example shows how you can use the `client_payload` as a test to
      debug your workflow.


      OAuth app tokens and personal access tokens (classic) need the `repo`
      scope to use this endpoint.
    externalDocs: https://docs.github.com/rest/repos/repos#create-a-repository-dispatch-event
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: eventType
        description: A custom webhook event name. Must be 100 characters or fewer.
        paramKey: event_type
        in: body
        schema:
          type: string
        required: true
      - paramName: clientPayload
        description: JSON payload with extra information about the webhook event that
          your action or workflow may use. The maximum number of top-level
          properties is 10. The total size of the JSON payload must be less than
          64KB.
        paramKey: client_payload
        in: body
        schema:
          type: any
        required: false
    requestBodyType: json
  - moduleName: Repos / Environments / List
    method: get
    path: /repos/{owner}/{repo}/environments
    description: >-
      Lists the environments for a repository.


      Anyone with read access to the repository can use this endpoint.


      OAuth app tokens and personal access tokens (classic) need the `repo`
      scope to use this endpoint with a private repository.
    externalDocs: https://docs.github.com/rest/deployments/environments#list-environments
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: perPage
        description: The number of results per page (max 100). For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: per_page
        in: query
        schema:
          type: number
          default: 30
        required: false
      - paramName: page
        description: The page number of the results to fetch. For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: page
        in: query
        schema:
          type: number
          default: 1
        required: false
  - moduleName: Repos / Environment / Get
    method: get
    path: /repos/{owner}/{repo}/environments/{environment_name}
    description: >-
      > [!NOTE]

      > To get information about name patterns that branches must match in order
      to deploy to this environment, see "[Get a deployment branch
      policy](/rest/deployments/branch-policies#get-a-deployment-branch-policy)."


      Anyone with read access to the repository can use this endpoint.


      OAuth app tokens and personal access tokens (classic) need the `repo`
      scope to use this endpoint with a private repository.
    externalDocs: https://docs.github.com/rest/deployments/environments#get-an-environment
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: environmentName
        description: The name of the environment. The name must be URL encoded. For
          example, any slashes in the name must be replaced with `%2F`.
        paramKey: environment_name
        in: path
        schema:
          type: string
        required: true
  - moduleName: Repos / Environment / Create Or Update
    method: put
    path: /repos/{owner}/{repo}/environments/{environment_name}
    description: >-
      Create or update an environment with protection rules, such as required
      reviewers. For more information about environment protection rules, see
      "[Environments](/actions/reference/environments#environment-protection-rules)."


      > [!NOTE]

      > To create or update name patterns that branches must match in order to
      deploy to this environment, see "[Deployment branch
      policies](/rest/deployments/branch-policies)."


      > [!NOTE]

      > To create or update secrets for an environment, see "[GitHub Actions
      secrets](/rest/actions/secrets)."


      OAuth app tokens and personal access tokens (classic) need the `repo`
      scope to use this endpoint.
    externalDocs: https://docs.github.com/rest/deployments/environments#create-or-update-an-environment
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: environmentName
        description: The name of the environment. The name must be URL encoded. For
          example, any slashes in the name must be replaced with `%2F`.
        paramKey: environment_name
        in: path
        schema:
          type: string
        required: true
      - paramName: waitTimer
        description: The amount of time to delay a job after the job is initially
          triggered. The time (in minutes) must be an integer between 0 and
          43,200 (30 days).
        paramKey: wait_timer
        in: body
        schema:
          type: number
        required: false
      - paramName: preventSelfReview
        description: Whether or not a user who created the job is prevented from
          approving their own job.
        paramKey: prevent_self_review
        in: body
        schema:
          type: boolean
        required: false
      - paramName: reviewers
        description: The people or teams that may review jobs that reference the
          environment. You can list up to six users or teams as reviewers. The
          reviewers must have at least read access to the repository. Only one
          of the required reviewers needs to approve the job for it to proceed.
        paramKey: reviewers
        in: body
        schema:
          type: array
          items:
            type: any
        required: false
      - paramName: deploymentBranchPolicy
        description: The type of deployment branch policy for this environment. To allow
          all branches to deploy, set to `null`.
        paramKey: deployment_branch_policy
        in: body
        schema:
          type: any
        required: false
    requestBodyType: json
  - moduleName: Repos / Environment / Delete
    method: delete
    path: /repos/{owner}/{repo}/environments/{environment_name}
    description: OAuth app tokens and personal access tokens (classic) need the
      `repo` scope to use this endpoint.
    externalDocs: https://docs.github.com/rest/deployments/environments#delete-an-environment
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: environmentName
        description: The name of the environment. The name must be URL encoded. For
          example, any slashes in the name must be replaced with `%2F`.
        paramKey: environment_name
        in: path
        schema:
          type: string
        required: true
  - moduleName: Repos / Deployment Branch Policies / List
    method: get
    path: /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies
    description: >-
      Lists the deployment branch policies for an environment.


      Anyone with read access to the repository can use this endpoint.


      OAuth app tokens and personal access tokens (classic) need the `repo`
      scope to use this endpoint with a private repository.
    externalDocs: https://docs.github.com/rest/deployments/branch-policies#list-deployment-branch-policies
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: environmentName
        description: The name of the environment. The name must be URL encoded. For
          example, any slashes in the name must be replaced with `%2F`.
        paramKey: environment_name
        in: path
        schema:
          type: string
        required: true
      - paramName: perPage
        description: The number of results per page (max 100). For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: per_page
        in: query
        schema:
          type: number
          default: 30
        required: false
      - paramName: page
        description: The page number of the results to fetch. For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: page
        in: query
        schema:
          type: number
          default: 1
        required: false
  - moduleName: Repos / Deployment Branch Policy / Create
    method: post
    path: /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies
    description: >-
      Creates a deployment branch or tag policy for an environment.


      OAuth app tokens and personal access tokens (classic) need the `repo`
      scope to use this endpoint.
    externalDocs: https://docs.github.com/rest/deployments/branch-policies#create-a-deployment-branch-policy
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: environmentName
        description: The name of the environment. The name must be URL encoded. For
          example, any slashes in the name must be replaced with `%2F`.
        paramKey: environment_name
        in: path
        schema:
          type: string
        required: true
      - paramName: name
        description: >-
          The name pattern that branches or tags must match in order to deploy
          to the environment.


          Wildcard characters will not match `/`. For example, to match branches
          that begin with `release/` and contain an additional single slash, use
          `release/*/*`.

          For more information about pattern matching syntax, see the [Ruby
          File.fnmatch
          documentation](https://ruby-doc.org/core-2.5.1/File.html#method-c-fnmatch).
        paramKey: name
        in: body
        schema:
          type: string
        required: true
      - paramName: type
        description: Whether this rule targets a branch or tag
        paramKey: type
        in: body
        schema:
          type: string
          enum:
            - branch
            - tag
        required: false
    requestBodyType: json
  - moduleName: Repos / Deployment Branch Policy / Get
    method: get
    path: /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}
    description: >-
      Gets a deployment branch or tag policy for an environment.


      Anyone with read access to the repository can use this endpoint.


      OAuth app tokens and personal access tokens (classic) need the `repo`
      scope to use this endpoint with a private repository.
    externalDocs: https://docs.github.com/rest/deployments/branch-policies#get-a-deployment-branch-policy
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: environmentName
        description: The name of the environment. The name must be URL encoded. For
          example, any slashes in the name must be replaced with `%2F`.
        paramKey: environment_name
        in: path
        schema:
          type: string
        required: true
      - paramName: branchPolicyId
        description: The unique identifier of the branch policy.
        paramKey: branch_policy_id
        in: path
        schema:
          type: number
        required: true
  - moduleName: Repos / Deployment Branch Policy / Update
    method: put
    path: /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}
    description: >-
      Updates a deployment branch or tag policy for an environment.


      OAuth app tokens and personal access tokens (classic) need the `repo`
      scope to use this endpoint.
    externalDocs: https://docs.github.com/rest/deployments/branch-policies#update-a-deployment-branch-policy
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: environmentName
        description: The name of the environment. The name must be URL encoded. For
          example, any slashes in the name must be replaced with `%2F`.
        paramKey: environment_name
        in: path
        schema:
          type: string
        required: true
      - paramName: branchPolicyId
        description: The unique identifier of the branch policy.
        paramKey: branch_policy_id
        in: path
        schema:
          type: number
        required: true
      - paramName: name
        description: >-
          The name pattern that branches must match in order to deploy to the
          environment.


          Wildcard characters will not match `/`. For example, to match branches
          that begin with `release/` and contain an additional single slash, use
          `release/*/*`.

          For more information about pattern matching syntax, see the [Ruby
          File.fnmatch
          documentation](https://ruby-doc.org/core-2.5.1/File.html#method-c-fnmatch).
        paramKey: name
        in: body
        schema:
          type: string
        required: true
    requestBodyType: json
  - moduleName: Repos / Deployment Branch Policy / Delete
    method: delete
    path: /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}
    description: >-
      Deletes a deployment branch or tag policy for an environment.


      OAuth app tokens and personal access tokens (classic) need the `repo`
      scope to use this endpoint.
    externalDocs: https://docs.github.com/rest/deployments/branch-policies#delete-a-deployment-branch-policy
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: environmentName
        description: The name of the environment. The name must be URL encoded. For
          example, any slashes in the name must be replaced with `%2F`.
        paramKey: environment_name
        in: path
        schema:
          type: string
        required: true
      - paramName: branchPolicyId
        description: The unique identifier of the branch policy.
        paramKey: branch_policy_id
        in: path
        schema:
          type: number
        required: true
  - moduleName: Repos / Deployment Protection Rules / List
    method: get
    path: /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules
    description: >-
      Gets all custom deployment protection rules that are enabled for an
      environment. Anyone with read access to the repository can use this
      endpoint. For more information about environments, see "[Using
      environments for
      deployment](https://docs.github.com/actions/deployment/targeting-different-environments/using-environments-for-deployment)."


      For more information about the app that is providing this custom
      deployment rule, see the [documentation for the `GET /apps/{app_slug}`
      endpoint](https://docs.github.com/rest/apps/apps#get-an-app).


      OAuth app tokens and personal access tokens (classic) need the `repo`
      scope to use this endpoint with a private repository.
    externalDocs: https://docs.github.com/rest/deployments/protection-rules#get-all-deployment-protection-rules-for-an-environment
    params:
      - paramName: environmentName
        description: The name of the environment. The name must be URL encoded. For
          example, any slashes in the name must be replaced with `%2F`.
        paramKey: environment_name
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
  - moduleName: Repos / Deployment Protection Rule / Create
    method: post
    path: /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules
    description: >-
      Enable a custom deployment protection rule for an environment.


      The authenticated user must have admin or owner permissions to the
      repository to use this endpoint.


      For more information about the app that is providing this custom
      deployment rule, see the [documentation for the `GET /apps/{app_slug}`
      endpoint](https://docs.github.com/rest/apps/apps#get-an-app).


      OAuth app tokens and personal access tokens (classic) need the `repo`
      scope to use this endpoint.
    externalDocs: https://docs.github.com/rest/deployments/protection-rules#create-a-custom-deployment-protection-rule-on-an-environment
    params:
      - paramName: environmentName
        description: The name of the environment. The name must be URL encoded. For
          example, any slashes in the name must be replaced with `%2F`.
        paramKey: environment_name
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: integrationId
        description: The ID of the custom app that will be enabled on the environment.
        paramKey: integration_id
        in: body
        schema:
          type: number
        required: false
    requestBodyType: json
  - moduleName: Repos / Deployment Rule Integrations / List
    method: get
    path: /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/apps
    description: >-
      Gets all custom deployment protection rule integrations that are available
      for an environment.


      The authenticated user must have admin or owner permissions to the
      repository to use this endpoint.


      For more information about environments, see "[Using environments for
      deployment](https://docs.github.com/actions/deployment/targeting-different-environments/using-environments-for-deployment)."


      For more information about the app that is providing this custom
      deployment rule, see "[GET an
      app](https://docs.github.com/rest/apps/apps#get-an-app)".


      OAuth app tokens and personal access tokens (classic) need the `repo`
      scope to use this endpoint with a private repository.
    externalDocs: https://docs.github.com/rest/deployments/protection-rules#list-custom-deployment-rule-integrations-available-for-an-environment
    params:
      - paramName: environmentName
        description: The name of the environment. The name must be URL encoded. For
          example, any slashes in the name must be replaced with `%2F`.
        paramKey: environment_name
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: page
        description: The page number of the results to fetch. For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: page
        in: query
        schema:
          type: number
          default: 1
        required: false
      - paramName: perPage
        description: The number of results per page (max 100). For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: per_page
        in: query
        schema:
          type: number
          default: 30
        required: false
  - moduleName: Repos / Custom Deployment Protection Rule / Get
    method: get
    path: /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/{protection_rule_id}
    description: >-
      Gets an enabled custom deployment protection rule for an environment.
      Anyone with read access to the repository can use this endpoint. For more
      information about environments, see "[Using environments for
      deployment](https://docs.github.com/actions/deployment/targeting-different-environments/using-environments-for-deployment)."


      For more information about the app that is providing this custom
      deployment rule, see [`GET
      /apps/{app_slug}`](https://docs.github.com/rest/apps/apps#get-an-app).


      OAuth app tokens and personal access tokens (classic) need the `repo`
      scope to use this endpoint with a private repository.
    externalDocs: https://docs.github.com/rest/deployments/protection-rules#get-a-custom-deployment-protection-rule
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: environmentName
        description: The name of the environment. The name must be URL encoded. For
          example, any slashes in the name must be replaced with `%2F`.
        paramKey: environment_name
        in: path
        schema:
          type: string
        required: true
      - paramName: protectionRuleId
        description: The unique identifier of the protection rule.
        paramKey: protection_rule_id
        in: path
        schema:
          type: number
        required: true
  - moduleName: Repos / Deployment Protection Rule / Disable
    method: delete
    path: /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/{protection_rule_id}
    description: >-
      Disables a custom deployment protection rule for an environment.


      The authenticated user must have admin or owner permissions to the
      repository to use this endpoint.


      OAuth app tokens and personal access tokens (classic) need the `repo`
      scope to use this endpoint.
    externalDocs: https://docs.github.com/rest/deployments/protection-rules#disable-a-custom-protection-rule-for-an-environment
    params:
      - paramName: environmentName
        description: The name of the environment. The name must be URL encoded. For
          example, any slashes in the name must be replaced with `%2F`.
        paramKey: environment_name
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: protectionRuleId
        description: The unique identifier of the protection rule.
        paramKey: protection_rule_id
        in: path
        schema:
          type: number
        required: true
  - moduleName: Activity / Repo Events / List
    method: get
    path: /repos/{owner}/{repo}/events
    description: >-
      > [!NOTE]

      > This API is not built to serve real-time use cases. Depending on the
      time of day, event latency can be anywhere from 30s to 6h.
    externalDocs: https://docs.github.com/rest/activity/events#list-repository-events
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: perPage
        description: The number of results per page (max 100). For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: per_page
        in: query
        schema:
          type: number
          default: 30
        required: false
      - paramName: page
        description: The page number of the results to fetch. For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: page
        in: query
        schema:
          type: number
          default: 1
        required: false
  - moduleName: Repos / Forks / List
    method: get
    path: /repos/{owner}/{repo}/forks
    description: ""
    externalDocs: https://docs.github.com/rest/repos/forks#list-forks
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: sort
        description: The sort order. `stargazers` will sort by star count.
        paramKey: sort
        in: query
        schema:
          type: string
          default: newest
          enum:
            - newest
            - oldest
            - stargazers
            - watchers
        required: false
      - paramName: perPage
        description: The number of results per page (max 100). For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: per_page
        in: query
        schema:
          type: number
          default: 30
        required: false
      - paramName: page
        description: The page number of the results to fetch. For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: page
        in: query
        schema:
          type: number
          default: 1
        required: false
  - moduleName: Repos / Fork / Create
    method: post
    path: /repos/{owner}/{repo}/forks
    description: >-
      Create a fork for the authenticated user.


      > [!NOTE]

      > Forking a Repository happens asynchronously. You may have to wait a
      short period of time before you can access the git objects. If this takes
      longer than 5 minutes, be sure to contact [GitHub
      Support](https://support.github.com/contact?tags=dotcom-rest-api).


      > [!NOTE]

      > Although this endpoint works with GitHub Apps, the GitHub App must be
      installed on the destination account with access to all repositories and
      on the source account with access to the source repository.
    externalDocs: https://docs.github.com/rest/repos/forks#create-a-fork
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: organization
        description: Optional parameter to specify the organization name if forking into
          an organization.
        paramKey: organization
        in: body
        schema:
          type: string
        required: false
      - paramName: name
        description: When forking from an existing repository, a new name for the fork.
        paramKey: name
        in: body
        schema:
          type: string
        required: false
      - paramName: defaultBranchOnly
        description: When forking from an existing repository, fork with only the
          default branch.
        paramKey: default_branch_only
        in: body
        schema:
          type: boolean
        required: false
    requestBodyType: json
  - moduleName: Git / Blob / Create
    method: post
    path: /repos/{owner}/{repo}/git/blobs
    description: ""
    externalDocs: https://docs.github.com/rest/git/blobs#create-a-blob
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: content
        description: The new blob's content.
        paramKey: content
        in: body
        schema:
          type: string
        required: true
      - paramName: encoding
        description: The encoding used for `content`. Currently, `"utf-8"` and
          `"base64"` are supported.
        paramKey: encoding
        in: body
        schema:
          type: string
          default: utf-8
        required: false
    requestBodyType: json
  - moduleName: Git / Blob / Get
    method: get
    path: /repos/{owner}/{repo}/git/blobs/{file_sha}
    description: >-
      The `content` in the response will always be Base64 encoded.


      This endpoint supports the following custom media types. For more
      information, see "[Media
      types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."


      - **`application/vnd.github.raw+json`**: Returns the raw blob data.

      - **`application/vnd.github+json`**: Returns a JSON representation of the
      blob with `content` as a base64 encoded string. This is the default if no
      media type is specified.


      **Note** This endpoint supports blobs up to 100 megabytes in size.
    externalDocs: https://docs.github.com/rest/git/blobs#get-a-blob
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: fileSha
        description: ""
        paramKey: file_sha
        in: path
        schema:
          type: string
        required: true
  - moduleName: Git / Commit / Create
    method: post
    path: /repos/{owner}/{repo}/git/commits
    description: >-
      Creates a new Git [commit
      object](https://git-scm.com/book/en/v2/Git-Internals-Git-Objects).


      **Signature verification object**


      The response will include a `verification` object that describes the
      result of verifying the commit's signature. The following fields are
      included in the `verification` object:


      | Name | Type | Description |

      | ---- | ---- | ----------- |

      | `verified` | `boolean` | Indicates whether GitHub considers the
      signature in this commit to be verified. |

      | `reason` | `string` | The reason for verified value. Possible values and
      their meanings are enumerated in the table below. |

      | `signature` | `string` | The signature that was extracted from the
      commit. |

      | `payload` | `string` | The value that was signed. |


      These are the possible values for `reason` in the `verification` object:


      | Value | Description |

      | ----- | ----------- |

      | `expired_key` | The key that made the signature is expired. |

      | `not_signing_key` | The "signing" flag is not among the usage flags in
      the GPG key that made the signature. |

      | `gpgverify_error` | There was an error communicating with the signature
      verification service. |

      | `gpgverify_unavailable` | The signature verification service is
      currently unavailable. |

      | `unsigned` | The object does not include a signature. |

      | `unknown_signature_type` | A non-PGP signature was found in the commit.
      |

      | `no_user` | No user was associated with the `committer` email address in
      the commit. |

      | `unverified_email` | The `committer` email address in the commit was
      associated with a user, but the email address is not verified on their
      account. |

      | `bad_email` | The `committer` email address in the commit is not
      included in the identities of the PGP key that made the signature. |

      | `unknown_key` | The key that made the signature has not been registered
      with any user's account. |

      | `malformed_signature` | There was an error parsing the signature. |

      | `invalid` | The signature could not be cryptographically verified using
      the key whose key-id was found in the signature. |

      | `valid` | None of the above errors applied, so the signature is
      considered to be verified. |
    externalDocs: https://docs.github.com/rest/git/commits#create-a-commit
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: message
        description: The commit message
        paramKey: message
        in: body
        schema:
          type: string
        required: true
      - paramName: tree
        description: The SHA of the tree object this commit points to
        paramKey: tree
        in: body
        schema:
          type: string
        required: true
      - paramName: parents
        description: The full SHAs of the commits that were the parents of this commit.
          If omitted or empty, the commit will be written as a root commit. For
          a single parent, an array of one SHA should be provided; for a merge
          commit, an array of more than one should be provided.
        paramKey: parents
        in: body
        schema:
          type: array
          items:
            type: any
        required: false
      - paramName: author
        description: Information about the author of the commit. By default, the
          `author` will be the authenticated user and the current date. See the
          `author` and `committer` object below for details.
        paramKey: author
        in: body
        schema:
          type: any
        required: false
      - paramName: committer
        description: Information about the person who is making the commit. By default,
          `committer` will use the information set in `author`. See the `author`
          and `committer` object below for details.
        paramKey: committer
        in: body
        schema:
          type: any
        required: false
      - paramName: signature
        description: The [PGP
          signature](https://en.wikipedia.org/wiki/Pretty_Good_Privacy) of the
          commit. GitHub adds the signature to the `gpgsig` header of the
          created commit. For a commit signature to be verifiable by Git or
          GitHub, it must be an ASCII-armored detached PGP signature over the
          string commit as it would be written to the object database. To pass a
          `signature` parameter, you need to first manually create a valid PGP
          signature, which can be complicated. You may find it easier to [use
          the command
          line](https://git-scm.com/book/id/v2/Git-Tools-Signing-Your-Work) to
          create signed commits.
        paramKey: signature
        in: body
        schema:
          type: string
        required: false
    requestBodyType: json
  - moduleName: Git / Commit / Get
    method: get
    path: /repos/{owner}/{repo}/git/commits/{commit_sha}
    description: >-
      Gets a Git [commit
      object](https://git-scm.com/book/en/v2/Git-Internals-Git-Objects).


      To get the contents of a commit, see "[Get a
      commit](/rest/commits/commits#get-a-commit)."


      **Signature verification object**


      The response will include a `verification` object that describes the
      result of verifying the commit's signature. The following fields are
      included in the `verification` object:


      | Name | Type | Description |

      | ---- | ---- | ----------- |

      | `verified` | `boolean` | Indicates whether GitHub considers the
      signature in this commit to be verified. |

      | `reason` | `string` | The reason for verified value. Possible values and
      their meanings are enumerated in the table below. |

      | `signature` | `string` | The signature that was extracted from the
      commit. |

      | `payload` | `string` | The value that was signed. |


      These are the possible values for `reason` in the `verification` object:


      | Value | Description |

      | ----- | ----------- |

      | `expired_key` | The key that made the signature is expired. |

      | `not_signing_key` | The "signing" flag is not among the usage flags in
      the GPG key that made the signature. |

      | `gpgverify_error` | There was an error communicating with the signature
      verification service. |

      | `gpgverify_unavailable` | The signature verification service is
      currently unavailable. |

      | `unsigned` | The object does not include a signature. |

      | `unknown_signature_type` | A non-PGP signature was found in the commit.
      |

      | `no_user` | No user was associated with the `committer` email address in
      the commit. |

      | `unverified_email` | The `committer` email address in the commit was
      associated with a user, but the email address is not verified on their
      account. |

      | `bad_email` | The `committer` email address in the commit is not
      included in the identities of the PGP key that made the signature. |

      | `unknown_key` | The key that made the signature has not been registered
      with any user's account. |

      | `malformed_signature` | There was an error parsing the signature. |

      | `invalid` | The signature could not be cryptographically verified using
      the key whose key-id was found in the signature. |

      | `valid` | None of the above errors applied, so the signature is
      considered to be verified. |
    externalDocs: https://docs.github.com/rest/git/commits#get-a-commit-object
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: commitSha
        description: The SHA of the commit.
        paramKey: commit_sha
        in: path
        schema:
          type: string
        required: true
  - moduleName: Git / Refs / List Matched
    method: get
    path: /repos/{owner}/{repo}/git/matching-refs/{ref}
    description: >-
      Returns an array of references from your Git database that match the
      supplied name. The `:ref` in the URL must be formatted as `heads/<branch
      name>` for branches and `tags/<tag name>` for tags. If the `:ref` doesn't
      exist in the repository, but existing refs start with `:ref`, they will be
      returned as an array.


      When you use this endpoint without providing a `:ref`, it will return an
      array of all the references from your Git database, including notes and
      stashes if they exist on the server. Anything in the namespace is
      returned, not just `heads` and `tags`.


      > [!NOTE]

      > You need to explicitly [request a pull
      request](https://docs.github.com/rest/pulls/pulls#get-a-pull-request) to
      trigger a test merge commit, which checks the mergeability of pull
      requests. For more information, see "[Checking mergeability of pull
      requests](https://docs.github.com/rest/guides/getting-started-with-the-git-database-api#checking-mergeability-of-pull-requests)".


      If you request matching references for a branch named `feature` but the
      branch `feature` doesn't exist, the response can still include other
      matching head refs that start with the word `feature`, such as `featureA`
      and `featureB`.
    externalDocs: https://docs.github.com/rest/git/refs#list-matching-references
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: ref
        description: The Git reference. For more information, see "[Git
          References](https://git-scm.com/book/en/v2/Git-Internals-Git-References)"
          in the Git documentation.
        paramKey: ref
        in: path
        schema:
          type: string
        required: true
  - moduleName: Git / Ref / Get
    method: get
    path: /repos/{owner}/{repo}/git/ref/{ref}
    description: >-
      Returns a single reference from your Git database. The `:ref` in the URL
      must be formatted as `heads/<branch name>` for branches and `tags/<tag
      name>` for tags. If the `:ref` doesn't match an existing ref, a `404` is
      returned.


      > [!NOTE]

      > You need to explicitly [request a pull
      request](https://docs.github.com/rest/pulls/pulls#get-a-pull-request) to
      trigger a test merge commit, which checks the mergeability of pull
      requests. For more information, see "[Checking mergeability of pull
      requests](https://docs.github.com/rest/guides/getting-started-with-the-git-database-api#checking-mergeability-of-pull-requests)".
    externalDocs: https://docs.github.com/rest/git/refs#get-a-reference
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: ref
        description: The Git reference. For more information, see "[Git
          References](https://git-scm.com/book/en/v2/Git-Internals-Git-References)"
          in the Git documentation.
        paramKey: ref
        in: path
        schema:
          type: string
        required: true
  - moduleName: Git / Ref / Create
    method: post
    path: /repos/{owner}/{repo}/git/refs
    description: Creates a reference for your repository. You are unable to create
      new references for empty repositories, even if the commit SHA-1 hash used
      exists. Empty repositories are repositories without branches.
    externalDocs: https://docs.github.com/rest/git/refs#create-a-reference
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: ref
        description: "The name of the fully qualified reference (ie:
          `refs/heads/master`). If it doesn't start with 'refs' and have at
          least two slashes, it will be rejected."
        paramKey: ref
        in: body
        schema:
          type: string
        required: true
      - paramName: sha
        description: The SHA1 value for this reference.
        paramKey: sha
        in: body
        schema:
          type: string
        required: true
    requestBodyType: json
  - moduleName: Git / Ref / Update
    method: patch
    path: /repos/{owner}/{repo}/git/refs/{ref}
    description: Updates the provided reference to point to a new SHA. For more
      information, see "[Git
      References](https://git-scm.com/book/en/v2/Git-Internals-Git-References)"
      in the Git documentation.
    externalDocs: https://docs.github.com/rest/git/refs#update-a-reference
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: ref
        description: The Git reference. For more information, see "[Git
          References](https://git-scm.com/book/en/v2/Git-Internals-Git-References)"
          in the Git documentation.
        paramKey: ref
        in: path
        schema:
          type: string
        required: true
      - paramName: sha
        description: The SHA1 value to set this reference to
        paramKey: sha
        in: body
        schema:
          type: string
        required: true
      - paramName: force
        description: Indicates whether to force the update or to make sure the update is
          a fast-forward update. Leaving this out or setting it to `false` will
          make sure you're not overwriting work.
        paramKey: force
        in: body
        schema:
          type: boolean
          default: false
        required: false
    requestBodyType: json
  - moduleName: Git / Ref / Delete
    method: delete
    path: /repos/{owner}/{repo}/git/refs/{ref}
    description: Deletes the provided reference.
    externalDocs: https://docs.github.com/rest/git/refs#delete-a-reference
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: ref
        description: The Git reference. For more information, see "[Git
          References](https://git-scm.com/book/en/v2/Git-Internals-Git-References)"
          in the Git documentation.
        paramKey: ref
        in: path
        schema:
          type: string
        required: true
  - moduleName: Git / Tag / Create
    method: post
    path: /repos/{owner}/{repo}/git/tags
    description: >-
      Note that creating a tag object does not create the reference that makes a
      tag in Git. If you want to create an annotated tag in Git, you have to do
      this call to create the tag object, and then
      [create](https://docs.github.com/rest/git/refs#create-a-reference) the
      `refs/tags/[tag]` reference. If you want to create a lightweight tag, you
      only have to
      [create](https://docs.github.com/rest/git/refs#create-a-reference) the tag
      reference - this call would be unnecessary.


      **Signature verification object**


      The response will include a `verification` object that describes the
      result of verifying the commit's signature. The following fields are
      included in the `verification` object:


      | Name | Type | Description |

      | ---- | ---- | ----------- |

      | `verified` | `boolean` | Indicates whether GitHub considers the
      signature in this commit to be verified. |

      | `reason` | `string` | The reason for verified value. Possible values and
      their meanings are enumerated in table below. |

      | `signature` | `string` | The signature that was extracted from the
      commit. |

      | `payload` | `string` | The value that was signed. |


      These are the possible values for `reason` in the `verification` object:


      | Value | Description |

      | ----- | ----------- |

      | `expired_key` | The key that made the signature is expired. |

      | `not_signing_key` | The "signing" flag is not among the usage flags in
      the GPG key that made the signature. |

      | `gpgverify_error` | There was an error communicating with the signature
      verification service. |

      | `gpgverify_unavailable` | The signature verification service is
      currently unavailable. |

      | `unsigned` | The object does not include a signature. |

      | `unknown_signature_type` | A non-PGP signature was found in the commit.
      |

      | `no_user` | No user was associated with the `committer` email address in
      the commit. |

      | `unverified_email` | The `committer` email address in the commit was
      associated with a user, but the email address is not verified on their
      account. |

      | `bad_email` | The `committer` email address in the commit is not
      included in the identities of the PGP key that made the signature. |

      | `unknown_key` | The key that made the signature has not been registered
      with any user's account. |

      | `malformed_signature` | There was an error parsing the signature. |

      | `invalid` | The signature could not be cryptographically verified using
      the key whose key-id was found in the signature. |

      | `valid` | None of the above errors applied, so the signature is
      considered to be verified. |
    externalDocs: https://docs.github.com/rest/git/tags#create-a-tag-object
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: tag
        description: The tag's name. This is typically a version (e.g., "v0.0.1").
        paramKey: tag
        in: body
        schema:
          type: string
        required: true
      - paramName: message
        description: The tag message.
        paramKey: message
        in: body
        schema:
          type: string
        required: true
      - paramName: object
        description: The SHA of the git object this is tagging.
        paramKey: object
        in: body
        schema:
          type: string
        required: true
      - paramName: type
        description: The type of the object we're tagging. Normally this is a `commit`
          but it can also be a `tree` or a `blob`.
        paramKey: type
        in: body
        schema:
          type: string
          enum:
            - commit
            - tree
            - blob
        required: true
      - paramName: tagger
        description: An object with information about the individual creating the tag.
        paramKey: tagger
        in: body
        schema:
          type: any
        required: false
    requestBodyType: json
  - moduleName: Git / Tag / Get
    method: get
    path: /repos/{owner}/{repo}/git/tags/{tag_sha}
    description: >-
      **Signature verification object**


      The response will include a `verification` object that describes the
      result of verifying the commit's signature. The following fields are
      included in the `verification` object:


      | Name | Type | Description |

      | ---- | ---- | ----------- |

      | `verified` | `boolean` | Indicates whether GitHub considers the
      signature in this commit to be verified. |

      | `reason` | `string` | The reason for verified value. Possible values and
      their meanings are enumerated in table below. |

      | `signature` | `string` | The signature that was extracted from the
      commit. |

      | `payload` | `string` | The value that was signed. |


      These are the possible values for `reason` in the `verification` object:


      | Value | Description |

      | ----- | ----------- |

      | `expired_key` | The key that made the signature is expired. |

      | `not_signing_key` | The "signing" flag is not among the usage flags in
      the GPG key that made the signature. |

      | `gpgverify_error` | There was an error communicating with the signature
      verification service. |

      | `gpgverify_unavailable` | The signature verification service is
      currently unavailable. |

      | `unsigned` | The object does not include a signature. |

      | `unknown_signature_type` | A non-PGP signature was found in the commit.
      |

      | `no_user` | No user was associated with the `committer` email address in
      the commit. |

      | `unverified_email` | The `committer` email address in the commit was
      associated with a user, but the email address is not verified on their
      account. |

      | `bad_email` | The `committer` email address in the commit is not
      included in the identities of the PGP key that made the signature. |

      | `unknown_key` | The key that made the signature has not been registered
      with any user's account. |

      | `malformed_signature` | There was an error parsing the signature. |

      | `invalid` | The signature could not be cryptographically verified using
      the key whose key-id was found in the signature. |

      | `valid` | None of the above errors applied, so the signature is
      considered to be verified. |
    externalDocs: https://docs.github.com/rest/git/tags#get-a-tag
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: tagSha
        description: ""
        paramKey: tag_sha
        in: path
        schema:
          type: string
        required: true
  - moduleName: Git / Tree / Create
    method: post
    path: /repos/{owner}/{repo}/git/trees
    description: >-
      The tree creation API accepts nested entries. If you specify both a tree
      and a nested path modifying that tree, this endpoint will overwrite the
      contents of the tree with the new path contents, and create a new tree
      structure.


      If you use this endpoint to add, delete, or modify the file contents in a
      tree, you will need to commit the tree and then update a branch to point
      to the commit. For more information see "[Create a
      commit](https://docs.github.com/rest/git/commits#create-a-commit)" and
      "[Update a
      reference](https://docs.github.com/rest/git/refs#update-a-reference)."


      Returns an error if you try to delete a file that does not exist.
    externalDocs: https://docs.github.com/rest/git/trees#create-a-tree
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: tree
        description: Objects (of `path`, `mode`, `type`, and `sha`) specifying a tree
          structure.
        paramKey: tree
        in: body
        schema:
          type: array
          items:
            type: any
        required: true
      - paramName: baseTree
        description: >-
          The SHA1 of an existing Git tree object which will be used as the base
          for the new tree. If provided, a new Git tree object will be created
          from entries in the Git tree object pointed to by `base_tree` and
          entries defined in the `tree` parameter. Entries defined in the `tree`
          parameter will overwrite items from `base_tree` with the same `path`.
          If you're creating new changes on a branch, then normally you'd set
          `base_tree` to the SHA1 of the Git tree object of the current latest
          commit on the branch you're working on.

          If not provided, GitHub will create a new Git tree object from only
          the entries defined in the `tree` parameter. If you create a new
          commit pointing to such a tree, then all files which were a part of
          the parent commit's tree and were not defined in the `tree` parameter
          will be listed as deleted by the new commit.
        paramKey: base_tree
        in: body
        schema:
          type: string
        required: false
    requestBodyType: json
  - moduleName: Git / Tree / Get
    method: get
    path: /repos/{owner}/{repo}/git/trees/{tree_sha}
    description: >-
      Returns a single tree using the SHA1 value or ref name for that tree.


      If `truncated` is `true` in the response then the number of items in the
      `tree` array exceeded our maximum limit. If you need to fetch more items,
      use the non-recursive method of fetching trees, and fetch one sub-tree at
      a time.


      > [!NOTE]

      > The limit for the `tree` array is 100,000 entries with a maximum size of
      7 MB when using the `recursive` parameter.
    externalDocs: https://docs.github.com/rest/git/trees#get-a-tree
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: treeSha
        description: The SHA1 value or ref (branch or tag) name of the tree.
        paramKey: tree_sha
        in: path
        schema:
          type: string
        required: true
      - paramName: recursive
        description: 'Setting this parameter to any value returns the objects or
          subtrees referenced by the tree specified in `:tree_sha`. For example,
          setting `recursive` to any of the following will enable returning
          objects or subtrees: `0`, `1`, `"true"`, and `"false"`. Omit this
          parameter to prevent recursively returning objects or subtrees.'
        paramKey: recursive
        in: query
        schema:
          type: string
        required: false
  - moduleName: Repos / Webhooks / List
    method: get
    path: /repos/{owner}/{repo}/hooks
    description: Lists webhooks for a repository. `last response` may return null if
      there have not been any deliveries within 30 days.
    externalDocs: https://docs.github.com/rest/repos/webhooks#list-repository-webhooks
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: perPage
        description: The number of results per page (max 100). For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: per_page
        in: query
        schema:
          type: number
          default: 30
        required: false
      - paramName: page
        description: The page number of the results to fetch. For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: page
        in: query
        schema:
          type: number
          default: 1
        required: false
  - moduleName: Repos / Webhook / Create
    method: post
    path: /repos/{owner}/{repo}/hooks
    description: >-
      Repositories can have multiple webhooks installed. Each webhook should
      have a unique `config`. Multiple webhooks can

      share the same `config` as long as those webhooks do not have any `events`
      that overlap.
    externalDocs: https://docs.github.com/rest/repos/webhooks#create-a-repository-webhook
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: name
        description: "Use `web` to create a webhook. Default: `web`. This parameter only
          accepts the value `web`."
        paramKey: name
        in: body
        schema:
          type: string
        required: false
      - paramName: config
        description: Key/value pairs to provide settings for this webhook.
        paramKey: config
        in: body
        schema:
          type: any
        required: false
      - paramName: events
        description: Determines what
          [events](https://docs.github.com/webhooks/event-payloads) the hook is
          triggered for.
        paramKey: events
        in: body
        schema:
          type: array
          items:
            type: any
        required: false
      - paramName: active
        description: Determines if notifications are sent when the webhook is triggered.
          Set to `true` to send notifications.
        paramKey: active
        in: body
        schema:
          type: boolean
          default: true
        required: false
    requestBodyType: json
  - moduleName: Repos / Webhook / Get
    method: get
    path: /repos/{owner}/{repo}/hooks/{hook_id}
    description: Returns a webhook configured in a repository. To get only the
      webhook `config` properties, see "[Get a webhook configuration for a
      repository](/rest/webhooks/repo-config#get-a-webhook-configuration-for-a-repository)."
    externalDocs: https://docs.github.com/rest/repos/webhooks#get-a-repository-webhook
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: hookId
        description: The unique identifier of the hook. You can find this value in the
          `X-GitHub-Hook-ID` header of a webhook delivery.
        paramKey: hook_id
        in: path
        schema:
          type: number
        required: true
  - moduleName: Repos / Webhook / Update
    method: patch
    path: /repos/{owner}/{repo}/hooks/{hook_id}
    description: Updates a webhook configured in a repository. If you previously had
      a `secret` set, you must provide the same `secret` or set a new `secret`
      or the secret will be removed. If you are only updating individual webhook
      `config` properties, use "[Update a webhook configuration for a
      repository](/rest/webhooks/repo-config#update-a-webhook-configuration-for-a-repository)."
    externalDocs: https://docs.github.com/rest/repos/webhooks#update-a-repository-webhook
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: hookId
        description: The unique identifier of the hook. You can find this value in the
          `X-GitHub-Hook-ID` header of a webhook delivery.
        paramKey: hook_id
        in: path
        schema:
          type: number
        required: true
      - paramName: config
        description: Configuration object of the webhook
        paramKey: config
        in: body
        schema:
          type: any
        required: false
      - paramName: events
        description: Determines what
          [events](https://docs.github.com/webhooks/event-payloads) the hook is
          triggered for. This replaces the entire array of events.
        paramKey: events
        in: body
        schema:
          type: array
          items:
            type: any
        required: false
      - paramName: addEvents
        description: Determines a list of events to be added to the list of events that
          the Hook triggers for.
        paramKey: add_events
        in: body
        schema:
          type: array
          items:
            type: any
        required: false
      - paramName: removeEvents
        description: Determines a list of events to be removed from the list of events
          that the Hook triggers for.
        paramKey: remove_events
        in: body
        schema:
          type: array
          items:
            type: any
        required: false
      - paramName: active
        description: Determines if notifications are sent when the webhook is triggered.
          Set to `true` to send notifications.
        paramKey: active
        in: body
        schema:
          type: boolean
          default: true
        required: false
    requestBodyType: json
  - moduleName: Repos / Webhook / Delete
    method: delete
    path: /repos/{owner}/{repo}/hooks/{hook_id}
    description: ""
    externalDocs: https://docs.github.com/rest/repos/webhooks#delete-a-repository-webhook
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: hookId
        description: The unique identifier of the hook. You can find this value in the
          `X-GitHub-Hook-ID` header of a webhook delivery.
        paramKey: hook_id
        in: path
        schema:
          type: number
        required: true
  - moduleName: Repos / Webhook Config / Get
    method: get
    path: /repos/{owner}/{repo}/hooks/{hook_id}/config
    description: >-
      Returns the webhook configuration for a repository. To get more
      information about the webhook, including the `active` state and `events`,
      use "[Get a repository
      webhook](/rest/webhooks/repos#get-a-repository-webhook)."


      OAuth app tokens and personal access tokens (classic) need the
      `read:repo_hook` or `repo` scope to use this endpoint.
    externalDocs: https://docs.github.com/rest/repos/webhooks#get-a-webhook-configuration-for-a-repository
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: hookId
        description: The unique identifier of the hook. You can find this value in the
          `X-GitHub-Hook-ID` header of a webhook delivery.
        paramKey: hook_id
        in: path
        schema:
          type: number
        required: true
  - moduleName: Repos / Webhook Config / Update
    method: patch
    path: /repos/{owner}/{repo}/hooks/{hook_id}/config
    description: >-
      Updates the webhook configuration for a repository. To update more
      information about the webhook, including the `active` state and `events`,
      use "[Update a repository
      webhook](/rest/webhooks/repos#update-a-repository-webhook)."


      OAuth app tokens and personal access tokens (classic) need the
      `write:repo_hook` or `repo` scope to use this endpoint.
    externalDocs: https://docs.github.com/rest/repos/webhooks#update-a-webhook-configuration-for-a-repository
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: hookId
        description: The unique identifier of the hook. You can find this value in the
          `X-GitHub-Hook-ID` header of a webhook delivery.
        paramKey: hook_id
        in: path
        schema:
          type: number
        required: true
      - paramName: url
        description: The URL to which the payloads will be delivered.
        paramKey: url
        in: body
        schema:
          type: string
        required: false
      - paramName: contentType
        description: The media type used to serialize the payloads. Supported values
          include `json` and `form`. The default is `form`.
        paramKey: content_type
        in: body
        schema:
          type: string
        required: false
      - paramName: secret
        description: If provided, the `secret` will be used as the `key` to generate the
          HMAC hex digest value for [delivery signature
          headers](https://docs.github.com/webhooks/event-payloads/#delivery-headers).
        paramKey: secret
        in: body
        schema:
          type: string
        required: false
      - paramName: insecureSsl
        description: ""
        paramKey: insecure_ssl
        in: body
        schema:
          type: any
        required: false
    requestBodyType: json
  - moduleName: Repos / Webhook Deliveries / List
    method: get
    path: /repos/{owner}/{repo}/hooks/{hook_id}/deliveries
    description: Returns a list of webhook deliveries for a webhook configured in a
      repository.
    externalDocs: https://docs.github.com/rest/repos/webhooks#list-deliveries-for-a-repository-webhook
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: hookId
        description: The unique identifier of the hook. You can find this value in the
          `X-GitHub-Hook-ID` header of a webhook delivery.
        paramKey: hook_id
        in: path
        schema:
          type: number
        required: true
      - paramName: perPage
        description: The number of results per page (max 100). For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: per_page
        in: query
        schema:
          type: number
          default: 30
        required: false
      - paramName: cursor
        description: "Used for pagination: the starting delivery from which the page of
          deliveries is fetched. Refer to the `link` header for the next and
          previous page cursors."
        paramKey: cursor
        in: query
        schema:
          type: string
        required: false
  - moduleName: Repos / Webhook Delivery / Get
    method: get
    path: /repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}
    description: Returns a delivery for a webhook configured in a repository.
    externalDocs: https://docs.github.com/rest/repos/webhooks#get-a-delivery-for-a-repository-webhook
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: hookId
        description: The unique identifier of the hook. You can find this value in the
          `X-GitHub-Hook-ID` header of a webhook delivery.
        paramKey: hook_id
        in: path
        schema:
          type: number
        required: true
      - paramName: deliveryId
        description: ""
        paramKey: delivery_id
        in: path
        schema:
          type: number
        required: true
  - moduleName: Repos / Webhook Delivery / Redeliver
    method: post
    path: /repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}/attempts
    description: Redeliver a webhook delivery for a webhook configured in a repository.
    externalDocs: https://docs.github.com/rest/repos/webhooks#redeliver-a-delivery-for-a-repository-webhook
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: hookId
        description: The unique identifier of the hook. You can find this value in the
          `X-GitHub-Hook-ID` header of a webhook delivery.
        paramKey: hook_id
        in: path
        schema:
          type: number
        required: true
      - paramName: deliveryId
        description: ""
        paramKey: delivery_id
        in: path
        schema:
          type: number
        required: true
  - moduleName: Repos / Webhook / Ping
    method: post
    path: /repos/{owner}/{repo}/hooks/{hook_id}/pings
    description: This will trigger a [ping
      event](https://docs.github.com/webhooks/#ping-event) to be sent to the
      hook.
    externalDocs: https://docs.github.com/rest/repos/webhooks#ping-a-repository-webhook
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: hookId
        description: The unique identifier of the hook. You can find this value in the
          `X-GitHub-Hook-ID` header of a webhook delivery.
        paramKey: hook_id
        in: path
        schema:
          type: number
        required: true
  - moduleName: Repos / Webhook / Test Push
    method: post
    path: /repos/{owner}/{repo}/hooks/{hook_id}/tests
    description: >-
      This will trigger the hook with the latest push to the current repository
      if the hook is subscribed to `push` events. If the hook is not subscribed
      to `push` events, the server will respond with 204 but no test POST will
      be generated.


      > [!NOTE]

      > Previously `/repos/:owner/:repo/hooks/:hook_id/test`
    externalDocs: https://docs.github.com/rest/repos/webhooks#test-the-push-repository-webhook
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: hookId
        description: The unique identifier of the hook. You can find this value in the
          `X-GitHub-Hook-ID` header of a webhook delivery.
        paramKey: hook_id
        in: path
        schema:
          type: number
        required: true
  - moduleName: Repos / Invitations / List
    method: get
    path: /repos/{owner}/{repo}/invitations
    description: When authenticating as a user with admin rights to a repository,
      this endpoint will list all currently open repository invitations.
    externalDocs: https://docs.github.com/rest/collaborators/invitations#list-repository-invitations
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: perPage
        description: The number of results per page (max 100). For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: per_page
        in: query
        schema:
          type: number
          default: 30
        required: false
      - paramName: page
        description: The page number of the results to fetch. For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: page
        in: query
        schema:
          type: number
          default: 1
        required: false
  - moduleName: Repos / Invitation / Update
    method: patch
    path: /repos/{owner}/{repo}/invitations/{invitation_id}
    description: ""
    externalDocs: https://docs.github.com/rest/collaborators/invitations#update-a-repository-invitation
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: invitationId
        description: The unique identifier of the invitation.
        paramKey: invitation_id
        in: path
        schema:
          type: number
        required: true
      - paramName: permissions
        description: The permissions that the associated user will have on the
          repository. Valid values are `read`, `write`, `maintain`, `triage`,
          and `admin`.
        paramKey: permissions
        in: body
        schema:
          type: string
          enum:
            - read
            - write
            - maintain
            - triage
            - admin
        required: false
    requestBodyType: json
  - moduleName: Repos / Invitation / Delete
    method: delete
    path: /repos/{owner}/{repo}/invitations/{invitation_id}
    description: ""
    externalDocs: https://docs.github.com/rest/collaborators/invitations#delete-a-repository-invitation
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: invitationId
        description: The unique identifier of the invitation.
        paramKey: invitation_id
        in: path
        schema:
          type: number
        required: true
  - moduleName: Issues / List
    method: get
    path: /repos/{owner}/{repo}/issues
    description: >-
      List issues in a repository. Only open issues will be listed.


      > [!NOTE]

      > GitHub's REST API considers every pull request an issue, but not every
      issue is a pull request. For this reason, "Issues" endpoints may return
      both issues and pull requests in the response. You can identify pull
      requests by the `pull_request` key. Be aware that the `id` of a pull
      request returned from "Issues" endpoints will be an _issue id_. To find
      out the pull request id, use the "[List pull
      requests](https://docs.github.com/rest/pulls/pulls#list-pull-requests)"
      endpoint.


      This endpoint supports the following custom media types. For more
      information, see "[Media
      types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."


      - **`application/vnd.github.raw+json`**: Returns the raw markdown body.
      Response will include `body`. This is the default if you do not pass any
      specific media type.

      - **`application/vnd.github.text+json`**: Returns a text only
      representation of the markdown body. Response will include `body_text`.

      - **`application/vnd.github.html+json`**: Returns HTML rendered from the
      body's markdown. Response will include `body_html`.

      - **`application/vnd.github.full+json`**: Returns raw, text, and HTML
      representations. Response will include `body`, `body_text`, and
      `body_html`.
    externalDocs: https://docs.github.com/rest/issues/issues#list-repository-issues
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: milestone
        description: If an `integer` is passed, it should refer to a milestone by its
          `number` field. If the string `*` is passed, issues with any milestone
          are accepted. If the string `none` is passed, issues without
          milestones are returned.
        paramKey: milestone
        in: query
        schema:
          type: string
        required: false
      - paramName: state
        description: Indicates the state of the issues to return.
        paramKey: state
        in: query
        schema:
          type: string
          default: open
          enum:
            - open
            - closed
            - all
        required: false
      - paramName: assignee
        description: Can be the name of a user. Pass in `none` for issues with no
          assigned user, and `*` for issues assigned to any user.
        paramKey: assignee
        in: query
        schema:
          type: string
        required: false
      - paramName: creator
        description: The user that created the issue.
        paramKey: creator
        in: query
        schema:
          type: string
        required: false
      - paramName: mentioned
        description: A user that's mentioned in the issue.
        paramKey: mentioned
        in: query
        schema:
          type: string
        required: false
      - paramName: labels
        description: "A list of comma separated label names. Example: `bug,ui,@high`"
        paramKey: labels
        in: query
        schema:
          type: string
        required: false
      - paramName: sort
        description: What to sort results by.
        paramKey: sort
        in: query
        schema:
          type: string
          default: created
          enum:
            - created
            - updated
            - comments
        required: false
      - paramName: direction
        description: The direction to sort the results by.
        paramKey: direction
        in: query
        schema:
          type: string
          default: desc
          enum:
            - asc
            - desc
        required: false
      - paramName: since
        description: "Only show results that were last updated after the given time.
          This is a timestamp in [ISO
          8601](https://en.wikipedia.org/wiki/ISO_8601) format:
          `YYYY-MM-DDTHH:MM:SSZ`."
        paramKey: since
        in: query
        schema:
          type: string
        required: false
      - paramName: perPage
        description: The number of results per page (max 100). For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: per_page
        in: query
        schema:
          type: number
          default: 30
        required: false
      - paramName: page
        description: The page number of the results to fetch. For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: page
        in: query
        schema:
          type: number
          default: 1
        required: false
  - moduleName: Issues / Create
    method: post
    path: /repos/{owner}/{repo}/issues
    description: >-
      Any user with pull access to a repository can create an issue. If [issues
      are disabled in the
      repository](https://docs.github.com/articles/disabling-issues/), the API
      returns a `410 Gone` status.


      This endpoint triggers
      [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications).
      Creating content too quickly using this endpoint may result in secondary
      rate limiting. For more information, see "[Rate limits for the
      API](https://docs.github.com/rest/using-the-rest-api/rate-limits-for-the-rest-api#about-secondary-rate-limits)"

      and "[Best practices for using the REST
      API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api)."


      This endpoint supports the following custom media types. For more
      information, see "[Media
      types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."


      - **`application/vnd.github.raw+json`**: Returns the raw markdown body.
      Response will include `body`. This is the default if you do not pass any
      specific media type.

      - **`application/vnd.github.text+json`**: Returns a text only
      representation of the markdown body. Response will include `body_text`.

      - **`application/vnd.github.html+json`**: Returns HTML rendered from the
      body's markdown. Response will include `body_html`.

      - **`application/vnd.github.full+json`**: Returns raw, text, and HTML
      representations. Response will include `body`, `body_text`, and
      `body_html`.
    externalDocs: https://docs.github.com/rest/issues/issues#create-an-issue
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: title
        description: The title of the issue.
        paramKey: title
        in: body
        schema:
          type: any
        required: true
      - paramName: body
        description: The contents of the issue.
        paramKey: body
        in: body
        schema:
          type: string
        required: false
      - paramName: assignee
        description: "Login for the user that this issue should be assigned to. _NOTE:
          Only users with push access can set the assignee for new issues. The
          assignee is silently dropped otherwise. **This field is closing
          down.**_"
        paramKey: assignee
        in: body
        schema:
          type: string
        required: false
      - paramName: milestone
        description: ""
        paramKey: milestone
        in: body
        schema:
          type: any
        required: false
      - paramName: labels
        description: "Labels to associate with this issue. _NOTE: Only users with push
          access can set labels for new issues. Labels are silently dropped
          otherwise._"
        paramKey: labels
        in: body
        schema:
          type: array
          items:
            type: any
        required: false
      - paramName: assignees
        description: "Logins for Users to assign to this issue. _NOTE: Only users with
          push access can set assignees for new issues. Assignees are silently
          dropped otherwise._"
        paramKey: assignees
        in: body
        schema:
          type: array
          items:
            type: any
        required: false
    requestBodyType: json
  - moduleName: Issues / List Comments
    method: get
    path: /repos/{owner}/{repo}/issues/comments
    description: >-
      You can use the REST API to list comments on issues and pull requests for
      a repository. Every pull request is an issue, but not every issue is a
      pull request.


      By default, issue comments are ordered by ascending ID.


      This endpoint supports the following custom media types. For more
      information, see "[Media
      types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."


      - **`application/vnd.github.raw+json`**: Returns the raw markdown body.
      Response will include `body`. This is the default if you do not pass any
      specific media type.

      - **`application/vnd.github.text+json`**: Returns a text only
      representation of the markdown body. Response will include `body_text`.

      - **`application/vnd.github.html+json`**: Returns HTML rendered from the
      body's markdown. Response will include `body_html`.

      - **`application/vnd.github.full+json`**: Returns raw, text, and HTML
      representations. Response will include `body`, `body_text`, and
      `body_html`.
    externalDocs: https://docs.github.com/rest/issues/comments#list-issue-comments-for-a-repository
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: sort
        description: The property to sort the results by.
        paramKey: sort
        in: query
        schema:
          type: string
          default: created
          enum:
            - created
            - updated
        required: false
      - paramName: direction
        description: Either `asc` or `desc`. Ignored without the `sort` parameter.
        paramKey: direction
        in: query
        schema:
          type: string
          enum:
            - asc
            - desc
        required: false
      - paramName: since
        description: "Only show results that were last updated after the given time.
          This is a timestamp in [ISO
          8601](https://en.wikipedia.org/wiki/ISO_8601) format:
          `YYYY-MM-DDTHH:MM:SSZ`."
        paramKey: since
        in: query
        schema:
          type: string
        required: false
      - paramName: perPage
        description: The number of results per page (max 100). For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: per_page
        in: query
        schema:
          type: number
          default: 30
        required: false
      - paramName: page
        description: The page number of the results to fetch. For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: page
        in: query
        schema:
          type: number
          default: 1
        required: false
  - moduleName: Issues / Get Comment
    method: get
    path: /repos/{owner}/{repo}/issues/comments/{comment_id}
    description: >-
      You can use the REST API to get comments on issues and pull requests.
      Every pull request is an issue, but not every issue is a pull request.


      This endpoint supports the following custom media types. For more
      information, see "[Media
      types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."


      - **`application/vnd.github.raw+json`**: Returns the raw markdown body.
      Response will include `body`. This is the default if you do not pass any
      specific media type.

      - **`application/vnd.github.text+json`**: Returns a text only
      representation of the markdown body. Response will include `body_text`.

      - **`application/vnd.github.html+json`**: Returns HTML rendered from the
      body's markdown. Response will include `body_html`.

      - **`application/vnd.github.full+json`**: Returns raw, text, and HTML
      representations. Response will include `body`, `body_text`, and
      `body_html`.
    externalDocs: https://docs.github.com/rest/issues/comments#get-an-issue-comment
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: commentId
        description: The unique identifier of the comment.
        paramKey: comment_id
        in: path
        schema:
          type: number
        required: true
  - moduleName: Issues / Update Comment
    method: patch
    path: /repos/{owner}/{repo}/issues/comments/{comment_id}
    description: >-
      You can use the REST API to update comments on issues and pull requests.
      Every pull request is an issue, but not every issue is a pull request.


      This endpoint supports the following custom media types. For more
      information, see "[Media
      types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."


      - **`application/vnd.github.raw+json`**: Returns the raw markdown body.
      Response will include `body`. This is the default if you do not pass any
      specific media type.

      - **`application/vnd.github.text+json`**: Returns a text only
      representation of the markdown body. Response will include `body_text`.

      - **`application/vnd.github.html+json`**: Returns HTML rendered from the
      body's markdown. Response will include `body_html`.

      - **`application/vnd.github.full+json`**: Returns raw, text, and HTML
      representations. Response will include `body`, `body_text`, and
      `body_html`.
    externalDocs: https://docs.github.com/rest/issues/comments#update-an-issue-comment
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: commentId
        description: The unique identifier of the comment.
        paramKey: comment_id
        in: path
        schema:
          type: number
        required: true
      - paramName: body
        description: The contents of the comment.
        paramKey: body
        in: body
        schema:
          type: string
        required: true
    requestBodyType: json
  - moduleName: Issues / Delete Comment
    method: delete
    path: /repos/{owner}/{repo}/issues/comments/{comment_id}
    description: You can use the REST API to delete comments on issues and pull
      requests. Every pull request is an issue, but not every issue is a pull
      request.
    externalDocs: https://docs.github.com/rest/issues/comments#delete-an-issue-comment
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: commentId
        description: The unique identifier of the comment.
        paramKey: comment_id
        in: path
        schema:
          type: number
        required: true
  - moduleName: Reactions / Issue Comment / List
    method: get
    path: /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions
    description: List the reactions to an [issue
      comment](https://docs.github.com/rest/issues/comments#get-an-issue-comment).
    externalDocs: https://docs.github.com/rest/reactions/reactions#list-reactions-for-an-issue-comment
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: commentId
        description: The unique identifier of the comment.
        paramKey: comment_id
        in: path
        schema:
          type: number
        required: true
      - paramName: content
        description: Returns a single [reaction
          type](https://docs.github.com/rest/reactions/reactions#about-reactions).
          Omit this parameter to list all reactions to an issue comment.
        paramKey: content
        in: query
        schema:
          type: string
          enum:
            - "+1"
            - "-1"
            - laugh
            - confused
            - heart
            - hooray
            - rocket
            - eyes
        required: false
      - paramName: perPage
        description: The number of results per page (max 100). For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: per_page
        in: query
        schema:
          type: number
          default: 30
        required: false
      - paramName: page
        description: The page number of the results to fetch. For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: page
        in: query
        schema:
          type: number
          default: 1
        required: false
  - moduleName: Reactions / Issue Comment / Create
    method: post
    path: /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions
    description: Create a reaction to an [issue
      comment](https://docs.github.com/rest/issues/comments#get-an-issue-comment).
      A response with an HTTP `200` status means that you already added the
      reaction type to this issue comment.
    externalDocs: https://docs.github.com/rest/reactions/reactions#create-reaction-for-an-issue-comment
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: commentId
        description: The unique identifier of the comment.
        paramKey: comment_id
        in: path
        schema:
          type: number
        required: true
      - paramName: content
        description: The [reaction
          type](https://docs.github.com/rest/reactions/reactions#about-reactions)
          to add to the issue comment.
        paramKey: content
        in: body
        schema:
          type: string
          enum:
            - "+1"
            - "-1"
            - laugh
            - confused
            - heart
            - hooray
            - rocket
            - eyes
        required: true
    requestBodyType: json
  - moduleName: Reactions / Issue Comment / Delete
    method: delete
    path: /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions/{reaction_id}
    description: >-
      > [!NOTE]

      > You can also specify a repository by `repository_id` using the route
      `DELETE delete
      /repositories/:repository_id/issues/comments/:comment_id/reactions/:reaction_id`.


      Delete a reaction to an [issue
      comment](https://docs.github.com/rest/issues/comments#get-an-issue-comment).
    externalDocs: https://docs.github.com/rest/reactions/reactions#delete-an-issue-comment-reaction
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: commentId
        description: The unique identifier of the comment.
        paramKey: comment_id
        in: path
        schema:
          type: number
        required: true
      - paramName: reactionId
        description: The unique identifier of the reaction.
        paramKey: reaction_id
        in: path
        schema:
          type: number
        required: true
  - moduleName: Issues / List Events
    method: get
    path: /repos/{owner}/{repo}/issues/events
    description: Lists events for a repository.
    externalDocs: https://docs.github.com/rest/issues/events#list-issue-events-for-a-repository
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: perPage
        description: The number of results per page (max 100). For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: per_page
        in: query
        schema:
          type: number
          default: 30
        required: false
      - paramName: page
        description: The page number of the results to fetch. For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: page
        in: query
        schema:
          type: number
          default: 1
        required: false
  - moduleName: Issues / Get Event
    method: get
    path: /repos/{owner}/{repo}/issues/events/{event_id}
    description: Gets a single event by the event id.
    externalDocs: https://docs.github.com/rest/issues/events#get-an-issue-event
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: eventId
        description: ""
        paramKey: event_id
        in: path
        schema:
          type: number
        required: true
  - moduleName: Issues / Get
    method: get
    path: /repos/{owner}/{repo}/issues/{issue_number}
    description: >-
      The API returns a [`301 Moved Permanently`
      status](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api#follow-redirects)
      if the issue was

      [transferred](https://docs.github.com/articles/transferring-an-issue-to-another-repository/)
      to another repository. If

      the issue was transferred to or deleted from a repository where the
      authenticated user lacks read access, the API

      returns a `404 Not Found` status. If the issue was deleted from a
      repository where the authenticated user has read

      access, the API returns a `410 Gone` status. To receive webhook events for
      transferred and deleted issues, subscribe

      to the [`issues`](https://docs.github.com/webhooks/event-payloads/#issues)
      webhook.


      > [!NOTE]

      > GitHub's REST API considers every pull request an issue, but not every
      issue is a pull request. For this reason, "Issues" endpoints may return
      both issues and pull requests in the response. You can identify pull
      requests by the `pull_request` key. Be aware that the `id` of a pull
      request returned from "Issues" endpoints will be an _issue id_. To find
      out the pull request id, use the "[List pull
      requests](https://docs.github.com/rest/pulls/pulls#list-pull-requests)"
      endpoint.


      This endpoint supports the following custom media types. For more
      information, see "[Media
      types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."


      - **`application/vnd.github.raw+json`**: Returns the raw markdown body.
      Response will include `body`. This is the default if you do not pass any
      specific media type.

      - **`application/vnd.github.text+json`**: Returns a text only
      representation of the markdown body. Response will include `body_text`.

      - **`application/vnd.github.html+json`**: Returns HTML rendered from the
      body's markdown. Response will include `body_html`.

      - **`application/vnd.github.full+json`**: Returns raw, text, and HTML
      representations. Response will include `body`, `body_text`, and
      `body_html`.
    externalDocs: https://docs.github.com/rest/issues/issues#get-an-issue
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: issueNumber
        description: The number that identifies the issue.
        paramKey: issue_number
        in: path
        schema:
          type: number
        required: true
  - moduleName: Issues / Update
    method: patch
    path: /repos/{owner}/{repo}/issues/{issue_number}
    description: >-
      Issue owners and users with push access or Triage role can edit an issue.


      This endpoint supports the following custom media types. For more
      information, see "[Media
      types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."


      - **`application/vnd.github.raw+json`**: Returns the raw markdown body.
      Response will include `body`. This is the default if you do not pass any
      specific media type.

      - **`application/vnd.github.text+json`**: Returns a text only
      representation of the markdown body. Response will include `body_text`.

      - **`application/vnd.github.html+json`**: Returns HTML rendered from the
      body's markdown. Response will include `body_html`.

      - **`application/vnd.github.full+json`**: Returns raw, text, and HTML
      representations. Response will include `body`, `body_text`, and
      `body_html`.
    externalDocs: https://docs.github.com/rest/issues/issues#update-an-issue
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: issueNumber
        description: The number that identifies the issue.
        paramKey: issue_number
        in: path
        schema:
          type: number
        required: true
      - paramName: title
        description: The title of the issue.
        paramKey: title
        in: body
        schema:
          type: any
        required: false
      - paramName: body
        description: The contents of the issue.
        paramKey: body
        in: body
        schema:
          type: string
        required: false
      - paramName: assignee
        description: Username to assign to this issue. **This field is closing down.**
        paramKey: assignee
        in: body
        schema:
          type: string
        required: false
      - paramName: state
        description: The open or closed state of the issue.
        paramKey: state
        in: body
        schema:
          type: string
          enum:
            - open
            - closed
        required: false
      - paramName: stateReason
        description: The reason for the state change. Ignored unless `state` is changed.
        paramKey: state_reason
        in: body
        schema:
          type: string
          enum:
            - completed
            - not_planned
            - reopened
        required: false
      - paramName: milestone
        description: ""
        paramKey: milestone
        in: body
        schema:
          type: any
        required: false
      - paramName: labels
        description: Labels to associate with this issue. Pass one or more labels to
          _replace_ the set of labels on this issue. Send an empty array (`[]`)
          to clear all labels from the issue. Only users with push access can
          set labels for issues. Without push access to the repository, label
          changes are silently dropped.
        paramKey: labels
        in: body
        schema:
          type: array
          items:
            type: any
        required: false
      - paramName: assignees
        description: Usernames to assign to this issue. Pass one or more user logins to
          _replace_ the set of assignees on this issue. Send an empty array
          (`[]`) to clear all assignees from the issue. Only users with push
          access can set assignees for new issues. Without push access to the
          repository, assignee changes are silently dropped.
        paramKey: assignees
        in: body
        schema:
          type: array
          items:
            type: any
        required: false
    requestBodyType: json
  - moduleName: Issues / Add Assignee
    method: post
    path: /repos/{owner}/{repo}/issues/{issue_number}/assignees
    description: Adds up to 10 assignees to an issue. Users already assigned to an
      issue are not replaced.
    externalDocs: https://docs.github.com/rest/issues/assignees#add-assignees-to-an-issue
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: issueNumber
        description: The number that identifies the issue.
        paramKey: issue_number
        in: path
        schema:
          type: number
        required: true
      - paramName: assignees
        description: "Usernames of people to assign this issue to. _NOTE: Only users
          with push access can add assignees to an issue. Assignees are silently
          ignored otherwise._"
        paramKey: assignees
        in: body
        schema:
          type: array
          items:
            type: any
        required: false
    requestBodyType: json
  - moduleName: Issues / Remove Assignee
    method: delete
    path: /repos/{owner}/{repo}/issues/{issue_number}/assignees
    description: Removes one or more assignees from an issue.
    externalDocs: https://docs.github.com/rest/issues/assignees#remove-assignees-from-an-issue
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: issueNumber
        description: The number that identifies the issue.
        paramKey: issue_number
        in: path
        schema:
          type: number
        required: true
      - paramName: assignees
        description: "Usernames of assignees to remove from an issue. _NOTE: Only users
          with push access can remove assignees from an issue. Assignees are
          silently ignored otherwise._"
        paramKey: assignees
        in: body
        schema:
          type: array
          items:
            type: any
        required: false
    requestBodyType: json
  - moduleName: Issues / Check Issue Assignee
    method: get
    path: /repos/{owner}/{repo}/issues/{issue_number}/assignees/{assignee}
    description: >-
      Checks if a user has permission to be assigned to a specific issue.


      If the `assignee` can be assigned to this issue, a `204` status code with
      no content is returned.


      Otherwise a `404` status code is returned.
    externalDocs: https://docs.github.com/rest/issues/assignees#check-if-a-user-can-be-assigned-to-a-issue
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: issueNumber
        description: The number that identifies the issue.
        paramKey: issue_number
        in: path
        schema:
          type: number
        required: true
      - paramName: assignee
        description: ""
        paramKey: assignee
        in: path
        schema:
          type: string
        required: true
  - moduleName: Issues / List Comments
    method: get
    path: /repos/{owner}/{repo}/issues/{issue_number}/comments
    description: >-
      You can use the REST API to list comments on issues and pull requests.
      Every pull request is an issue, but not every issue is a pull request.


      Issue comments are ordered by ascending ID.


      This endpoint supports the following custom media types. For more
      information, see "[Media
      types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."


      - **`application/vnd.github.raw+json`**: Returns the raw markdown body.
      Response will include `body`. This is the default if you do not pass any
      specific media type.

      - **`application/vnd.github.text+json`**: Returns a text only
      representation of the markdown body. Response will include `body_text`.

      - **`application/vnd.github.html+json`**: Returns HTML rendered from the
      body's markdown. Response will include `body_html`.

      - **`application/vnd.github.full+json`**: Returns raw, text, and HTML
      representations. Response will include `body`, `body_text`, and
      `body_html`.
    externalDocs: https://docs.github.com/rest/issues/comments#list-issue-comments
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: issueNumber
        description: The number that identifies the issue.
        paramKey: issue_number
        in: path
        schema:
          type: number
        required: true
      - paramName: since
        description: "Only show results that were last updated after the given time.
          This is a timestamp in [ISO
          8601](https://en.wikipedia.org/wiki/ISO_8601) format:
          `YYYY-MM-DDTHH:MM:SSZ`."
        paramKey: since
        in: query
        schema:
          type: string
        required: false
      - paramName: perPage
        description: The number of results per page (max 100). For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: per_page
        in: query
        schema:
          type: number
          default: 30
        required: false
      - paramName: page
        description: The page number of the results to fetch. For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: page
        in: query
        schema:
          type: number
          default: 1
        required: false
  - moduleName: Issues / Create Comment
    method: post
    path: /repos/{owner}/{repo}/issues/{issue_number}/comments
    description: >-
      You can use the REST API to create comments on issues and pull requests.
      Every pull request is an issue, but not every issue is a pull request.


      This endpoint triggers
      [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications).

      Creating content too quickly using this endpoint may result in secondary
      rate limiting.

      For more information, see "[Rate limits for the
      API](https://docs.github.com/rest/using-the-rest-api/rate-limits-for-the-rest-api#about-secondary-rate-limits)"

      and "[Best practices for using the REST
      API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api)."


      This endpoint supports the following custom media types. For more
      information, see "[Media
      types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."


      - **`application/vnd.github.raw+json`**: Returns the raw markdown body.
      Response will include `body`. This is the default if you do not pass any
      specific media type.

      - **`application/vnd.github.text+json`**: Returns a text only
      representation of the markdown body. Response will include `body_text`.

      - **`application/vnd.github.html+json`**: Returns HTML rendered from the
      body's markdown. Response will include `body_html`.

      - **`application/vnd.github.full+json`**: Returns raw, text, and HTML
      representations. Response will include `body`, `body_text`, and
      `body_html`.
    externalDocs: https://docs.github.com/rest/issues/comments#create-an-issue-comment
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: issueNumber
        description: The number that identifies the issue.
        paramKey: issue_number
        in: path
        schema:
          type: number
        required: true
      - paramName: body
        description: The contents of the comment.
        paramKey: body
        in: body
        schema:
          type: string
        required: true
    requestBodyType: json
  - moduleName: Issues / List Events
    method: get
    path: /repos/{owner}/{repo}/issues/{issue_number}/events
    description: Lists all events for an issue.
    externalDocs: https://docs.github.com/rest/issues/events#list-issue-events
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: issueNumber
        description: The number that identifies the issue.
        paramKey: issue_number
        in: path
        schema:
          type: number
        required: true
      - paramName: perPage
        description: The number of results per page (max 100). For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: per_page
        in: query
        schema:
          type: number
          default: 30
        required: false
      - paramName: page
        description: The page number of the results to fetch. For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: page
        in: query
        schema:
          type: number
          default: 1
        required: false
  - moduleName: Issues / List Labels
    method: get
    path: /repos/{owner}/{repo}/issues/{issue_number}/labels
    description: Lists all labels for an issue.
    externalDocs: https://docs.github.com/rest/issues/labels#list-labels-for-an-issue
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: issueNumber
        description: The number that identifies the issue.
        paramKey: issue_number
        in: path
        schema:
          type: number
        required: true
      - paramName: perPage
        description: The number of results per page (max 100). For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: per_page
        in: query
        schema:
          type: number
          default: 30
        required: false
      - paramName: page
        description: The page number of the results to fetch. For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: page
        in: query
        schema:
          type: number
          default: 1
        required: false
  - moduleName: Issues / Add Label
    method: post
    path: /repos/{owner}/{repo}/issues/{issue_number}/labels
    description: "Adds labels to an issue. If you provide an empty array of labels,
      all labels are removed from the issue. "
    externalDocs: https://docs.github.com/rest/issues/labels#add-labels-to-an-issue
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: issueNumber
        description: The number that identifies the issue.
        paramKey: issue_number
        in: path
        schema:
          type: number
        required: true
      - paramName: requestBody
        paramKey: ""
        description: ""
        in: body_raw
        schema:
          type: any
        required: true
    requestBodyType: json
  - moduleName: Issues / Set Labels
    method: put
    path: /repos/{owner}/{repo}/issues/{issue_number}/labels
    description: Removes any previous labels and sets the new labels for an issue.
    externalDocs: https://docs.github.com/rest/issues/labels#set-labels-for-an-issue
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: issueNumber
        description: The number that identifies the issue.
        paramKey: issue_number
        in: path
        schema:
          type: number
        required: true
      - paramName: requestBody
        paramKey: ""
        description: ""
        in: body_raw
        schema:
          type: any
        required: true
    requestBodyType: json
  - moduleName: Issues / Remove Labels
    method: delete
    path: /repos/{owner}/{repo}/issues/{issue_number}/labels
    description: Removes all labels from an issue.
    externalDocs: https://docs.github.com/rest/issues/labels#remove-all-labels-from-an-issue
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: issueNumber
        description: The number that identifies the issue.
        paramKey: issue_number
        in: path
        schema:
          type: number
        required: true
  - moduleName: Issues / Label / Remove
    method: delete
    path: /repos/{owner}/{repo}/issues/{issue_number}/labels/{name}
    description: Removes the specified label from the issue, and returns the
      remaining labels on the issue. This endpoint returns a `404 Not Found`
      status if the label does not exist.
    externalDocs: https://docs.github.com/rest/issues/labels#remove-a-label-from-an-issue
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: issueNumber
        description: The number that identifies the issue.
        paramKey: issue_number
        in: path
        schema:
          type: number
        required: true
      - paramName: name
        description: ""
        paramKey: name
        in: path
        schema:
          type: string
        required: true
  - moduleName: Issues / Lock
    method: put
    path: /repos/{owner}/{repo}/issues/{issue_number}/lock
    description: >-
      Users with push access can lock an issue or pull request's conversation.


      Note that, if you choose not to pass any parameters, you'll need to set
      `Content-Length` to zero when calling out to this endpoint. For more
      information, see "[HTTP
      method](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#http-method)."
    externalDocs: https://docs.github.com/rest/issues/issues#lock-an-issue
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: issueNumber
        description: The number that identifies the issue.
        paramKey: issue_number
        in: path
        schema:
          type: number
        required: true
      - paramName: lockReason
        description: >-
          The reason for locking the issue or pull request conversation. Lock
          will fail if you don't use one of these reasons:
           * `off-topic`
           * `too heated`
           * `resolved`
           * `spam`
        paramKey: lock_reason
        in: body
        schema:
          type: string
          enum:
            - off-topic
            - too heated
            - resolved
            - spam
        required: false
    requestBodyType: json
  - moduleName: Issues / Unlock
    method: delete
    path: /repos/{owner}/{repo}/issues/{issue_number}/lock
    description: Users with push access can unlock an issue's conversation.
    externalDocs: https://docs.github.com/rest/issues/issues#unlock-an-issue
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: issueNumber
        description: The number that identifies the issue.
        paramKey: issue_number
        in: path
        schema:
          type: number
        required: true
  - moduleName: Reactions / Issue / List
    method: get
    path: /repos/{owner}/{repo}/issues/{issue_number}/reactions
    description: List the reactions to an
      [issue](https://docs.github.com/rest/issues/issues#get-an-issue).
    externalDocs: https://docs.github.com/rest/reactions/reactions#list-reactions-for-an-issue
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: issueNumber
        description: The number that identifies the issue.
        paramKey: issue_number
        in: path
        schema:
          type: number
        required: true
      - paramName: content
        description: Returns a single [reaction
          type](https://docs.github.com/rest/reactions/reactions#about-reactions).
          Omit this parameter to list all reactions to an issue.
        paramKey: content
        in: query
        schema:
          type: string
          enum:
            - "+1"
            - "-1"
            - laugh
            - confused
            - heart
            - hooray
            - rocket
            - eyes
        required: false
      - paramName: perPage
        description: The number of results per page (max 100). For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: per_page
        in: query
        schema:
          type: number
          default: 30
        required: false
      - paramName: page
        description: The page number of the results to fetch. For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: page
        in: query
        schema:
          type: number
          default: 1
        required: false
  - moduleName: Reactions / Issue / Create
    method: post
    path: /repos/{owner}/{repo}/issues/{issue_number}/reactions
    description: Create a reaction to an
      [issue](https://docs.github.com/rest/issues/issues#get-an-issue). A
      response with an HTTP `200` status means that you already added the
      reaction type to this issue.
    externalDocs: https://docs.github.com/rest/reactions/reactions#create-reaction-for-an-issue
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: issueNumber
        description: The number that identifies the issue.
        paramKey: issue_number
        in: path
        schema:
          type: number
        required: true
      - paramName: content
        description: The [reaction
          type](https://docs.github.com/rest/reactions/reactions#about-reactions)
          to add to the issue.
        paramKey: content
        in: body
        schema:
          type: string
          enum:
            - "+1"
            - "-1"
            - laugh
            - confused
            - heart
            - hooray
            - rocket
            - eyes
        required: true
    requestBodyType: json
  - moduleName: Reactions / Issue / Delete
    method: delete
    path: /repos/{owner}/{repo}/issues/{issue_number}/reactions/{reaction_id}
    description: >-
      > [!NOTE]

      > You can also specify a repository by `repository_id` using the route
      `DELETE
      /repositories/:repository_id/issues/:issue_number/reactions/:reaction_id`.


      Delete a reaction to an
      [issue](https://docs.github.com/rest/issues/issues#get-an-issue).
    externalDocs: https://docs.github.com/rest/reactions/reactions#delete-an-issue-reaction
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: issueNumber
        description: The number that identifies the issue.
        paramKey: issue_number
        in: path
        schema:
          type: number
        required: true
      - paramName: reactionId
        description: The unique identifier of the reaction.
        paramKey: reaction_id
        in: path
        schema:
          type: number
        required: true
  - moduleName: Issues / List Timeline Events
    method: get
    path: /repos/{owner}/{repo}/issues/{issue_number}/timeline
    description: List all timeline events for an issue.
    externalDocs: https://docs.github.com/rest/issues/timeline#list-timeline-events-for-an-issue
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: issueNumber
        description: The number that identifies the issue.
        paramKey: issue_number
        in: path
        schema:
          type: number
        required: true
      - paramName: perPage
        description: The number of results per page (max 100). For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: per_page
        in: query
        schema:
          type: number
          default: 30
        required: false
      - paramName: page
        description: The page number of the results to fetch. For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: page
        in: query
        schema:
          type: number
          default: 1
        required: false
  - moduleName: Repos / Deploy Keys / List
    method: get
    path: /repos/{owner}/{repo}/keys
    description: ""
    externalDocs: https://docs.github.com/rest/deploy-keys/deploy-keys#list-deploy-keys
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: perPage
        description: The number of results per page (max 100). For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: per_page
        in: query
        schema:
          type: number
          default: 30
        required: false
      - paramName: page
        description: The page number of the results to fetch. For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: page
        in: query
        schema:
          type: number
          default: 1
        required: false
  - moduleName: Repos / Deploy Key / Create
    method: post
    path: /repos/{owner}/{repo}/keys
    description: You can create a read-only deploy key.
    externalDocs: https://docs.github.com/rest/deploy-keys/deploy-keys#create-a-deploy-key
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: title
        description: A name for the key.
        paramKey: title
        in: body
        schema:
          type: string
        required: false
      - paramName: key
        description: The contents of the key.
        paramKey: key
        in: body
        schema:
          type: string
        required: true
      - paramName: readOnly
        description: >-
          If `true`, the key will only be able to read repository contents.
          Otherwise, the key will be able to read and write.

          Deploy keys with write access can perform the same actions as an
          organization member with admin access, or a collaborator on a personal
          repository. For more information, see "[Repository permission levels
          for an
          organization](https://docs.github.com/articles/repository-permission-levels-for-an-organization/)"
          and "[Permission levels for a user account
          repository](https://docs.github.com/articles/permission-levels-for-a-user-account-repository/)."
        paramKey: read_only
        in: body
        schema:
          type: boolean
        required: false
    requestBodyType: json
  - moduleName: Repos / Deploy Key / Get
    method: get
    path: /repos/{owner}/{repo}/keys/{key_id}
    description: ""
    externalDocs: https://docs.github.com/rest/deploy-keys/deploy-keys#get-a-deploy-key
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: keyId
        description: The unique identifier of the key.
        paramKey: key_id
        in: path
        schema:
          type: number
        required: true
  - moduleName: Repos / Deploy Key / Delete
    method: delete
    path: /repos/{owner}/{repo}/keys/{key_id}
    description: Deploy keys are immutable. If you need to update a key, remove the
      key and create a new one instead.
    externalDocs: https://docs.github.com/rest/deploy-keys/deploy-keys#delete-a-deploy-key
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: keyId
        description: The unique identifier of the key.
        paramKey: key_id
        in: path
        schema:
          type: number
        required: true
  - moduleName: Labels / List
    method: get
    path: /repos/{owner}/{repo}/labels
    description: Lists all labels for a repository.
    externalDocs: https://docs.github.com/rest/issues/labels#list-labels-for-a-repository
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: perPage
        description: The number of results per page (max 100). For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: per_page
        in: query
        schema:
          type: number
          default: 30
        required: false
      - paramName: page
        description: The page number of the results to fetch. For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: page
        in: query
        schema:
          type: number
          default: 1
        required: false
  - moduleName: Labels / Create
    method: post
    path: /repos/{owner}/{repo}/labels
    description: Creates a label for the specified repository with the given name
      and color. The name and color parameters are required. The color must be a
      valid [hexadecimal color code](http://www.color-hex.com/).
    externalDocs: https://docs.github.com/rest/issues/labels#create-a-label
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: name
        description: The name of the label. Emoji can be added to label names, using
          either native emoji or colon-style markup. For example, typing
          `:strawberry:` will render the emoji
          ![:strawberry:](https://github.githubassets.com/images/icons/emoji/unicode/1f353.png
          ":strawberry:"). For a full list of available emoji and codes, see
          "[Emoji cheat sheet](https://github.com/ikatyang/emoji-cheat-sheet)."
        paramKey: name
        in: body
        schema:
          type: string
        required: true
      - paramName: color
        description: The [hexadecimal color code](http://www.color-hex.com/) for the
          label, without the leading `#`.
        paramKey: color
        in: body
        schema:
          type: string
        required: false
      - paramName: description
        description: A short description of the label. Must be 100 characters or fewer.
        paramKey: description
        in: body
        schema:
          type: string
        required: false
    requestBodyType: json
  - moduleName: Labels / Get
    method: get
    path: /repos/{owner}/{repo}/labels/{name}
    description: Gets a label using the given name.
    externalDocs: https://docs.github.com/rest/issues/labels#get-a-label
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: name
        description: ""
        paramKey: name
        in: path
        schema:
          type: string
        required: true
  - moduleName: Labels / Update
    method: patch
    path: /repos/{owner}/{repo}/labels/{name}
    description: Updates a label using the given label name.
    externalDocs: https://docs.github.com/rest/issues/labels#update-a-label
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: name
        description: ""
        paramKey: name
        in: path
        schema:
          type: string
        required: true
      - paramName: newName
        description: The new name of the label. Emoji can be added to label names, using
          either native emoji or colon-style markup. For example, typing
          `:strawberry:` will render the emoji
          ![:strawberry:](https://github.githubassets.com/images/icons/emoji/unicode/1f353.png
          ":strawberry:"). For a full list of available emoji and codes, see
          "[Emoji cheat sheet](https://github.com/ikatyang/emoji-cheat-sheet)."
        paramKey: new_name
        in: body
        schema:
          type: string
        required: false
      - paramName: color
        description: The [hexadecimal color code](http://www.color-hex.com/) for the
          label, without the leading `#`.
        paramKey: color
        in: body
        schema:
          type: string
        required: false
      - paramName: description
        description: A short description of the label. Must be 100 characters or fewer.
        paramKey: description
        in: body
        schema:
          type: string
        required: false
    requestBodyType: json
  - moduleName: Labels / Delete
    method: delete
    path: /repos/{owner}/{repo}/labels/{name}
    description: Deletes a label using the given label name.
    externalDocs: https://docs.github.com/rest/issues/labels#delete-a-label
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: name
        description: ""
        paramKey: name
        in: path
        schema:
          type: string
        required: true
  - moduleName: Repos / Languages / List
    method: get
    path: /repos/{owner}/{repo}/languages
    description: Lists languages for the specified repository. The value shown for
      each language is the number of bytes of code written in that language.
    externalDocs: https://docs.github.com/rest/repos/repos#list-repository-languages
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
  - moduleName: Repos / Merge Upstream
    method: post
    path: /repos/{owner}/{repo}/merge-upstream
    description: Sync a branch of a forked repository to keep it up-to-date with the
      upstream repository.
    externalDocs: https://docs.github.com/rest/branches/branches#sync-a-fork-branch-with-the-upstream-repository
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: branch
        description: The name of the branch which should be updated to match upstream.
        paramKey: branch
        in: body
        schema:
          type: string
        required: true
    requestBodyType: json
  - moduleName: Repos / Merge
    method: post
    path: /repos/{owner}/{repo}/merges
    description: ""
    externalDocs: https://docs.github.com/rest/branches/branches#merge-a-branch
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: base
        description: The name of the base branch that the head will be merged into.
        paramKey: base
        in: body
        schema:
          type: string
        required: true
      - paramName: head
        description: The head to merge. This can be a branch name or a commit SHA1.
        paramKey: head
        in: body
        schema:
          type: string
        required: true
      - paramName: commitMessage
        description: Commit message to use for the merge commit. If omitted, a default
          message will be used.
        paramKey: commit_message
        in: body
        schema:
          type: string
        required: false
    requestBodyType: json
  - moduleName: Milestones / List
    method: get
    path: /repos/{owner}/{repo}/milestones
    description: Lists milestones for a repository.
    externalDocs: https://docs.github.com/rest/issues/milestones#list-milestones
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: state
        description: The state of the milestone. Either `open`, `closed`, or `all`.
        paramKey: state
        in: query
        schema:
          type: string
          default: open
          enum:
            - open
            - closed
            - all
        required: false
      - paramName: sort
        description: What to sort results by. Either `due_on` or `completeness`.
        paramKey: sort
        in: query
        schema:
          type: string
          default: due_on
          enum:
            - due_on
            - completeness
        required: false
      - paramName: direction
        description: The direction of the sort. Either `asc` or `desc`.
        paramKey: direction
        in: query
        schema:
          type: string
          default: asc
          enum:
            - asc
            - desc
        required: false
      - paramName: perPage
        description: The number of results per page (max 100). For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: per_page
        in: query
        schema:
          type: number
          default: 30
        required: false
      - paramName: page
        description: The page number of the results to fetch. For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: page
        in: query
        schema:
          type: number
          default: 1
        required: false
  - moduleName: Milestones / Create
    method: post
    path: /repos/{owner}/{repo}/milestones
    description: Creates a milestone.
    externalDocs: https://docs.github.com/rest/issues/milestones#create-a-milestone
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: title
        description: The title of the milestone.
        paramKey: title
        in: body
        schema:
          type: string
        required: true
      - paramName: state
        description: The state of the milestone. Either `open` or `closed`.
        paramKey: state
        in: body
        schema:
          type: string
          default: open
          enum:
            - open
            - closed
        required: false
      - paramName: description
        description: A description of the milestone.
        paramKey: description
        in: body
        schema:
          type: string
        required: false
      - paramName: dueOn
        description: "The milestone due date. This is a timestamp in [ISO
          8601](https://en.wikipedia.org/wiki/ISO_8601) format:
          `YYYY-MM-DDTHH:MM:SSZ`."
        paramKey: due_on
        in: body
        schema:
          type: string
        required: false
    requestBodyType: json
  - moduleName: Milestones / Get
    method: get
    path: /repos/{owner}/{repo}/milestones/{milestone_number}
    description: Gets a milestone using the given milestone number.
    externalDocs: https://docs.github.com/rest/issues/milestones#get-a-milestone
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: milestoneNumber
        description: The number that identifies the milestone.
        paramKey: milestone_number
        in: path
        schema:
          type: number
        required: true
  - moduleName: Milestones / Update
    method: patch
    path: /repos/{owner}/{repo}/milestones/{milestone_number}
    description: ""
    externalDocs: https://docs.github.com/rest/issues/milestones#update-a-milestone
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: milestoneNumber
        description: The number that identifies the milestone.
        paramKey: milestone_number
        in: path
        schema:
          type: number
        required: true
      - paramName: title
        description: The title of the milestone.
        paramKey: title
        in: body
        schema:
          type: string
        required: false
      - paramName: state
        description: The state of the milestone. Either `open` or `closed`.
        paramKey: state
        in: body
        schema:
          type: string
          default: open
          enum:
            - open
            - closed
        required: false
      - paramName: description
        description: A description of the milestone.
        paramKey: description
        in: body
        schema:
          type: string
        required: false
      - paramName: dueOn
        description: "The milestone due date. This is a timestamp in [ISO
          8601](https://en.wikipedia.org/wiki/ISO_8601) format:
          `YYYY-MM-DDTHH:MM:SSZ`."
        paramKey: due_on
        in: body
        schema:
          type: string
        required: false
    requestBodyType: json
  - moduleName: Milestones / Delete
    method: delete
    path: /repos/{owner}/{repo}/milestones/{milestone_number}
    description: Deletes a milestone using the given milestone number.
    externalDocs: https://docs.github.com/rest/issues/milestones#delete-a-milestone
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: milestoneNumber
        description: The number that identifies the milestone.
        paramKey: milestone_number
        in: path
        schema:
          type: number
        required: true
  - moduleName: Milestones / Get Labels
    method: get
    path: /repos/{owner}/{repo}/milestones/{milestone_number}/labels
    description: Lists labels for issues in a milestone.
    externalDocs: https://docs.github.com/rest/issues/labels#list-labels-for-issues-in-a-milestone
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: milestoneNumber
        description: The number that identifies the milestone.
        paramKey: milestone_number
        in: path
        schema:
          type: number
        required: true
      - paramName: perPage
        description: The number of results per page (max 100). For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: per_page
        in: query
        schema:
          type: number
          default: 30
        required: false
      - paramName: page
        description: The page number of the results to fetch. For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: page
        in: query
        schema:
          type: number
          default: 1
        required: false
  - moduleName: Activity / Authenticated User / Repo Notifications
    method: get
    path: /repos/{owner}/{repo}/notifications
    description: Lists all notifications for the current user in the specified repository.
    externalDocs: https://docs.github.com/rest/activity/notifications#list-repository-notifications-for-the-authenticated-user
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: all
        description: If `true`, show notifications marked as read.
        paramKey: all
        in: query
        schema:
          type: boolean
          default: false
        required: false
      - paramName: participating
        description: If `true`, only shows notifications in which the user is directly
          participating or mentioned.
        paramKey: participating
        in: query
        schema:
          type: boolean
          default: false
        required: false
      - paramName: since
        description: "Only show results that were last updated after the given time.
          This is a timestamp in [ISO
          8601](https://en.wikipedia.org/wiki/ISO_8601) format:
          `YYYY-MM-DDTHH:MM:SSZ`."
        paramKey: since
        in: query
        schema:
          type: string
        required: false
      - paramName: before
        description: "Only show notifications updated before the given time. This is a
          timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601)
          format: `YYYY-MM-DDTHH:MM:SSZ`."
        paramKey: before
        in: query
        schema:
          type: string
        required: false
      - paramName: perPage
        description: The number of results per page (max 100). For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: per_page
        in: query
        schema:
          type: number
          default: 30
        required: false
      - paramName: page
        description: The page number of the results to fetch. For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: page
        in: query
        schema:
          type: number
          default: 1
        required: false
  - moduleName: Activity / Repo Notifications / Mark As Read
    method: put
    path: /repos/{owner}/{repo}/notifications
    description: Marks all notifications in a repository as "read" for the current
      user. If the number of notifications is too large to complete in one
      request, you will receive a `202 Accepted` status and GitHub will run an
      asynchronous process to mark notifications as "read." To check whether any
      "unread" notifications remain, you can use the [List repository
      notifications for the authenticated
      user](https://docs.github.com/rest/activity/notifications#list-repository-notifications-for-the-authenticated-user)
      endpoint and pass the query parameter `all=false`.
    externalDocs: https://docs.github.com/rest/activity/notifications#mark-repository-notifications-as-read
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: lastReadAt
        description: "Describes the last point that notifications were checked. Anything
          updated since this time will not be marked as read. If you omit this
          parameter, all notifications are marked as read. This is a timestamp
          in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format:
          `YYYY-MM-DDTHH:MM:SSZ`. Default: The current timestamp."
        paramKey: last_read_at
        in: body
        schema:
          type: string
        required: false
    requestBodyType: json
  - moduleName: Repos / Pages / Get
    method: get
    path: /repos/{owner}/{repo}/pages
    description: >-
      Gets information about a GitHub Pages site.


      OAuth app tokens and personal access tokens (classic) need the `repo`
      scope to use this endpoint.
    externalDocs: https://docs.github.com/rest/pages/pages#get-a-apiname-pages-site
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
  - moduleName: Repos / Pages / Create
    method: post
    path: /repos/{owner}/{repo}/pages
    description: >-
      Configures a GitHub Pages site. For more information, see "[About GitHub
      Pages](/github/working-with-github-pages/about-github-pages)."


      The authenticated user must be a repository administrator, maintainer, or
      have the 'manage GitHub Pages settings' permission.


      OAuth app tokens and personal access tokens (classic) need the `repo`
      scope to use this endpoint.
    externalDocs: https://docs.github.com/rest/pages/pages#create-a-apiname-pages-site
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: buildType
        description: The process in which the Page will be built. Possible values are
          `"legacy"` and `"workflow"`.
        paramKey: build_type
        in: body
        schema:
          type: string
          enum:
            - legacy
            - workflow
        required: false
      - paramName: source
        description: The source branch and directory used to publish your Pages site.
        paramKey: source
        in: body
        schema:
          type: any
        required: false
    requestBodyType: json
  - moduleName: Repos / Pages / Update
    method: put
    path: /repos/{owner}/{repo}/pages
    description: >-
      Updates information for a GitHub Pages site. For more information, see
      "[About GitHub
      Pages](/github/working-with-github-pages/about-github-pages).


      The authenticated user must be a repository administrator, maintainer, or
      have the 'manage GitHub Pages settings' permission.


      OAuth app tokens and personal access tokens (classic) need the `repo`
      scope to use this endpoint.
    externalDocs: https://docs.github.com/rest/pages/pages#update-information-about-a-apiname-pages-site
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: cname
        description: Specify a custom domain for the repository. Sending a `null` value
          will remove the custom domain. For more about custom domains, see
          "[Using a custom domain with GitHub
          Pages](https://docs.github.com/pages/configuring-a-custom-domain-for-your-github-pages-site)."
        paramKey: cname
        in: body
        schema:
          type: string
        required: false
      - paramName: httpsEnforced
        description: Specify whether HTTPS should be enforced for the repository.
        paramKey: https_enforced
        in: body
        schema:
          type: boolean
        required: false
      - paramName: buildType
        description: The process by which the GitHub Pages site will be built.
          `workflow` means that the site is built by a custom GitHub Actions
          workflow. `legacy` means that the site is built by GitHub when changes
          are pushed to a specific branch.
        paramKey: build_type
        in: body
        schema:
          type: string
          enum:
            - legacy
            - workflow
        required: false
      - paramName: source
        description: ""
        paramKey: source
        in: body
        schema:
          type: any
        required: false
    requestBodyType: json
  - moduleName: Repos / Pages / Delete
    method: delete
    path: /repos/{owner}/{repo}/pages
    description: >-
      Deletes a GitHub Pages site. For more information, see "[About GitHub
      Pages](/github/working-with-github-pages/about-github-pages).


      The authenticated user must be a repository administrator, maintainer, or
      have the 'manage GitHub Pages settings' permission.


      OAuth app tokens and personal access tokens (classic) need the `repo`
      scope to use this endpoint.
    externalDocs: https://docs.github.com/rest/pages/pages#delete-a-apiname-pages-site
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
  - moduleName: Repos / Pages Builds / List
    method: get
    path: /repos/{owner}/{repo}/pages/builds
    description: >-
      Lists builts of a GitHub Pages site.


      OAuth app tokens and personal access tokens (classic) need the `repo`
      scope to use this endpoint.
    externalDocs: https://docs.github.com/rest/pages/pages#list-apiname-pages-builds
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: perPage
        description: The number of results per page (max 100). For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: per_page
        in: query
        schema:
          type: number
          default: 30
        required: false
      - paramName: page
        description: The page number of the results to fetch. For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: page
        in: query
        schema:
          type: number
          default: 1
        required: false
  - moduleName: Repos / Pages Build / Request
    method: post
    path: /repos/{owner}/{repo}/pages/builds
    description: >-
      You can request that your site be built from the latest revision on the
      default branch. This has the same effect as pushing a commit to your
      default branch, but does not require an additional commit. Manually
      triggering page builds can be helpful when diagnosing build warnings and
      failures.


      Build requests are limited to one concurrent build per repository and one
      concurrent build per requester. If you request a build while another is
      still in progress, the second request will be queued until the first
      completes.
    externalDocs: https://docs.github.com/rest/pages/pages#request-a-apiname-pages-build
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
  - moduleName: Repos / Latest Pages Build / Get
    method: get
    path: /repos/{owner}/{repo}/pages/builds/latest
    description: >-
      Gets information about the single most recent build of a GitHub Pages
      site.


      OAuth app tokens and personal access tokens (classic) need the `repo`
      scope to use this endpoint.
    externalDocs: https://docs.github.com/rest/pages/pages#get-latest-pages-build
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
  - moduleName: Repos / Pages Build / Get
    method: get
    path: /repos/{owner}/{repo}/pages/builds/{build_id}
    description: >-
      Gets information about a GitHub Pages build.


      OAuth app tokens and personal access tokens (classic) need the `repo`
      scope to use this endpoint.
    externalDocs: https://docs.github.com/rest/pages/pages#get-apiname-pages-build
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: buildId
        description: ""
        paramKey: build_id
        in: path
        schema:
          type: number
        required: true
  - moduleName: Repos / Pages Deployment / Create
    method: post
    path: /repos/{owner}/{repo}/pages/deployments
    description: |-
      Create a GitHub Pages deployment for a repository.

      The authenticated user must have write permission to the repository.
    externalDocs: https://docs.github.com/rest/pages/pages#create-a-github-pages-deployment
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: artifactId
        description: The ID of an artifact that contains the .zip or .tar of static
          assets to deploy. The artifact belongs to the repository. Either
          `artifact_id` or `artifact_url` are required.
        paramKey: artifact_id
        in: body
        schema:
          type: number
        required: false
      - paramName: artifactUrl
        description: The URL of an artifact that contains the .zip or .tar of static
          assets to deploy. The artifact belongs to the repository. Either
          `artifact_id` or `artifact_url` are required.
        paramKey: artifact_url
        in: body
        schema:
          type: string
        required: false
      - paramName: environment
        description: The target environment for this GitHub Pages deployment.
        paramKey: environment
        in: body
        schema:
          type: string
          default: github-pages
        required: false
      - paramName: pagesBuildVersion
        description: A unique string that represents the version of the build for this
          deployment.
        paramKey: pages_build_version
        in: body
        schema:
          type: string
          default: GITHUB_SHA
        required: true
      - paramName: oidcToken
        description: The OIDC token issued by GitHub Actions certifying the origin of
          the deployment.
        paramKey: oidc_token
        in: body
        schema:
          type: string
        required: true
    requestBodyType: json
  - moduleName: Repos / Pages Deployment / Get
    method: get
    path: /repos/{owner}/{repo}/pages/deployments/{pages_deployment_id}
    description: >-
      Gets the current status of a GitHub Pages deployment.


      The authenticated user must have read permission for the GitHub Pages
      site.
    externalDocs: https://docs.github.com/rest/pages/pages#get-the-status-of-a-github-pages-deployment
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: pagesDeploymentId
        description: The ID of the Pages deployment. You can also give the commit SHA of
          the deployment.
        paramKey: pages_deployment_id
        in: path
        schema:
          type: any
        required: true
  - moduleName: Repos / Pages Deployment / Cancel
    method: post
    path: /repos/{owner}/{repo}/pages/deployments/{pages_deployment_id}/cancel
    description: >-
      Cancels a GitHub Pages deployment.


      The authenticated user must have write permissions for the GitHub Pages
      site.
    externalDocs: https://docs.github.com/rest/pages/pages#cancel-a-github-pages-deployment
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: pagesDeploymentId
        description: The ID of the Pages deployment. You can also give the commit SHA of
          the deployment.
        paramKey: pages_deployment_id
        in: path
        schema:
          type: any
        required: true
  - moduleName: Repos / Pages Health Check / Get
    method: get
    path: /repos/{owner}/{repo}/pages/health
    description: >-
      Gets a health check of the DNS settings for the `CNAME` record configured
      for a repository's GitHub Pages.


      The first request to this endpoint returns a `202 Accepted` status and
      starts an asynchronous background task to get the results for the domain.
      After the background task completes, subsequent requests to this endpoint
      return a `200 OK` status with the health check results in the response.


      The authenticated user must be a repository administrator, maintainer, or
      have the 'manage GitHub Pages settings' permission to use this endpoint.


      OAuth app tokens and personal access tokens (classic) need the `repo`
      scope to use this endpoint.
    externalDocs: https://docs.github.com/rest/pages/pages#get-a-dns-health-check-for-github-pages
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
  - moduleName: Repos / Private Vulnerability Reporting / Check
    method: get
    path: /repos/{owner}/{repo}/private-vulnerability-reporting
    description: Returns a boolean indicating whether or not private vulnerability
      reporting is enabled for the repository. For more information, see
      "[Evaluating the security settings of a
      repository](https://docs.github.com/code-security/security-advisories/working-with-repository-security-advisories/evaluating-the-security-settings-of-a-repository)".
    externalDocs: https://docs.github.com/rest/repos/repos#check-if-private-vulnerability-reporting-is-enabled-for-a-repository
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
  - moduleName: Repos / Private Vulnerability Reporting / Enable
    method: put
    path: /repos/{owner}/{repo}/private-vulnerability-reporting
    description: Enables private vulnerability reporting for a repository. The
      authenticated user must have admin access to the repository. For more
      information, see "[Privately reporting a security
      vulnerability](https://docs.github.com/code-security/security-advisories/guidance-on-reporting-and-writing/privately-reporting-a-security-vulnerability)."
    externalDocs: https://docs.github.com/rest/repos/repos#enable-private-vulnerability-reporting-for-a-repository
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
  - moduleName: Repos / Private Vulnerability Reporting / Disable
    method: delete
    path: /repos/{owner}/{repo}/private-vulnerability-reporting
    description: Disables private vulnerability reporting for a repository. The
      authenticated user must have admin access to the repository. For more
      information, see "[Privately reporting a security
      vulnerability](https://docs.github.com/code-security/security-advisories/guidance-on-reporting-and-writing/privately-reporting-a-security-vulnerability)".
    externalDocs: https://docs.github.com/rest/repos/repos#disable-private-vulnerability-reporting-for-a-repository
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
  - moduleName: Projects / Repo / List
    method: get
    path: /repos/{owner}/{repo}/projects
    description: Lists the projects in a repository. Returns a `404 Not Found`
      status if projects are disabled in the repository. If you do not have
      sufficient privileges to perform this action, a `401 Unauthorized` or `410
      Gone` status is returned.
    externalDocs: https://docs.github.com/rest/projects/projects#list-repository-projects
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: state
        description: Indicates the state of the projects to return.
        paramKey: state
        in: query
        schema:
          type: string
          default: open
          enum:
            - open
            - closed
            - all
        required: false
      - paramName: perPage
        description: The number of results per page (max 100). For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: per_page
        in: query
        schema:
          type: number
          default: 30
        required: false
      - paramName: page
        description: The page number of the results to fetch. For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: page
        in: query
        schema:
          type: number
          default: 1
        required: false
  - moduleName: Projects / Repo / Create
    method: post
    path: /repos/{owner}/{repo}/projects
    description: Creates a repository project board. Returns a `410 Gone` status if
      projects are disabled in the repository or if the repository does not have
      existing classic projects. If you do not have sufficient privileges to
      perform this action, a `401 Unauthorized` or `410 Gone` status is
      returned.
    externalDocs: https://docs.github.com/rest/projects/projects#create-a-repository-project
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: name
        description: The name of the project.
        paramKey: name
        in: body
        schema:
          type: string
        required: true
      - paramName: body
        description: The description of the project.
        paramKey: body
        in: body
        schema:
          type: string
        required: false
    requestBodyType: json
  - moduleName: Repos / Custom Properties Values / Get
    method: get
    path: /repos/{owner}/{repo}/properties/values
    description: |-
      Gets all custom property values that are set for a repository.
      Users with read access to the repository can use this endpoint.
    externalDocs: https://docs.github.com/rest/repos/custom-properties#get-all-custom-property-values-for-a-repository
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
  - moduleName: Repos / Custom Properties Values / Update
    method: patch
    path: /repos/{owner}/{repo}/properties/values
    description: >-
      Create new or update existing custom property values for a repository.

      Using a value of `null` for a custom property will remove or 'unset' the
      property value from the repository.


      Repository admins and other users with the repository-level "edit custom
      property values" fine-grained permission can use this endpoint.
    externalDocs: https://docs.github.com/rest/repos/custom-properties#create-or-update-custom-property-values-for-a-repository
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: properties
        description: A list of custom property names and associated values to apply to
          the repositories.
        paramKey: properties
        in: body
        schema:
          type: array
          items:
            type: any
        required: true
    requestBodyType: json
  - moduleName: Pulls / List
    method: get
    path: /repos/{owner}/{repo}/pulls
    description: >-
      Lists pull requests in a specified repository.


      Draft pull requests are available in public repositories with GitHub

      Free and GitHub Free for organizations, GitHub Pro, and legacy
      per-repository billing

      plans, and in public and private repositories with GitHub Team and GitHub
      Enterprise

      Cloud. For more information, see [GitHub's
      products](https://docs.github.com/github/getting-started-with-github/githubs-products)

      in the GitHub Help documentation.


      This endpoint supports the following custom media types. For more
      information, see "[Media
      types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."


      - **`application/vnd.github.raw+json`**: Returns the raw markdown body.
      Response will include `body`. This is the default if you do not pass any
      specific media type.

      - **`application/vnd.github.text+json`**: Returns a text only
      representation of the markdown body. Response will include `body_text`.

      - **`application/vnd.github.html+json`**: Returns HTML rendered from the
      body's markdown. Response will include `body_html`.

      - **`application/vnd.github.full+json`**: Returns raw, text, and HTML
      representations. Response will include `body`, `body_text`, and
      `body_html`.
    externalDocs: https://docs.github.com/rest/pulls/pulls#list-pull-requests
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: state
        description: Either `open`, `closed`, or `all` to filter by state.
        paramKey: state
        in: query
        schema:
          type: string
          default: open
          enum:
            - open
            - closed
            - all
        required: false
      - paramName: head
        description: "Filter pulls by head user or head organization and branch name in
          the format of `user:ref-name` or `organization:ref-name`. For example:
          `github:new-script-format` or `octocat:test-branch`."
        paramKey: head
        in: query
        schema:
          type: string
        required: false
      - paramName: base
        description: "Filter pulls by base branch name. Example: `gh-pages`."
        paramKey: base
        in: query
        schema:
          type: string
        required: false
      - paramName: sort
        description: What to sort results by. `popularity` will sort by the number of
          comments. `long-running` will sort by date created and will limit the
          results to pull requests that have been open for more than a month and
          have had activity within the past month.
        paramKey: sort
        in: query
        schema:
          type: string
          default: created
          enum:
            - created
            - updated
            - popularity
            - long-running
        required: false
      - paramName: direction
        description: "The direction of the sort. Default: `desc` when sort is `created`
          or sort is not specified, otherwise `asc`."
        paramKey: direction
        in: query
        schema:
          type: string
          enum:
            - asc
            - desc
        required: false
      - paramName: perPage
        description: The number of results per page (max 100). For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: per_page
        in: query
        schema:
          type: number
          default: 30
        required: false
      - paramName: page
        description: The page number of the results to fetch. For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: page
        in: query
        schema:
          type: number
          default: 1
        required: false
  - moduleName: Pulls / Create
    method: post
    path: /repos/{owner}/{repo}/pulls
    description: >-
      Draft pull requests are available in public repositories with GitHub Free
      and GitHub Free for organizations, GitHub Pro, and legacy per-repository
      billing plans, and in public and private repositories with GitHub Team and
      GitHub Enterprise Cloud. For more information, see [GitHub's
      products](https://docs.github.com/github/getting-started-with-github/githubs-products)
      in the GitHub Help documentation.


      To open or update a pull request in a public repository, you must have
      write access to the head or the source branch. For organization-owned
      repositories, you must be a member of the organization that owns the
      repository to open or update a pull request.


      This endpoint triggers
      [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications).
      Creating content too quickly using this endpoint may result in secondary
      rate limiting. For more information, see "[Rate limits for the
      API](https://docs.github.com/rest/using-the-rest-api/rate-limits-for-the-rest-api#about-secondary-rate-limits)"
      and "[Best practices for using the REST
      API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api)."


      This endpoint supports the following custom media types. For more
      information, see "[Media
      types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."


      - **`application/vnd.github.raw+json`**: Returns the raw markdown body.
      Response will include `body`. This is the default if you do not pass any
      specific media type.

      - **`application/vnd.github.text+json`**: Returns a text only
      representation of the markdown body. Response will include `body_text`.

      - **`application/vnd.github.html+json`**: Returns HTML rendered from the
      body's markdown. Response will include `body_html`.

      - **`application/vnd.github.full+json`**: Returns raw, text, and HTML
      representations. Response will include `body`, `body_text`, and
      `body_html`.
    externalDocs: https://docs.github.com/rest/pulls/pulls#create-a-pull-request
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: title
        description: The title of the new pull request. Required unless `issue` is
          specified.
        paramKey: title
        in: body
        schema:
          type: string
        required: false
      - paramName: head
        description: "The name of the branch where your changes are implemented. For
          cross-repository pull requests in the same network, namespace `head`
          with a user like this: `username:branch`."
        paramKey: head
        in: body
        schema:
          type: string
        required: true
      - paramName: headRepo
        description: The name of the repository where the changes in the pull request
          were made. This field is required for cross-repository pull requests
          if both repositories are owned by the same organization.
        paramKey: head_repo
        in: body
        schema:
          type: string
        required: false
      - paramName: base
        description: The name of the branch you want the changes pulled into. This
          should be an existing branch on the current repository. You cannot
          submit a pull request to one repository that requests a merge to a
          base of another repository.
        paramKey: base
        in: body
        schema:
          type: string
        required: true
      - paramName: body
        description: The contents of the pull request.
        paramKey: body
        in: body
        schema:
          type: string
        required: false
      - paramName: maintainerCanModify
        description: Indicates whether [maintainers can
          modify](https://docs.github.com/articles/allowing-changes-to-a-pull-request-branch-created-from-a-fork/)
          the pull request.
        paramKey: maintainer_can_modify
        in: body
        schema:
          type: boolean
        required: false
      - paramName: draft
        description: Indicates whether the pull request is a draft. See "[Draft Pull
          Requests](https://docs.github.com/articles/about-pull-requests#draft-pull-requests)"
          in the GitHub Help documentation to learn more.
        paramKey: draft
        in: body
        schema:
          type: boolean
        required: false
      - paramName: issue
        description: An issue in the repository to convert to a pull request. The issue
          title, body, and comments will become the title, body, and comments on
          the new pull request. Required unless `title` is specified.
        paramKey: issue
        in: body
        schema:
          type: number
        required: false
    requestBodyType: json
  - moduleName: Pulls / Review Comments / List
    method: get
    path: /repos/{owner}/{repo}/pulls/comments
    description: >-
      Lists review comments for all pull requests in a repository. By default,

      review comments are in ascending order by ID.


      This endpoint supports the following custom media types. For more
      information, see "[Media
      types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."


      - **`application/vnd.github-commitcomment.raw+json`**: Returns the raw
      markdown body. Response will include `body`. This is the default if you do
      not pass any specific media type.

      - **`application/vnd.github-commitcomment.text+json`**: Returns a text
      only representation of the markdown body. Response will include
      `body_text`.

      - **`application/vnd.github-commitcomment.html+json`**: Returns HTML
      rendered from the body's markdown. Response will include `body_html`.

      - **`application/vnd.github-commitcomment.full+json`**: Returns raw, text,
      and HTML representations. Response will include `body`, `body_text`, and
      `body_html`.
    externalDocs: https://docs.github.com/rest/pulls/comments#list-review-comments-in-a-repository
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: sort
        description: ""
        paramKey: sort
        in: query
        schema:
          type: string
          enum:
            - created
            - updated
            - created_at
        required: false
      - paramName: direction
        description: The direction to sort results. Ignored without `sort` parameter.
        paramKey: direction
        in: query
        schema:
          type: string
          enum:
            - asc
            - desc
        required: false
      - paramName: since
        description: "Only show results that were last updated after the given time.
          This is a timestamp in [ISO
          8601](https://en.wikipedia.org/wiki/ISO_8601) format:
          `YYYY-MM-DDTHH:MM:SSZ`."
        paramKey: since
        in: query
        schema:
          type: string
        required: false
      - paramName: perPage
        description: The number of results per page (max 100). For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: per_page
        in: query
        schema:
          type: number
          default: 30
        required: false
      - paramName: page
        description: The page number of the results to fetch. For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: page
        in: query
        schema:
          type: number
          default: 1
        required: false
  - moduleName: Pulls / Review Comment / Get
    method: get
    path: /repos/{owner}/{repo}/pulls/comments/{comment_id}
    description: >-
      Provides details for a specified review comment.


      This endpoint supports the following custom media types. For more
      information, see "[Media
      types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."


      - **`application/vnd.github-commitcomment.raw+json`**: Returns the raw
      markdown body. Response will include `body`. This is the default if you do
      not pass any specific media type.

      - **`application/vnd.github-commitcomment.text+json`**: Returns a text
      only representation of the markdown body. Response will include
      `body_text`.

      - **`application/vnd.github-commitcomment.html+json`**: Returns HTML
      rendered from the body's markdown. Response will include `body_html`.

      - **`application/vnd.github-commitcomment.full+json`**: Returns raw, text,
      and HTML representations. Response will include `body`, `body_text`, and
      `body_html`.
    externalDocs: https://docs.github.com/rest/pulls/comments#get-a-review-comment-for-a-pull-request
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: commentId
        description: The unique identifier of the comment.
        paramKey: comment_id
        in: path
        schema:
          type: number
        required: true
  - moduleName: Pulls / Review Comment / Update
    method: patch
    path: /repos/{owner}/{repo}/pulls/comments/{comment_id}
    description: >-
      Edits the content of a specified review comment.


      This endpoint supports the following custom media types. For more
      information, see "[Media
      types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."


      - **`application/vnd.github-commitcomment.raw+json`**: Returns the raw
      markdown body. Response will include `body`. This is the default if you do
      not pass any specific media type.

      - **`application/vnd.github-commitcomment.text+json`**: Returns a text
      only representation of the markdown body. Response will include
      `body_text`.

      - **`application/vnd.github-commitcomment.html+json`**: Returns HTML
      rendered from the body's markdown. Response will include `body_html`.

      - **`application/vnd.github-commitcomment.full+json`**: Returns raw, text,
      and HTML representations. Response will include `body`, `body_text`, and
      `body_html`.
    externalDocs: https://docs.github.com/rest/pulls/comments#update-a-review-comment-for-a-pull-request
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: commentId
        description: The unique identifier of the comment.
        paramKey: comment_id
        in: path
        schema:
          type: number
        required: true
      - paramName: body
        description: The text of the reply to the review comment.
        paramKey: body
        in: body
        schema:
          type: string
        required: true
    requestBodyType: json
  - moduleName: Pulls / Review Comment / Delete
    method: delete
    path: /repos/{owner}/{repo}/pulls/comments/{comment_id}
    description: Deletes a review comment.
    externalDocs: https://docs.github.com/rest/pulls/comments#delete-a-review-comment-for-a-pull-request
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: commentId
        description: The unique identifier of the comment.
        paramKey: comment_id
        in: path
        schema:
          type: number
        required: true
  - moduleName: Reactions / Pull Request Review Comment / List
    method: get
    path: /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions
    description: List the reactions to a [pull request review
      comment](https://docs.github.com/rest/pulls/comments#get-a-review-comment-for-a-pull-request).
    externalDocs: https://docs.github.com/rest/reactions/reactions#list-reactions-for-a-pull-request-review-comment
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: commentId
        description: The unique identifier of the comment.
        paramKey: comment_id
        in: path
        schema:
          type: number
        required: true
      - paramName: content
        description: Returns a single [reaction
          type](https://docs.github.com/rest/reactions/reactions#about-reactions).
          Omit this parameter to list all reactions to a pull request review
          comment.
        paramKey: content
        in: query
        schema:
          type: string
          enum:
            - "+1"
            - "-1"
            - laugh
            - confused
            - heart
            - hooray
            - rocket
            - eyes
        required: false
      - paramName: perPage
        description: The number of results per page (max 100). For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: per_page
        in: query
        schema:
          type: number
          default: 30
        required: false
      - paramName: page
        description: The page number of the results to fetch. For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: page
        in: query
        schema:
          type: number
          default: 1
        required: false
  - moduleName: Reactions / Pull Request Review Comment / Create
    method: post
    path: /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions
    description: Create a reaction to a [pull request review
      comment](https://docs.github.com/rest/pulls/comments#get-a-review-comment-for-a-pull-request).
      A response with an HTTP `200` status means that you already added the
      reaction type to this pull request review comment.
    externalDocs: https://docs.github.com/rest/reactions/reactions#create-reaction-for-a-pull-request-review-comment
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: commentId
        description: The unique identifier of the comment.
        paramKey: comment_id
        in: path
        schema:
          type: number
        required: true
      - paramName: content
        description: The [reaction
          type](https://docs.github.com/rest/reactions/reactions#about-reactions)
          to add to the pull request review comment.
        paramKey: content
        in: body
        schema:
          type: string
          enum:
            - "+1"
            - "-1"
            - laugh
            - confused
            - heart
            - hooray
            - rocket
            - eyes
        required: true
    requestBodyType: json
  - moduleName: Reactions / Pull Request Comment / Delete
    method: delete
    path: /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions/{reaction_id}
    description: >-
      > [!NOTE]

      > You can also specify a repository by `repository_id` using the route
      `DELETE
      /repositories/:repository_id/pulls/comments/:comment_id/reactions/:reaction_id.`


      Delete a reaction to a [pull request review
      comment](https://docs.github.com/rest/pulls/comments#get-a-review-comment-for-a-pull-request).
    externalDocs: https://docs.github.com/rest/reactions/reactions#delete-a-pull-request-comment-reaction
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: commentId
        description: The unique identifier of the comment.
        paramKey: comment_id
        in: path
        schema:
          type: number
        required: true
      - paramName: reactionId
        description: The unique identifier of the reaction.
        paramKey: reaction_id
        in: path
        schema:
          type: number
        required: true
  - moduleName: Pulls / Get
    method: get
    path: /repos/{owner}/{repo}/pulls/{pull_number}
    description: >-
      Draft pull requests are available in public repositories with GitHub Free
      and GitHub Free for organizations, GitHub Pro, and legacy per-repository
      billing plans, and in public and private repositories with GitHub Team and
      GitHub Enterprise Cloud. For more information, see [GitHub's
      products](https://docs.github.com/github/getting-started-with-github/githubs-products)
      in the GitHub Help documentation.


      Lists details of a pull request by providing its number.


      When you get,
      [create](https://docs.github.com/rest/pulls/pulls/#create-a-pull-request),
      or [edit](https://docs.github.com/rest/pulls/pulls#update-a-pull-request)
      a pull request, GitHub creates a merge commit to test whether the pull
      request can be automatically merged into the base branch. This test commit
      is not added to the base branch or the head branch. You can review the
      status of the test commit using the `mergeable` key. For more information,
      see "[Checking mergeability of pull
      requests](https://docs.github.com/rest/guides/getting-started-with-the-git-database-api#checking-mergeability-of-pull-requests)".


      The value of the `mergeable` attribute can be `true`, `false`, or `null`.
      If the value is `null`, then GitHub has started a background job to
      compute the mergeability. After giving the job time to complete, resubmit
      the request. When the job finishes, you will see a non-`null` value for
      the `mergeable` attribute in the response. If `mergeable` is `true`, then
      `merge_commit_sha` will be the SHA of the _test_ merge commit.


      The value of the `merge_commit_sha` attribute changes depending on the
      state of the pull request. Before merging a pull request, the
      `merge_commit_sha` attribute holds the SHA of the _test_ merge commit.
      After merging a pull request, the `merge_commit_sha` attribute changes
      depending on how you merged the pull request:


      *   If merged as a [merge
      commit](https://docs.github.com/articles/about-merge-methods-on-github/),
      `merge_commit_sha` represents the SHA of the merge commit.

      *   If merged via a
      [squash](https://docs.github.com/articles/about-merge-methods-on-github/#squashing-your-merge-commits),
      `merge_commit_sha` represents the SHA of the squashed commit on the base
      branch.

      *   If
      [rebased](https://docs.github.com/articles/about-merge-methods-on-github/#rebasing-and-merging-your-commits),
      `merge_commit_sha` represents the commit that the base branch was updated
      to.


      Pass the appropriate [media
      type](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)
      to fetch diff and patch formats.


      This endpoint supports the following custom media types. For more
      information, see "[Media
      types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."


      - **`application/vnd.github.raw+json`**: Returns the raw markdown body.
      Response will include `body`. This is the default if you do not pass any
      specific media type.

      - **`application/vnd.github.text+json`**: Returns a text only
      representation of the markdown body. Response will include `body_text`.

      - **`application/vnd.github.html+json`**: Returns HTML rendered from the
      body's markdown. Response will include `body_html`.

      - **`application/vnd.github.full+json`**: Returns raw, text, and HTML
      representations. Response will include `body`, `body_text`, and
      `body_html`.

      - **`application/vnd.github.diff`**: For more information, see
      "[git-diff](https://git-scm.com/docs/git-diff)" in the Git documentation.
      If a diff is corrupt, contact us through the [GitHub Support
      portal](https://support.github.com/). Include the repository name and pull
      request ID in your message.
    externalDocs: https://docs.github.com/rest/pulls/pulls#get-a-pull-request
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: pullNumber
        description: The number that identifies the pull request.
        paramKey: pull_number
        in: path
        schema:
          type: number
        required: true
  - moduleName: Pulls / Update
    method: patch
    path: /repos/{owner}/{repo}/pulls/{pull_number}
    description: >-
      Draft pull requests are available in public repositories with GitHub Free
      and GitHub Free for organizations, GitHub Pro, and legacy per-repository
      billing plans, and in public and private repositories with GitHub Team and
      GitHub Enterprise Cloud. For more information, see [GitHub's
      products](https://docs.github.com/github/getting-started-with-github/githubs-products)
      in the GitHub Help documentation.


      To open or update a pull request in a public repository, you must have
      write access to the head or the source branch. For organization-owned
      repositories, you must be a member of the organization that owns the
      repository to open or update a pull request.


      This endpoint supports the following custom media types. For more
      information, see "[Media
      types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."


      - **`application/vnd.github.raw+json`**: Returns the raw markdown body.
      Response will include `body`. This is the default if you do not pass any
      specific media type.

      - **`application/vnd.github.text+json`**: Returns a text only
      representation of the markdown body. Response will include `body_text`.

      - **`application/vnd.github.html+json`**: Returns HTML rendered from the
      body's markdown. Response will include `body_html`.

      - **`application/vnd.github.full+json`**: Returns raw, text, and HTML
      representations. Response will include `body`, `body_text`, and
      `body_html`.
    externalDocs: https://docs.github.com/rest/pulls/pulls#update-a-pull-request
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: pullNumber
        description: The number that identifies the pull request.
        paramKey: pull_number
        in: path
        schema:
          type: number
        required: true
      - paramName: title
        description: The title of the pull request.
        paramKey: title
        in: body
        schema:
          type: string
        required: false
      - paramName: body
        description: The contents of the pull request.
        paramKey: body
        in: body
        schema:
          type: string
        required: false
      - paramName: state
        description: State of this Pull Request. Either `open` or `closed`.
        paramKey: state
        in: body
        schema:
          type: string
          enum:
            - open
            - closed
        required: false
      - paramName: base
        description: The name of the branch you want your changes pulled into. This
          should be an existing branch on the current repository. You cannot
          update the base branch on a pull request to point to another
          repository.
        paramKey: base
        in: body
        schema:
          type: string
        required: false
      - paramName: maintainerCanModify
        description: Indicates whether [maintainers can
          modify](https://docs.github.com/articles/allowing-changes-to-a-pull-request-branch-created-from-a-fork/)
          the pull request.
        paramKey: maintainer_can_modify
        in: body
        schema:
          type: boolean
        required: false
    requestBodyType: json
  - moduleName: Pulls / Review Comments / List
    method: get
    path: /repos/{owner}/{repo}/pulls/{pull_number}/comments
    description: >-
      Lists all review comments for a specified pull request. By default, review
      comments

      are in ascending order by ID.


      This endpoint supports the following custom media types. For more
      information, see "[Media
      types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."


      - **`application/vnd.github-commitcomment.raw+json`**: Returns the raw
      markdown body. Response will include `body`. This is the default if you do
      not pass any specific media type.

      - **`application/vnd.github-commitcomment.text+json`**: Returns a text
      only representation of the markdown body. Response will include
      `body_text`.

      - **`application/vnd.github-commitcomment.html+json`**: Returns HTML
      rendered from the body's markdown. Response will include `body_html`.

      - **`application/vnd.github-commitcomment.full+json`**: Returns raw, text,
      and HTML representations. Response will include `body`, `body_text`, and
      `body_html`.
    externalDocs: https://docs.github.com/rest/pulls/comments#list-review-comments-on-a-pull-request
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: pullNumber
        description: The number that identifies the pull request.
        paramKey: pull_number
        in: path
        schema:
          type: number
        required: true
      - paramName: sort
        description: The property to sort the results by.
        paramKey: sort
        in: query
        schema:
          type: string
          default: created
          enum:
            - created
            - updated
        required: false
      - paramName: direction
        description: The direction to sort results. Ignored without `sort` parameter.
        paramKey: direction
        in: query
        schema:
          type: string
          enum:
            - asc
            - desc
        required: false
      - paramName: since
        description: "Only show results that were last updated after the given time.
          This is a timestamp in [ISO
          8601](https://en.wikipedia.org/wiki/ISO_8601) format:
          `YYYY-MM-DDTHH:MM:SSZ`."
        paramKey: since
        in: query
        schema:
          type: string
        required: false
      - paramName: perPage
        description: The number of results per page (max 100). For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: per_page
        in: query
        schema:
          type: number
          default: 30
        required: false
      - paramName: page
        description: The page number of the results to fetch. For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: page
        in: query
        schema:
          type: number
          default: 1
        required: false
  - moduleName: Pulls / Review Comment / Create
    method: post
    path: /repos/{owner}/{repo}/pulls/{pull_number}/comments
    description: >-
      Creates a review comment on the diff of a specified pull request. To add a
      regular comment to a pull request timeline, see "[Create an issue
      comment](https://docs.github.com/rest/issues/comments#create-an-issue-comment)."


      If your comment applies to more than one line in the pull request diff,
      you should use the parameters `line`, `side`, and optionally `start_line`
      and `start_side` in your request.


      The `position` parameter is closing down. If you use `position`, the
      `line`, `side`, `start_line`, and `start_side` parameters are not
      required.


      This endpoint triggers
      [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications).
      Creating content too quickly using this endpoint may result in secondary
      rate limiting. For more information, see "[Rate limits for the
      API](https://docs.github.com/rest/using-the-rest-api/rate-limits-for-the-rest-api#about-secondary-rate-limits)"

      and "[Best practices for using the REST
      API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api)."


      This endpoint supports the following custom media types. For more
      information, see "[Media
      types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."


      - **`application/vnd.github-commitcomment.raw+json`**: Returns the raw
      markdown body. Response will include `body`. This is the default if you do
      not pass any specific media type.

      - **`application/vnd.github-commitcomment.text+json`**: Returns a text
      only representation of the markdown body. Response will include
      `body_text`.

      - **`application/vnd.github-commitcomment.html+json`**: Returns HTML
      rendered from the body's markdown. Response will include `body_html`.

      - **`application/vnd.github-commitcomment.full+json`**: Returns raw, text,
      and HTML representations. Response will include `body`, `body_text`, and
      `body_html`.
    externalDocs: https://docs.github.com/rest/pulls/comments#create-a-review-comment-for-a-pull-request
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: pullNumber
        description: The number that identifies the pull request.
        paramKey: pull_number
        in: path
        schema:
          type: number
        required: true
      - paramName: body
        description: The text of the review comment.
        paramKey: body
        in: body
        schema:
          type: string
        required: true
      - paramName: commitId
        description: The SHA of the commit needing a comment. Not using the latest
          commit SHA may render your comment outdated if a subsequent commit
          modifies the line you specify as the `position`.
        paramKey: commit_id
        in: body
        schema:
          type: string
        required: true
      - paramName: path
        description: The relative path to the file that necessitates a comment.
        paramKey: path
        in: body
        schema:
          type: string
        required: true
      - paramName: position
        description: '**This parameter is closing down. Use `line` instead**. The
          position in the diff where you want to add a review comment. Note this
          value is not the same as the line number in the file. The position
          value equals the number of lines down from the first "@@" hunk header
          in the file you want to add a comment. The line just below the "@@"
          line is position 1, the next line is position 2, and so on. The
          position in the diff continues to increase through lines of whitespace
          and additional hunks until the beginning of a new file.'
        paramKey: position
        in: body
        schema:
          type: number
        required: false
      - paramName: side
        description: In a split diff view, the side of the diff that the pull request's
          changes appear on. Can be `LEFT` or `RIGHT`. Use `LEFT` for deletions
          that appear in red. Use `RIGHT` for additions that appear in green or
          unchanged lines that appear in white and are shown for context. For a
          multi-line comment, side represents whether the last line of the
          comment range is a deletion or addition. For more information, see
          "[Diff view
          options](https://docs.github.com/articles/about-comparing-branches-in-pull-requests#diff-view-options)"
          in the GitHub Help documentation.
        paramKey: side
        in: body
        schema:
          type: string
          enum:
            - LEFT
            - RIGHT
        required: false
      - paramName: line
        description: "**Required unless using `subject_type:file`**. The line of the
          blob in the pull request diff that the comment applies to. For a
          multi-line comment, the last line of the range that your comment
          applies to."
        paramKey: line
        in: body
        schema:
          type: number
        required: false
      - paramName: startLine
        description: '**Required when using multi-line comments unless using
          `in_reply_to`**. The `start_line` is the first line in the pull
          request diff that your multi-line comment applies to. To learn more
          about multi-line comments, see "[Commenting on a pull
          request](https://docs.github.com/articles/commenting-on-a-pull-request#adding-line-comments-to-a-pull-request)"
          in the GitHub Help documentation.'
        paramKey: start_line
        in: body
        schema:
          type: number
        required: false
      - paramName: startSide
        description: '**Required when using multi-line comments unless using
          `in_reply_to`**. The `start_side` is the starting side of the diff
          that the comment applies to. Can be `LEFT` or `RIGHT`. To learn more
          about multi-line comments, see "[Commenting on a pull
          request](https://docs.github.com/articles/commenting-on-a-pull-request#adding-line-comments-to-a-pull-request)"
          in the GitHub Help documentation. See `side` in this table for
          additional context.'
        paramKey: start_side
        in: body
        schema:
          type: string
          enum:
            - LEFT
            - RIGHT
            - side
        required: false
      - paramName: inReplyTo
        description: The ID of the review comment to reply to. To find the ID of a
          review comment with ["List review comments on a pull
          request"](#list-review-comments-on-a-pull-request). When specified,
          all parameters other than `body` in the request body are ignored.
        paramKey: in_reply_to
        in: body
        schema:
          type: number
        required: false
      - paramName: subjectType
        description: The level at which the comment is targeted.
        paramKey: subject_type
        in: body
        schema:
          type: string
          enum:
            - line
            - file
        required: false
    requestBodyType: json
  - moduleName: Pulls / Review Comment / Create Reply
    method: post
    path: /repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/replies
    description: >-
      Creates a reply to a review comment for a pull request. For the
      `comment_id`, provide the ID of the review comment you are replying to.
      This must be the ID of a _top-level review comment_, not a reply to that
      comment. Replies to replies are not supported.


      This endpoint triggers
      [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications).
      Creating content too quickly using this endpoint may result in secondary
      rate limiting. For more information, see "[Rate limits for the
      API](https://docs.github.com/rest/using-the-rest-api/rate-limits-for-the-rest-api#about-secondary-rate-limits)"

      and "[Best practices for using the REST
      API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api)."


      This endpoint supports the following custom media types. For more
      information, see "[Media
      types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."


      - **`application/vnd.github-commitcomment.raw+json`**: Returns the raw
      markdown body. Response will include `body`. This is the default if you do
      not pass any specific media type.

      - **`application/vnd.github-commitcomment.text+json`**: Returns a text
      only representation of the markdown body. Response will include
      `body_text`.

      - **`application/vnd.github-commitcomment.html+json`**: Returns HTML
      rendered from the body's markdown. Response will include `body_html`.

      - **`application/vnd.github-commitcomment.full+json`**: Returns raw, text,
      and HTML representations. Response will include `body`, `body_text`, and
      `body_html`.
    externalDocs: https://docs.github.com/rest/pulls/comments#create-a-reply-for-a-review-comment
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: pullNumber
        description: The number that identifies the pull request.
        paramKey: pull_number
        in: path
        schema:
          type: number
        required: true
      - paramName: commentId
        description: The unique identifier of the comment.
        paramKey: comment_id
        in: path
        schema:
          type: number
        required: true
      - paramName: body
        description: The text of the review comment.
        paramKey: body
        in: body
        schema:
          type: string
        required: true
    requestBodyType: json
  - moduleName: Pulls / Commits / List
    method: get
    path: /repos/{owner}/{repo}/pulls/{pull_number}/commits
    description: >-
      Lists a maximum of 250 commits for a pull request. To receive a complete

      commit list for pull requests with more than 250 commits, use the [List
      commits](https://docs.github.com/rest/commits/commits#list-commits)

      endpoint.


      This endpoint supports the following custom media types. For more
      information, see "[Media
      types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."


      - **`application/vnd.github.raw+json`**: Returns the raw markdown body.
      Response will include `body`. This is the default if you do not pass any
      specific media type.

      - **`application/vnd.github.text+json`**: Returns a text only
      representation of the markdown body. Response will include `body_text`.

      - **`application/vnd.github.html+json`**: Returns HTML rendered from the
      body's markdown. Response will include `body_html`.

      - **`application/vnd.github.full+json`**: Returns raw, text, and HTML
      representations. Response will include `body`, `body_text`, and
      `body_html`.
    externalDocs: https://docs.github.com/rest/pulls/pulls#list-commits-on-a-pull-request
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: pullNumber
        description: The number that identifies the pull request.
        paramKey: pull_number
        in: path
        schema:
          type: number
        required: true
      - paramName: perPage
        description: The number of results per page (max 100). For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: per_page
        in: query
        schema:
          type: number
          default: 30
        required: false
      - paramName: page
        description: The page number of the results to fetch. For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: page
        in: query
        schema:
          type: number
          default: 1
        required: false
  - moduleName: Pulls / Files / List
    method: get
    path: /repos/{owner}/{repo}/pulls/{pull_number}/files
    description: >-
      Lists the files in a specified pull request.


      > [!NOTE]

      > Responses include a maximum of 3000 files. The paginated response
      returns 30 files per page by default.


      This endpoint supports the following custom media types. For more
      information, see "[Media
      types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."


      - **`application/vnd.github.raw+json`**: Returns the raw markdown body.
      Response will include `body`. This is the default if you do not pass any
      specific media type.

      - **`application/vnd.github.text+json`**: Returns a text only
      representation of the markdown body. Response will include `body_text`.

      - **`application/vnd.github.html+json`**: Returns HTML rendered from the
      body's markdown. Response will include `body_html`.

      - **`application/vnd.github.full+json`**: Returns raw, text, and HTML
      representations. Response will include `body`, `body_text`, and
      `body_html`.
    externalDocs: https://docs.github.com/rest/pulls/pulls#list-pull-requests-files
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: pullNumber
        description: The number that identifies the pull request.
        paramKey: pull_number
        in: path
        schema:
          type: number
        required: true
      - paramName: perPage
        description: The number of results per page (max 100). For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: per_page
        in: query
        schema:
          type: number
          default: 30
        required: false
      - paramName: page
        description: The page number of the results to fetch. For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: page
        in: query
        schema:
          type: number
          default: 1
        required: false
  - moduleName: Pulls / Merged / Check
    method: get
    path: /repos/{owner}/{repo}/pulls/{pull_number}/merge
    description: Checks if a pull request has been merged into the base branch. The
      HTTP status of the response indicates whether or not the pull request has
      been merged; the response body is empty.
    externalDocs: https://docs.github.com/rest/pulls/pulls#check-if-a-pull-request-has-been-merged
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: pullNumber
        description: The number that identifies the pull request.
        paramKey: pull_number
        in: path
        schema:
          type: number
        required: true
  - moduleName: Pulls / Merge
    method: put
    path: /repos/{owner}/{repo}/pulls/{pull_number}/merge
    description: >-
      Merges a pull request into the base branch.

      This endpoint triggers
      [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications).
      Creating content too quickly using this endpoint may result in secondary
      rate limiting. For more information, see "[Rate limits for the
      API](https://docs.github.com/rest/using-the-rest-api/rate-limits-for-the-rest-api#about-secondary-rate-limits)"
      and "[Best practices for using the REST
      API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api)."
    externalDocs: https://docs.github.com/rest/pulls/pulls#merge-a-pull-request
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: pullNumber
        description: The number that identifies the pull request.
        paramKey: pull_number
        in: path
        schema:
          type: number
        required: true
      - paramName: commitTitle
        description: Title for the automatic commit message.
        paramKey: commit_title
        in: body
        schema:
          type: string
        required: false
      - paramName: commitMessage
        description: Extra detail to append to automatic commit message.
        paramKey: commit_message
        in: body
        schema:
          type: string
        required: false
      - paramName: sha
        description: SHA that pull request head must match to allow merge.
        paramKey: sha
        in: body
        schema:
          type: string
        required: false
      - paramName: mergeMethod
        description: The merge method to use.
        paramKey: merge_method
        in: body
        schema:
          type: string
          enum:
            - merge
            - squash
            - rebase
        required: false
    requestBodyType: json
  - moduleName: Pulls / Requested Reviewers / List
    method: get
    path: /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers
    description: Gets the users or teams whose review is requested for a pull
      request. Once a requested reviewer submits a review, they are no longer
      considered a requested reviewer. Their review will instead be returned by
      the [List reviews for a pull
      request](https://docs.github.com/rest/pulls/reviews#list-reviews-for-a-pull-request)
      operation.
    externalDocs: https://docs.github.com/rest/pulls/review-requests#get-all-requested-reviewers-for-a-pull-request
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: pullNumber
        description: The number that identifies the pull request.
        paramKey: pull_number
        in: path
        schema:
          type: number
        required: true
  - moduleName: Pulls / Reviewers / Request
    method: post
    path: /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers
    description: >-
      Requests reviews for a pull request from a given set of users and/or
      teams.

      This endpoint triggers
      [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications).
      Creating content too quickly using this endpoint may result in secondary
      rate limiting. For more information, see "[Rate limits for the
      API](https://docs.github.com/rest/using-the-rest-api/rate-limits-for-the-rest-api#about-secondary-rate-limits)"
      and "[Best practices for using the REST
      API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api)."
    externalDocs: https://docs.github.com/rest/pulls/review-requests#request-reviewers-for-a-pull-request
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: pullNumber
        description: The number that identifies the pull request.
        paramKey: pull_number
        in: path
        schema:
          type: number
        required: true
      - paramName: reviewers
        description: An array of user `login`s that will be requested.
        paramKey: reviewers
        in: body
        schema:
          type: array
          items:
            type: any
        required: false
      - paramName: teamReviewers
        description: An array of team `slug`s that will be requested.
        paramKey: team_reviewers
        in: body
        schema:
          type: array
          items:
            type: any
        required: false
    requestBodyType: json
  - moduleName: Pulls / Reviewers / Remove
    method: delete
    path: /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers
    description: Removes review requests from a pull request for a given set of
      users and/or teams.
    externalDocs: https://docs.github.com/rest/pulls/review-requests#remove-requested-reviewers-from-a-pull-request
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: pullNumber
        description: The number that identifies the pull request.
        paramKey: pull_number
        in: path
        schema:
          type: number
        required: true
      - paramName: reviewers
        description: An array of user `login`s that will be removed.
        paramKey: reviewers
        in: body
        schema:
          type: array
          items:
            type: any
        required: true
      - paramName: teamReviewers
        description: An array of team `slug`s that will be removed.
        paramKey: team_reviewers
        in: body
        schema:
          type: array
          items:
            type: any
        required: false
    requestBodyType: json
  - moduleName: Pulls / Reviews / List
    method: get
    path: /repos/{owner}/{repo}/pulls/{pull_number}/reviews
    description: >-
      Lists all reviews for a specified pull request. The list of reviews
      returns in chronological order.


      This endpoint supports the following custom media types. For more
      information, see "[Media
      types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."


      - **`application/vnd.github-commitcomment.raw+json`**: Returns the raw
      markdown body. Response will include `body`. This is the default if you do
      not pass any specific media type.

      - **`application/vnd.github-commitcomment.text+json`**: Returns a text
      only representation of the markdown body. Response will include
      `body_text`.

      - **`application/vnd.github-commitcomment.html+json`**: Returns HTML
      rendered from the body's markdown. Response will include `body_html`.

      - **`application/vnd.github-commitcomment.full+json`**: Returns raw, text,
      and HTML representations. Response will include `body`, `body_text`, and
      `body_html`.
    externalDocs: https://docs.github.com/rest/pulls/reviews#list-reviews-for-a-pull-request
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: pullNumber
        description: The number that identifies the pull request.
        paramKey: pull_number
        in: path
        schema:
          type: number
        required: true
      - paramName: perPage
        description: The number of results per page (max 100). For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: per_page
        in: query
        schema:
          type: number
          default: 30
        required: false
      - paramName: page
        description: The page number of the results to fetch. For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: page
        in: query
        schema:
          type: number
          default: 1
        required: false
  - moduleName: Pulls / Review / Create
    method: post
    path: /repos/{owner}/{repo}/pulls/{pull_number}/reviews
    description: >-
      Creates a review on a specified pull request.


      This endpoint triggers
      [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications).
      Creating content too quickly using this endpoint may result in secondary
      rate limiting. For more information, see "[Rate limits for the
      API](https://docs.github.com/rest/using-the-rest-api/rate-limits-for-the-rest-api#about-secondary-rate-limits)"
      and "[Best practices for using the REST
      API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api)."


      Pull request reviews created in the `PENDING` state are not submitted and
      therefore do not include the `submitted_at` property in the response. To
      create a pending review for a pull request, leave the `event` parameter
      blank. For more information about submitting a `PENDING` review, see
      "[Submit a review for a pull
      request](https://docs.github.com/rest/pulls/reviews#submit-a-review-for-a-pull-request)."


      > [!NOTE]

      > To comment on a specific line in a file, you need to first determine the
      position of that line in the diff. To see a pull request diff, add the
      `application/vnd.github.v3.diff` media type to the `Accept` header of a
      call to the [Get a pull
      request](https://docs.github.com/rest/pulls/pulls#get-a-pull-request)
      endpoint.


      The `position` value equals the number of lines down from the first "@@"
      hunk header in the file you want to add a comment. The line just below the
      "@@" line is position 1, the next line is position 2, and so on. The
      position in the diff continues to increase through lines of whitespace and
      additional hunks until the beginning of a new file.


      This endpoint supports the following custom media types. For more
      information, see "[Media
      types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."


      - **`application/vnd.github-commitcomment.raw+json`**: Returns the raw
      markdown body. Response will include `body`. This is the default if you do
      not pass any specific media type.

      - **`application/vnd.github-commitcomment.text+json`**: Returns a text
      only representation of the markdown body. Response will include
      `body_text`.

      - **`application/vnd.github-commitcomment.html+json`**: Returns HTML
      rendered from the body's markdown. Response will include `body_html`.

      - **`application/vnd.github-commitcomment.full+json`**: Returns raw, text,
      and HTML representations. Response will include `body`, `body_text`, and
      `body_html`.
    externalDocs: https://docs.github.com/rest/pulls/reviews#create-a-review-for-a-pull-request
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: pullNumber
        description: The number that identifies the pull request.
        paramKey: pull_number
        in: path
        schema:
          type: number
        required: true
      - paramName: commitId
        description: The SHA of the commit that needs a review. Not using the latest
          commit SHA may render your review comment outdated if a subsequent
          commit modifies the line you specify as the `position`. Defaults to
          the most recent commit in the pull request when you do not specify a
          value.
        paramKey: commit_id
        in: body
        schema:
          type: string
        required: false
      - paramName: body
        description: "**Required** when using `REQUEST_CHANGES` or `COMMENT` for the
          `event` parameter. The body text of the pull request review."
        paramKey: body
        in: body
        schema:
          type: string
        required: false
      - paramName: event
        description: "The review action you want to perform. The review actions include:
          `APPROVE`, `REQUEST_CHANGES`, or `COMMENT`. By leaving this blank, you
          set the review action state to `PENDING`, which means you will need to
          [submit the pull request
          review](https://docs.github.com/rest/pulls/reviews#submit-a-review-fo\
          r-a-pull-request) when you are ready."
        paramKey: event
        in: body
        schema:
          type: string
          enum:
            - APPROVE
            - REQUEST_CHANGES
            - COMMENT
        required: false
      - paramName: comments
        description: Use the following table to specify the location, destination, and
          contents of the draft review comment.
        paramKey: comments
        in: body
        schema:
          type: array
          items:
            type: any
        required: false
    requestBodyType: json
  - moduleName: Pulls / Review / Get
    method: get
    path: /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}
    description: >-
      Retrieves a pull request review by its ID.


      This endpoint supports the following custom media types. For more
      information, see "[Media
      types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."


      - **`application/vnd.github-commitcomment.raw+json`**: Returns the raw
      markdown body. Response will include `body`. This is the default if you do
      not pass any specific media type.

      - **`application/vnd.github-commitcomment.text+json`**: Returns a text
      only representation of the markdown body. Response will include
      `body_text`.

      - **`application/vnd.github-commitcomment.html+json`**: Returns HTML
      rendered from the body's markdown. Response will include `body_html`.

      - **`application/vnd.github-commitcomment.full+json`**: Returns raw, text,
      and HTML representations. Response will include `body`, `body_text`, and
      `body_html`.
    externalDocs: https://docs.github.com/rest/pulls/reviews#get-a-review-for-a-pull-request
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: pullNumber
        description: The number that identifies the pull request.
        paramKey: pull_number
        in: path
        schema:
          type: number
        required: true
      - paramName: reviewId
        description: The unique identifier of the review.
        paramKey: review_id
        in: path
        schema:
          type: number
        required: true
  - moduleName: Pulls / Review / Update
    method: put
    path: /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}
    description: >-
      Updates the contents of a specified review summary comment.


      This endpoint supports the following custom media types. For more
      information, see "[Media
      types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."


      - **`application/vnd.github-commitcomment.raw+json`**: Returns the raw
      markdown body. Response will include `body`. This is the default if you do
      not pass any specific media type.

      - **`application/vnd.github-commitcomment.text+json`**: Returns a text
      only representation of the markdown body. Response will include
      `body_text`.

      - **`application/vnd.github-commitcomment.html+json`**: Returns HTML
      rendered from the body's markdown. Response will include `body_html`.

      - **`application/vnd.github-commitcomment.full+json`**: Returns raw, text,
      and HTML representations. Response will include `body`, `body_text`, and
      `body_html`.
    externalDocs: https://docs.github.com/rest/pulls/reviews#update-a-review-for-a-pull-request
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: pullNumber
        description: The number that identifies the pull request.
        paramKey: pull_number
        in: path
        schema:
          type: number
        required: true
      - paramName: reviewId
        description: The unique identifier of the review.
        paramKey: review_id
        in: path
        schema:
          type: number
        required: true
      - paramName: body
        description: The body text of the pull request review.
        paramKey: body
        in: body
        schema:
          type: string
        required: true
    requestBodyType: json
  - moduleName: Pulls / Review / Delete Pending
    method: delete
    path: /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}
    description: >-
      Deletes a pull request review that has not been submitted. Submitted
      reviews cannot be deleted.


      This endpoint supports the following custom media types. For more
      information, see "[Media
      types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."


      - **`application/vnd.github-commitcomment.raw+json`**: Returns the raw
      markdown body. Response will include `body`. This is the default if you do
      not pass any specific media type.

      - **`application/vnd.github-commitcomment.text+json`**: Returns a text
      only representation of the markdown body. Response will include
      `body_text`.

      - **`application/vnd.github-commitcomment.html+json`**: Returns HTML
      rendered from the body's markdown. Response will include `body_html`.

      - **`application/vnd.github-commitcomment.full+json`**: Returns raw, text,
      and HTML representations. Response will include `body`, `body_text`, and
      `body_html`.
    externalDocs: https://docs.github.com/rest/pulls/reviews#delete-a-pending-review-for-a-pull-request
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: pullNumber
        description: The number that identifies the pull request.
        paramKey: pull_number
        in: path
        schema:
          type: number
        required: true
      - paramName: reviewId
        description: The unique identifier of the review.
        paramKey: review_id
        in: path
        schema:
          type: number
        required: true
  - moduleName: Pulls / Review Comments / List
    method: get
    path: /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments
    description: >-
      Lists comments for a specific pull request review.


      This endpoint supports the following custom media types. For more
      information, see "[Media
      types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."


      - **`application/vnd.github-commitcomment.raw+json`**: Returns the raw
      markdown body. Response will include `body`. This is the default if you do
      not pass any specific media type.

      - **`application/vnd.github-commitcomment.text+json`**: Returns a text
      only representation of the markdown body. Response will include
      `body_text`.

      - **`application/vnd.github-commitcomment.html+json`**: Returns HTML
      rendered from the body's markdown. Response will include `body_html`.

      - **`application/vnd.github-commitcomment.full+json`**: Returns raw, text,
      and HTML representations. Response will include `body`, `body_text`, and
      `body_html`.
    externalDocs: https://docs.github.com/rest/pulls/reviews#list-comments-for-a-pull-request-review
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: pullNumber
        description: The number that identifies the pull request.
        paramKey: pull_number
        in: path
        schema:
          type: number
        required: true
      - paramName: reviewId
        description: The unique identifier of the review.
        paramKey: review_id
        in: path
        schema:
          type: number
        required: true
      - paramName: perPage
        description: The number of results per page (max 100). For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: per_page
        in: query
        schema:
          type: number
          default: 30
        required: false
      - paramName: page
        description: The page number of the results to fetch. For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: page
        in: query
        schema:
          type: number
          default: 1
        required: false
  - moduleName: Pulls / Review / Dismiss
    method: put
    path: /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/dismissals
    description: >-
      Dismisses a specified review on a pull request.


      > [!NOTE]

      > To dismiss a pull request review on a [protected
      branch](https://docs.github.com/rest/branches/branch-protection), you must
      be a repository administrator or be included in the list of people or
      teams who can dismiss pull request reviews.


      This endpoint supports the following custom media types. For more
      information, see "[Media
      types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."


      - **`application/vnd.github-commitcomment.raw+json`**: Returns the raw
      markdown body. Response will include `body`. This is the default if you do
      not pass any specific media type.

      - **`application/vnd.github-commitcomment.text+json`**: Returns a text
      only representation of the markdown body. Response will include
      `body_text`.

      - **`application/vnd.github-commitcomment.html+json`**: Returns HTML
      rendered from the body's markdown. Response will include `body_html`.

      - **`application/vnd.github-commitcomment.full+json`**: Returns raw, text,
      and HTML representations. Response will include `body`, `body_text`, and
      `body_html`.
    externalDocs: https://docs.github.com/rest/pulls/reviews#dismiss-a-review-for-a-pull-request
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: pullNumber
        description: The number that identifies the pull request.
        paramKey: pull_number
        in: path
        schema:
          type: number
        required: true
      - paramName: reviewId
        description: The unique identifier of the review.
        paramKey: review_id
        in: path
        schema:
          type: number
        required: true
      - paramName: message
        description: The message for the pull request review dismissal
        paramKey: message
        in: body
        schema:
          type: string
        required: true
      - paramName: event
        description: ""
        paramKey: event
        in: body
        schema:
          type: string
          enum:
            - DISMISS
        required: false
    requestBodyType: json
  - moduleName: Pulls / Review / Submit
    method: post
    path: /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/events
    description: >-
      Submits a pending review for a pull request. For more information about
      creating a pending review for a pull request, see "[Create a review for a
      pull
      request](https://docs.github.com/rest/pulls/reviews#create-a-review-for-a-pull-request)."


      This endpoint supports the following custom media types. For more
      information, see "[Media
      types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."


      - **`application/vnd.github-commitcomment.raw+json`**: Returns the raw
      markdown body. Response will include `body`. This is the default if you do
      not pass any specific media type.

      - **`application/vnd.github-commitcomment.text+json`**: Returns a text
      only representation of the markdown body. Response will include
      `body_text`.

      - **`application/vnd.github-commitcomment.html+json`**: Returns HTML
      rendered from the body's markdown. Response will include `body_html`.

      - **`application/vnd.github-commitcomment.full+json`**: Returns raw, text,
      and HTML representations. Response will include `body`, `body_text`, and
      `body_html`.
    externalDocs: https://docs.github.com/rest/pulls/reviews#submit-a-review-for-a-pull-request
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: pullNumber
        description: The number that identifies the pull request.
        paramKey: pull_number
        in: path
        schema:
          type: number
        required: true
      - paramName: reviewId
        description: The unique identifier of the review.
        paramKey: review_id
        in: path
        schema:
          type: number
        required: true
      - paramName: body
        description: The body text of the pull request review
        paramKey: body
        in: body
        schema:
          type: string
        required: false
      - paramName: event
        description: "The review action you want to perform. The review actions include:
          `APPROVE`, `REQUEST_CHANGES`, or `COMMENT`. When you leave this blank,
          the API returns _HTTP 422 (Unrecognizable entity)_ and sets the review
          action state to `PENDING`, which means you will need to re-submit the
          pull request review using a review action."
        paramKey: event
        in: body
        schema:
          type: string
          enum:
            - APPROVE
            - REQUEST_CHANGES
            - COMMENT
        required: true
    requestBodyType: json
  - moduleName: Pulls / Branch / Update
    method: put
    path: /repos/{owner}/{repo}/pulls/{pull_number}/update-branch
    description: >-
      Updates the pull request branch with the latest upstream changes by
      merging HEAD from the base branch into the pull request branch.

      Note: If making a request on behalf of a GitHub App you must also have
      permissions to write the contents of the head repository.
    externalDocs: https://docs.github.com/rest/pulls/pulls#update-a-pull-request-branch
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: pullNumber
        description: The number that identifies the pull request.
        paramKey: pull_number
        in: path
        schema:
          type: number
        required: true
      - paramName: expectedHeadSha
        description: "The expected SHA of the pull request's HEAD ref. This is the most
          recent commit on the pull request's branch. If the expected SHA does
          not match the pull request's HEAD, you will receive a `422
          Unprocessable Entity` status. You can use the \"[List
          commits](https://docs.github.com/rest/commits/commits#list-commits)\"
          endpoint to find the most recent commit SHA. Default: SHA of the pull
          request's current HEAD ref."
        paramKey: expected_head_sha
        in: body
        schema:
          type: string
        required: false
    requestBodyType: json
  - moduleName: Repos / Readme / Get
    method: get
    path: /repos/{owner}/{repo}/readme
    description: >-
      Gets the preferred README for a repository.


      This endpoint supports the following custom media types. For more
      information, see "[Media
      types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."


      - **`application/vnd.github.raw+json`**: Returns the raw file contents.
      This is the default if you do not specify a media type.

      - **`application/vnd.github.html+json`**: Returns the README in HTML.
      Markup languages are rendered to HTML using GitHub's open-source [Markup
      library](https://github.com/github/markup).
    externalDocs: https://docs.github.com/rest/repos/contents#get-a-repository-readme
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: ref
        description: "The name of the commit/branch/tag. Default: the repository’s
          default branch."
        paramKey: ref
        in: query
        schema:
          type: string
        required: false
  - moduleName: Repos / Readme In Directory / Get
    method: get
    path: /repos/{owner}/{repo}/readme/{dir}
    description: >-
      Gets the README from a repository directory.


      This endpoint supports the following custom media types. For more
      information, see "[Media
      types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."


      - **`application/vnd.github.raw+json`**: Returns the raw file contents.
      This is the default if you do not specify a media type.

      - **`application/vnd.github.html+json`**: Returns the README in HTML.
      Markup languages are rendered to HTML using GitHub's open-source [Markup
      library](https://github.com/github/markup).
    externalDocs: https://docs.github.com/rest/repos/contents#get-a-repository-readme-for-a-directory
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: dir
        description: The alternate path to look for a README file
        paramKey: dir
        in: path
        schema:
          type: string
        required: true
      - paramName: ref
        description: "The name of the commit/branch/tag. Default: the repository’s
          default branch."
        paramKey: ref
        in: query
        schema:
          type: string
        required: false
  - moduleName: Repos / Releases / List
    method: get
    path: /repos/{owner}/{repo}/releases
    description: >-
      This returns a list of releases, which does not include regular Git tags
      that have not been associated with a release. To get a list of Git tags,
      use the [Repository Tags
      API](https://docs.github.com/rest/repos/repos#list-repository-tags).


      Information about published releases are available to everyone. Only users
      with push access will receive listings for draft releases.
    externalDocs: https://docs.github.com/rest/releases/releases#list-releases
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: perPage
        description: The number of results per page (max 100). For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: per_page
        in: query
        schema:
          type: number
          default: 30
        required: false
      - paramName: page
        description: The page number of the results to fetch. For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: page
        in: query
        schema:
          type: number
          default: 1
        required: false
  - moduleName: Repos / Release / Create
    method: post
    path: /repos/{owner}/{repo}/releases
    description: >-
      Users with push access to the repository can create a release.


      This endpoint triggers
      [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications).
      Creating content too quickly using this endpoint may result in secondary
      rate limiting. For more information, see "[Rate limits for the
      API](https://docs.github.com/rest/using-the-rest-api/rate-limits-for-the-rest-api#about-secondary-rate-limits)"
      and "[Best practices for using the REST
      API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api)."
    externalDocs: https://docs.github.com/rest/releases/releases#create-a-release
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: tagName
        description: The name of the tag.
        paramKey: tag_name
        in: body
        schema:
          type: string
        required: true
      - paramName: targetCommitish
        description: "Specifies the commitish value that determines where the Git tag is
          created from. Can be any branch or commit SHA. Unused if the Git tag
          already exists. Default: the repository's default branch."
        paramKey: target_commitish
        in: body
        schema:
          type: string
        required: false
      - paramName: name
        description: The name of the release.
        paramKey: name
        in: body
        schema:
          type: string
        required: false
      - paramName: body
        description: Text describing the contents of the tag.
        paramKey: body
        in: body
        schema:
          type: string
        required: false
      - paramName: draft
        description: "`true` to create a draft (unpublished) release, `false` to create
          a published one."
        paramKey: draft
        in: body
        schema:
          type: boolean
          default: false
        required: false
      - paramName: prerelease
        description: "`true` to identify the release as a prerelease. `false` to
          identify the release as a full release."
        paramKey: prerelease
        in: body
        schema:
          type: boolean
          default: false
        required: false
      - paramName: discussionCategoryName
        description: If specified, a discussion of the specified category is created and
          linked to the release. The value must be a category that already
          exists in the repository. For more information, see "[Managing
          categories for discussions in your
          repository](https://docs.github.com/discussions/managing-discussions-for-your-community/managing-categories-for-discussions-in-your-repository)."
        paramKey: discussion_category_name
        in: body
        schema:
          type: string
        required: false
      - paramName: generateReleaseNotes
        description: Whether to automatically generate the name and body for this
          release. If `name` is specified, the specified name will be used;
          otherwise, a name will be automatically generated. If `body` is
          specified, the body will be pre-pended to the automatically generated
          notes.
        paramKey: generate_release_notes
        in: body
        schema:
          type: boolean
          default: false
        required: false
      - paramName: makeLatest
        description: Specifies whether this release should be set as the latest release
          for the repository. Drafts and prereleases cannot be set as latest.
          Defaults to `true` for newly published releases. `legacy` specifies
          that the latest release should be determined based on the release
          creation date and higher semantic version.
        paramKey: make_latest
        in: body
        schema:
          type: string
          default: "true"
          enum:
            - "true"
            - "false"
            - legacy
        required: false
    requestBodyType: json
  - moduleName: Repos / Release Asset / Get
    method: get
    path: /repos/{owner}/{repo}/releases/assets/{asset_id}
    description: >-
      To download the asset's binary content:


      - If within a browser, fetch the location specified in the
      `browser_download_url` key provided in the response.

      - Alternatively, set the `Accept` header of the request to
        [`application/octet-stream`](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).
        The API will either redirect the client to the location, or stream it directly if possible.
        API clients should handle both a `200` or `302` response.
    externalDocs: https://docs.github.com/rest/releases/assets#get-a-release-asset
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: assetId
        description: The unique identifier of the asset.
        paramKey: asset_id
        in: path
        schema:
          type: number
        required: true
  - moduleName: Repos / Release Asset / Update
    method: patch
    path: /repos/{owner}/{repo}/releases/assets/{asset_id}
    description: Users with push access to the repository can edit a release asset.
    externalDocs: https://docs.github.com/rest/releases/assets#update-a-release-asset
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: assetId
        description: The unique identifier of the asset.
        paramKey: asset_id
        in: path
        schema:
          type: number
        required: true
      - paramName: name
        description: The file name of the asset.
        paramKey: name
        in: body
        schema:
          type: string
        required: false
      - paramName: label
        description: An alternate short description of the asset. Used in place of the
          filename.
        paramKey: label
        in: body
        schema:
          type: string
        required: false
      - paramName: state
        description: ""
        paramKey: state
        in: body
        schema:
          type: string
        required: false
    requestBodyType: json
  - moduleName: Repos / Release Asset / Delete
    method: delete
    path: /repos/{owner}/{repo}/releases/assets/{asset_id}
    description: ""
    externalDocs: https://docs.github.com/rest/releases/assets#delete-a-release-asset
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: assetId
        description: The unique identifier of the asset.
        paramKey: asset_id
        in: path
        schema:
          type: number
        required: true
  - moduleName: Repos / Release Notes / Generate
    method: post
    path: /repos/{owner}/{repo}/releases/generate-notes
    description: Generate a name and body describing a
      [release](https://docs.github.com/rest/releases/releases#get-a-release).
      The body content will be markdown formatted and contain information like
      the changes since last release and users who contributed. The generated
      release notes are not saved anywhere. They are intended to be generated
      and used when creating a new release.
    externalDocs: https://docs.github.com/rest/releases/releases#generate-release-notes-content-for-a-release
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: tagName
        description: The tag name for the release. This can be an existing tag or a new one.
        paramKey: tag_name
        in: body
        schema:
          type: string
        required: true
      - paramName: targetCommitish
        description: Specifies the commitish value that will be the target for the
          release's tag. Required if the supplied tag_name does not reference an
          existing tag. Ignored if the tag_name already exists.
        paramKey: target_commitish
        in: body
        schema:
          type: string
        required: false
      - paramName: previousTagName
        description: The name of the previous tag to use as the starting point for the
          release notes. Use to manually specify the range for the set of
          changes considered as part this release.
        paramKey: previous_tag_name
        in: body
        schema:
          type: string
        required: false
      - paramName: configurationFilePath
        description: Specifies a path to a file in the repository containing
          configuration settings used for generating the release notes. If
          unspecified, the configuration file located in the repository at
          '.github/release.yml' or '.github/release.yaml' will be used. If that
          is not present, the default configuration will be used.
        paramKey: configuration_file_path
        in: body
        schema:
          type: string
        required: false
    requestBodyType: json
  - moduleName: Repos / Latest Release / Get
    method: get
    path: /repos/{owner}/{repo}/releases/latest
    description: >-
      View the latest published full release for the repository.


      The latest release is the most recent non-prerelease, non-draft release,
      sorted by the `created_at` attribute. The `created_at` attribute is the
      date of the commit used for the release, and not the date when the release
      was drafted or published.
    externalDocs: https://docs.github.com/rest/releases/releases#get-the-latest-release
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
  - moduleName: Repos / Release By Tag / Get
    method: get
    path: /repos/{owner}/{repo}/releases/tags/{tag}
    description: Get a published release with the specified tag.
    externalDocs: https://docs.github.com/rest/releases/releases#get-a-release-by-tag-name
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: tag
        description: tag parameter
        paramKey: tag
        in: path
        schema:
          type: string
        required: true
  - moduleName: Repos / Release / Get
    method: get
    path: /repos/{owner}/{repo}/releases/{release_id}
    description: >-
      Gets a public release with the specified release ID.


      > [!NOTE]

      > This returns an `upload_url` key corresponding to the endpoint for
      uploading release assets. This key is a hypermedia resource. For more
      information, see "[Getting started with the REST
      API](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#hypermedia)."
    externalDocs: https://docs.github.com/rest/releases/releases#get-a-release
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: releaseId
        description: The unique identifier of the release.
        paramKey: release_id
        in: path
        schema:
          type: number
        required: true
  - moduleName: Repos / Release / Update
    method: patch
    path: /repos/{owner}/{repo}/releases/{release_id}
    description: Users with push access to the repository can edit a release.
    externalDocs: https://docs.github.com/rest/releases/releases#update-a-release
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: releaseId
        description: The unique identifier of the release.
        paramKey: release_id
        in: path
        schema:
          type: number
        required: true
      - paramName: tagName
        description: The name of the tag.
        paramKey: tag_name
        in: body
        schema:
          type: string
        required: false
      - paramName: targetCommitish
        description: "Specifies the commitish value that determines where the Git tag is
          created from. Can be any branch or commit SHA. Unused if the Git tag
          already exists. Default: the repository's default branch."
        paramKey: target_commitish
        in: body
        schema:
          type: string
        required: false
      - paramName: name
        description: The name of the release.
        paramKey: name
        in: body
        schema:
          type: string
        required: false
      - paramName: body
        description: Text describing the contents of the tag.
        paramKey: body
        in: body
        schema:
          type: string
        required: false
      - paramName: draft
        description: "`true` makes the release a draft, and `false` publishes the release."
        paramKey: draft
        in: body
        schema:
          type: boolean
        required: false
      - paramName: prerelease
        description: "`true` to identify the release as a prerelease, `false` to
          identify the release as a full release."
        paramKey: prerelease
        in: body
        schema:
          type: boolean
        required: false
      - paramName: makeLatest
        description: Specifies whether this release should be set as the latest release
          for the repository. Drafts and prereleases cannot be set as latest.
          Defaults to `true` for newly published releases. `legacy` specifies
          that the latest release should be determined based on the release
          creation date and higher semantic version.
        paramKey: make_latest
        in: body
        schema:
          type: string
          default: true
          enum:
            - "true"
            - "false"
            - legacy
        required: false
      - paramName: discussionCategoryName
        description: If specified, a discussion of the specified category is created and
          linked to the release. The value must be a category that already
          exists in the repository. If there is already a discussion linked to
          the release, this parameter is ignored. For more information, see
          "[Managing categories for discussions in your
          repository](https://docs.github.com/discussions/managing-discussions-for-your-community/managing-categories-for-discussions-in-your-repository)."
        paramKey: discussion_category_name
        in: body
        schema:
          type: string
        required: false
    requestBodyType: json
  - moduleName: Repos / Release / Delete
    method: delete
    path: /repos/{owner}/{repo}/releases/{release_id}
    description: Users with push access to the repository can delete a release.
    externalDocs: https://docs.github.com/rest/releases/releases#delete-a-release
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: releaseId
        description: The unique identifier of the release.
        paramKey: release_id
        in: path
        schema:
          type: number
        required: true
  - moduleName: Repos / Release Assets / List
    method: get
    path: /repos/{owner}/{repo}/releases/{release_id}/assets
    description: ""
    externalDocs: https://docs.github.com/rest/releases/assets#list-release-assets
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: releaseId
        description: The unique identifier of the release.
        paramKey: release_id
        in: path
        schema:
          type: number
        required: true
      - paramName: perPage
        description: The number of results per page (max 100). For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: per_page
        in: query
        schema:
          type: number
          default: 30
        required: false
      - paramName: page
        description: The page number of the results to fetch. For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: page
        in: query
        schema:
          type: number
          default: 1
        required: false
  - moduleName: Reactions / Release / List
    method: get
    path: /repos/{owner}/{repo}/releases/{release_id}/reactions
    description: List the reactions to a
      [release](https://docs.github.com/rest/releases/releases#get-a-release).
    externalDocs: https://docs.github.com/rest/reactions/reactions#list-reactions-for-a-release
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: releaseId
        description: The unique identifier of the release.
        paramKey: release_id
        in: path
        schema:
          type: number
        required: true
      - paramName: content
        description: Returns a single [reaction
          type](https://docs.github.com/rest/reactions/reactions#about-reactions).
          Omit this parameter to list all reactions to a release.
        paramKey: content
        in: query
        schema:
          type: string
          enum:
            - "+1"
            - laugh
            - heart
            - hooray
            - rocket
            - eyes
        required: false
      - paramName: perPage
        description: The number of results per page (max 100). For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: per_page
        in: query
        schema:
          type: number
          default: 30
        required: false
      - paramName: page
        description: The page number of the results to fetch. For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: page
        in: query
        schema:
          type: number
          default: 1
        required: false
  - moduleName: Reactions / Release / Create
    method: post
    path: /repos/{owner}/{repo}/releases/{release_id}/reactions
    description: "Create a reaction to a
      [release](https://docs.github.com/rest/releases/releases#get-a-release). A
      response with a `Status: 200 OK` means that you already added the reaction
      type to this release."
    externalDocs: https://docs.github.com/rest/reactions/reactions#create-reaction-for-a-release
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: releaseId
        description: The unique identifier of the release.
        paramKey: release_id
        in: path
        schema:
          type: number
        required: true
      - paramName: content
        description: The [reaction
          type](https://docs.github.com/rest/reactions/reactions#about-reactions)
          to add to the release.
        paramKey: content
        in: body
        schema:
          type: string
          enum:
            - "+1"
            - laugh
            - heart
            - hooray
            - rocket
            - eyes
        required: true
    requestBodyType: json
  - moduleName: Reactions / Release / Delete
    method: delete
    path: /repos/{owner}/{repo}/releases/{release_id}/reactions/{reaction_id}
    description: >-
      > [!NOTE]

      > You can also specify a repository by `repository_id` using the route
      `DELETE delete
      /repositories/:repository_id/releases/:release_id/reactions/:reaction_id`.


      Delete a reaction to a
      [release](https://docs.github.com/rest/releases/releases#get-a-release).
    externalDocs: https://docs.github.com/rest/reactions/reactions#delete-a-release-reaction
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: releaseId
        description: The unique identifier of the release.
        paramKey: release_id
        in: path
        schema:
          type: number
        required: true
      - paramName: reactionId
        description: The unique identifier of the reaction.
        paramKey: reaction_id
        in: path
        schema:
          type: number
        required: true
  - moduleName: Repos / Branch Rules / Get
    method: get
    path: /repos/{owner}/{repo}/rules/branches/{branch}
    description: >-
      Returns all active rules that apply to the specified branch. The branch
      does not need to exist; rules that would apply

      to a branch with that name will be returned. All active rules that apply
      will be returned, regardless of the level

      at which they are configured (e.g. repository or organization). Rules in
      rulesets with "evaluate" or "disabled"

      enforcement statuses are not returned.
    externalDocs: https://docs.github.com/rest/repos/rules#get-rules-for-a-branch
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: branch
        description: The name of the branch. Cannot contain wildcard characters. To use
          wildcard characters in branch names, use [the GraphQL
          API](https://docs.github.com/graphql).
        paramKey: branch
        in: path
        schema:
          type: string
        required: true
      - paramName: perPage
        description: The number of results per page (max 100). For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: per_page
        in: query
        schema:
          type: number
          default: 30
        required: false
      - paramName: page
        description: The page number of the results to fetch. For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: page
        in: query
        schema:
          type: number
          default: 1
        required: false
  - moduleName: Repos / Repo Rulesets / Get
    method: get
    path: /repos/{owner}/{repo}/rulesets
    description: Get all the rulesets for a repository.
    externalDocs: https://docs.github.com/rest/repos/rules#get-all-repository-rulesets
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: perPage
        description: The number of results per page (max 100). For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: per_page
        in: query
        schema:
          type: number
          default: 30
        required: false
      - paramName: page
        description: The page number of the results to fetch. For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: page
        in: query
        schema:
          type: number
          default: 1
        required: false
      - paramName: includesParents
        description: Include rulesets configured at higher levels that apply to this
          repository
        paramKey: includes_parents
        in: query
        schema:
          type: boolean
          default: true
        required: false
      - paramName: targets
        description: >
          A comma-separated list of rule targets to filter by.

          If provided, only rulesets that apply to the specified targets will be
          returned.

          For example, `branch,tag,push`.
        paramKey: targets
        in: query
        schema:
          type: string
        required: false
  - moduleName: Repos / Repo Ruleset / Create
    method: post
    path: /repos/{owner}/{repo}/rulesets
    description: Create a ruleset for a repository.
    externalDocs: https://docs.github.com/rest/repos/rules#create-a-repository-ruleset
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: name
        description: The name of the ruleset.
        paramKey: name
        in: body
        schema:
          type: string
        required: true
      - paramName: target
        description: The target of the ruleset
        paramKey: target
        in: body
        schema:
          type: string
          default: branch
          enum:
            - branch
            - tag
            - push
        required: false
      - paramName: enforcement
        description: The enforcement level of the ruleset. `evaluate` allows admins to
          test rules before enforcing them. Admins can view insights on the Rule
          Insights page (`evaluate` is only available with GitHub Enterprise).
        paramKey: enforcement
        in: body
        schema:
          type: string
          enum:
            - disabled
            - active
            - evaluate
        required: true
      - paramName: bypassActors
        description: The actors that can bypass the rules in this ruleset
        paramKey: bypass_actors
        in: body
        schema:
          type: array
          items:
            type: any
        required: false
      - paramName: conditions
        description: Parameters for a repository ruleset ref name condition
        paramKey: conditions
        in: body
        schema:
          type: any
        required: false
      - paramName: rules
        description: An array of rules within the ruleset.
        paramKey: rules
        in: body
        schema:
          type: array
          items:
            type: any
        required: false
    requestBodyType: json
  - moduleName: Repos / Repo Rule Suites / Get
    method: get
    path: /repos/{owner}/{repo}/rulesets/rule-suites
    description: >-
      Lists suites of rule evaluations at the repository level.

      For more information, see "[Managing rulesets for a
      repository](https://docs.github.com/repositories/configuring-branches-and-merges-in-your-repository/managing-rulesets/managing-rulesets-for-a-repository#viewing-insights-for-rulesets)."
    externalDocs: https://docs.github.com/rest/repos/rule-suites#list-repository-rule-suites
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: ref
        description: The name of the ref. Cannot contain wildcard characters. Optionally
          prefix with `refs/heads/` to limit to branches or `refs/tags/` to
          limit to tags. Omit the prefix to search across all refs. When
          specified, only rule evaluations triggered for this ref will be
          returned.
        paramKey: ref
        in: query
        schema:
          type: string
        required: false
      - paramName: timePeriod
        description: >-
          The time period to filter by.


          For example, `day` will filter for rule suites that occurred in the
          past 24 hours, and `week` will filter for insights that occurred in
          the past 7 days (168 hours).
        paramKey: time_period
        in: query
        schema:
          type: string
          default: day
          enum:
            - hour
            - day
            - week
            - month
        required: false
      - paramName: actorName
        description: The handle for the GitHub user account to filter on. When
          specified, only rule evaluations triggered by this actor will be
          returned.
        paramKey: actor_name
        in: query
        schema:
          type: string
        required: false
      - paramName: ruleSuiteResult
        description: The rule results to filter on. When specified, only suites with
          this result will be returned.
        paramKey: rule_suite_result
        in: query
        schema:
          type: string
          default: all
          enum:
            - pass
            - fail
            - bypass
            - all
        required: false
      - paramName: perPage
        description: The number of results per page (max 100). For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: per_page
        in: query
        schema:
          type: number
          default: 30
        required: false
      - paramName: page
        description: The page number of the results to fetch. For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: page
        in: query
        schema:
          type: number
          default: 1
        required: false
  - moduleName: Repos / Repo Rule Suite / Get
    method: get
    path: /repos/{owner}/{repo}/rulesets/rule-suites/{rule_suite_id}
    description: >-
      Gets information about a suite of rule evaluations from within a
      repository.

      For more information, see "[Managing rulesets for a
      repository](https://docs.github.com/repositories/configuring-branches-and-merges-in-your-repository/managing-rulesets/managing-rulesets-for-a-repository#viewing-insights-for-rulesets)."
    externalDocs: https://docs.github.com/rest/repos/rule-suites#get-a-repository-rule-suite
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: ruleSuiteId
        description: >-
          The unique identifier of the rule suite result.

          To get this ID, you can use [GET
          /repos/{owner}/{repo}/rulesets/rule-suites](https://docs.github.com/rest/repos/rule-suites#list-repository-rule-suites)

          for repositories and [GET
          /orgs/{org}/rulesets/rule-suites](https://docs.github.com/rest/orgs/rule-suites#list-organization-rule-suites)

          for organizations.
        paramKey: rule_suite_id
        in: path
        schema:
          type: number
        required: true
  - moduleName: Repos / Repo Ruleset / Get
    method: get
    path: /repos/{owner}/{repo}/rulesets/{ruleset_id}
    description: >-
      Get a ruleset for a repository.


      **Note:** To prevent leaking sensitive information, the `bypass_actors`
      property is only returned if the user

      making the API request has write access to the ruleset.
    externalDocs: https://docs.github.com/rest/repos/rules#get-a-repository-ruleset
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: rulesetId
        description: The ID of the ruleset.
        paramKey: ruleset_id
        in: path
        schema:
          type: number
        required: true
      - paramName: includesParents
        description: Include rulesets configured at higher levels that apply to this
          repository
        paramKey: includes_parents
        in: query
        schema:
          type: boolean
          default: true
        required: false
  - moduleName: Repos / Repo Ruleset / Update
    method: put
    path: /repos/{owner}/{repo}/rulesets/{ruleset_id}
    description: Update a ruleset for a repository.
    externalDocs: https://docs.github.com/rest/repos/rules#update-a-repository-ruleset
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: rulesetId
        description: The ID of the ruleset.
        paramKey: ruleset_id
        in: path
        schema:
          type: number
        required: true
      - paramName: name
        description: The name of the ruleset.
        paramKey: name
        in: body
        schema:
          type: string
        required: false
      - paramName: target
        description: The target of the ruleset
        paramKey: target
        in: body
        schema:
          type: string
          enum:
            - branch
            - tag
            - push
        required: false
      - paramName: enforcement
        description: The enforcement level of the ruleset. `evaluate` allows admins to
          test rules before enforcing them. Admins can view insights on the Rule
          Insights page (`evaluate` is only available with GitHub Enterprise).
        paramKey: enforcement
        in: body
        schema:
          type: string
          enum:
            - disabled
            - active
            - evaluate
        required: false
      - paramName: bypassActors
        description: The actors that can bypass the rules in this ruleset
        paramKey: bypass_actors
        in: body
        schema:
          type: array
          items:
            type: any
        required: false
      - paramName: conditions
        description: Parameters for a repository ruleset ref name condition
        paramKey: conditions
        in: body
        schema:
          type: any
        required: false
      - paramName: rules
        description: An array of rules within the ruleset.
        paramKey: rules
        in: body
        schema:
          type: array
          items:
            type: any
        required: false
    requestBodyType: json
  - moduleName: Repos / Repo Ruleset / Delete
    method: delete
    path: /repos/{owner}/{repo}/rulesets/{ruleset_id}
    description: Delete a ruleset for a repository.
    externalDocs: https://docs.github.com/rest/repos/rules#delete-a-repository-ruleset
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: rulesetId
        description: The ID of the ruleset.
        paramKey: ruleset_id
        in: path
        schema:
          type: number
        required: true
  - moduleName: Activity / Stargazers / List
    method: get
    path: /repos/{owner}/{repo}/stargazers
    description: >-
      Lists the people that have starred the repository.


      This endpoint supports the following custom media types. For more
      information, see "[Media
      types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."


      - **`application/vnd.github.star+json`**: Includes a timestamp of when the
      star was created.
    externalDocs: https://docs.github.com/rest/activity/starring#list-stargazers
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: perPage
        description: The number of results per page (max 100). For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: per_page
        in: query
        schema:
          type: number
          default: 30
        required: false
      - paramName: page
        description: The page number of the results to fetch. For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: page
        in: query
        schema:
          type: number
          default: 1
        required: false
  - moduleName: Repos / Code Frequency Stats / Get
    method: get
    path: /repos/{owner}/{repo}/stats/code_frequency
    description: >-
      Returns a weekly aggregate of the number of additions and deletions pushed
      to a repository.


      > [!NOTE]

      > This endpoint can only be used for repositories with fewer than 10,000
      commits. If the repository contains 10,000 or more commits, a 422 status
      code will be returned.
    externalDocs: https://docs.github.com/rest/metrics/statistics#get-the-weekly-commit-activity
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
  - moduleName: Repos / Commit Activity Stats / Get
    method: get
    path: /repos/{owner}/{repo}/stats/commit_activity
    description: Returns the last year of commit activity grouped by week. The
      `days` array is a group of commits per day, starting on `Sunday`.
    externalDocs: https://docs.github.com/rest/metrics/statistics#get-the-last-year-of-commit-activity
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
  - moduleName: Repos / Contributors Stats / Get
    method: get
    path: /repos/{owner}/{repo}/stats/contributors
    description: >-

      Returns the `total` number of commits authored by the contributor. In
      addition, the response includes a Weekly Hash (`weeks` array) with the
      following information:


      *   `w` - Start of the week, given as a [Unix
      timestamp](https://en.wikipedia.org/wiki/Unix_time).

      *   `a` - Number of additions

      *   `d` - Number of deletions

      *   `c` - Number of commits


      > [!NOTE]

      > This endpoint will return `0` values for all addition and deletion
      counts in repositories with 10,000 or more commits.
    externalDocs: https://docs.github.com/rest/metrics/statistics#get-all-contributor-commit-activity
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
  - moduleName: Repos / Participation Stats / Get
    method: get
    path: /repos/{owner}/{repo}/stats/participation
    description: >-
      Returns the total commit counts for the `owner` and total commit counts in
      `all`. `all` is everyone combined, including the `owner` in the last 52
      weeks. If you'd like to get the commit counts for non-owners, you can
      subtract `owner` from `all`.


      The array order is oldest week (index 0) to most recent week.


      The most recent week is seven days ago at UTC midnight to today at UTC
      midnight.
    externalDocs: https://docs.github.com/rest/metrics/statistics#get-the-weekly-commit-count
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
  - moduleName: Repos / Punch Card Stats / Get
    method: get
    path: /repos/{owner}/{repo}/stats/punch_card
    description: >-
      Each array contains the day number, hour number, and number of commits:


      *   `0-6`: Sunday - Saturday

      *   `0-23`: Hour of day

      *   Number of commits


      For example, `[2, 14, 25]` indicates that there were 25 total commits,
      during the 2:00pm hour on Tuesdays. All times are based on the time zone
      of individual commits.
    externalDocs: https://docs.github.com/rest/metrics/statistics#get-the-hourly-commit-count-for-each-day
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
  - moduleName: Repos / Commit Status / Create
    method: post
    path: /repos/{owner}/{repo}/statuses/{sha}
    description: >-
      Users with push access in a repository can create commit statuses for a
      given SHA.


      Note: there is a limit of 1000 statuses per `sha` and `context` within a
      repository. Attempts to create more than 1000 statuses will result in a
      validation error.
    externalDocs: https://docs.github.com/rest/commits/statuses#create-a-commit-status
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: sha
        description: ""
        paramKey: sha
        in: path
        schema:
          type: string
        required: true
      - paramName: state
        description: The state of the status.
        paramKey: state
        in: body
        schema:
          type: string
          enum:
            - error
            - failure
            - pending
            - success
        required: true
      - paramName: targetUrl
        description: >-
          The target URL to associate with this status. This URL will be linked
          from the GitHub UI to allow users to easily see the source of the
          status.

          For example, if your continuous integration system is posting build
          status, you would want to provide the deep link for the build output
          for this specific SHA:

          `http://ci.example.com/user/repo/build/sha`
        paramKey: target_url
        in: body
        schema:
          type: string
        required: false
      - paramName: description
        description: A short description of the status.
        paramKey: description
        in: body
        schema:
          type: string
        required: false
      - paramName: context
        description: A string label to differentiate this status from the status of
          other systems. This field is case-insensitive.
        paramKey: context
        in: body
        schema:
          type: string
          default: default
        required: false
    requestBodyType: json
  - moduleName: Activity / Watchers / List
    method: get
    path: /repos/{owner}/{repo}/subscribers
    description: Lists the people watching the specified repository.
    externalDocs: https://docs.github.com/rest/activity/watching#list-watchers
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: perPage
        description: The number of results per page (max 100). For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: per_page
        in: query
        schema:
          type: number
          default: 30
        required: false
      - paramName: page
        description: The page number of the results to fetch. For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: page
        in: query
        schema:
          type: number
          default: 1
        required: false
  - moduleName: Activity / Subscription / Get
    method: get
    path: /repos/{owner}/{repo}/subscription
    description: Gets information about whether the authenticated user is subscribed
      to the repository.
    externalDocs: https://docs.github.com/rest/activity/watching#get-a-repository-subscription
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
  - moduleName: Activity / Subscription / Set
    method: put
    path: /repos/{owner}/{repo}/subscription
    description: If you would like to watch a repository, set `subscribed` to
      `true`. If you would like to ignore notifications made within a
      repository, set `ignored` to `true`. If you would like to stop watching a
      repository, [delete the repository's
      subscription](https://docs.github.com/rest/activity/watching#delete-a-repository-subscription)
      completely.
    externalDocs: https://docs.github.com/rest/activity/watching#set-a-repository-subscription
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: subscribed
        description: Determines if notifications should be received from this repository.
        paramKey: subscribed
        in: body
        schema:
          type: boolean
        required: false
      - paramName: ignored
        description: Determines if all notifications should be blocked from this repository.
        paramKey: ignored
        in: body
        schema:
          type: boolean
        required: false
    requestBodyType: json
  - moduleName: Activity / Subscription / Delete
    method: delete
    path: /repos/{owner}/{repo}/subscription
    description: This endpoint should only be used to stop watching a repository. To
      control whether or not you wish to receive notifications from a
      repository, [set the repository's subscription
      manually](https://docs.github.com/rest/activity/watching#set-a-repository-subscription).
    externalDocs: https://docs.github.com/rest/activity/watching#delete-a-repository-subscription
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
  - moduleName: Repos / Tags / List
    method: get
    path: /repos/{owner}/{repo}/tags
    description: ""
    externalDocs: https://docs.github.com/rest/repos/repos#list-repository-tags
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: perPage
        description: The number of results per page (max 100). For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: per_page
        in: query
        schema:
          type: number
          default: 30
        required: false
      - paramName: page
        description: The page number of the results to fetch. For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: page
        in: query
        schema:
          type: number
          default: 1
        required: false
  - moduleName: Repos / Tag Protection / List
    method: get
    path: /repos/{owner}/{repo}/tags/protection
    description: >-
      > [!WARNING]

      > **Closing down notice:** This operation is closing down and will be
      removed after August 30, 2024. Use the "[Repository
      Rulesets](https://docs.github.com/rest/repos/rules#get-all-repository-rulesets)"
      endpoint instead.


      This returns the tag protection states of a repository.


      This information is only available to repository administrators.
    externalDocs: https://docs.github.com/rest/repos/tags#closing-down---list-tag-protection-states-for-a-repository
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
  - moduleName: Repos / Tag Protection / Create
    method: post
    path: /repos/{owner}/{repo}/tags/protection
    description: >-
      > [!WARNING]

      > **Closing down notice:** This operation is closing down and will be
      removed after August 30, 2024. Use the "[Repository
      Rulesets](https://docs.github.com/rest/repos/rules#create-a-repository-ruleset)"
      endpoint instead.


      This creates a tag protection state for a repository.

      This endpoint is only available to repository administrators.
    externalDocs: https://docs.github.com/rest/repos/tags#closing-down---create-a-tag-protection-state-for-a-repository
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: pattern
        description: An optional glob pattern to match against when enforcing tag
          protection.
        paramKey: pattern
        in: body
        schema:
          type: string
        required: true
    requestBodyType: json
  - moduleName: Repos / Tag Protection / Delete
    method: delete
    path: /repos/{owner}/{repo}/tags/protection/{tag_protection_id}
    description: >-
      > [!WARNING]

      > **Closing down notice:** This operation is closing down and will be
      removed after August 30, 2024. Use the "[Repository
      Rulesets](https://docs.github.com/rest/repos/rules#delete-a-repository-ruleset)"
      endpoint instead.


      This deletes a tag protection state for a repository.

      This endpoint is only available to repository administrators.
    externalDocs: https://docs.github.com/rest/repos/tags#closing-down---delete-a-tag-protection-state-for-a-repository
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: tagProtectionId
        description: The unique identifier of the tag protection.
        paramKey: tag_protection_id
        in: path
        schema:
          type: number
        required: true
  - moduleName: Repos / Tarball / Download
    method: get
    path: /repos/{owner}/{repo}/tarball/{ref}
    description: >-
      Gets a redirect URL to download a tar archive for a repository. If you
      omit `:ref`, the repository’s default branch (usually

      `main`) will be used. Please make sure your HTTP framework is configured
      to follow redirects or you will need to use

      the `Location` header to make a second `GET` request.


      > [!NOTE]

      > For private repositories, these links are temporary and expire after
      five minutes.
    externalDocs: https://docs.github.com/rest/repos/contents#download-a-repository-archive-tar
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: ref
        description: ""
        paramKey: ref
        in: path
        schema:
          type: string
        required: true
  - moduleName: Repos / Teams / List
    method: get
    path: /repos/{owner}/{repo}/teams
    description: >-
      Lists the teams that have access to the specified repository and that are
      also visible to the authenticated user.


      For a public repository, a team is listed only if that team added the
      public repository explicitly.


      OAuth app tokens and personal access tokens (classic) need the
      `public_repo` or `repo` scope to use this endpoint with a public
      repository, and `repo` scope to use this endpoint with a private
      repository.
    externalDocs: https://docs.github.com/rest/repos/repos#list-repository-teams
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: perPage
        description: The number of results per page (max 100). For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: per_page
        in: query
        schema:
          type: number
          default: 30
        required: false
      - paramName: page
        description: The page number of the results to fetch. For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: page
        in: query
        schema:
          type: number
          default: 1
        required: false
  - moduleName: Repos / Topics / Get All
    method: get
    path: /repos/{owner}/{repo}/topics
    description: ""
    externalDocs: https://docs.github.com/rest/repos/repos#get-all-repository-topics
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: page
        description: The page number of the results to fetch. For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: page
        in: query
        schema:
          type: number
          default: 1
        required: false
      - paramName: perPage
        description: The number of results per page (max 100). For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: per_page
        in: query
        schema:
          type: number
          default: 30
        required: false
  - moduleName: Repos / Topics / Replace All
    method: put
    path: /repos/{owner}/{repo}/topics
    description: ""
    externalDocs: https://docs.github.com/rest/repos/repos#replace-all-repository-topics
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: names
        description: An array of topics to add to the repository. Pass one or more
          topics to _replace_ the set of existing topics. Send an empty array
          (`[]`) to clear all topics from the repository. **Note:** Topic
          `names` cannot contain uppercase letters.
        paramKey: names
        in: body
        schema:
          type: array
          items:
            type: any
        required: true
    requestBodyType: json
  - moduleName: Repos / Traffic / Clones
    method: get
    path: /repos/{owner}/{repo}/traffic/clones
    description: Get the total number of clones and breakdown per day or week for
      the last 14 days. Timestamps are aligned to UTC midnight of the beginning
      of the day or week. Week begins on Monday.
    externalDocs: https://docs.github.com/rest/metrics/traffic#get-repository-clones
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: per
        description: The time frame to display results for.
        paramKey: per
        in: query
        schema:
          type: string
          default: day
          enum:
            - day
            - week
        required: false
  - moduleName: Repos / Traffic / Top Paths
    method: get
    path: /repos/{owner}/{repo}/traffic/popular/paths
    description: Get the top 10 popular contents over the last 14 days.
    externalDocs: https://docs.github.com/rest/metrics/traffic#get-top-referral-paths
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
  - moduleName: Repos / Traffic / Top Referrers
    method: get
    path: /repos/{owner}/{repo}/traffic/popular/referrers
    description: Get the top 10 referrers over the last 14 days.
    externalDocs: https://docs.github.com/rest/metrics/traffic#get-top-referral-sources
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
  - moduleName: Repos / Traffic / Views
    method: get
    path: /repos/{owner}/{repo}/traffic/views
    description: Get the total number of views and breakdown per day or week for the
      last 14 days. Timestamps are aligned to UTC midnight of the beginning of
      the day or week. Week begins on Monday.
    externalDocs: https://docs.github.com/rest/metrics/traffic#get-page-views
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: per
        description: The time frame to display results for.
        paramKey: per
        in: query
        schema:
          type: string
          default: day
          enum:
            - day
            - week
        required: false
  - moduleName: Repos / Transfer
    method: post
    path: /repos/{owner}/{repo}/transfer
    description: A transfer request will need to be accepted by the new owner when
      transferring a personal repository to another user. The response will
      contain the original `owner`, and the transfer will continue
      asynchronously. For more details on the requirements to transfer personal
      and organization-owned repositories, see [about repository
      transfers](https://docs.github.com/articles/about-repository-transfers/).
    externalDocs: https://docs.github.com/rest/repos/repos#transfer-a-repository
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: newOwner
        description: The username or organization name the repository will be
          transferred to.
        paramKey: new_owner
        in: body
        schema:
          type: string
        required: true
      - paramName: newName
        description: The new name to be given to the repository.
        paramKey: new_name
        in: body
        schema:
          type: string
        required: false
      - paramName: teamIds
        description: ID of the team or teams to add to the repository. Teams can only be
          added to organization-owned repositories.
        paramKey: team_ids
        in: body
        schema:
          type: array
          items:
            type: any
        required: false
    requestBodyType: json
  - moduleName: Repos / Vulnerability Alerts / Check
    method: get
    path: /repos/{owner}/{repo}/vulnerability-alerts
    description: Shows whether dependency alerts are enabled or disabled for a
      repository. The authenticated user must have admin read access to the
      repository. For more information, see "[About security alerts for
      vulnerable
      dependencies](https://docs.github.com/articles/about-security-alerts-for-vulnerable-dependencies)".
    externalDocs: https://docs.github.com/rest/repos/repos#check-if-vulnerability-alerts-are-enabled-for-a-repository
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
  - moduleName: Repos / Vulnerability Alerts / Enable
    method: put
    path: /repos/{owner}/{repo}/vulnerability-alerts
    description: Enables dependency alerts and the dependency graph for a
      repository. The authenticated user must have admin access to the
      repository. For more information, see "[About security alerts for
      vulnerable
      dependencies](https://docs.github.com/articles/about-security-alerts-for-vulnerable-dependencies)".
    externalDocs: https://docs.github.com/rest/repos/repos#enable-vulnerability-alerts
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
  - moduleName: Repos / Vulnerability Alerts / Disable
    method: delete
    path: /repos/{owner}/{repo}/vulnerability-alerts
    description: >-
      Disables dependency alerts and the dependency graph for a repository.

      The authenticated user must have admin access to the repository. For more
      information,

      see "[About security alerts for vulnerable
      dependencies](https://docs.github.com/articles/about-security-alerts-for-vulnerable-dependencies)".
    externalDocs: https://docs.github.com/rest/repos/repos#disable-vulnerability-alerts
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
  - moduleName: Repos / Zipball / Download
    method: get
    path: /repos/{owner}/{repo}/zipball/{ref}
    description: >-
      Gets a redirect URL to download a zip archive for a repository. If you
      omit `:ref`, the repository’s default branch (usually

      `main`) will be used. Please make sure your HTTP framework is configured
      to follow redirects or you will need to use

      the `Location` header to make a second `GET` request.


      > [!NOTE]

      > For private repositories, these links are temporary and expire after
      five minutes. If the repository is empty, you will receive a 404 when you
      follow the redirect.
    externalDocs: https://docs.github.com/rest/repos/contents#download-a-repository-archive-zip
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
      - paramName: ref
        description: ""
        paramKey: ref
        in: path
        schema:
          type: string
        required: true
  - moduleName: Repos / Template / Create Using
    method: post
    path: /repos/{template_owner}/{template_repo}/generate
    description: >-
      Creates a new repository using a repository template. Use the
      `template_owner` and `template_repo` route parameters to specify the
      repository to use as the template. If the repository is not public, the
      authenticated user must own or be a member of an organization that owns
      the repository. To check if a repository is available to use as a
      template, get the repository's information using the [Get a
      repository](https://docs.github.com/rest/repos/repos#get-a-repository)
      endpoint and check that the `is_template` key is `true`.


      OAuth app tokens and personal access tokens (classic) need the
      `public_repo` or `repo` scope to create a public repository, and `repo`
      scope to create a private repository.
    externalDocs: https://docs.github.com/rest/repos/repos#create-a-repository-using-a-template
    params:
      - paramName: templateOwner
        description: The account owner of the template repository. The name is not case
          sensitive.
        paramKey: template_owner
        in: path
        schema:
          type: string
        required: true
      - paramName: templateRepo
        description: The name of the template repository without the `.git` extension.
          The name is not case sensitive.
        paramKey: template_repo
        in: path
        schema:
          type: string
        required: true
      - paramName: owner
        description: The organization or person who will own the new repository. To
          create a new repository in an organization, the authenticated user
          must be a member of the specified organization.
        paramKey: owner
        in: body
        schema:
          type: string
        required: false
      - paramName: name
        description: The name of the new repository.
        paramKey: name
        in: body
        schema:
          type: string
        required: true
      - paramName: description
        description: A short description of the new repository.
        paramKey: description
        in: body
        schema:
          type: string
        required: false
      - paramName: includeAllBranches
        description: "Set to `true` to include the directory structure and files from
          all branches in the template repository, and not just the default
          branch. Default: `false`."
        paramKey: include_all_branches
        in: body
        schema:
          type: boolean
          default: false
        required: false
      - paramName: private
        description: Either `true` to create a new private repository or `false` to
          create a new public one.
        paramKey: private
        in: body
        schema:
          type: boolean
          default: false
        required: false
    requestBodyType: json
  - moduleName: Repos / Public / List
    method: get
    path: /repositories
    description: >-
      Lists all public repositories in the order that they were created.


      Note:

      - For GitHub Enterprise Server, this endpoint will only list repositories
      available to all users on the enterprise.

      - Pagination is powered exclusively by the `since` parameter. Use the
      [Link
      header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers)
      to get the URL for the next page of repositories.
    externalDocs: https://docs.github.com/rest/repos/repos#list-public-repositories
    params:
      - paramName: since
        description: A repository ID. Only return repositories with an ID greater than
          this ID.
        paramKey: since
        in: query
        schema:
          type: number
        required: false
  - moduleName: Search / Code
    method: get
    path: /search/code
    description: >-
      Searches for query terms inside of a file. This method returns up to 100
      results [per
      page](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api).


      When searching for code, you can get text match metadata for the file
      **content** and file **path** fields when you pass the `text-match` media
      type. For more details about how to receive highlighted search results,
      see [Text match
      metadata](https://docs.github.com/rest/search/search#text-match-metadata).


      For example, if you want to find the definition of the `addClass` function
      inside [jQuery](https://github.com/jquery/jquery) repository, your query
      would look something like this:


      `q=addClass+in:file+language:js+repo:jquery/jquery`


      This query searches for the keyword `addClass` within a file's contents.
      The query limits the search to files where the language is JavaScript in
      the `jquery/jquery` repository.


      Considerations for code search:


      Due to the complexity of searching code, there are a few restrictions on
      how searches are performed:


      *   Only the _default branch_ is considered. In most cases, this will be
      the `master` branch.

      *   Only files smaller than 384 KB are searchable.

      *   You must always include at least one search term when searching source
      code. For example, searching for
      [`language:go`](https://github.com/search?utf8=%E2%9C%93&q=language%3Ago&type=Code)
      is not valid, while [`amazing

      language:go`](https://github.com/search?utf8=%E2%9C%93&q=amazing+language%3Ago&type=Code)
      is.


      This endpoint requires you to authenticate and limits you to 10 requests
      per minute.
    externalDocs: https://docs.github.com/rest/search/search#search-code
    params:
      - paramName: q
        description: The query contains one or more search keywords and qualifiers.
          Qualifiers allow you to limit your search to specific areas of GitHub.
          The REST API supports the same qualifiers as the web interface for
          GitHub. To learn more about the format of the query, see [Constructing
          a search
          query](https://docs.github.com/rest/search/search#constructing-a-search-query).
          See "[Searching
          code](https://docs.github.com/search-github/searching-on-github/searching-code)"
          for a detailed list of qualifiers.
        paramKey: q
        in: query
        schema:
          type: string
        required: true
      - paramName: sort
        description: "**This field is closing down.** Sorts the results of your query.
          Can only be `indexed`, which indicates how recently a file has been
          indexed by the GitHub search infrastructure. Default: [best
          match](https://docs.github.com/rest/search/search#ranking-search-resu\
          lts)"
        paramKey: sort
        in: query
        schema:
          type: string
          enum:
            - indexed
        required: false
      - paramName: order
        description: "**This field is closing down.** Determines whether the first
          search result returned is the highest number of matches (`desc`) or
          lowest number of matches (`asc`). This parameter is ignored unless you
          provide `sort`. "
        paramKey: order
        in: query
        schema:
          type: string
          default: desc
          enum:
            - desc
            - asc
        required: false
      - paramName: perPage
        description: The number of results per page (max 100). For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: per_page
        in: query
        schema:
          type: number
          default: 30
        required: false
      - paramName: page
        description: The page number of the results to fetch. For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: page
        in: query
        schema:
          type: number
          default: 1
        required: false
  - moduleName: Search / Commits
    method: get
    path: /search/commits
    description: >-
      Find commits via various criteria on the default branch (usually `main`).
      This method returns up to 100 results [per
      page](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api).


      When searching for commits, you can get text match metadata for the
      **message** field when you provide the `text-match` media type. For more
      details about how to receive highlighted search results, see [Text match

      metadata](https://docs.github.com/rest/search/search#text-match-metadata).


      For example, if you want to find commits related to CSS in the
      [octocat/Spoon-Knife](https://github.com/octocat/Spoon-Knife) repository.
      Your query would look something like this:


      `q=repo:octocat/Spoon-Knife+css`
    externalDocs: https://docs.github.com/rest/search/search#search-commits
    params:
      - paramName: q
        description: The query contains one or more search keywords and qualifiers.
          Qualifiers allow you to limit your search to specific areas of GitHub.
          The REST API supports the same qualifiers as the web interface for
          GitHub. To learn more about the format of the query, see [Constructing
          a search
          query](https://docs.github.com/rest/search/search#constructing-a-search-query).
          See "[Searching
          commits](https://docs.github.com/search-github/searching-on-github/searching-commits)"
          for a detailed list of qualifiers.
        paramKey: q
        in: query
        schema:
          type: string
        required: true
      - paramName: sort
        description: "Sorts the results of your query by `author-date` or
          `committer-date`. Default: [best
          match](https://docs.github.com/rest/search/search#ranking-search-resu\
          lts)"
        paramKey: sort
        in: query
        schema:
          type: string
          enum:
            - author-date
            - committer-date
        required: false
      - paramName: order
        description: Determines whether the first search result returned is the highest
          number of matches (`desc`) or lowest number of matches (`asc`). This
          parameter is ignored unless you provide `sort`.
        paramKey: order
        in: query
        schema:
          type: string
          default: desc
          enum:
            - desc
            - asc
        required: false
      - paramName: perPage
        description: The number of results per page (max 100). For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: per_page
        in: query
        schema:
          type: number
          default: 30
        required: false
      - paramName: page
        description: The page number of the results to fetch. For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: page
        in: query
        schema:
          type: number
          default: 1
        required: false
  - moduleName: Search / Issues and Pull Requests
    method: get
    path: /search/issues
    description: >-
      Find issues by state and keyword. This method returns up to 100 results
      [per
      page](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api).


      When searching for issues, you can get text match metadata for the issue
      **title**, issue **body**, and issue **comment body** fields when you pass
      the `text-match` media type. For more details about how to receive
      highlighted

      search results, see [Text match
      metadata](https://docs.github.com/rest/search/search#text-match-metadata).


      For example, if you want to find the oldest unresolved Python bugs on
      Windows. Your query might look something like this.


      `q=windows+label:bug+language:python+state:open&sort=created&order=asc`


      This query searches for the keyword `windows`, within any open issue that
      is labeled as `bug`. The search runs across repositories whose primary
      language is Python. The results are sorted by creation date in ascending
      order, which means the oldest issues appear first in the search results.


      > [!NOTE]

      > For requests made by GitHub Apps with a user access token, you can't
      retrieve a combination of issues and pull requests in a single query.
      Requests that don't include the `is:issue` or `is:pull-request` qualifier
      will receive an HTTP `422 Unprocessable Entity` response. To get results
      for both issues and pull requests, you must send separate queries for
      issues and pull requests. For more information about the `is` qualifier,
      see "[Searching only issues or pull
      requests](https://docs.github.com/github/searching-for-information-on-github/searching-issues-and-pull-requests#search-only-issues-or-pull-requests)."
    externalDocs: https://docs.github.com/rest/search/search#search-issues-and-pull-requests
    params:
      - paramName: q
        description: The query contains one or more search keywords and qualifiers.
          Qualifiers allow you to limit your search to specific areas of GitHub.
          The REST API supports the same qualifiers as the web interface for
          GitHub. To learn more about the format of the query, see [Constructing
          a search
          query](https://docs.github.com/rest/search/search#constructing-a-search-query).
          See "[Searching issues and pull
          requests](https://docs.github.com/search-github/searching-on-github/searching-issues-and-pull-requests)"
          for a detailed list of qualifiers.
        paramKey: q
        in: query
        schema:
          type: string
        required: true
      - paramName: sort
        description: "Sorts the results of your query by the number of `comments`,
          `reactions`, `reactions-+1`, `reactions--1`, `reactions-smile`,
          `reactions-thinking_face`, `reactions-heart`, `reactions-tada`, or
          `interactions`. You can also sort results by how recently the items
          were `created` or `updated`, Default: [best
          match](https://docs.github.com/rest/search/search#ranking-search-resu\
          lts)"
        paramKey: sort
        in: query
        schema:
          type: string
          enum:
            - comments
            - reactions
            - reactions-+1
            - reactions--1
            - reactions-smile
            - reactions-thinking_face
            - reactions-heart
            - reactions-tada
            - interactions
            - created
            - updated
        required: false
      - paramName: order
        description: Determines whether the first search result returned is the highest
          number of matches (`desc`) or lowest number of matches (`asc`). This
          parameter is ignored unless you provide `sort`.
        paramKey: order
        in: query
        schema:
          type: string
          default: desc
          enum:
            - desc
            - asc
        required: false
      - paramName: perPage
        description: The number of results per page (max 100). For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: per_page
        in: query
        schema:
          type: number
          default: 30
        required: false
      - paramName: page
        description: The page number of the results to fetch. For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: page
        in: query
        schema:
          type: number
          default: 1
        required: false
  - moduleName: Search / Labels
    method: get
    path: /search/labels
    description: >-
      Find labels in a repository with names or descriptions that match search
      keywords. Returns up to 100 results [per
      page](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api).


      When searching for labels, you can get text match metadata for the label
      **name** and **description** fields when you pass the `text-match` media
      type. For more details about how to receive highlighted search results,
      see [Text match
      metadata](https://docs.github.com/rest/search/search#text-match-metadata).


      For example, if you want to find labels in the `linguist` repository that
      match `bug`, `defect`, or `enhancement`. Your query might look like this:


      `q=bug+defect+enhancement&repository_id=64778136`


      The labels that best match the query appear first in the search results.
    externalDocs: https://docs.github.com/rest/search/search#search-labels
    params:
      - paramName: repositoryId
        description: The id of the repository.
        paramKey: repository_id
        in: query
        schema:
          type: number
        required: true
      - paramName: q
        description: The search keywords. This endpoint does not accept qualifiers in
          the query. To learn more about the format of the query, see
          [Constructing a search
          query](https://docs.github.com/rest/search/search#constructing-a-search-query).
        paramKey: q
        in: query
        schema:
          type: string
        required: true
      - paramName: sort
        description: "Sorts the results of your query by when the label was `created` or
          `updated`. Default: [best
          match](https://docs.github.com/rest/search/search#ranking-search-resu\
          lts)"
        paramKey: sort
        in: query
        schema:
          type: string
          enum:
            - created
            - updated
        required: false
      - paramName: order
        description: Determines whether the first search result returned is the highest
          number of matches (`desc`) or lowest number of matches (`asc`). This
          parameter is ignored unless you provide `sort`.
        paramKey: order
        in: query
        schema:
          type: string
          default: desc
          enum:
            - desc
            - asc
        required: false
      - paramName: perPage
        description: The number of results per page (max 100). For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: per_page
        in: query
        schema:
          type: number
          default: 30
        required: false
      - paramName: page
        description: The page number of the results to fetch. For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: page
        in: query
        schema:
          type: number
          default: 1
        required: false
  - moduleName: Search / Repos
    method: get
    path: /search/repositories
    description: >-
      Find repositories via various criteria. This method returns up to 100
      results [per
      page](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api).


      When searching for repositories, you can get text match metadata for the
      **name** and **description** fields when you pass the `text-match` media
      type. For more details about how to receive highlighted search results,
      see [Text match
      metadata](https://docs.github.com/rest/search/search#text-match-metadata).


      For example, if you want to search for popular Tetris repositories written
      in assembly code, your query might look like this:


      `q=tetris+language:assembly&sort=stars&order=desc`


      This query searches for repositories with the word `tetris` in the name,
      the description, or the README. The results are limited to repositories
      where the primary language is assembly. The results are sorted by stars in
      descending order, so that the most popular repositories appear first in
      the search results.
    externalDocs: https://docs.github.com/rest/search/search#search-repositories
    params:
      - paramName: q
        description: The query contains one or more search keywords and qualifiers.
          Qualifiers allow you to limit your search to specific areas of GitHub.
          The REST API supports the same qualifiers as the web interface for
          GitHub. To learn more about the format of the query, see [Constructing
          a search
          query](https://docs.github.com/rest/search/search#constructing-a-search-query).
          See "[Searching for
          repositories](https://docs.github.com/articles/searching-for-repositories/)"
          for a detailed list of qualifiers.
        paramKey: q
        in: query
        schema:
          type: string
        required: true
      - paramName: sort
        description: "Sorts the results of your query by number of `stars`, `forks`, or
          `help-wanted-issues` or how recently the items were `updated`.
          Default: [best
          match](https://docs.github.com/rest/search/search#ranking-search-resu\
          lts)"
        paramKey: sort
        in: query
        schema:
          type: string
          enum:
            - stars
            - forks
            - help-wanted-issues
            - updated
        required: false
      - paramName: order
        description: Determines whether the first search result returned is the highest
          number of matches (`desc`) or lowest number of matches (`asc`). This
          parameter is ignored unless you provide `sort`.
        paramKey: order
        in: query
        schema:
          type: string
          default: desc
          enum:
            - desc
            - asc
        required: false
      - paramName: perPage
        description: The number of results per page (max 100). For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: per_page
        in: query
        schema:
          type: number
          default: 30
        required: false
      - paramName: page
        description: The page number of the results to fetch. For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: page
        in: query
        schema:
          type: number
          default: 1
        required: false
  - moduleName: Search / Topics
    method: get
    path: /search/topics
    description: >-
      Find topics via various criteria. Results are sorted by best match. This
      method returns up to 100 results [per
      page](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api).
      See "[Searching
      topics](https://docs.github.com/articles/searching-topics/)" for a
      detailed list of qualifiers.


      When searching for topics, you can get text match metadata for the topic's
      **short\_description**, **description**, **name**, or **display\_name**
      field when you pass the `text-match` media type. For more details about
      how to receive highlighted search results, see [Text match
      metadata](https://docs.github.com/rest/search/search#text-match-metadata).


      For example, if you want to search for topics related to Ruby that are
      featured on https://github.com/topics. Your query might look like this:


      `q=ruby+is:featured`


      This query searches for topics with the keyword `ruby` and limits the
      results to find only topics that are featured. The topics that are the
      best match for the query appear first in the search results.
    externalDocs: https://docs.github.com/rest/search/search#search-topics
    params:
      - paramName: q
        description: The query contains one or more search keywords and qualifiers.
          Qualifiers allow you to limit your search to specific areas of GitHub.
          The REST API supports the same qualifiers as the web interface for
          GitHub. To learn more about the format of the query, see [Constructing
          a search
          query](https://docs.github.com/rest/search/search#constructing-a-search-query).
        paramKey: q
        in: query
        schema:
          type: string
        required: true
      - paramName: perPage
        description: The number of results per page (max 100). For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: per_page
        in: query
        schema:
          type: number
          default: 30
        required: false
      - paramName: page
        description: The page number of the results to fetch. For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: page
        in: query
        schema:
          type: number
          default: 1
        required: false
  - moduleName: Search / Users
    method: get
    path: /search/users
    description: >-
      Find users via various criteria. This method returns up to 100 results
      [per
      page](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api).


      When searching for users, you can get text match metadata for the issue
      **login**, public **email**, and **name** fields when you pass the
      `text-match` media type. For more details about highlighting search
      results, see [Text match
      metadata](https://docs.github.com/rest/search/search#text-match-metadata).
      For more details about how to receive highlighted search results, see
      [Text match
      metadata](https://docs.github.com/rest/search/search#text-match-metadata).


      For example, if you're looking for a list of popular users, you might try
      this query:


      `q=tom+repos:%3E42+followers:%3E1000`


      This query searches for users with the name `tom`. The results are
      restricted to users with more than 42 repositories and over 1,000
      followers.


      This endpoint does not accept authentication and will only include
      publicly visible users. As an alternative, you can use the GraphQL API.
      The GraphQL API requires authentication and will return private users,
      including Enterprise Managed Users (EMUs), that you are authorized to
      view. For more information, see "[GraphQL
      Queries](https://docs.github.com/graphql/reference/queries#search)."
    externalDocs: https://docs.github.com/rest/search/search#search-users
    params:
      - paramName: q
        description: The query contains one or more search keywords and qualifiers.
          Qualifiers allow you to limit your search to specific areas of GitHub.
          The REST API supports the same qualifiers as the web interface for
          GitHub. To learn more about the format of the query, see [Constructing
          a search
          query](https://docs.github.com/rest/search/search#constructing-a-search-query).
          See "[Searching
          users](https://docs.github.com/search-github/searching-on-github/searching-users)"
          for a detailed list of qualifiers.
        paramKey: q
        in: query
        schema:
          type: string
        required: true
      - paramName: sort
        description: "Sorts the results of your query by number of `followers` or
          `repositories`, or when the person `joined` GitHub. Default: [best
          match](https://docs.github.com/rest/search/search#ranking-search-resu\
          lts)"
        paramKey: sort
        in: query
        schema:
          type: string
          enum:
            - followers
            - repositories
            - joined
        required: false
      - paramName: order
        description: Determines whether the first search result returned is the highest
          number of matches (`desc`) or lowest number of matches (`asc`). This
          parameter is ignored unless you provide `sort`.
        paramKey: order
        in: query
        schema:
          type: string
          default: desc
          enum:
            - desc
            - asc
        required: false
      - paramName: perPage
        description: The number of results per page (max 100). For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: per_page
        in: query
        schema:
          type: number
          default: 30
        required: false
      - paramName: page
        description: The page number of the results to fetch. For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: page
        in: query
        schema:
          type: number
          default: 1
        required: false
  - moduleName: Users / Get Authenticated
    method: get
    path: /user
    description: OAuth app tokens and personal access tokens (classic) need the
      `user` scope in order for the response to include private profile
      information.
    externalDocs: https://docs.github.com/rest/users/users#get-the-authenticated-user
    params: []
  - moduleName: Users / Update Authenticated
    method: patch
    path: /user
    description: "**Note:** If your email is set to private and you send an `email`
      parameter as part of this request to update your profile, your privacy
      settings are still enforced: the email address will not be displayed on
      your public profile or via the API."
    externalDocs: https://docs.github.com/rest/users/users#update-the-authenticated-user
    params:
      - paramName: name
        description: The new name of the user.
        paramKey: name
        in: body
        schema:
          type: string
        required: false
      - paramName: email
        description: The publicly visible email address of the user.
        paramKey: email
        in: body
        schema:
          type: string
        required: false
      - paramName: blog
        description: The new blog URL of the user.
        paramKey: blog
        in: body
        schema:
          type: string
        required: false
      - paramName: twitterUsername
        description: The new Twitter username of the user.
        paramKey: twitter_username
        in: body
        schema:
          type: string
        required: false
      - paramName: company
        description: The new company of the user.
        paramKey: company
        in: body
        schema:
          type: string
        required: false
      - paramName: location
        description: The new location of the user.
        paramKey: location
        in: body
        schema:
          type: string
        required: false
      - paramName: hireable
        description: The new hiring availability of the user.
        paramKey: hireable
        in: body
        schema:
          type: boolean
        required: false
      - paramName: bio
        description: The new short biography of the user.
        paramKey: bio
        in: body
        schema:
          type: string
        required: false
    requestBodyType: json
  - moduleName: Users / Blocks / List
    method: get
    path: /user/blocks
    description: List the users you've blocked on your personal account.
    externalDocs: https://docs.github.com/rest/users/blocking#list-users-blocked-by-the-authenticated-user
    params:
      - paramName: perPage
        description: The number of results per page (max 100). For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: per_page
        in: query
        schema:
          type: number
          default: 30
        required: false
      - paramName: page
        description: The page number of the results to fetch. For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: page
        in: query
        schema:
          type: number
          default: 1
        required: false
  - moduleName: Users / Blocks / Check
    method: get
    path: /user/blocks/{username}
    description: Returns a 204 if the given user is blocked by the authenticated
      user. Returns a 404 if the given user is not blocked by the authenticated
      user, or if the given user account has been identified as spam by GitHub.
    externalDocs: https://docs.github.com/rest/users/blocking#check-if-a-user-is-blocked-by-the-authenticated-user
    params:
      - paramName: username
        description: The handle for the GitHub user account.
        paramKey: username
        in: path
        schema:
          type: string
        required: true
  - moduleName: Users / Block
    method: put
    path: /user/blocks/{username}
    description: Blocks the given user and returns a 204. If the authenticated user
      cannot block the given user a 422 is returned.
    externalDocs: https://docs.github.com/rest/users/blocking#block-a-user
    params:
      - paramName: username
        description: The handle for the GitHub user account.
        paramKey: username
        in: path
        schema:
          type: string
        required: true
  - moduleName: Users / Unblock
    method: delete
    path: /user/blocks/{username}
    description: Unblocks the given user and returns a 204.
    externalDocs: https://docs.github.com/rest/users/blocking#unblock-a-user
    params:
      - paramName: username
        description: The handle for the GitHub user account.
        paramKey: username
        in: path
        schema:
          type: string
        required: true
  - moduleName: Packages / Docker / List Conflicts
    method: get
    path: /user/docker/conflicts
    description: >-
      Lists all packages that are owned by the authenticated user within the
      user's namespace, and that encountered a conflict during a Docker
      migration.


      OAuth app tokens and personal access tokens (classic) need the
      `read:packages` scope to use this endpoint.
    externalDocs: https://docs.github.com/rest/packages/packages#get-list-of-conflicting-packages-during-docker-migration-for-authenticated-user
    params: []
  - moduleName: Users / Authenticated / Set Primary Email Visibility
    method: patch
    path: /user/email/visibility
    description: Sets the visibility for your primary email addresses.
    externalDocs: https://docs.github.com/rest/users/emails#set-primary-email-visibility-for-the-authenticated-user
    params:
      - paramName: visibility
        description: Denotes whether an email is publicly visible.
        paramKey: visibility
        in: body
        schema:
          type: string
          enum:
            - public
            - private
        required: true
    requestBodyType: json
  - moduleName: Users / Authenticated / List Emails
    method: get
    path: /user/emails
    description: >-
      Lists all of your email addresses, and specifies which one is visible

      to the public.


      OAuth app tokens and personal access tokens (classic) need the
      `user:email` scope to use this endpoint.
    externalDocs: https://docs.github.com/rest/users/emails#list-email-addresses-for-the-authenticated-user
    params:
      - paramName: perPage
        description: The number of results per page (max 100). For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: per_page
        in: query
        schema:
          type: number
          default: 30
        required: false
      - paramName: page
        description: The page number of the results to fetch. For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: page
        in: query
        schema:
          type: number
          default: 1
        required: false
  - moduleName: Users / Authenticated / Add Email
    method: post
    path: /user/emails
    description: OAuth app tokens and personal access tokens (classic) need the
      `user` scope to use this endpoint.
    externalDocs: https://docs.github.com/rest/users/emails#add-an-email-address-for-the-authenticated-user
    params:
      - paramName: requestBody
        paramKey: ""
        description: ""
        in: body_raw
        schema:
          type: any
        required: true
    requestBodyType: json
  - moduleName: Users / Authenticated / Delete Email
    method: delete
    path: /user/emails
    description: OAuth app tokens and personal access tokens (classic) need the
      `user` scope to use this endpoint.
    externalDocs: https://docs.github.com/rest/users/emails#delete-an-email-address-for-the-authenticated-user
    params:
      - paramName: requestBody
        paramKey: ""
        description: ""
        in: body_raw
        schema:
          type: any
        required: true
    requestBodyType: json
  - moduleName: Users / Authenticated / List Followers
    method: get
    path: /user/followers
    description: Lists the people following the authenticated user.
    externalDocs: https://docs.github.com/rest/users/followers#list-followers-of-the-authenticated-user
    params:
      - paramName: perPage
        description: The number of results per page (max 100). For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: per_page
        in: query
        schema:
          type: number
          default: 30
        required: false
      - paramName: page
        description: The page number of the results to fetch. For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: page
        in: query
        schema:
          type: number
          default: 1
        required: false
  - moduleName: Users / Authenticated / List Following
    method: get
    path: /user/following
    description: Lists the people who the authenticated user follows.
    externalDocs: https://docs.github.com/rest/users/followers#list-the-people-the-authenticated-user-follows
    params:
      - paramName: perPage
        description: The number of results per page (max 100). For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: per_page
        in: query
        schema:
          type: number
          default: 30
        required: false
      - paramName: page
        description: The page number of the results to fetch. For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: page
        in: query
        schema:
          type: number
          default: 1
        required: false
  - moduleName: Users / Authenticated / Check Following Person
    method: get
    path: /user/following/{username}
    description: ""
    externalDocs: https://docs.github.com/rest/users/followers#check-if-a-person-is-followed-by-the-authenticated-user
    params:
      - paramName: username
        description: The handle for the GitHub user account.
        paramKey: username
        in: path
        schema:
          type: string
        required: true
  - moduleName: Users / Follow
    method: put
    path: /user/following/{username}
    description: >-
      Note that you'll need to set `Content-Length` to zero when calling out to
      this endpoint. For more information, see "[HTTP
      verbs](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#http-method)."


      OAuth app tokens and personal access tokens (classic) need the
      `user:follow` scope to use this endpoint.
    externalDocs: https://docs.github.com/rest/users/followers#follow-a-user
    params:
      - paramName: username
        description: The handle for the GitHub user account.
        paramKey: username
        in: path
        schema:
          type: string
        required: true
  - moduleName: Users / Unfollow
    method: delete
    path: /user/following/{username}
    description: OAuth app tokens and personal access tokens (classic) need the
      `user:follow` scope to use this endpoint.
    externalDocs: https://docs.github.com/rest/users/followers#unfollow-a-user
    params:
      - paramName: username
        description: The handle for the GitHub user account.
        paramKey: username
        in: path
        schema:
          type: string
        required: true
  - moduleName: Users / Authenticated / List GPG Keys
    method: get
    path: /user/gpg_keys
    description: >-
      Lists the current user's GPG keys.


      OAuth app tokens and personal access tokens (classic) need the
      `read:gpg_key` scope to use this endpoint.
    externalDocs: https://docs.github.com/rest/users/gpg-keys#list-gpg-keys-for-the-authenticated-user
    params:
      - paramName: perPage
        description: The number of results per page (max 100). For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: per_page
        in: query
        schema:
          type: number
          default: 30
        required: false
      - paramName: page
        description: The page number of the results to fetch. For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: page
        in: query
        schema:
          type: number
          default: 1
        required: false
  - moduleName: Users / Authenticated / Create GPG Key
    method: post
    path: /user/gpg_keys
    description: >-
      Adds a GPG key to the authenticated user's GitHub account.


      OAuth app tokens and personal access tokens (classic) need the
      `write:gpg_key` scope to use this endpoint.
    externalDocs: https://docs.github.com/rest/users/gpg-keys#create-a-gpg-key-for-the-authenticated-user
    params:
      - paramName: name
        description: A descriptive name for the new key.
        paramKey: name
        in: body
        schema:
          type: string
        required: false
      - paramName: armoredPublicKey
        description: A GPG key in ASCII-armored format.
        paramKey: armored_public_key
        in: body
        schema:
          type: string
        required: true
    requestBodyType: json
  - moduleName: Users / Authenticated / Get GPG Key
    method: get
    path: /user/gpg_keys/{gpg_key_id}
    description: >-
      View extended details for a single GPG key.


      OAuth app tokens and personal access tokens (classic) need the
      `read:gpg_key` scope to use this endpoint.
    externalDocs: https://docs.github.com/rest/users/gpg-keys#get-a-gpg-key-for-the-authenticated-user
    params:
      - paramName: gpgKeyId
        description: The unique identifier of the GPG key.
        paramKey: gpg_key_id
        in: path
        schema:
          type: number
        required: true
  - moduleName: Users / Authenticated / Delete GPG Key
    method: delete
    path: /user/gpg_keys/{gpg_key_id}
    description: >-
      Removes a GPG key from the authenticated user's GitHub account.


      OAuth app tokens and personal access tokens (classic) need the
      `admin:gpg_key` scope to use this endpoint.
    externalDocs: https://docs.github.com/rest/users/gpg-keys#delete-a-gpg-key-for-the-authenticated-user
    params:
      - paramName: gpgKeyId
        description: The unique identifier of the GPG key.
        paramKey: gpg_key_id
        in: path
        schema:
          type: number
        required: true
  - moduleName: Issues / Authenticated User / List
    method: get
    path: /user/issues
    description: >-
      List issues across owned and member repositories assigned to the
      authenticated user.


      > [!NOTE]

      > GitHub's REST API considers every pull request an issue, but not every
      issue is a pull request. For this reason, "Issues" endpoints may return
      both issues and pull requests in the response. You can identify pull
      requests by the `pull_request` key. Be aware that the `id` of a pull
      request returned from "Issues" endpoints will be an _issue id_. To find
      out the pull request id, use the "[List pull
      requests](https://docs.github.com/rest/pulls/pulls#list-pull-requests)"
      endpoint.


      This endpoint supports the following custom media types. For more
      information, see "[Media
      types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."


      - **`application/vnd.github.raw+json`**: Returns the raw markdown body.
      Response will include `body`. This is the default if you do not pass any
      specific media type.

      - **`application/vnd.github.text+json`**: Returns a text only
      representation of the markdown body. Response will include `body_text`.

      - **`application/vnd.github.html+json`**: Returns HTML rendered from the
      body's markdown. Response will include `body_html`.

      - **`application/vnd.github.full+json`**: Returns raw, text, and HTML
      representations. Response will include `body`, `body_text`, and
      `body_html`.
    externalDocs: https://docs.github.com/rest/issues/issues#list-user-account-issues-assigned-to-the-authenticated-user
    params:
      - paramName: filter
        description: Indicates which sorts of issues to return. `assigned` means issues
          assigned to you. `created` means issues created by you. `mentioned`
          means issues mentioning you. `subscribed` means issues you're
          subscribed to updates for. `all` or `repos` means all issues you can
          see, regardless of participation or creation.
        paramKey: filter
        in: query
        schema:
          type: string
          default: assigned
          enum:
            - assigned
            - created
            - mentioned
            - subscribed
            - repos
            - all
        required: false
      - paramName: state
        description: Indicates the state of the issues to return.
        paramKey: state
        in: query
        schema:
          type: string
          default: open
          enum:
            - open
            - closed
            - all
        required: false
      - paramName: labels
        description: "A list of comma separated label names. Example: `bug,ui,@high`"
        paramKey: labels
        in: query
        schema:
          type: string
        required: false
      - paramName: sort
        description: What to sort results by.
        paramKey: sort
        in: query
        schema:
          type: string
          default: created
          enum:
            - created
            - updated
            - comments
        required: false
      - paramName: direction
        description: The direction to sort the results by.
        paramKey: direction
        in: query
        schema:
          type: string
          default: desc
          enum:
            - asc
            - desc
        required: false
      - paramName: since
        description: "Only show results that were last updated after the given time.
          This is a timestamp in [ISO
          8601](https://en.wikipedia.org/wiki/ISO_8601) format:
          `YYYY-MM-DDTHH:MM:SSZ`."
        paramKey: since
        in: query
        schema:
          type: string
        required: false
      - paramName: perPage
        description: The number of results per page (max 100). For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: per_page
        in: query
        schema:
          type: number
          default: 30
        required: false
      - paramName: page
        description: The page number of the results to fetch. For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: page
        in: query
        schema:
          type: number
          default: 1
        required: false
  - moduleName: Users / Authenticated / List SSH Keys
    method: get
    path: /user/keys
    description: >-
      Lists the public SSH keys for the authenticated user's GitHub account.


      OAuth app tokens and personal access tokens (classic) need the
      `read:public_key` scope to use this endpoint.
    externalDocs: https://docs.github.com/rest/users/keys#list-public-ssh-keys-for-the-authenticated-user
    params:
      - paramName: perPage
        description: The number of results per page (max 100). For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: per_page
        in: query
        schema:
          type: number
          default: 30
        required: false
      - paramName: page
        description: The page number of the results to fetch. For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: page
        in: query
        schema:
          type: number
          default: 1
        required: false
  - moduleName: Users / Authenticated / Create SSH Key
    method: post
    path: /user/keys
    description: >-
      Adds a public SSH key to the authenticated user's GitHub account.


      OAuth app tokens and personal access tokens (classic) need the
      `write:gpg_key` scope to use this endpoint.
    externalDocs: https://docs.github.com/rest/users/keys#create-a-public-ssh-key-for-the-authenticated-user
    params:
      - paramName: title
        description: A descriptive name for the new key.
        paramKey: title
        in: body
        schema:
          type: string
        required: false
      - paramName: key
        description: The public SSH key to add to your GitHub account.
        paramKey: key
        in: body
        schema:
          type: string
        required: true
    requestBodyType: json
  - moduleName: Users / Authenticated / Get SSH Key
    method: get
    path: /user/keys/{key_id}
    description: >-
      View extended details for a single public SSH key.


      OAuth app tokens and personal access tokens (classic) need the
      `read:public_key` scope to use this endpoint.
    externalDocs: https://docs.github.com/rest/users/keys#get-a-public-ssh-key-for-the-authenticated-user
    params:
      - paramName: keyId
        description: The unique identifier of the key.
        paramKey: key_id
        in: path
        schema:
          type: number
        required: true
  - moduleName: Users / Authenticated / Delete SSH Key
    method: delete
    path: /user/keys/{key_id}
    description: >-
      Removes a public SSH key from the authenticated user's GitHub account.


      OAuth app tokens and personal access tokens (classic) need the
      `admin:public_key` scope to use this endpoint.
    externalDocs: https://docs.github.com/rest/users/keys#delete-a-public-ssh-key-for-the-authenticated-user
    params:
      - paramName: keyId
        description: The unique identifier of the key.
        paramKey: key_id
        in: path
        schema:
          type: number
        required: true
  - moduleName: Orgs / Authenticated User / List Memberships
    method: get
    path: /user/memberships/orgs
    description: Lists all of the authenticated user's organization memberships.
    externalDocs: https://docs.github.com/rest/orgs/members#list-organization-memberships-for-the-authenticated-user
    params:
      - paramName: state
        description: Indicates the state of the memberships to return. If not specified,
          the API returns both active and pending memberships.
        paramKey: state
        in: query
        schema:
          type: string
          enum:
            - active
            - pending
        required: false
      - paramName: perPage
        description: The number of results per page (max 100). For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: per_page
        in: query
        schema:
          type: number
          default: 30
        required: false
      - paramName: page
        description: The page number of the results to fetch. For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: page
        in: query
        schema:
          type: number
          default: 1
        required: false
  - moduleName: Orgs / Authenticated User / Get Membership
    method: get
    path: /user/memberships/orgs/{org}
    description: If the authenticated user is an active or pending member of the
      organization, this endpoint will return the user's membership. If the
      authenticated user is not affiliated with the organization, a `404` is
      returned. This endpoint will return a `403` if the request is made by a
      GitHub App that is blocked by the organization.
    externalDocs: https://docs.github.com/rest/orgs/members#get-an-organization-membership-for-the-authenticated-user
    params:
      - paramName: org
        description: The organization name. The name is not case sensitive.
        paramKey: org
        in: path
        schema:
          type: string
        required: true
  - moduleName: Orgs / Authenticated User / Update Membership
    method: patch
    path: /user/memberships/orgs/{org}
    description: Converts the authenticated user to an active member of the
      organization, if that user has a pending invitation from the organization.
    externalDocs: https://docs.github.com/rest/orgs/members#update-an-organization-membership-for-the-authenticated-user
    params:
      - paramName: org
        description: The organization name. The name is not case sensitive.
        paramKey: org
        in: path
        schema:
          type: string
        required: true
      - paramName: state
        description: The state that the membership should be in. Only `"active"` will be
          accepted.
        paramKey: state
        in: body
        schema:
          type: string
          enum:
            - active
        required: true
    requestBodyType: json
  - moduleName: Orgs / Authenticated User / List
    method: get
    path: /user/orgs
    description: >-
      List organizations for the authenticated user.


      For OAuth app tokens and personal access tokens (classic), this endpoint
      only lists organizations that your authorization allows you to operate on
      in some way (e.g., you can list teams with `read:org` scope, you can
      publicize your organization membership with `user` scope, etc.).
      Therefore, this API requires at least `user` or `read:org` scope for OAuth
      app tokens and personal access tokens (classic). Requests with
      insufficient scope will receive a `403 Forbidden` response.


      > [!NOTE]

      > Requests using a fine-grained access token will receive a `200 Success`
      response with an empty list.
    externalDocs: https://docs.github.com/rest/orgs/orgs#list-organizations-for-the-authenticated-user
    params:
      - paramName: perPage
        description: The number of results per page (max 100). For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: per_page
        in: query
        schema:
          type: number
          default: 30
        required: false
      - paramName: page
        description: The page number of the results to fetch. For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: page
        in: query
        schema:
          type: number
          default: 1
        required: false
  - moduleName: Packages / Authenticated User / List Packages
    method: get
    path: /user/packages
    description: >-
      Lists packages owned by the authenticated user within the user's
      namespace.


      OAuth app tokens and personal access tokens (classic) need the
      `read:packages` scope to use this endpoint. For more information, see
      "[About permissions for GitHub
      Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
    externalDocs: https://docs.github.com/rest/packages/packages#list-packages-for-the-authenticated-users-namespace
    params:
      - paramName: packageType
        description: The type of supported package. Packages in GitHub's Gradle registry
          have the type `maven`. Docker images pushed to GitHub's Container
          registry (`ghcr.io`) have the type `container`. You can use the type
          `docker` to find images that were pushed to GitHub's Docker registry
          (`docker.pkg.github.com`), even if these have now been migrated to the
          Container registry.
        paramKey: package_type
        in: query
        schema:
          type: string
          enum:
            - npm
            - maven
            - rubygems
            - docker
            - nuget
            - container
        required: true
      - paramName: visibility
        description: >-
          The selected visibility of the packages.  This parameter is optional
          and only filters an existing result set.


          The `internal` visibility is only supported for GitHub Packages
          registries that allow for granular permissions. For other ecosystems
          `internal` is synonymous with `private`.

          For the list of GitHub Packages registries that support granular
          permissions, see "[About permissions for GitHub
          Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages)."
        paramKey: visibility
        in: query
        schema:
          type: string
          enum:
            - public
            - private
            - internal
        required: false
      - paramName: page
        description: The page number of the results to fetch. For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: page
        in: query
        schema:
          type: number
          default: 1
        required: false
      - paramName: perPage
        description: The number of results per page (max 100). For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: per_page
        in: query
        schema:
          type: number
          default: 30
        required: false
  - moduleName: Packages / Authenticated User / Get Package
    method: get
    path: /user/packages/{package_type}/{package_name}
    description: >-
      Gets a specific package for a package owned by the authenticated user.


      OAuth app tokens and personal access tokens (classic) need the
      `read:packages` scope to use this endpoint. For more information, see
      "[About permissions for GitHub
      Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
    externalDocs: https://docs.github.com/rest/packages/packages#get-a-package-for-the-authenticated-user
    params:
      - paramName: packageType
        description: The type of supported package. Packages in GitHub's Gradle registry
          have the type `maven`. Docker images pushed to GitHub's Container
          registry (`ghcr.io`) have the type `container`. You can use the type
          `docker` to find images that were pushed to GitHub's Docker registry
          (`docker.pkg.github.com`), even if these have now been migrated to the
          Container registry.
        paramKey: package_type
        in: path
        schema:
          type: string
          enum:
            - npm
            - maven
            - rubygems
            - docker
            - nuget
            - container
        required: true
      - paramName: packageName
        description: The name of the package.
        paramKey: package_name
        in: path
        schema:
          type: string
        required: true
  - moduleName: Packages / Authenticated User / Delete Package
    method: delete
    path: /user/packages/{package_type}/{package_name}
    description: >-
      Deletes a package owned by the authenticated user. You cannot delete a
      public package if any version of the package has more than 5,000
      downloads. In this scenario, contact GitHub support for further
      assistance.


      OAuth app tokens and personal access tokens (classic) need the
      `read:packages` and `delete:packages` scopes to use this endpoint. For
      more information, see "[About permissions for GitHub
      Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
    externalDocs: https://docs.github.com/rest/packages/packages#delete-a-package-for-the-authenticated-user
    params:
      - paramName: packageType
        description: The type of supported package. Packages in GitHub's Gradle registry
          have the type `maven`. Docker images pushed to GitHub's Container
          registry (`ghcr.io`) have the type `container`. You can use the type
          `docker` to find images that were pushed to GitHub's Docker registry
          (`docker.pkg.github.com`), even if these have now been migrated to the
          Container registry.
        paramKey: package_type
        in: path
        schema:
          type: string
          enum:
            - npm
            - maven
            - rubygems
            - docker
            - nuget
            - container
        required: true
      - paramName: packageName
        description: The name of the package.
        paramKey: package_name
        in: path
        schema:
          type: string
        required: true
  - moduleName: Packages / Authenticated User / Restore Package
    method: post
    path: /user/packages/{package_type}/{package_name}/restore
    description: >-
      Restores a package owned by the authenticated user.


      You can restore a deleted package under the following conditions:
        - The package was deleted within the last 30 days.
        - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package's namespace first.

      OAuth app tokens and personal access tokens (classic) need the
      `read:packages` and `write:packages` scopes to use this endpoint. For more
      information, see "[About permissions for GitHub
      Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
    externalDocs: https://docs.github.com/rest/packages/packages#restore-a-package-for-the-authenticated-user
    params:
      - paramName: packageType
        description: The type of supported package. Packages in GitHub's Gradle registry
          have the type `maven`. Docker images pushed to GitHub's Container
          registry (`ghcr.io`) have the type `container`. You can use the type
          `docker` to find images that were pushed to GitHub's Docker registry
          (`docker.pkg.github.com`), even if these have now been migrated to the
          Container registry.
        paramKey: package_type
        in: path
        schema:
          type: string
          enum:
            - npm
            - maven
            - rubygems
            - docker
            - nuget
            - container
        required: true
      - paramName: packageName
        description: The name of the package.
        paramKey: package_name
        in: path
        schema:
          type: string
        required: true
      - paramName: token
        description: package token
        paramKey: token
        in: query
        schema:
          type: string
        required: false
  - moduleName: Packages / Authenticated User / Get Package Versions
    method: get
    path: /user/packages/{package_type}/{package_name}/versions
    description: >-
      Lists package versions for a package owned by the authenticated user.


      OAuth app tokens and personal access tokens (classic) need the
      `read:packages` scope to use this endpoint. For more information, see
      "[About permissions for GitHub
      Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
    externalDocs: https://docs.github.com/rest/packages/packages#list-package-versions-for-a-package-owned-by-the-authenticated-user
    params:
      - paramName: packageType
        description: The type of supported package. Packages in GitHub's Gradle registry
          have the type `maven`. Docker images pushed to GitHub's Container
          registry (`ghcr.io`) have the type `container`. You can use the type
          `docker` to find images that were pushed to GitHub's Docker registry
          (`docker.pkg.github.com`), even if these have now been migrated to the
          Container registry.
        paramKey: package_type
        in: path
        schema:
          type: string
          enum:
            - npm
            - maven
            - rubygems
            - docker
            - nuget
            - container
        required: true
      - paramName: packageName
        description: The name of the package.
        paramKey: package_name
        in: path
        schema:
          type: string
        required: true
      - paramName: page
        description: The page number of the results to fetch. For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: page
        in: query
        schema:
          type: number
          default: 1
        required: false
      - paramName: perPage
        description: The number of results per page (max 100). For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: per_page
        in: query
        schema:
          type: number
          default: 30
        required: false
      - paramName: state
        description: The state of the package, either active or deleted.
        paramKey: state
        in: query
        schema:
          type: string
          default: active
          enum:
            - active
            - deleted
        required: false
  - moduleName: Packages / Authenticated User / Get Package Version
    method: get
    path: /user/packages/{package_type}/{package_name}/versions/{package_version_id}
    description: >-
      Gets a specific package version for a package owned by the authenticated
      user.


      OAuth app tokens and personal access tokens (classic) need the
      `read:packages` scope to use this endpoint. For more information, see
      "[About permissions for GitHub
      Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
    externalDocs: https://docs.github.com/rest/packages/packages#get-a-package-version-for-the-authenticated-user
    params:
      - paramName: packageType
        description: The type of supported package. Packages in GitHub's Gradle registry
          have the type `maven`. Docker images pushed to GitHub's Container
          registry (`ghcr.io`) have the type `container`. You can use the type
          `docker` to find images that were pushed to GitHub's Docker registry
          (`docker.pkg.github.com`), even if these have now been migrated to the
          Container registry.
        paramKey: package_type
        in: path
        schema:
          type: string
          enum:
            - npm
            - maven
            - rubygems
            - docker
            - nuget
            - container
        required: true
      - paramName: packageName
        description: The name of the package.
        paramKey: package_name
        in: path
        schema:
          type: string
        required: true
      - paramName: packageVersionId
        description: Unique identifier of the package version.
        paramKey: package_version_id
        in: path
        schema:
          type: number
        required: true
  - moduleName: Packages / Authenticated User / Delete Package Version
    method: delete
    path: /user/packages/{package_type}/{package_name}/versions/{package_version_id}
    description: >-
      Deletes a specific package version for a package owned by the
      authenticated user.  If the package is public and the package version has
      more than 5,000 downloads, you cannot delete the package version. In this
      scenario, contact GitHub support for further assistance.


      The authenticated user must have admin permissions in the organization to
      use this endpoint.


      OAuth app tokens and personal access tokens (classic) need the
      `read:packages` and `delete:packages` scopes to use this endpoint. For
      more information, see "[About permissions for GitHub
      Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
    externalDocs: https://docs.github.com/rest/packages/packages#delete-a-package-version-for-the-authenticated-user
    params:
      - paramName: packageType
        description: The type of supported package. Packages in GitHub's Gradle registry
          have the type `maven`. Docker images pushed to GitHub's Container
          registry (`ghcr.io`) have the type `container`. You can use the type
          `docker` to find images that were pushed to GitHub's Docker registry
          (`docker.pkg.github.com`), even if these have now been migrated to the
          Container registry.
        paramKey: package_type
        in: path
        schema:
          type: string
          enum:
            - npm
            - maven
            - rubygems
            - docker
            - nuget
            - container
        required: true
      - paramName: packageName
        description: The name of the package.
        paramKey: package_name
        in: path
        schema:
          type: string
        required: true
      - paramName: packageVersionId
        description: Unique identifier of the package version.
        paramKey: package_version_id
        in: path
        schema:
          type: number
        required: true
  - moduleName: Packages / Authenticated User / Restore Package Version
    method: post
    path: /user/packages/{package_type}/{package_name}/versions/{package_version_id}/restore
    description: >-
      Restores a package version owned by the authenticated user.


      You can restore a deleted package version under the following conditions:
        - The package was deleted within the last 30 days.
        - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package's namespace first.

      OAuth app tokens and personal access tokens (classic) need the
      `read:packages` and `write:packages` scopes to use this endpoint. For more
      information, see "[About permissions for GitHub
      Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
    externalDocs: https://docs.github.com/rest/packages/packages#restore-a-package-version-for-the-authenticated-user
    params:
      - paramName: packageType
        description: The type of supported package. Packages in GitHub's Gradle registry
          have the type `maven`. Docker images pushed to GitHub's Container
          registry (`ghcr.io`) have the type `container`. You can use the type
          `docker` to find images that were pushed to GitHub's Docker registry
          (`docker.pkg.github.com`), even if these have now been migrated to the
          Container registry.
        paramKey: package_type
        in: path
        schema:
          type: string
          enum:
            - npm
            - maven
            - rubygems
            - docker
            - nuget
            - container
        required: true
      - paramName: packageName
        description: The name of the package.
        paramKey: package_name
        in: path
        schema:
          type: string
        required: true
      - paramName: packageVersionId
        description: Unique identifier of the package version.
        paramKey: package_version_id
        in: path
        schema:
          type: number
        required: true
  - moduleName: Projects / Authenticated User / Create
    method: post
    path: /user/projects
    description: Creates a user project board. Returns a `410 Gone` status if the
      user does not have existing classic projects. If you do not have
      sufficient privileges to perform this action, a `401 Unauthorized` or `410
      Gone` status is returned.
    externalDocs: https://docs.github.com/rest/projects/projects#create-a-user-project
    params:
      - paramName: name
        description: Name of the project
        paramKey: name
        in: body
        schema:
          type: string
        required: true
      - paramName: body
        description: Body of the project
        paramKey: body
        in: body
        schema:
          type: string
        required: false
    requestBodyType: json
  - moduleName: Users / Authenticated / List Public Emails
    method: get
    path: /user/public_emails
    description: >-
      Lists your publicly visible email address, which you can set with the

      [Set primary email visibility for the authenticated
      user](https://docs.github.com/rest/users/emails#set-primary-email-visibility-for-the-authenticated-user)

      endpoint.


      OAuth app tokens and personal access tokens (classic) need the
      `user:email` scope to use this endpoint.
    externalDocs: https://docs.github.com/rest/users/emails#list-public-email-addresses-for-the-authenticated-user
    params:
      - paramName: perPage
        description: The number of results per page (max 100). For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: per_page
        in: query
        schema:
          type: number
          default: 30
        required: false
      - paramName: page
        description: The page number of the results to fetch. For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: page
        in: query
        schema:
          type: number
          default: 1
        required: false
  - moduleName: Repos / Authenticated User / List
    method: get
    path: /user/repos
    description: >-
      Lists repositories that the authenticated user has explicit permission
      (`:read`, `:write`, or `:admin`) to access.


      The authenticated user has explicit permission to access repositories they
      own, repositories where they are a collaborator, and repositories that
      they can access through an organization membership.
    externalDocs: https://docs.github.com/rest/repos/repos#list-repositories-for-the-authenticated-user
    params:
      - paramName: visibility
        description: Limit results to repositories with the specified visibility.
        paramKey: visibility
        in: query
        schema:
          type: string
          default: all
          enum:
            - all
            - public
            - private
        required: false
      - paramName: affiliation
        description: >-
          Comma-separated list of values. Can include:
           * `owner`: Repositories that are owned by the authenticated user.
           * `collaborator`: Repositories that the user has been added to as a collaborator.
           * `organization_member`: Repositories that the user has access to through being a member of an organization. This includes every repository on every team that the user is on.
        paramKey: affiliation
        in: query
        schema:
          type: string
          default: owner,collaborator,organization_member
        required: false
      - paramName: type
        description: Limit results to repositories of the specified type. Will cause a
          `422` error if used in the same request as **visibility** or
          **affiliation**.
        paramKey: type
        in: query
        schema:
          type: string
          default: all
          enum:
            - all
            - owner
            - public
            - private
            - member
        required: false
      - paramName: sort
        description: The property to sort the results by.
        paramKey: sort
        in: query
        schema:
          type: string
          default: full_name
          enum:
            - created
            - updated
            - pushed
            - full_name
        required: false
      - paramName: direction
        description: "The order to sort by. Default: `asc` when using `full_name`,
          otherwise `desc`."
        paramKey: direction
        in: query
        schema:
          type: string
          enum:
            - asc
            - desc
        required: false
      - paramName: perPage
        description: The number of results per page (max 100). For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: per_page
        in: query
        schema:
          type: number
          default: 30
        required: false
      - paramName: page
        description: The page number of the results to fetch. For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: page
        in: query
        schema:
          type: number
          default: 1
        required: false
      - paramName: since
        description: "Only show repositories updated after the given time. This is a
          timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601)
          format: `YYYY-MM-DDTHH:MM:SSZ`."
        paramKey: since
        in: query
        schema:
          type: string
        required: false
      - paramName: before
        description: "Only show repositories updated before the given time. This is a
          timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601)
          format: `YYYY-MM-DDTHH:MM:SSZ`."
        paramKey: before
        in: query
        schema:
          type: string
        required: false
  - moduleName: Repos / Authenticated User / Create
    method: post
    path: /user/repos
    description: >-
      Creates a new repository for the authenticated user.


      OAuth app tokens and personal access tokens (classic) need the
      `public_repo` or `repo` scope to create a public repository, and `repo`
      scope to create a private repository.
    externalDocs: https://docs.github.com/rest/repos/repos#create-a-repository-for-the-authenticated-user
    params:
      - paramName: name
        description: The name of the repository.
        paramKey: name
        in: body
        schema:
          type: string
        required: true
      - paramName: description
        description: A short description of the repository.
        paramKey: description
        in: body
        schema:
          type: string
        required: false
      - paramName: homepage
        description: A URL with more information about the repository.
        paramKey: homepage
        in: body
        schema:
          type: string
        required: false
      - paramName: private
        description: Whether the repository is private.
        paramKey: private
        in: body
        schema:
          type: boolean
          default: false
        required: false
      - paramName: hasIssues
        description: Whether issues are enabled.
        paramKey: has_issues
        in: body
        schema:
          type: boolean
          default: true
        required: false
      - paramName: hasProjects
        description: Whether projects are enabled.
        paramKey: has_projects
        in: body
        schema:
          type: boolean
          default: true
        required: false
      - paramName: hasWiki
        description: Whether the wiki is enabled.
        paramKey: has_wiki
        in: body
        schema:
          type: boolean
          default: true
        required: false
      - paramName: hasDiscussions
        description: Whether discussions are enabled.
        paramKey: has_discussions
        in: body
        schema:
          type: boolean
          default: false
        required: false
      - paramName: teamId
        description: The id of the team that will be granted access to this repository.
          This is only valid when creating a repository in an organization.
        paramKey: team_id
        in: body
        schema:
          type: number
        required: false
      - paramName: autoInit
        description: Whether the repository is initialized with a minimal README.
        paramKey: auto_init
        in: body
        schema:
          type: boolean
          default: false
        required: false
      - paramName: gitignoreTemplate
        description: The desired language or platform to apply to the .gitignore.
        paramKey: gitignore_template
        in: body
        schema:
          type: string
        required: false
      - paramName: licenseTemplate
        description: The license keyword of the open source license for this repository.
        paramKey: license_template
        in: body
        schema:
          type: string
        required: false
      - paramName: allowSquashMerge
        description: Whether to allow squash merges for pull requests.
        paramKey: allow_squash_merge
        in: body
        schema:
          type: boolean
          default: true
        required: false
      - paramName: allowMergeCommit
        description: Whether to allow merge commits for pull requests.
        paramKey: allow_merge_commit
        in: body
        schema:
          type: boolean
          default: true
        required: false
      - paramName: allowRebaseMerge
        description: Whether to allow rebase merges for pull requests.
        paramKey: allow_rebase_merge
        in: body
        schema:
          type: boolean
          default: true
        required: false
      - paramName: allowAutoMerge
        description: Whether to allow Auto-merge to be used on pull requests.
        paramKey: allow_auto_merge
        in: body
        schema:
          type: boolean
          default: false
        required: false
      - paramName: deleteBranchOnMerge
        description: Whether to delete head branches when pull requests are merged
        paramKey: delete_branch_on_merge
        in: body
        schema:
          type: boolean
          default: false
        required: false
      - paramName: squashMergeCommitTitle
        description: >-
          Required when using `squash_merge_commit_message`.


          The default value for a squash merge commit title:


          - `PR_TITLE` - default to the pull request's title.

          - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one
          commit) or the pull request's title (when more than one commit).
        paramKey: squash_merge_commit_title
        in: body
        schema:
          type: string
          enum:
            - PR_TITLE
            - COMMIT_OR_PR_TITLE
        required: false
      - paramName: squashMergeCommitMessage
        description: |-
          The default value for a squash merge commit message:

          - `PR_BODY` - default to the pull request's body.
          - `COMMIT_MESSAGES` - default to the branch's commit messages.
          - `BLANK` - default to a blank commit message.
        paramKey: squash_merge_commit_message
        in: body
        schema:
          type: string
          enum:
            - PR_BODY
            - COMMIT_MESSAGES
            - BLANK
        required: false
      - paramName: mergeCommitTitle
        description: >-
          Required when using `merge_commit_message`.


          The default value for a merge commit title.


          - `PR_TITLE` - default to the pull request's title.

          - `MERGE_MESSAGE` - default to the classic title for a merge message
          (e.g., Merge pull request #123 from branch-name).
        paramKey: merge_commit_title
        in: body
        schema:
          type: string
          enum:
            - PR_TITLE
            - MERGE_MESSAGE
        required: false
      - paramName: mergeCommitMessage
        description: |-
          The default value for a merge commit message.

          - `PR_TITLE` - default to the pull request's title.
          - `PR_BODY` - default to the pull request's body.
          - `BLANK` - default to a blank commit message.
        paramKey: merge_commit_message
        in: body
        schema:
          type: string
          enum:
            - PR_BODY
            - PR_TITLE
            - BLANK
        required: false
      - paramName: hasDownloads
        description: Whether downloads are enabled.
        paramKey: has_downloads
        in: body
        schema:
          type: boolean
          default: true
        required: false
      - paramName: isTemplate
        description: Whether this repository acts as a template that can be used to
          generate new repositories.
        paramKey: is_template
        in: body
        schema:
          type: boolean
          default: false
        required: false
    requestBodyType: json
  - moduleName: Repos / Authenticated User / List Invitations
    method: get
    path: /user/repository_invitations
    description: When authenticating as a user, this endpoint will list all
      currently open repository invitations for that user.
    externalDocs: https://docs.github.com/rest/collaborators/invitations#list-repository-invitations-for-the-authenticated-user
    params:
      - paramName: perPage
        description: The number of results per page (max 100). For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: per_page
        in: query
        schema:
          type: number
          default: 30
        required: false
      - paramName: page
        description: The page number of the results to fetch. For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: page
        in: query
        schema:
          type: number
          default: 1
        required: false
  - moduleName: Repos / Authenticated User / Accept Invitation
    method: patch
    path: /user/repository_invitations/{invitation_id}
    description: ""
    externalDocs: https://docs.github.com/rest/collaborators/invitations#accept-a-repository-invitation
    params:
      - paramName: invitationId
        description: The unique identifier of the invitation.
        paramKey: invitation_id
        in: path
        schema:
          type: number
        required: true
  - moduleName: Repos / Authenticated User / Decline Invitation
    method: delete
    path: /user/repository_invitations/{invitation_id}
    description: ""
    externalDocs: https://docs.github.com/rest/collaborators/invitations#decline-a-repository-invitation
    params:
      - paramName: invitationId
        description: The unique identifier of the invitation.
        paramKey: invitation_id
        in: path
        schema:
          type: number
        required: true
  - moduleName: Users / Authenticated / List Social Accounts
    method: get
    path: /user/social_accounts
    description: Lists all of your social accounts.
    externalDocs: https://docs.github.com/rest/users/social-accounts#list-social-accounts-for-the-authenticated-user
    params:
      - paramName: perPage
        description: The number of results per page (max 100). For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: per_page
        in: query
        schema:
          type: number
          default: 30
        required: false
      - paramName: page
        description: The page number of the results to fetch. For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: page
        in: query
        schema:
          type: number
          default: 1
        required: false
  - moduleName: Users / Authenticated / Add Social Account
    method: post
    path: /user/social_accounts
    description: >-
      Add one or more social accounts to the authenticated user's profile.


      OAuth app tokens and personal access tokens (classic) need the `user`
      scope to use this endpoint.
    externalDocs: https://docs.github.com/rest/users/social-accounts#add-social-accounts-for-the-authenticated-user
    params:
      - paramName: accountUrls
        description: Full URLs for the social media profiles to add.
        paramKey: account_urls
        in: body
        schema:
          type: array
          items:
            type: any
        required: true
        example:
          account_urls:
            - https://www.linkedin.com/company/github/
            - https://twitter.com/github
    requestBodyType: json
  - moduleName: Users / Authenticated / Delete Social Account
    method: delete
    path: /user/social_accounts
    description: >-
      Deletes one or more social accounts from the authenticated user's profile.


      OAuth app tokens and personal access tokens (classic) need the `user`
      scope to use this endpoint.
    externalDocs: https://docs.github.com/rest/users/social-accounts#delete-social-accounts-for-the-authenticated-user
    params:
      - paramName: accountUrls
        description: Full URLs for the social media profiles to delete.
        paramKey: account_urls
        in: body
        schema:
          type: array
          items:
            type: any
        required: true
        example:
          account_urls:
            - https://www.linkedin.com/company/github/
            - https://twitter.com/github
    requestBodyType: json
  - moduleName: Users / Authenticated / List SSH Signing Keys
    method: get
    path: /user/ssh_signing_keys
    description: >-
      Lists the SSH signing keys for the authenticated user's GitHub account.


      OAuth app tokens and personal access tokens (classic) need the
      `read:ssh_signing_key` scope to use this endpoint.
    externalDocs: https://docs.github.com/rest/users/ssh-signing-keys#list-ssh-signing-keys-for-the-authenticated-user
    params:
      - paramName: perPage
        description: The number of results per page (max 100). For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: per_page
        in: query
        schema:
          type: number
          default: 30
        required: false
      - paramName: page
        description: The page number of the results to fetch. For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: page
        in: query
        schema:
          type: number
          default: 1
        required: false
  - moduleName: Users / Authenticated / Create SSH Signing Key
    method: post
    path: /user/ssh_signing_keys
    description: >-
      Creates an SSH signing key for the authenticated user's GitHub account.


      OAuth app tokens and personal access tokens (classic) need the
      `write:ssh_signing_key` scope to use this endpoint.
    externalDocs: https://docs.github.com/rest/users/ssh-signing-keys#create-a-ssh-signing-key-for-the-authenticated-user
    params:
      - paramName: title
        description: A descriptive name for the new key.
        paramKey: title
        in: body
        schema:
          type: string
        required: false
      - paramName: key
        description: The public SSH key to add to your GitHub account. For more
          information, see "[Checking for existing SSH
          keys](https://docs.github.com/authentication/connecting-to-github-with-ssh/checking-for-existing-ssh-keys)."
        paramKey: key
        in: body
        schema:
          type: string
        required: true
    requestBodyType: json
  - moduleName: Users / Authenticated / Get SSH Signing Key
    method: get
    path: /user/ssh_signing_keys/{ssh_signing_key_id}
    description: >-
      Gets extended details for an SSH signing key.


      OAuth app tokens and personal access tokens (classic) need the
      `read:ssh_signing_key` scope to use this endpoint.
    externalDocs: https://docs.github.com/rest/users/ssh-signing-keys#get-an-ssh-signing-key-for-the-authenticated-user
    params:
      - paramName: sshSigningKeyId
        description: The unique identifier of the SSH signing key.
        paramKey: ssh_signing_key_id
        in: path
        schema:
          type: number
        required: true
  - moduleName: Users / Authenticated / Delete SSH Signing Key
    method: delete
    path: /user/ssh_signing_keys/{ssh_signing_key_id}
    description: >-
      Deletes an SSH signing key from the authenticated user's GitHub account.


      OAuth app tokens and personal access tokens (classic) need the
      `admin:ssh_signing_key` scope to use this endpoint.
    externalDocs: https://docs.github.com/rest/users/ssh-signing-keys#delete-an-ssh-signing-key-for-the-authenticated-user
    params:
      - paramName: sshSigningKeyId
        description: The unique identifier of the SSH signing key.
        paramKey: ssh_signing_key_id
        in: path
        schema:
          type: number
        required: true
  - moduleName: Activity / Authenticated User / List Starred Repos
    method: get
    path: /user/starred
    description: >-
      Lists repositories the authenticated user has starred.


      This endpoint supports the following custom media types. For more
      information, see "[Media
      types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."


      - **`application/vnd.github.star+json`**: Includes a timestamp of when the
      star was created.
    externalDocs: https://docs.github.com/rest/activity/starring#list-repositories-starred-by-the-authenticated-user
    params:
      - paramName: sort
        description: The property to sort the results by. `created` means when the
          repository was starred. `updated` means when the repository was last
          pushed to.
        paramKey: sort
        in: query
        schema:
          type: string
          default: created
          enum:
            - created
            - updated
        required: false
      - paramName: direction
        description: The direction to sort the results by.
        paramKey: direction
        in: query
        schema:
          type: string
          default: desc
          enum:
            - asc
            - desc
        required: false
      - paramName: perPage
        description: The number of results per page (max 100). For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: per_page
        in: query
        schema:
          type: number
          default: 30
        required: false
      - paramName: page
        description: The page number of the results to fetch. For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: page
        in: query
        schema:
          type: number
          default: 1
        required: false
  - moduleName: Activity / Authenticated User / Check Starred Repo
    method: get
    path: /user/starred/{owner}/{repo}
    description: Whether the authenticated user has starred the repository.
    externalDocs: https://docs.github.com/rest/activity/starring#check-if-a-repository-is-starred-by-the-authenticated-user
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
  - moduleName: Activity / Authenticated User / Star Repo
    method: put
    path: /user/starred/{owner}/{repo}
    description: Note that you'll need to set `Content-Length` to zero when calling
      out to this endpoint. For more information, see "[HTTP
      method](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#http-method)."
    externalDocs: https://docs.github.com/rest/activity/starring#star-a-repository-for-the-authenticated-user
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
  - moduleName: Activity / Authenticated User / Unstar Repo
    method: delete
    path: /user/starred/{owner}/{repo}
    description: Unstar a repository that the authenticated user has previously starred.
    externalDocs: https://docs.github.com/rest/activity/starring#unstar-a-repository-for-the-authenticated-user
    params:
      - paramName: owner
        description: The account owner of the repository. The name is not case sensitive.
        paramKey: owner
        in: path
        schema:
          type: string
        required: true
      - paramName: repo
        description: The name of the repository without the `.git` extension. The name
          is not case sensitive.
        paramKey: repo
        in: path
        schema:
          type: string
        required: true
  - moduleName: Activity / Authenticated User / List Watched Repos
    method: get
    path: /user/subscriptions
    description: Lists repositories the authenticated user is watching.
    externalDocs: https://docs.github.com/rest/activity/watching#list-repositories-watched-by-the-authenticated-user
    params:
      - paramName: perPage
        description: The number of results per page (max 100). For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: per_page
        in: query
        schema:
          type: number
          default: 30
        required: false
      - paramName: page
        description: The page number of the results to fetch. For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: page
        in: query
        schema:
          type: number
          default: 1
        required: false
  - moduleName: Teams / Authenticated User / List
    method: get
    path: /user/teams
    description: >-
      List all of the teams across all of the organizations to which the
      authenticated

      user belongs.


      OAuth app tokens and personal access tokens (classic) need the `user`,
      `repo`, or `read:org` scope to use this endpoint.


      When using a fine-grained personal access token, the resource owner of the
      token must be a single organization, and the response will only include
      the teams from that organization.
    externalDocs: https://docs.github.com/rest/teams/teams#list-teams-for-the-authenticated-user
    params:
      - paramName: perPage
        description: The number of results per page (max 100). For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: per_page
        in: query
        schema:
          type: number
          default: 30
        required: false
      - paramName: page
        description: The page number of the results to fetch. For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: page
        in: query
        schema:
          type: number
          default: 1
        required: false
  - moduleName: Users / Get By ID
    method: get
    path: /user/{account_id}
    description: >-
      Provides publicly available information about someone with a GitHub
      account. This method takes their durable user `ID` instead of their
      `login`, which can change over time.


      The `email` key in the following response is the publicly visible email
      address from your GitHub [profile
      page](https://github.com/settings/profile). When setting up your profile,
      you can select a primary email address to be “public” which provides an
      email entry for this endpoint. If you do not set a public email address
      for `email`, then it will have a value of `null`. You only see publicly
      visible email addresses when authenticated with GitHub. For more
      information, see
      [Authentication](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#authentication).


      The Emails API enables you to list all of your email addresses, and toggle
      a primary email to be visible publicly. For more information, see "[Emails
      API](https://docs.github.com/rest/users/emails)".
    externalDocs: https://docs.github.com/rest/users/users#get-a-user-using-their-id
    params:
      - paramName: accountId
        description: account_id parameter
        paramKey: account_id
        in: path
        schema:
          type: number
        required: true
  - moduleName: Users / List
    method: get
    path: /users
    description: >-
      Lists all users, in the order that they signed up on GitHub. This list
      includes personal user accounts and organization accounts.


      Note: Pagination is powered exclusively by the `since` parameter. Use the
      [Link
      header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers)
      to get the URL for the next page of users.
    externalDocs: https://docs.github.com/rest/users/users#list-users
    params:
      - paramName: since
        description: A user ID. Only return users with an ID greater than this ID.
        paramKey: since
        in: query
        schema:
          type: number
        required: false
      - paramName: perPage
        description: The number of results per page (max 100). For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: per_page
        in: query
        schema:
          type: number
          default: 30
        required: false
  - moduleName: Users / Get By Username
    method: get
    path: /users/{username}
    description: >-
      Provides publicly available information about someone with a GitHub
      account.


      The `email` key in the following response is the publicly visible email
      address from your GitHub [profile
      page](https://github.com/settings/profile). When setting up your profile,
      you can select a primary email address to be “public” which provides an
      email entry for this endpoint. If you do not set a public email address
      for `email`, then it will have a value of `null`. You only see publicly
      visible email addresses when authenticated with GitHub. For more
      information, see
      [Authentication](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#authentication).


      The Emails API enables you to list all of your email addresses, and toggle
      a primary email to be visible publicly. For more information, see "[Emails
      API](https://docs.github.com/rest/users/emails)".
    externalDocs: https://docs.github.com/rest/users/users#get-a-user
    params:
      - paramName: username
        description: The handle for the GitHub user account.
        paramKey: username
        in: path
        schema:
          type: string
        required: true
  - moduleName: Users / Attestations / List
    method: get
    path: /users/{username}/attestations/{subject_digest}
    description: >-
      List a collection of artifact attestations with a given subject digest
      that are associated with repositories owned by a user.


      The collection of attestations returned by this endpoint is filtered
      according to the authenticated user's permissions; if the authenticated
      user cannot read a repository, the attestations associated with that
      repository will not be included in the response. In addition, when using a
      fine-grained access token the `attestations:read` permission is required.


      **Please note:** in order to offer meaningful security benefits, an
      attestation's signature and timestamps **must** be cryptographically
      verified, and the identity of the attestation signer **must** be
      validated. Attestations can be verified using the [GitHub CLI `attestation
      verify` command](https://cli.github.com/manual/gh_attestation_verify). For
      more information, see [our guide on how to use artifact attestations to
      establish a build's
      provenance](https://docs.github.com/actions/security-guides/using-artifact-attestations-to-establish-provenance-for-builds).
    externalDocs: https://docs.github.com/rest/users/attestations#list-attestations
    params:
      - paramName: perPage
        description: The number of results per page (max 100). For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: per_page
        in: query
        schema:
          type: number
          default: 30
        required: false
      - paramName: before
        description: A cursor, as given in the [Link
          header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers).
          If specified, the query only searches for results before this cursor.
          For more information, see "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: before
        in: query
        schema:
          type: string
        required: false
      - paramName: after
        description: A cursor, as given in the [Link
          header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers).
          If specified, the query only searches for results after this cursor.
          For more information, see "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: after
        in: query
        schema:
          type: string
        required: false
      - paramName: username
        description: The handle for the GitHub user account.
        paramKey: username
        in: path
        schema:
          type: string
        required: true
      - paramName: subjectDigest
        description: Subject Digest
        paramKey: subject_digest
        in: path
        schema:
          type: string
        required: true
  - moduleName: Packages / Docker / List Conflicts
    method: get
    path: /users/{username}/docker/conflicts
    description: >-
      Lists all packages that are in a specific user's namespace, that the
      requesting user has access to, and that encountered a conflict during
      Docker migration.


      OAuth app tokens and personal access tokens (classic) need the
      `read:packages` scope to use this endpoint.
    externalDocs: https://docs.github.com/rest/packages/packages#get-list-of-conflicting-packages-during-docker-migration-for-user
    params:
      - paramName: username
        description: The handle for the GitHub user account.
        paramKey: username
        in: path
        schema:
          type: string
        required: true
  - moduleName: Activity / Authenticated User / User Events / List
    method: get
    path: /users/{username}/events
    description: >-
      If you are authenticated as the given user, you will see your private
      events. Otherwise, you'll only see public events. _Optional_: use the
      fine-grained token with following permission set to view private events:
      "Events" user permissions (read).


      > [!NOTE]

      > This API is not built to serve real-time use cases. Depending on the
      time of day, event latency can be anywhere from 30s to 6h.
    externalDocs: https://docs.github.com/rest/activity/events#list-events-for-the-authenticated-user
    params:
      - paramName: username
        description: The handle for the GitHub user account.
        paramKey: username
        in: path
        schema:
          type: string
        required: true
      - paramName: perPage
        description: The number of results per page (max 100). For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: per_page
        in: query
        schema:
          type: number
          default: 30
        required: false
      - paramName: page
        description: The page number of the results to fetch. For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: page
        in: query
        schema:
          type: number
          default: 1
        required: false
  - moduleName: Activity / Authenticated User / Org Events / List
    method: get
    path: /users/{username}/events/orgs/{org}
    description: >-
      This is the user's organization dashboard. You must be authenticated as
      the user to view this.


      > [!NOTE]

      > This API is not built to serve real-time use cases. Depending on the
      time of day, event latency can be anywhere from 30s to 6h.
    externalDocs: https://docs.github.com/rest/activity/events#list-organization-events-for-the-authenticated-user
    params:
      - paramName: username
        description: The handle for the GitHub user account.
        paramKey: username
        in: path
        schema:
          type: string
        required: true
      - paramName: org
        description: The organization name. The name is not case sensitive.
        paramKey: org
        in: path
        schema:
          type: string
        required: true
      - paramName: perPage
        description: The number of results per page (max 100). For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: per_page
        in: query
        schema:
          type: number
          default: 30
        required: false
      - paramName: page
        description: The page number of the results to fetch. For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: page
        in: query
        schema:
          type: number
          default: 1
        required: false
  - moduleName: Activity / User / Public Events
    method: get
    path: /users/{username}/events/public
    description: >-
      > [!NOTE]

      > This API is not built to serve real-time use cases. Depending on the
      time of day, event latency can be anywhere from 30s to 6h.
    externalDocs: https://docs.github.com/rest/activity/events#list-public-events-for-a-user
    params:
      - paramName: username
        description: The handle for the GitHub user account.
        paramKey: username
        in: path
        schema:
          type: string
        required: true
      - paramName: perPage
        description: The number of results per page (max 100). For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: per_page
        in: query
        schema:
          type: number
          default: 30
        required: false
      - paramName: page
        description: The page number of the results to fetch. For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: page
        in: query
        schema:
          type: number
          default: 1
        required: false
  - moduleName: Users / User / List Followers
    method: get
    path: /users/{username}/followers
    description: Lists the people following the specified user.
    externalDocs: https://docs.github.com/rest/users/followers#list-followers-of-a-user
    params:
      - paramName: username
        description: The handle for the GitHub user account.
        paramKey: username
        in: path
        schema:
          type: string
        required: true
      - paramName: perPage
        description: The number of results per page (max 100). For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: per_page
        in: query
        schema:
          type: number
          default: 30
        required: false
      - paramName: page
        description: The page number of the results to fetch. For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: page
        in: query
        schema:
          type: number
          default: 1
        required: false
  - moduleName: Users / Following / List
    method: get
    path: /users/{username}/following
    description: Lists the people who the specified user follows.
    externalDocs: https://docs.github.com/rest/users/followers#list-the-people-a-user-follows
    params:
      - paramName: username
        description: The handle for the GitHub user account.
        paramKey: username
        in: path
        schema:
          type: string
        required: true
      - paramName: perPage
        description: The number of results per page (max 100). For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: per_page
        in: query
        schema:
          type: number
          default: 30
        required: false
      - paramName: page
        description: The page number of the results to fetch. For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: page
        in: query
        schema:
          type: number
          default: 1
        required: false
  - moduleName: Users / Following / Check Person
    method: get
    path: /users/{username}/following/{target_user}
    description: ""
    externalDocs: https://docs.github.com/rest/users/followers#check-if-a-user-follows-another-user
    params:
      - paramName: username
        description: The handle for the GitHub user account.
        paramKey: username
        in: path
        schema:
          type: string
        required: true
      - paramName: targetUser
        description: ""
        paramKey: target_user
        in: path
        schema:
          type: string
        required: true
  - moduleName: Gists / For User / List
    method: get
    path: /users/{username}/gists
    description: "Lists public gists for the specified user:"
    externalDocs: https://docs.github.com/rest/gists/gists#list-gists-for-a-user
    params:
      - paramName: username
        description: The handle for the GitHub user account.
        paramKey: username
        in: path
        schema:
          type: string
        required: true
      - paramName: since
        description: "Only show results that were last updated after the given time.
          This is a timestamp in [ISO
          8601](https://en.wikipedia.org/wiki/ISO_8601) format:
          `YYYY-MM-DDTHH:MM:SSZ`."
        paramKey: since
        in: query
        schema:
          type: string
        required: false
      - paramName: perPage
        description: The number of results per page (max 100). For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: per_page
        in: query
        schema:
          type: number
          default: 30
        required: false
      - paramName: page
        description: The page number of the results to fetch. For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: page
        in: query
        schema:
          type: number
          default: 1
        required: false
  - moduleName: Users / GPG Keys / List
    method: get
    path: /users/{username}/gpg_keys
    description: Lists the GPG keys for a user. This information is accessible by anyone.
    externalDocs: https://docs.github.com/rest/users/gpg-keys#list-gpg-keys-for-a-user
    params:
      - paramName: username
        description: The handle for the GitHub user account.
        paramKey: username
        in: path
        schema:
          type: string
        required: true
      - paramName: perPage
        description: The number of results per page (max 100). For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: per_page
        in: query
        schema:
          type: number
          default: 30
        required: false
      - paramName: page
        description: The page number of the results to fetch. For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: page
        in: query
        schema:
          type: number
          default: 1
        required: false
  - moduleName: Users / Hovercard / Get Context
    method: get
    path: /users/{username}/hovercard
    description: >-
      Provides hovercard information. You can find out more about someone in
      relation to their pull requests, issues, repositories, and organizations.

        The `subject_type` and `subject_id` parameters provide context for the person's hovercard, which returns more information than without the parameters. For example, if you wanted to find out more about `octocat` who owns the `Spoon-Knife` repository, you would use a `subject_type` value of `repository` and a `subject_id` value of `1300192` (the ID of the `Spoon-Knife` repository).

      OAuth app tokens and personal access tokens (classic) need the `repo`
      scope to use this endpoint.
    externalDocs: https://docs.github.com/rest/users/users#get-contextual-information-for-a-user
    params:
      - paramName: username
        description: The handle for the GitHub user account.
        paramKey: username
        in: path
        schema:
          type: string
        required: true
      - paramName: subjectType
        description: Identifies which additional information you'd like to receive about
          the person's hovercard. Can be `organization`, `repository`, `issue`,
          `pull_request`. **Required** when using `subject_id`.
        paramKey: subject_type
        in: query
        schema:
          type: string
          enum:
            - organization
            - repository
            - issue
            - pull_request
        required: false
      - paramName: subjectId
        description: Uses the ID for the `subject_type` you specified. **Required** when
          using `subject_type`.
        paramKey: subject_id
        in: query
        schema:
          type: string
        required: false
  - moduleName: Users / Public Keys / List
    method: get
    path: /users/{username}/keys
    description: Lists the _verified_ public SSH keys for a user. This is accessible
      by anyone.
    externalDocs: https://docs.github.com/rest/users/keys#list-public-keys-for-a-user
    params:
      - paramName: username
        description: The handle for the GitHub user account.
        paramKey: username
        in: path
        schema:
          type: string
        required: true
      - paramName: perPage
        description: The number of results per page (max 100). For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: per_page
        in: query
        schema:
          type: number
          default: 30
        required: false
      - paramName: page
        description: The page number of the results to fetch. For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: page
        in: query
        schema:
          type: number
          default: 1
        required: false
  - moduleName: Orgs / User / List
    method: get
    path: /users/{username}/orgs
    description: >-
      List [public organization
      memberships](https://docs.github.com/articles/publicizing-or-concealing-organization-membership)
      for the specified user.


      This method only lists _public_ memberships, regardless of authentication.
      If you need to fetch all of the organization memberships (public and
      private) for the authenticated user, use the [List organizations for the
      authenticated
      user](https://docs.github.com/rest/orgs/orgs#list-organizations-for-the-authenticated-user)
      API instead.
    externalDocs: https://docs.github.com/rest/orgs/orgs#list-organizations-for-a-user
    params:
      - paramName: username
        description: The handle for the GitHub user account.
        paramKey: username
        in: path
        schema:
          type: string
        required: true
      - paramName: perPage
        description: The number of results per page (max 100). For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: per_page
        in: query
        schema:
          type: number
          default: 30
        required: false
      - paramName: page
        description: The page number of the results to fetch. For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: page
        in: query
        schema:
          type: number
          default: 1
        required: false
  - moduleName: Packages / User / List Packages
    method: get
    path: /users/{username}/packages
    description: >-
      Lists all packages in a user's namespace for which the requesting user has
      access.


      OAuth app tokens and personal access tokens (classic) need the
      `read:packages` scope to use this endpoint. For more information, see
      "[About permissions for GitHub
      Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
    externalDocs: https://docs.github.com/rest/packages/packages#list-packages-for-a-user
    params:
      - paramName: packageType
        description: The type of supported package. Packages in GitHub's Gradle registry
          have the type `maven`. Docker images pushed to GitHub's Container
          registry (`ghcr.io`) have the type `container`. You can use the type
          `docker` to find images that were pushed to GitHub's Docker registry
          (`docker.pkg.github.com`), even if these have now been migrated to the
          Container registry.
        paramKey: package_type
        in: query
        schema:
          type: string
          enum:
            - npm
            - maven
            - rubygems
            - docker
            - nuget
            - container
        required: true
      - paramName: visibility
        description: >-
          The selected visibility of the packages.  This parameter is optional
          and only filters an existing result set.


          The `internal` visibility is only supported for GitHub Packages
          registries that allow for granular permissions. For other ecosystems
          `internal` is synonymous with `private`.

          For the list of GitHub Packages registries that support granular
          permissions, see "[About permissions for GitHub
          Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages)."
        paramKey: visibility
        in: query
        schema:
          type: string
          enum:
            - public
            - private
            - internal
        required: false
      - paramName: username
        description: The handle for the GitHub user account.
        paramKey: username
        in: path
        schema:
          type: string
        required: true
      - paramName: page
        description: The page number of the results to fetch. For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: page
        in: query
        schema:
          type: number
          default: 1
        required: false
      - paramName: perPage
        description: The number of results per page (max 100). For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: per_page
        in: query
        schema:
          type: number
          default: 30
        required: false
  - moduleName: Packages / User / Get Package
    method: get
    path: /users/{username}/packages/{package_type}/{package_name}
    description: >-
      Gets a specific package metadata for a public package owned by a user.


      OAuth app tokens and personal access tokens (classic) need the
      `read:packages` scope to use this endpoint. For more information, see
      "[About permissions for GitHub
      Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
    externalDocs: https://docs.github.com/rest/packages/packages#get-a-package-for-a-user
    params:
      - paramName: packageType
        description: The type of supported package. Packages in GitHub's Gradle registry
          have the type `maven`. Docker images pushed to GitHub's Container
          registry (`ghcr.io`) have the type `container`. You can use the type
          `docker` to find images that were pushed to GitHub's Docker registry
          (`docker.pkg.github.com`), even if these have now been migrated to the
          Container registry.
        paramKey: package_type
        in: path
        schema:
          type: string
          enum:
            - npm
            - maven
            - rubygems
            - docker
            - nuget
            - container
        required: true
      - paramName: packageName
        description: The name of the package.
        paramKey: package_name
        in: path
        schema:
          type: string
        required: true
      - paramName: username
        description: The handle for the GitHub user account.
        paramKey: username
        in: path
        schema:
          type: string
        required: true
  - moduleName: Packages / User / Delete Package
    method: delete
    path: /users/{username}/packages/{package_type}/{package_name}
    description: >-
      Deletes an entire package for a user. You cannot delete a public package
      if any version of the package has more than 5,000 downloads. In this
      scenario, contact GitHub support for further assistance.


      If the `package_type` belongs to a GitHub Packages registry that supports
      granular permissions, the authenticated user must have admin permissions
      to the package. For the list of these registries, see "[About permissions
      for GitHub
      Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages)."


      OAuth app tokens and personal access tokens (classic) need the
      `read:packages` and `delete:packages` scopes to use this endpoint. For
      more information, see "[About permissions for GitHub
      Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
    externalDocs: https://docs.github.com/rest/packages/packages#delete-a-package-for-a-user
    params:
      - paramName: packageType
        description: The type of supported package. Packages in GitHub's Gradle registry
          have the type `maven`. Docker images pushed to GitHub's Container
          registry (`ghcr.io`) have the type `container`. You can use the type
          `docker` to find images that were pushed to GitHub's Docker registry
          (`docker.pkg.github.com`), even if these have now been migrated to the
          Container registry.
        paramKey: package_type
        in: path
        schema:
          type: string
          enum:
            - npm
            - maven
            - rubygems
            - docker
            - nuget
            - container
        required: true
      - paramName: packageName
        description: The name of the package.
        paramKey: package_name
        in: path
        schema:
          type: string
        required: true
      - paramName: username
        description: The handle for the GitHub user account.
        paramKey: username
        in: path
        schema:
          type: string
        required: true
  - moduleName: Packages / User / Restore Package
    method: post
    path: /users/{username}/packages/{package_type}/{package_name}/restore
    description: >-
      Restores an entire package for a user.


      You can restore a deleted package under the following conditions:
        - The package was deleted within the last 30 days.
        - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package's namespace first.

      If the `package_type` belongs to a GitHub Packages registry that supports
      granular permissions, the authenticated user must have admin permissions
      to the package. For the list of these registries, see "[About permissions
      for GitHub
      Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages)."


      OAuth app tokens and personal access tokens (classic) need the
      `read:packages` and `write:packages` scopes to use this endpoint. For more
      information, see "[About permissions for GitHub
      Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
    externalDocs: https://docs.github.com/rest/packages/packages#restore-a-package-for-a-user
    params:
      - paramName: packageType
        description: The type of supported package. Packages in GitHub's Gradle registry
          have the type `maven`. Docker images pushed to GitHub's Container
          registry (`ghcr.io`) have the type `container`. You can use the type
          `docker` to find images that were pushed to GitHub's Docker registry
          (`docker.pkg.github.com`), even if these have now been migrated to the
          Container registry.
        paramKey: package_type
        in: path
        schema:
          type: string
          enum:
            - npm
            - maven
            - rubygems
            - docker
            - nuget
            - container
        required: true
      - paramName: packageName
        description: The name of the package.
        paramKey: package_name
        in: path
        schema:
          type: string
        required: true
      - paramName: username
        description: The handle for the GitHub user account.
        paramKey: username
        in: path
        schema:
          type: string
        required: true
      - paramName: token
        description: package token
        paramKey: token
        in: query
        schema:
          type: string
        required: false
  - moduleName: Packages / User / Get Package Versions
    method: get
    path: /users/{username}/packages/{package_type}/{package_name}/versions
    description: >-
      Lists package versions for a public package owned by a specified user.


      OAuth app tokens and personal access tokens (classic) need the
      `read:packages` scope to use this endpoint. For more information, see
      "[About permissions for GitHub
      Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
    externalDocs: https://docs.github.com/rest/packages/packages#list-package-versions-for-a-package-owned-by-a-user
    params:
      - paramName: packageType
        description: The type of supported package. Packages in GitHub's Gradle registry
          have the type `maven`. Docker images pushed to GitHub's Container
          registry (`ghcr.io`) have the type `container`. You can use the type
          `docker` to find images that were pushed to GitHub's Docker registry
          (`docker.pkg.github.com`), even if these have now been migrated to the
          Container registry.
        paramKey: package_type
        in: path
        schema:
          type: string
          enum:
            - npm
            - maven
            - rubygems
            - docker
            - nuget
            - container
        required: true
      - paramName: packageName
        description: The name of the package.
        paramKey: package_name
        in: path
        schema:
          type: string
        required: true
      - paramName: username
        description: The handle for the GitHub user account.
        paramKey: username
        in: path
        schema:
          type: string
        required: true
  - moduleName: Packages / User / Get Package Version
    method: get
    path: /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}
    description: >-
      Gets a specific package version for a public package owned by a specified
      user.


      OAuth app tokens and personal access tokens (classic) need the
      `read:packages` scope to use this endpoint. For more information, see
      "[About permissions for GitHub
      Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
    externalDocs: https://docs.github.com/rest/packages/packages#get-a-package-version-for-a-user
    params:
      - paramName: packageType
        description: The type of supported package. Packages in GitHub's Gradle registry
          have the type `maven`. Docker images pushed to GitHub's Container
          registry (`ghcr.io`) have the type `container`. You can use the type
          `docker` to find images that were pushed to GitHub's Docker registry
          (`docker.pkg.github.com`), even if these have now been migrated to the
          Container registry.
        paramKey: package_type
        in: path
        schema:
          type: string
          enum:
            - npm
            - maven
            - rubygems
            - docker
            - nuget
            - container
        required: true
      - paramName: packageName
        description: The name of the package.
        paramKey: package_name
        in: path
        schema:
          type: string
        required: true
      - paramName: packageVersionId
        description: Unique identifier of the package version.
        paramKey: package_version_id
        in: path
        schema:
          type: number
        required: true
      - paramName: username
        description: The handle for the GitHub user account.
        paramKey: username
        in: path
        schema:
          type: string
        required: true
  - moduleName: Packages / User / Delete Package Version
    method: delete
    path: /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}
    description: >-
      Deletes a specific package version for a user. If the package is public
      and the package version has more than 5,000 downloads, you cannot delete
      the package version. In this scenario, contact GitHub support for further
      assistance.


      If the `package_type` belongs to a GitHub Packages registry that supports
      granular permissions, the authenticated user must have admin permissions
      to the package. For the list of these registries, see "[About permissions
      for GitHub
      Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages)."


      OAuth app tokens and personal access tokens (classic) need the
      `read:packages` and `delete:packages` scopes to use this endpoint. For
      more information, see "[About permissions for GitHub
      Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
    externalDocs: https://docs.github.com/rest/packages/packages#delete-package-version-for-a-user
    params:
      - paramName: packageType
        description: The type of supported package. Packages in GitHub's Gradle registry
          have the type `maven`. Docker images pushed to GitHub's Container
          registry (`ghcr.io`) have the type `container`. You can use the type
          `docker` to find images that were pushed to GitHub's Docker registry
          (`docker.pkg.github.com`), even if these have now been migrated to the
          Container registry.
        paramKey: package_type
        in: path
        schema:
          type: string
          enum:
            - npm
            - maven
            - rubygems
            - docker
            - nuget
            - container
        required: true
      - paramName: packageName
        description: The name of the package.
        paramKey: package_name
        in: path
        schema:
          type: string
        required: true
      - paramName: username
        description: The handle for the GitHub user account.
        paramKey: username
        in: path
        schema:
          type: string
        required: true
      - paramName: packageVersionId
        description: Unique identifier of the package version.
        paramKey: package_version_id
        in: path
        schema:
          type: number
        required: true
  - moduleName: Packages / User / Restore Package Version
    method: post
    path: /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore
    description: >-
      Restores a specific package version for a user.


      You can restore a deleted package under the following conditions:
        - The package was deleted within the last 30 days.
        - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package's namespace first.

      If the `package_type` belongs to a GitHub Packages registry that supports
      granular permissions, the authenticated user must have admin permissions
      to the package. For the list of these registries, see "[About permissions
      for GitHub
      Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages)."


      OAuth app tokens and personal access tokens (classic) need the
      `read:packages` and `write:packages` scopes to use this endpoint. For more
      information, see "[About permissions for GitHub
      Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
    externalDocs: https://docs.github.com/rest/packages/packages#restore-package-version-for-a-user
    params:
      - paramName: packageType
        description: The type of supported package. Packages in GitHub's Gradle registry
          have the type `maven`. Docker images pushed to GitHub's Container
          registry (`ghcr.io`) have the type `container`. You can use the type
          `docker` to find images that were pushed to GitHub's Docker registry
          (`docker.pkg.github.com`), even if these have now been migrated to the
          Container registry.
        paramKey: package_type
        in: path
        schema:
          type: string
          enum:
            - npm
            - maven
            - rubygems
            - docker
            - nuget
            - container
        required: true
      - paramName: packageName
        description: The name of the package.
        paramKey: package_name
        in: path
        schema:
          type: string
        required: true
      - paramName: username
        description: The handle for the GitHub user account.
        paramKey: username
        in: path
        schema:
          type: string
        required: true
      - paramName: packageVersionId
        description: Unique identifier of the package version.
        paramKey: package_version_id
        in: path
        schema:
          type: number
        required: true
  - moduleName: User / Projects / List
    method: get
    path: /users/{username}/projects
    description: Lists projects for a user.
    externalDocs: https://docs.github.com/rest/projects/projects#list-user-projects
    params:
      - paramName: username
        description: The handle for the GitHub user account.
        paramKey: username
        in: path
        schema:
          type: string
        required: true
      - paramName: state
        description: Indicates the state of the projects to return.
        paramKey: state
        in: query
        schema:
          type: string
          default: open
          enum:
            - open
            - closed
            - all
        required: false
      - paramName: perPage
        description: The number of results per page (max 100). For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: per_page
        in: query
        schema:
          type: number
          default: 30
        required: false
      - paramName: page
        description: The page number of the results to fetch. For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: page
        in: query
        schema:
          type: number
          default: 1
        required: false
  - moduleName: Activity / User / Received Events
    method: get
    path: /users/{username}/received_events
    description: >-
      These are events that you've received by watching repositories and
      following users. If you are authenticated as the

      given user, you will see private events. Otherwise, you'll only see public
      events.


      > [!NOTE]

      > This API is not built to serve real-time use cases. Depending on the
      time of day, event latency can be anywhere from 30s to 6h.
    externalDocs: https://docs.github.com/rest/activity/events#list-events-received-by-the-authenticated-user
    params:
      - paramName: username
        description: The handle for the GitHub user account.
        paramKey: username
        in: path
        schema:
          type: string
        required: true
      - paramName: perPage
        description: The number of results per page (max 100). For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: per_page
        in: query
        schema:
          type: number
          default: 30
        required: false
      - paramName: page
        description: The page number of the results to fetch. For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: page
        in: query
        schema:
          type: number
          default: 1
        required: false
  - moduleName: Activity / User / Public Received Events
    method: get
    path: /users/{username}/received_events/public
    description: >-
      > [!NOTE]

      > This API is not built to serve real-time use cases. Depending on the
      time of day, event latency can be anywhere from 30s to 6h.
    externalDocs: https://docs.github.com/rest/activity/events#list-public-events-received-by-a-user
    params:
      - paramName: username
        description: The handle for the GitHub user account.
        paramKey: username
        in: path
        schema:
          type: string
        required: true
      - paramName: perPage
        description: The number of results per page (max 100). For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: per_page
        in: query
        schema:
          type: number
          default: 30
        required: false
      - paramName: page
        description: The page number of the results to fetch. For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: page
        in: query
        schema:
          type: number
          default: 1
        required: false
  - moduleName: Repos / User / List
    method: get
    path: /users/{username}/repos
    description: Lists public repositories for the specified user.
    externalDocs: https://docs.github.com/rest/repos/repos#list-repositories-for-a-user
    params:
      - paramName: username
        description: The handle for the GitHub user account.
        paramKey: username
        in: path
        schema:
          type: string
        required: true
      - paramName: type
        description: Limit results to repositories of the specified type.
        paramKey: type
        in: query
        schema:
          type: string
          default: owner
          enum:
            - all
            - owner
            - member
        required: false
      - paramName: sort
        description: The property to sort the results by.
        paramKey: sort
        in: query
        schema:
          type: string
          default: full_name
          enum:
            - created
            - updated
            - pushed
            - full_name
        required: false
      - paramName: direction
        description: "The order to sort by. Default: `asc` when using `full_name`,
          otherwise `desc`."
        paramKey: direction
        in: query
        schema:
          type: string
          enum:
            - asc
            - desc
        required: false
      - paramName: perPage
        description: The number of results per page (max 100). For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: per_page
        in: query
        schema:
          type: number
          default: 30
        required: false
      - paramName: page
        description: The page number of the results to fetch. For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: page
        in: query
        schema:
          type: number
          default: 1
        required: false
  - moduleName: Users / Social Accounts / List
    method: get
    path: /users/{username}/social_accounts
    description: Lists social media accounts for a user. This endpoint is accessible
      by anyone.
    externalDocs: https://docs.github.com/rest/users/social-accounts#list-social-accounts-for-a-user
    params:
      - paramName: username
        description: The handle for the GitHub user account.
        paramKey: username
        in: path
        schema:
          type: string
        required: true
      - paramName: perPage
        description: The number of results per page (max 100). For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: per_page
        in: query
        schema:
          type: number
          default: 30
        required: false
      - paramName: page
        description: The page number of the results to fetch. For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: page
        in: query
        schema:
          type: number
          default: 1
        required: false
  - moduleName: Users / SSH Signing Keys / List
    method: get
    path: /users/{username}/ssh_signing_keys
    description: Lists the SSH signing keys for a user. This operation is accessible
      by anyone.
    externalDocs: https://docs.github.com/rest/users/ssh-signing-keys#list-ssh-signing-keys-for-a-user
    params:
      - paramName: username
        description: The handle for the GitHub user account.
        paramKey: username
        in: path
        schema:
          type: string
        required: true
      - paramName: perPage
        description: The number of results per page (max 100). For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: per_page
        in: query
        schema:
          type: number
          default: 30
        required: false
      - paramName: page
        description: The page number of the results to fetch. For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: page
        in: query
        schema:
          type: number
          default: 1
        required: false
  - moduleName: Activity / User / List Starred Repos
    method: get
    path: /users/{username}/starred
    description: >-
      Lists repositories a user has starred.


      This endpoint supports the following custom media types. For more
      information, see "[Media
      types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."


      - **`application/vnd.github.star+json`**: Includes a timestamp of when the
      star was created.
    externalDocs: https://docs.github.com/rest/activity/starring#list-repositories-starred-by-a-user
    params:
      - paramName: username
        description: The handle for the GitHub user account.
        paramKey: username
        in: path
        schema:
          type: string
        required: true
      - paramName: sort
        description: The property to sort the results by. `created` means when the
          repository was starred. `updated` means when the repository was last
          pushed to.
        paramKey: sort
        in: query
        schema:
          type: string
          default: created
          enum:
            - created
            - updated
        required: false
      - paramName: direction
        description: The direction to sort the results by.
        paramKey: direction
        in: query
        schema:
          type: string
          default: desc
          enum:
            - asc
            - desc
        required: false
      - paramName: perPage
        description: The number of results per page (max 100). For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: per_page
        in: query
        schema:
          type: number
          default: 30
        required: false
      - paramName: page
        description: The page number of the results to fetch. For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: page
        in: query
        schema:
          type: number
          default: 1
        required: false
  - moduleName: Activity / User / List Watched Repos
    method: get
    path: /users/{username}/subscriptions
    description: Lists repositories a user is watching.
    externalDocs: https://docs.github.com/rest/activity/watching#list-repositories-watched-by-a-user
    params:
      - paramName: username
        description: The handle for the GitHub user account.
        paramKey: username
        in: path
        schema:
          type: string
        required: true
      - paramName: perPage
        description: The number of results per page (max 100). For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: per_page
        in: query
        schema:
          type: number
          default: 30
        required: false
      - paramName: page
        description: The page number of the results to fetch. For more information, see
          "[Using pagination in the REST
          API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        paramKey: page
        in: query
        schema:
          type: number
          default: 1
        required: false
  - moduleName: Meta / Versions / Get All
    method: get
    path: /versions
    description: Get all supported GitHub API versions.
    externalDocs: https://docs.github.com/rest/meta/meta#get-all-api-versions
    params: []
  - moduleName: Meta / Zen / Get
    method: get
    path: /zen
    description: Get a random sentence from the Zen of GitHub
    externalDocs: https://docs.github.com/rest/meta/meta#get-the-zen-of-github
    params: []
