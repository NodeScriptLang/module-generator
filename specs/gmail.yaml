id: gmail
displayName: Gmail
workspaceId:
  development: "Zjaq0nUZuEpY6jDe"
  production: "vp247gvVCkiPnNZH"
baseUrl: https://gmail.googleapis.com
description: The Gmail API lets you view and manage Gmail mailbox data like threads, messages, and labels.
commonParams:
  - paramName: accessToken
    paramKey: Authorization
    prefix: Bearer
    in: header
    description: OAuth 2 access token. Most APIs require `https://mail.google.com/` scope. Google Auth / Service Account Token can be used to obtain a valid access token.
    required: false
    advanced: false
  - paramName: apiKey
    paramKey: key
    in: query
    description: API key can be generated in Google Developer Console in APIs & Services section. Leave blank if OAuth access token is used.
    required: false
modules:
  - moduleName: Users / Drafts / List
    method: get
    path: /gmail/v1/users/{userId}/drafts
    description: Lists the drafts in the user's mailbox.
    externalDocs: "https://developers.google.com/gmail/api/reference/rest"
    params:
      - paramName: userId
        description: The user's email address. The special value `me` can be used to
          indicate the authenticated user.
        paramKey: userId
        in: path
        schema:
          type: string
        required: true
      - paramName: includeSpamTrash
        description: Include drafts from `SPAM` and `TRASH` in the results.
        paramKey: includeSpamTrash
        in: query
        schema:
          type: boolean
        required: false
      - paramName: maxResults
        description: Maximum number of drafts to return. This field defaults to 100. The
          maximum allowed value for this field is 500.
        paramKey: maxResults
        in: query
        schema:
          type: number
        required: false
      - paramName: pageToken
        description: Page token to retrieve a specific page of results in the list.
        paramKey: pageToken
        in: query
        schema:
          type: string
        required: false
      - paramName: q
        description: 'Only return draft messages matching the specified query. Supports
          the same query format as the Gmail search box. For example,
          `"from:someuser@example.com rfc822msgid: is:unread"`.'
        paramKey: q
        in: query
        schema:
          type: string
        required: false
  - moduleName: Users / Drafts / Delete
    method: delete
    path: /gmail/v1/users/{userId}/drafts/{id}
    description: Immediately and permanently deletes the specified draft. Does not
      simply trash it.
    externalDocs: "https://developers.google.com/gmail/api/reference/rest"
    params:
      - paramName: userId
        description: The user's email address. The special value `me` can be used to
          indicate the authenticated user.
        paramKey: userId
        in: path
        schema:
          type: string
        required: true
      - paramName: id
        description: The ID of the draft to delete.
        paramKey: id
        in: path
        schema:
          type: string
        required: true
  - moduleName: Users / Drafts / Get
    method: get
    path: /gmail/v1/users/{userId}/drafts/{id}
    description: Gets the specified draft.
    externalDocs: "https://developers.google.com/gmail/api/reference/rest"
    params:
      - paramName: userId
        description: The user's email address. The special value `me` can be used to
          indicate the authenticated user.
        paramKey: userId
        in: path
        schema:
          type: string
        required: true
      - paramName: id
        description: The ID of the draft to retrieve.
        paramKey: id
        in: path
        schema:
          type: string
        required: true
      - paramName: format
        description: The format to return the draft in.
        paramKey: format
        in: query
        schema:
          type: string
          enum:
            - minimal
            - full
            - raw
            - metadata
        required: false
  - moduleName: Users / Drafts / Create
    method: post
    path: /gmail/v1/users/{userId}/drafts
    description: Drafts an email
    externalDocs: "https://developers.google.com/gmail/api/reference/rest"
    params: 
      - paramName: userId
        description: The user's email address. The special value `me` can be used to
          indicate the authenticated user.
        paramKey: userId
        in: path
        schema:
          type: string
        required: true
      - paramName: message
        description: message object that can take a key of 'raw' for email base64-encoded string. Must comply with RFC2822 format.
        paramKey: message
        in: body
        schema:
          type: object
        required: true
    requestBodyType: json
  - moduleName: Users / Drafts / Send
    method: post
    path: /gmail/v1/users/{userId}/drafts/send
    description: Sends a draft email
    externalDocs: "https://developers.google.com/gmail/api/reference/rest"
    params: 
      - paramName: userId
        description: The user's email address. The special value `me` can be used to
          indicate the authenticated user.
        paramKey: userId
        in: path
        schema:
          type: string
        required: true
      - paramName: draftId
        description: The id of the draft email
        paramKey: id
        in: body
        schema:
          type: string
        required: true
    requestBodyType: json
  - moduleName: Users / History / List
    method: get
    path: /gmail/v1/users/{userId}/history
    description: Lists the history of all changes to the given mailbox. History
      results are returned in chronological order (increasing `historyId`).
    externalDocs: "https://developers.google.com/gmail/api/reference/rest"
    params:
      - paramName: userId
        description: The user's email address. The special value `me` can be used to
          indicate the authenticated user.
        paramKey: userId
        in: path
        schema:
          type: string
        required: true
      - paramName: historyTypes
        description: History types to be returned by the function
        paramKey: historyTypes
        in: query
        schema:
          type: array
          items:
            type: any
        required: false
        style: form
        explode: true
      - paramName: labelId
        description: Only return messages with a label matching the ID.
        paramKey: labelId
        in: query
        schema:
          type: string
        required: false
      - paramName: maxResults
        description: Maximum number of history records to return. This field defaults to
          100. The maximum allowed value for this field is 500.
        paramKey: maxResults
        in: query
        schema:
          type: number
        required: false
      - paramName: pageToken
        description: Page token to retrieve a specific page of results in the list.
        paramKey: pageToken
        in: query
        schema:
          type: string
        required: false
      - paramName: startHistoryId
        description: Required. Returns history records after the specified
          `startHistoryId`. The supplied `startHistoryId` should be obtained
          from the `historyId` of a message, thread, or previous `list`
          response. History IDs increase chronologically but are not contiguous
          with random gaps in between valid IDs. Supplying an invalid or out of
          date `startHistoryId` typically returns an `HTTP 404` error code. A
          `historyId` is typically valid for at least a week, but in some rare
          circumstances may be valid for only a few hours. If you receive an
          `HTTP 404` error response, your application should perform a full
          sync. If you receive no `nextPageToken` in the response, there are no
          updates to retrieve and you can store the returned `historyId` for a
          future request.
        paramKey: startHistoryId
        in: query
        schema:
          type: string
        required: false
  - moduleName: Users / Labels / List
    method: get
    path: /gmail/v1/users/{userId}/labels
    description: Lists all labels in the user's mailbox.
    externalDocs: "https://developers.google.com/gmail/api/reference/rest"
    params:
      - paramName: userId
        description: The user's email address. The special value `me` can be used to
          indicate the authenticated user.
        paramKey: userId
        in: path
        schema:
          type: string
        required: true
  - moduleName: Users / Labels / Create
    method: post
    path: /gmail/v1/users/{userId}/labels
    description: Creates a new label.
    externalDocs: "https://developers.google.com/gmail/api/reference/rest"
    params:
      - paramName: userId
        description: The user's email address. The special value `me` can be used to
          indicate the authenticated user.
        paramKey: userId
        in: path
        schema:
          type: string
        required: true
      - paramName: color
        description: ""
        paramKey: color
        in: body
        schema:
          type: any
        required: false
      - paramName: id
        description: The immutable ID of the label.
        paramKey: id
        in: body
        schema:
          type: string
        required: false
      - paramName: labelListVisibility
        description: The visibility of the label in the label list in the Gmail web
          interface.
        paramKey: labelListVisibility
        in: body
        schema:
          type: string
          enum:
            - labelShow
            - labelShowIfUnread
            - labelHide
        required: false
      - paramName: messageListVisibility
        description: The visibility of messages with this label in the message list in
          the Gmail web interface.
        paramKey: messageListVisibility
        in: body
        schema:
          type: string
          enum:
            - show
            - hide
        required: false
      - paramName: messagesTotal
        description: The total number of messages with the label.
        paramKey: messagesTotal
        in: body
        schema:
          type: number
        required: false
      - paramName: messagesUnread
        description: The number of unread messages with the label.
        paramKey: messagesUnread
        in: body
        schema:
          type: number
        required: false
      - paramName: name
        description: The display name of the label.
        paramKey: name
        in: body
        schema:
          type: string
        required: false
      - paramName: threadsTotal
        description: The total number of threads with the label.
        paramKey: threadsTotal
        in: body
        schema:
          type: number
        required: false
      - paramName: threadsUnread
        description: The number of unread threads with the label.
        paramKey: threadsUnread
        in: body
        schema:
          type: number
        required: false
      - paramName: type
        description: The owner type for the label. User labels are created by the user
          and can be modified and deleted by the user and can be applied to any
          message or thread. System labels are internally created and cannot be
          added, modified, or deleted. System labels may be able to be applied
          to or removed from messages and threads under some circumstances but
          this is not guaranteed. For example, users can apply and remove the
          `INBOX` and `UNREAD` labels from messages and threads, but cannot
          apply or remove the `DRAFTS` or `SENT` labels from messages or
          threads.
        paramKey: type
        in: body
        schema:
          type: string
          enum:
            - system
            - user
        required: false
    requestBodyType: json
  - moduleName: Users / Labels / Delete
    method: delete
    path: /gmail/v1/users/{userId}/labels/{id}
    description: Immediately and permanently deletes the specified label and removes
      it from any messages and threads that it is applied to.
    externalDocs: "https://developers.google.com/gmail/api/reference/rest"
    params:
      - paramName: userId
        description: The user's email address. The special value `me` can be used to
          indicate the authenticated user.
        paramKey: userId
        in: path
        schema:
          type: string
        required: true
      - paramName: id
        description: The ID of the label to delete.
        paramKey: id
        in: path
        schema:
          type: string
        required: true
  - moduleName: Users / Labels / Get
    method: get
    path: /gmail/v1/users/{userId}/labels/{id}
    description: Gets the specified label.
    externalDocs: "https://developers.google.com/gmail/api/reference/rest"
    params:
      - paramName: userId
        description: The user's email address. The special value `me` can be used to
          indicate the authenticated user.
        paramKey: userId
        in: path
        schema:
          type: string
        required: true
      - paramName: id
        description: The ID of the label to retrieve.
        paramKey: id
        in: path
        schema:
          type: string
        required: true
  - moduleName: Users / Labels / Patch
    method: patch
    path: /gmail/v1/users/{userId}/labels/{id}
    description: Patch the specified label.
    externalDocs: "https://developers.google.com/gmail/api/reference/rest"
    params:
      - paramName: userId
        description: The user's email address. The special value `me` can be used to
          indicate the authenticated user.
        paramKey: userId
        in: path
        schema:
          type: string
        required: true
      - paramName: id
        description: The ID of the label to update.
        paramKey: id
        in: path
        schema:
          type: string
        required: true
      - paramName: color
        description: ""
        paramKey: color
        in: body
        schema:
          type: any
        required: false
      - paramName: id
        description: The immutable ID of the label.
        paramKey: id
        in: body
        schema:
          type: string
        required: false
      - paramName: labelListVisibility
        description: The visibility of the label in the label list in the Gmail web
          interface.
        paramKey: labelListVisibility
        in: body
        schema:
          type: string
          enum:
            - labelShow
            - labelShowIfUnread
            - labelHide
        required: false
      - paramName: messageListVisibility
        description: The visibility of messages with this label in the message list in
          the Gmail web interface.
        paramKey: messageListVisibility
        in: body
        schema:
          type: string
          enum:
            - show
            - hide
        required: false
      - paramName: messagesTotal
        description: The total number of messages with the label.
        paramKey: messagesTotal
        in: body
        schema:
          type: number
        required: false
      - paramName: messagesUnread
        description: The number of unread messages with the label.
        paramKey: messagesUnread
        in: body
        schema:
          type: number
        required: false
      - paramName: name
        description: The display name of the label.
        paramKey: name
        in: body
        schema:
          type: string
        required: false
      - paramName: threadsTotal
        description: The total number of threads with the label.
        paramKey: threadsTotal
        in: body
        schema:
          type: number
        required: false
      - paramName: threadsUnread
        description: The number of unread threads with the label.
        paramKey: threadsUnread
        in: body
        schema:
          type: number
        required: false
      - paramName: type
        description: The owner type for the label. User labels are created by the user
          and can be modified and deleted by the user and can be applied to any
          message or thread. System labels are internally created and cannot be
          added, modified, or deleted. System labels may be able to be applied
          to or removed from messages and threads under some circumstances but
          this is not guaranteed. For example, users can apply and remove the
          `INBOX` and `UNREAD` labels from messages and threads, but cannot
          apply or remove the `DRAFTS` or `SENT` labels from messages or
          threads.
        paramKey: type
        in: body
        schema:
          type: string
          enum:
            - system
            - user
        required: false
    requestBodyType: json
  - moduleName: Users / Labels / Update
    method: put
    path: /gmail/v1/users/{userId}/labels/{id}
    description: Updates the specified label.
    externalDocs: "https://developers.google.com/gmail/api/reference/rest"
    params:
      - paramName: userId
        description: The user's email address. The special value `me` can be used to
          indicate the authenticated user.
        paramKey: userId
        in: path
        schema:
          type: string
        required: true
      - paramName: id
        description: The ID of the label to update.
        paramKey: id
        in: path
        schema:
          type: string
        required: true
      - paramName: color
        description: ""
        paramKey: color
        in: body
        schema:
          type: any
        required: false
      - paramName: id
        description: The immutable ID of the label.
        paramKey: id
        in: body
        schema:
          type: string
        required: false
      - paramName: labelListVisibility
        description: The visibility of the label in the label list in the Gmail web
          interface.
        paramKey: labelListVisibility
        in: body
        schema:
          type: string
          enum:
            - labelShow
            - labelShowIfUnread
            - labelHide
        required: false
      - paramName: messageListVisibility
        description: The visibility of messages with this label in the message list in
          the Gmail web interface.
        paramKey: messageListVisibility
        in: body
        schema:
          type: string
          enum:
            - show
            - hide
        required: false
      - paramName: messagesTotal
        description: The total number of messages with the label.
        paramKey: messagesTotal
        in: body
        schema:
          type: number
        required: false
      - paramName: messagesUnread
        description: The number of unread messages with the label.
        paramKey: messagesUnread
        in: body
        schema:
          type: number
        required: false
      - paramName: name
        description: The display name of the label.
        paramKey: name
        in: body
        schema:
          type: string
        required: false
      - paramName: threadsTotal
        description: The total number of threads with the label.
        paramKey: threadsTotal
        in: body
        schema:
          type: number
        required: false
      - paramName: threadsUnread
        description: The number of unread threads with the label.
        paramKey: threadsUnread
        in: body
        schema:
          type: number
        required: false
      - paramName: type
        description: The owner type for the label. User labels are created by the user
          and can be modified and deleted by the user and can be applied to any
          message or thread. System labels are internally created and cannot be
          added, modified, or deleted. System labels may be able to be applied
          to or removed from messages and threads under some circumstances but
          this is not guaranteed. For example, users can apply and remove the
          `INBOX` and `UNREAD` labels from messages and threads, but cannot
          apply or remove the `DRAFTS` or `SENT` labels from messages or
          threads.
        paramKey: type
        in: body
        schema:
          type: string
          enum:
            - system
            - user
        required: false
    requestBodyType: json
  - moduleName: Users / Messages / List
    method: get
    path: /gmail/v1/users/{userId}/messages
    description: Lists the messages in the user's mailbox.
    externalDocs: "https://developers.google.com/gmail/api/reference/rest"
    params:
      - paramName: userId
        description: The user's email address. The special value `me` can be used to
          indicate the authenticated user.
        paramKey: userId
        in: path
        schema:
          type: string
        required: true
      - paramName: includeSpamTrash
        description: Include messages from `SPAM` and `TRASH` in the results.
        paramKey: includeSpamTrash
        in: query
        schema:
          type: boolean
        required: false
      - paramName: labelIds
        description: Only return messages with labels that match all of the specified
          label IDs. Messages in a thread might have labels that other messages
          in the same thread don't have. To learn more, see [Manage labels on
          messages and
          threads](https://developers.google.com/gmail/api/guides/labels#manage_labels_on_messages_threads).
        paramKey: labelIds
        in: query
        schema:
          type: array
          items:
            type: any
        required: false
        style: form
        explode: true
      - paramName: maxResults
        description: Maximum number of messages to return. This field defaults to 100.
          The maximum allowed value for this field is 500.
        paramKey: maxResults
        in: query
        schema:
          type: number
        required: false
      - paramName: pageToken
        description: Page token to retrieve a specific page of results in the list.
        paramKey: pageToken
        in: query
        schema:
          type: string
        required: false
      - paramName: q
        description: 'Only return messages matching the specified query. Supports the
          same query format as the Gmail search box. For example,
          `"from:someuser@example.com rfc822msgid: is:unread"`. Parameter cannot
          be used when accessing the api using the gmail.metadata scope.'
        paramKey: q
        in: query
        schema:
          type: string
        required: false
  - moduleName: Users / Messages / Batch Delete
    method: post
    path: /gmail/v1/users/{userId}/messages/batchDelete
    description: Deletes many messages by message ID. Provides no guarantees that
      messages were not already deleted or even existed at all.
    externalDocs: "https://developers.google.com/gmail/api/reference/rest"
    params:
      - paramName: userId
        description: The user's email address. The special value `me` can be used to
          indicate the authenticated user.
        paramKey: userId
        in: path
        schema:
          type: string
        required: true
      - paramName: ids
        description: The IDs of the messages to delete.
        paramKey: ids
        in: body
        schema:
          type: array
          items:
            type: any
        required: false
    requestBodyType: json
  - moduleName: Users / Messages / Batch Modify
    method: post
    path: /gmail/v1/users/{userId}/messages/batchModify
    description: Modifies the labels on the specified messages.
    externalDocs: "https://developers.google.com/gmail/api/reference/rest"
    params:
      - paramName: userId
        description: The user's email address. The special value `me` can be used to
          indicate the authenticated user.
        paramKey: userId
        in: path
        schema:
          type: string
        required: true
      - paramName: addLabelIds
        description: A list of label IDs to add to messages.
        paramKey: addLabelIds
        in: body
        schema:
          type: array
          items:
            type: any
        required: false
      - paramName: ids
        description: The IDs of the messages to modify. There is a limit of 1000 ids per
          request.
        paramKey: ids
        in: body
        schema:
          type: array
          items:
            type: any
        required: false
      - paramName: removeLabelIds
        description: A list of label IDs to remove from messages.
        paramKey: removeLabelIds
        in: body
        schema:
          type: array
          items:
            type: any
        required: false
    requestBodyType: json
  - moduleName: Users / Messages / Delete
    method: delete
    path: /gmail/v1/users/{userId}/messages/{id}
    description: Immediately and permanently deletes the specified message. This
      operation cannot be undone. Prefer `messages.trash` instead.
    externalDocs: "https://developers.google.com/gmail/api/reference/rest"
    params:
      - paramName: userId
        description: The user's email address. The special value `me` can be used to
          indicate the authenticated user.
        paramKey: userId
        in: path
        schema:
          type: string
        required: true
      - paramName: id
        description: The ID of the message to delete.
        paramKey: id
        in: path
        schema:
          type: string
        required: true
  - moduleName: Users / Messages / Get
    method: get
    path: /gmail/v1/users/{userId}/messages/{id}
    description: Gets the specified message.
    externalDocs: "https://developers.google.com/gmail/api/reference/rest"
    params:
      - paramName: userId
        description: The user's email address. The special value `me` can be used to
          indicate the authenticated user.
        paramKey: userId
        in: path
        schema:
          type: string
        required: true
      - paramName: id
        description: The ID of the message to retrieve. This ID is usually retrieved
          using `messages.list`. The ID is also contained in the result when a
          message is inserted (`messages.insert`) or imported
          (`messages.import`).
        paramKey: id
        in: path
        schema:
          type: string
        required: true
      - paramName: format
        description: The format to return the message in.
        paramKey: format
        in: query
        schema:
          type: string
          enum:
            - minimal
            - full
            - raw
            - metadata
        required: false
      - paramName: metadataHeaders
        description: When given and format is `METADATA`, only include headers specified.
        paramKey: metadataHeaders
        in: query
        schema:
          type: array
          items:
            type: any
        required: false
        style: form
        explode: true
  - moduleName: Users / Messages / Modify
    method: post
    path: /gmail/v1/users/{userId}/messages/{id}/modify
    description: Modifies the labels on the specified message.
    externalDocs: "https://developers.google.com/gmail/api/reference/rest"
    params:
      - paramName: userId
        description: The user's email address. The special value `me` can be used to
          indicate the authenticated user.
        paramKey: userId
        in: path
        schema:
          type: string
        required: true
      - paramName: id
        description: The ID of the message to modify.
        paramKey: id
        in: path
        schema:
          type: string
        required: true
      - paramName: addLabelIds
        description: A list of IDs of labels to add to this message. You can add up to
          100 labels with each update.
        paramKey: addLabelIds
        in: body
        schema:
          type: array
          items:
            type: any
        required: false
      - paramName: removeLabelIds
        description: A list IDs of labels to remove from this message. You can remove up
          to 100 labels with each update.
        paramKey: removeLabelIds
        in: body
        schema:
          type: array
          items:
            type: any
        required: false
    requestBodyType: json
  - moduleName: Users / Messages / Trash
    method: post
    path: /gmail/v1/users/{userId}/messages/{id}/trash
    description: Moves the specified message to the trash.
    externalDocs: "https://developers.google.com/gmail/api/reference/rest"
    params:
      - paramName: userId
        description: The user's email address. The special value `me` can be used to
          indicate the authenticated user.
        paramKey: userId
        in: path
        schema:
          type: string
        required: true
      - paramName: id
        description: The ID of the message to Trash.
        paramKey: id
        in: path
        schema:
          type: string
        required: true
  - moduleName: Users / Messages / Untrash
    method: post
    path: /gmail/v1/users/{userId}/messages/{id}/untrash
    description: Removes the specified message from the trash.
    externalDocs: "https://developers.google.com/gmail/api/reference/rest"
    params:
      - paramName: userId
        description: The user's email address. The special value `me` can be used to
          indicate the authenticated user.
        paramKey: userId
        in: path
        schema:
          type: string
        required: true
      - paramName: id
        description: The ID of the message to remove from Trash.
        paramKey: id
        in: path
        schema:
          type: string
        required: true
  - moduleName: Users / Messages / Attachments / Get
    method: get
    path: /gmail/v1/users/{userId}/messages/{messageId}/attachments/{id}
    description: Gets the specified message attachment.
    externalDocs: "https://developers.google.com/gmail/api/reference/rest"
    params:
      - paramName: userId
        description: The user's email address. The special value `me` can be used to
          indicate the authenticated user.
        paramKey: userId
        in: path
        schema:
          type: string
        required: true
      - paramName: messageId
        description: The ID of the message containing the attachment.
        paramKey: messageId
        in: path
        schema:
          type: string
        required: true
      - paramName: id
        description: The ID of the attachment.
        paramKey: id
        in: path
        schema:
          type: string
        required: true
  - moduleName: Users / Messages / Send
    method: post
    path: /gmail/v1/users/{userId}/messages/send
    description: Sends an email
    externalDocs: "https://developers.google.com/gmail/api/reference/rest"
    params: 
      - paramName: userId
        description: The user's email address. The special value `me` can be used to
          indicate the authenticated user.
        paramKey: userId
        in: path
        schema:
          type: string
        required: true
      - paramName: raw
        description: raw email base64-encoded string. Must comply with RFC2822 format.
        paramKey: raw
        in: body
        schema:
          type: string
        required: true
    requestBodyType: json
  - moduleName: Users / Messages / Import
    method: post
    path: /gmail/v1/users/{userId}/messages/import
    description: Imports a message into only this user's mailbox, with standard email delivery scanning and classification similar to receiving via SMTP. This method doesn't perform SPF checks, so it might not work for some spam messages, such as those attempting to perform domain spoofing. This method does not send a message.
    externalDocs: "https://developers.google.com/gmail/api/reference/rest"
    params: 
      - paramName: userId
        description: The user's email address. The special value me can be used to indicate the authenticated user.
        paramKey: userId
        in: path
        schema:
          type: string
        required: true
      - paramName: internalDateSource
        description: "Source for Gmail's internal date of the message."
        paramKey: internalDateSource
        in: query
        schema:
          type: any
        required: false
      - paramName: processForCalendar
        description: "Process calendar invites in the email and add any extracted meetings to the Google Calendar for this user."
        paramKey: processForCalendar
        in: query
        schema:
          type: boolean
        required: false
      - paramName: neverMarkSpam
        description: "Ignore the Gmail spam classifier decision and never mark this email as SPAM in the mailbox."
        paramKey: neverMarkSpam
        in: query
        schema:
          type: boolean
        required: false
      - paramName: deleted
        description: Mark the email as permanently deleted (not TRASH) and only visible in Google Vault to a Vault administrator. Only used for Google Workspace accounts.
        paramKey: deleted
        in: query
        schema:
          type: boolean
        required: false
      - paramName: raw
        description: raw email base64-encoded string. Must comply with RFC2822 format.
        paramKey: raw
        in: body
        schema:
          type: string
        required: false
    requestBodyType: json
  - moduleName: Users / Messages / Insert
    method: post
    path: /gmail/v1/users/{userId}/messages
    description: Directly inserts a message into only this user's mailbox similar to IMAP APPEND, bypassing most scanning and classification. Does not send a message.
    externalDocs: "https://developers.google.com/gmail/api/reference/rest"
    params: 
      - paramName: userId
        description: Imports a message into only this user's mailbox, with standard email delivery scanning and classification similar to receiving via SMTP. This method doesn't perform SPF checks, so it might not work for some spam messages, such as those attempting to perform domain spoofing. This method does not send a message.
        paramKey: userId
        in: path
        schema:
          type: string
        required: true
      - paramName: internalDateSource
        description: "Source for Gmail's internal date of the message."
        paramKey: internalDateSource
        in: query
        schema:
          type: any
        required: false
      - paramName: deleted
        description: Mark the email as permanently deleted (not TRASH) and only visible in Google Vault to a Vault administrator. Only used for Google Workspace accounts.
        paramKey: deleted
        in: query
        schema:
          type: boolean
        required: false
      - paramName: raw
        description: raw email base64-encoded string. Must comply with RFC2822 format.
        paramKey: raw
        in: body
        schema:
          type: string
        required: false
    requestBodyType: json
  - moduleName: Users / Profile / Get
    method: get
    path: /gmail/v1/users/{userId}/profile
    description: Gets the current user's Gmail profile.
    externalDocs: "https://developers.google.com/gmail/api/reference/rest"
    params:
      - paramName: userId
        description: The user's email address. The special value `me` can be used to
          indicate the authenticated user.
        paramKey: userId
        in: path
        schema:
          type: string
        required: true
  - moduleName: Users / Settings / Get Auto Forwarding
    method: get
    path: /gmail/v1/users/{userId}/settings/autoForwarding
    description: Gets the auto-forwarding setting for the specified account.
    externalDocs: "https://developers.google.com/gmail/api/reference/rest"
    params:
      - paramName: userId
        description: User's email address. The special value "me" can be used to
          indicate the authenticated user.
        paramKey: userId
        in: path
        schema:
          type: string
        required: true
  - moduleName: Users / Settings / Update Auto Forwarding
    method: put
    path: /gmail/v1/users/{userId}/settings/autoForwarding
    description: Updates the auto-forwarding setting for the specified account. A
      verified forwarding address must be specified when auto-forwarding is
      enabled. This method is only available to service account clients that
      have been delegated domain-wide authority.
    externalDocs: "https://developers.google.com/gmail/api/reference/rest"
    params:
      - paramName: userId
        description: User's email address. The special value "me" can be used to
          indicate the authenticated user.
        paramKey: userId
        in: path
        schema:
          type: string
        required: true
      - paramName: disposition
        description: The state that a message should be left in after it has been forwarded.
        paramKey: disposition
        in: body
        schema:
          type: string
          enum:
            - dispositionUnspecified
            - leaveInInbox
            - archive
            - trash
            - markRead
        required: false
      - paramName: emailAddress
        description: Email address to which all incoming messages are forwarded. This
          email address must be a verified member of the forwarding addresses.
        paramKey: emailAddress
        in: body
        schema:
          type: string
        required: false
      - paramName: enabled
        description: Whether all incoming mail is automatically forwarded to another
          address.
        paramKey: enabled
        in: body
        schema:
          type: boolean
        required: false
    requestBodyType: json
  - moduleName: Users / Settings / CSE / Identities / List
    method: get
    path: /gmail/v1/users/{userId}/settings/cse/identities
    description: Lists the client-side encrypted identities for an authenticated user.
    externalDocs: "https://developers.google.com/gmail/api/reference/rest"
    params:
      - paramName: userId
        description: The requester's primary email address. To indicate the
          authenticated user, you can use the special value `me`.
        paramKey: userId
        in: path
        schema:
          type: string
        required: true
      - paramName: pageSize
        description: The number of identities to return. If not provided, the page size
          will default to 20 entries.
        paramKey: pageSize
        in: query
        schema:
          type: number
        required: false
      - paramName: pageToken
        description: Pagination token indicating which page of identities to return. If
          the token is not supplied, then the API will return the first page of
          results.
        paramKey: pageToken
        in: query
        schema:
          type: string
        required: false
  - moduleName: Users / Settings / CSE / Identities / Create
    method: post
    path: /gmail/v1/users/{userId}/settings/cse/identities
    description: Creates and configures a client-side encryption identity that's
      authorized to send mail from the user account. Google publishes the S/MIME
      certificate to a shared domain-wide directory so that people within a
      Google Workspace organization can encrypt and send mail to the identity.
    externalDocs: "https://developers.google.com/gmail/api/reference/rest"
    params:
      - paramName: userId
        description: The requester's primary email address. To indicate the
          authenticated user, you can use the special value `me`.
        paramKey: userId
        in: path
        schema:
          type: string
        required: true
      - paramName: emailAddress
        description: The email address for the sending identity. The email address must
          be the primary email address of the authenticated user.
        paramKey: emailAddress
        in: body
        schema:
          type: string
        required: false
      - paramName: primaryKeyPairId
        description: If a key pair is associated, the identifier of the key pair,
          CseKeyPair.
        paramKey: primaryKeyPairId
        in: body
        schema:
          type: string
        required: false
    requestBodyType: json
  - moduleName: Users / Settings / CSE / Identities / Delete
    method: delete
    path: /gmail/v1/users/{userId}/settings/cse/identities/{cseEmailAddress}
    description: Deletes a client-side encryption identity. The authenticated user
      can no longer use the identity to send encrypted messages. You cannot
      restore the identity after you delete it. Instead, use the
      CreateCseIdentity method to create another identity with the same
      configuration.
    externalDocs: "https://developers.google.com/gmail/api/reference/rest"
    params:
      - paramName: userId
        description: The requester's primary email address. To indicate the
          authenticated user, you can use the special value `me`.
        paramKey: userId
        in: path
        schema:
          type: string
        required: true
      - paramName: cseEmailAddress
        description: The primary email address associated with the client-side
          encryption identity configuration that's removed.
        paramKey: cseEmailAddress
        in: path
        schema:
          type: string
        required: true
  - moduleName: Users / Settings / CSE / Identities / Get
    method: get
    path: /gmail/v1/users/{userId}/settings/cse/identities/{cseEmailAddress}
    description: Retrieves a client-side encryption identity configuration.
    externalDocs: "https://developers.google.com/gmail/api/reference/rest"
    params:
      - paramName: userId
        description: The requester's primary email address. To indicate the
          authenticated user, you can use the special value `me`.
        paramKey: userId
        in: path
        schema:
          type: string
        required: true
      - paramName: cseEmailAddress
        description: The primary email address associated with the client-side
          encryption identity configuration that's retrieved.
        paramKey: cseEmailAddress
        in: path
        schema:
          type: string
        required: true
  - moduleName: Users / Settings / CSE / Identities / Patch
    method: patch
    path: /gmail/v1/users/{userId}/settings/cse/identities/{emailAddress}
    description: Associates a different key pair with an existing client-side
      encryption identity. The updated key pair must validate against Google's
      [S/MIME certificate
      profiles](https://support.google.com/a/answer/7300887).
    externalDocs: "https://developers.google.com/gmail/api/reference/rest"
    params:
      - paramName: userId
        description: The requester's primary email address. To indicate the
          authenticated user, you can use the special value `me`.
        paramKey: userId
        in: path
        schema:
          type: string
        required: true
      - paramName: emailAddress
        description: The email address of the client-side encryption identity to update.
        paramKey: emailAddress
        in: path
        schema:
          type: string
        required: true
      - paramName: emailAddress
        description: The email address for the sending identity. The email address must
          be the primary email address of the authenticated user.
        paramKey: emailAddress
        in: body
        schema:
          type: string
        required: false
      - paramName: primaryKeyPairId
        description: If a key pair is associated, the identifier of the key pair,
          CseKeyPair.
        paramKey: primaryKeyPairId
        in: body
        schema:
          type: string
        required: false
    requestBodyType: json
  - moduleName: Users / Settings / CSE / Key Pairs / List
    method: get
    path: /gmail/v1/users/{userId}/settings/cse/keypairs
    description: Lists client-side encryption key pairs for an authenticated user.
    externalDocs: "https://developers.google.com/gmail/api/reference/rest"
    params:
      - paramName: userId
        description: The requester's primary email address. To indicate the
          authenticated user, you can use the special value `me`.
        paramKey: userId
        in: path
        schema:
          type: string
        required: true
      - paramName: pageSize
        description: The number of key pairs to return. If not provided, the page size
          will default to 20 entries.
        paramKey: pageSize
        in: query
        schema:
          type: number
        required: false
      - paramName: pageToken
        description: Pagination token indicating which page of key pairs to return. If
          the token is not supplied, then the API will return the first page of
          results.
        paramKey: pageToken
        in: query
        schema:
          type: string
        required: false
  - moduleName: Users / Settings / CSE / Key Pairs / Create
    method: post
    path: /gmail/v1/users/{userId}/settings/cse/keypairs
    description: Creates and uploads a client-side encryption S/MIME public key
      certificate chain and private key metadata for the authenticated user.
    externalDocs: "https://developers.google.com/gmail/api/reference/rest"
    params:
      - paramName: userId
        description: The requester's primary email address. To indicate the
          authenticated user, you can use the special value `me`.
        paramKey: userId
        in: path
        schema:
          type: string
        required: true
      - paramName: disableTime
        description: Output only. If a key pair is set to `DISABLED`, the time that the
          key pair's state changed from `ENABLED` to `DISABLED`. This field is
          present only when the key pair is in state `DISABLED`.
        paramKey: disableTime
        in: body
        schema:
          type: string
        required: false
      - paramName: enablementState
        description: Output only. The current state of the key pair.
        paramKey: enablementState
        in: body
        schema:
          type: string
          enum:
            - stateUnspecified
            - enabled
            - disabled
        required: false
      - paramName: keyPairId
        description: Output only. The immutable ID for the client-side encryption S/MIME
          key pair.
        paramKey: keyPairId
        in: body
        schema:
          type: string
        required: false
      - paramName: pem
        description: Output only. The public key and its certificate chain, in
          [PEM](https://en.wikipedia.org/wiki/Privacy-Enhanced_Mail) format.
        paramKey: pem
        in: body
        schema:
          type: string
        required: false
      - paramName: pkcs7
        description: Input only. The public key and its certificate chain. The chain
          must be in [PKCS#7](https://en.wikipedia.org/wiki/PKCS_7) format and
          use PEM encoding and ASCII armor.
        paramKey: pkcs7
        in: body
        schema:
          type: string
        required: false
      - paramName: privateKeyMetadata
        description: Metadata for instances of this key pair's private key.
        paramKey: privateKeyMetadata
        in: body
        schema:
          type: array
          items:
            type: any
        required: false
      - paramName: subjectEmailAddresses
        description: Output only. The email address identities that are specified on the
          leaf certificate.
        paramKey: subjectEmailAddresses
        in: body
        schema:
          type: array
          items:
            type: any
        required: false
    requestBodyType: json
  - moduleName: Users / Settings / CSE / Key Pairs / Get
    method: get
    path: /gmail/v1/users/{userId}/settings/cse/keypairs/{keyPairId}
    description: Retrieves an existing client-side encryption key pair.
    externalDocs: "https://developers.google.com/gmail/api/reference/rest"
    params:
      - paramName: userId
        description: The requester's primary email address. To indicate the
          authenticated user, you can use the special value `me`.
        paramKey: userId
        in: path
        schema:
          type: string
        required: true
      - paramName: keyPairId
        description: The identifier of the key pair to retrieve.
        paramKey: keyPairId
        in: path
        schema:
          type: string
        required: true
  - moduleName: Users / Settings / CSE / Key Pairs / Disable
    method: post
    path: /gmail/v1/users/{userId}/settings/cse/keypairs/{keyPairId}:disable
    description: Turns off a client-side encryption key pair. The authenticated user
      can no longer use the key pair to decrypt incoming CSE message texts or
      sign outgoing CSE mail. To regain access, use the EnableCseKeyPair to turn
      on the key pair. After 30 days, you can permanently delete the key pair by
      using the ObliterateCseKeyPair method.
    externalDocs: "https://developers.google.com/gmail/api/reference/rest"
    params:
      - paramName: userId
        description: The requester's primary email address. To indicate the
          authenticated user, you can use the special value `me`.
        paramKey: userId
        in: path
        schema:
          type: string
        required: true
      - paramName: keyPairId
        description: The identifier of the key pair to turn off.
        paramKey: keyPairId
        in: path
        schema:
          type: string
        required: true
    requestBodyType: json
  - moduleName: Users / Settings / CSE / Key Pairs / Enable
    method: post
    path: /gmail/v1/users/{userId}/settings/cse/keypairs/{keyPairId}:enable
    description: Turns on a client-side encryption key pair that was turned off. The
      key pair becomes active again for any associated client-side encryption
      identities.
    externalDocs: "https://developers.google.com/gmail/api/reference/rest"
    params:
      - paramName: userId
        description: The requester's primary email address. To indicate the
          authenticated user, you can use the special value `me`.
        paramKey: userId
        in: path
        schema:
          type: string
        required: true
      - paramName: keyPairId
        description: The identifier of the key pair to turn on.
        paramKey: keyPairId
        in: path
        schema:
          type: string
        required: true
    requestBodyType: json
  - moduleName: Users / Settings / CSE / Key Pairs / Obliterate
    method: post
    path: /gmail/v1/users/{userId}/settings/cse/keypairs/{keyPairId}:obliterate
    description: Deletes a client-side encryption key pair permanently and
      immediately. You can only permanently delete key pairs that have been
      turned off for more than 30 days. To turn off a key pair, use the
      DisableCseKeyPair method. Gmail can't restore or decrypt any messages that
      were encrypted by an obliterated key. Authenticated users and Google
      Workspace administrators lose access to reading the encrypted messages.
    externalDocs: "https://developers.google.com/gmail/api/reference/rest"
    params:
      - paramName: userId
        description: The requester's primary email address. To indicate the
          authenticated user, you can use the special value `me`.
        paramKey: userId
        in: path
        schema:
          type: string
        required: true
      - paramName: keyPairId
        description: The identifier of the key pair to obliterate.
        paramKey: keyPairId
        in: path
        schema:
          type: string
        required: true
    requestBodyType: json
  - moduleName: Users / Settings / Delegates / List
    method: get
    path: /gmail/v1/users/{userId}/settings/delegates
    description: Lists the delegates for the specified account. This method is only
      available to service account clients that have been delegated domain-wide
      authority.
    externalDocs: "https://developers.google.com/gmail/api/reference/rest"
    params:
      - paramName: userId
        description: User's email address. The special value "me" can be used to
          indicate the authenticated user.
        paramKey: userId
        in: path
        schema:
          type: string
        required: true
  - moduleName: Users / Settings / Delegates / Create
    method: post
    path: /gmail/v1/users/{userId}/settings/delegates
    description: Adds a delegate with its verification status set directly to
      `accepted`, without sending any verification email. The delegate user must
      be a member of the same Google Workspace organization as the delegator
      user. Gmail imposes limitations on the number of delegates and delegators
      each user in a Google Workspace organization can have. These limits depend
      on your organization, but in general each user can have up to 25 delegates
      and up to 10 delegators. Note that a delegate user must be referred to by
      their primary email address, and not an email alias. Also note that when a
      new delegate is created, there may be up to a one minute delay before the
      new delegate is available for use. This method is only available to
      service account clients that have been delegated domain-wide authority.
    externalDocs: "https://developers.google.com/gmail/api/reference/rest"
    params:
      - paramName: userId
        description: User's email address. The special value "me" can be used to
          indicate the authenticated user.
        paramKey: userId
        in: path
        schema:
          type: string
        required: true
      - paramName: delegateEmail
        description: The email address of the delegate.
        paramKey: delegateEmail
        in: body
        schema:
          type: string
        required: false
      - paramName: verificationStatus
        description: Indicates whether this address has been verified and can act as a
          delegate for the account. Read-only.
        paramKey: verificationStatus
        in: body
        schema:
          type: string
          enum:
            - verificationStatusUnspecified
            - accepted
            - pending
            - rejected
            - expired
        required: false
    requestBodyType: json
  - moduleName: Users / Settings / Delegates / Delete
    method: delete
    path: /gmail/v1/users/{userId}/settings/delegates/{delegateEmail}
    description: Removes the specified delegate (which can be of any verification
      status), and revokes any verification that may have been required for
      using it. Note that a delegate user must be referred to by their primary
      email address, and not an email alias. This method is only available to
      service account clients that have been delegated domain-wide authority.
    externalDocs: "https://developers.google.com/gmail/api/reference/rest"
    params:
      - paramName: userId
        description: User's email address. The special value "me" can be used to
          indicate the authenticated user.
        paramKey: userId
        in: path
        schema:
          type: string
        required: true
      - paramName: delegateEmail
        description: The email address of the user to be removed as a delegate.
        paramKey: delegateEmail
        in: path
        schema:
          type: string
        required: true
  - moduleName: Users / Settings / Delegates / Get
    method: get
    path: /gmail/v1/users/{userId}/settings/delegates/{delegateEmail}
    description: Gets the specified delegate. Note that a delegate user must be
      referred to by their primary email address, and not an email alias. This
      method is only available to service account clients that have been
      delegated domain-wide authority.
    externalDocs: "https://developers.google.com/gmail/api/reference/rest"
    params:
      - paramName: userId
        description: User's email address. The special value "me" can be used to
          indicate the authenticated user.
        paramKey: userId
        in: path
        schema:
          type: string
        required: true
      - paramName: delegateEmail
        description: The email address of the user whose delegate relationship is to be
          retrieved.
        paramKey: delegateEmail
        in: path
        schema:
          type: string
        required: true
  - moduleName: Users / Settings / Filters / List
    method: get
    path: /gmail/v1/users/{userId}/settings/filters
    description: Lists the message filters of a Gmail user.
    externalDocs: "https://developers.google.com/gmail/api/reference/rest"
    params:
      - paramName: userId
        description: User's email address. The special value "me" can be used to
          indicate the authenticated user.
        paramKey: userId
        in: path
        schema:
          type: string
        required: true
  - moduleName: Users / Settings / Filters / Create
    method: post
    path: /gmail/v1/users/{userId}/settings/filters
    description: "Creates a filter. Note: you can only create a maximum of 1,000 filters."
    externalDocs: "https://developers.google.com/gmail/api/reference/rest"
    params:
      - paramName: userId
        description: User's email address. The special value "me" can be used to
          indicate the authenticated user.
        paramKey: userId
        in: path
        schema:
          type: string
        required: true
      - paramName: action
        description: A set of actions to perform on a message.
        paramKey: action
        in: body
        schema:
          type: any
        required: false
      - paramName: criteria
        description: Message matching criteria.
        paramKey: criteria
        in: body
        schema:
          type: any
        required: false
      - paramName: id
        description: The server assigned ID of the filter.
        paramKey: id
        in: body
        schema:
          type: string
        required: false
    requestBodyType: json
  - moduleName: Users / Settings / Filters / Delete
    method: delete
    path: /gmail/v1/users/{userId}/settings/filters/{id}
    description: Immediately and permanently deletes the specified filter.
    externalDocs: "https://developers.google.com/gmail/api/reference/rest"
    params:
      - paramName: userId
        description: User's email address. The special value "me" can be used to
          indicate the authenticated user.
        paramKey: userId
        in: path
        schema:
          type: string
        required: true
      - paramName: id
        description: The ID of the filter to be deleted.
        paramKey: id
        in: path
        schema:
          type: string
        required: true
  - moduleName: Users / Settings / Filters / Get
    method: get
    path: /gmail/v1/users/{userId}/settings/filters/{id}
    description: Gets a filter.
    externalDocs: "https://developers.google.com/gmail/api/reference/rest"
    params:
      - paramName: userId
        description: User's email address. The special value "me" can be used to
          indicate the authenticated user.
        paramKey: userId
        in: path
        schema:
          type: string
        required: true
      - paramName: id
        description: The ID of the filter to be fetched.
        paramKey: id
        in: path
        schema:
          type: string
        required: true
  - moduleName: Users / Settings / Forwarding Addresses / List
    method: get
    path: /gmail/v1/users/{userId}/settings/forwardingAddresses
    description: Lists the forwarding addresses for the specified account.
    externalDocs: "https://developers.google.com/gmail/api/reference/rest"
    params:
      - paramName: userId
        description: User's email address. The special value "me" can be used to
          indicate the authenticated user.
        paramKey: userId
        in: path
        schema:
          type: string
        required: true
  - moduleName: Users / Settings / Forwarding Addresses / Create
    method: post
    path: /gmail/v1/users/{userId}/settings/forwardingAddresses
    description: Creates a forwarding address. If ownership verification is
      required, a message will be sent to the recipient and the resource's
      verification status will be set to `pending`; otherwise, the resource will
      be created with verification status set to `accepted`. This method is only
      available to service account clients that have been delegated domain-wide
      authority.
    externalDocs: "https://developers.google.com/gmail/api/reference/rest"
    params:
      - paramName: userId
        description: User's email address. The special value "me" can be used to
          indicate the authenticated user.
        paramKey: userId
        in: path
        schema:
          type: string
        required: true
      - paramName: forwardingEmail
        description: An email address to which messages can be forwarded.
        paramKey: forwardingEmail
        in: body
        schema:
          type: string
        required: false
      - paramName: verificationStatus
        description: Indicates whether this address has been verified and is usable for
          forwarding. Read-only.
        paramKey: verificationStatus
        in: body
        schema:
          type: string
          enum:
            - verificationStatusUnspecified
            - accepted
            - pending
        required: false
    requestBodyType: json
  - moduleName: Users / Settings / Forwarding Addresses / Delete
    method: delete
    path: /gmail/v1/users/{userId}/settings/forwardingAddresses/{forwardingEmail}
    description: Deletes the specified forwarding address and revokes any
      verification that may have been required. This method is only available to
      service account clients that have been delegated domain-wide authority.
    externalDocs: "https://developers.google.com/gmail/api/reference/rest"
    params:
      - paramName: userId
        description: User's email address. The special value "me" can be used to
          indicate the authenticated user.
        paramKey: userId
        in: path
        schema:
          type: string
        required: true
      - paramName: forwardingEmail
        description: The forwarding address to be deleted.
        paramKey: forwardingEmail
        in: path
        schema:
          type: string
        required: true
  - moduleName: Users / Settings / Forwarding Addresses / Get
    method: get
    path: /gmail/v1/users/{userId}/settings/forwardingAddresses/{forwardingEmail}
    description: Gets the specified forwarding address.
    externalDocs: "https://developers.google.com/gmail/api/reference/rest"
    params:
      - paramName: userId
        description: User's email address. The special value "me" can be used to
          indicate the authenticated user.
        paramKey: userId
        in: path
        schema:
          type: string
        required: true
      - paramName: forwardingEmail
        description: The forwarding address to be retrieved.
        paramKey: forwardingEmail
        in: path
        schema:
          type: string
        required: true
  - moduleName: Users / Settings / Get IMAP
    method: get
    path: /gmail/v1/users/{userId}/settings/imap
    description: Gets IMAP settings.
    externalDocs: "https://developers.google.com/gmail/api/reference/rest"
    params:
      - paramName: userId
        description: User's email address. The special value "me" can be used to
          indicate the authenticated user.
        paramKey: userId
        in: path
        schema:
          type: string
        required: true
  - moduleName: Users / Settings / Update IMAP
    method: put
    path: /gmail/v1/users/{userId}/settings/imap
    description: Updates IMAP settings.
    externalDocs: "https://developers.google.com/gmail/api/reference/rest"
    params:
      - paramName: userId
        description: User's email address. The special value "me" can be used to
          indicate the authenticated user.
        paramKey: userId
        in: path
        schema:
          type: string
        required: true
      - paramName: autoExpunge
        description: If this value is true, Gmail will immediately expunge a message
          when it is marked as deleted in IMAP. Otherwise, Gmail will wait for
          an update from the client before expunging messages marked as deleted.
        paramKey: autoExpunge
        in: body
        schema:
          type: boolean
        required: false
      - paramName: enabled
        description: Whether IMAP is enabled for the account.
        paramKey: enabled
        in: body
        schema:
          type: boolean
        required: false
      - paramName: expungeBehavior
        description: The action that will be executed on a message when it is marked as
          deleted and expunged from the last visible IMAP folder.
        paramKey: expungeBehavior
        in: body
        schema:
          type: string
          enum:
            - expungeBehaviorUnspecified
            - archive
            - trash
            - deleteForever
        required: false
      - paramName: maxFolderSize
        description: An optional limit on the number of messages that an IMAP folder may
          contain. Legal values are 0, 1000, 2000, 5000 or 10000. A value of
          zero is interpreted to mean that there is no limit.
        paramKey: maxFolderSize
        in: body
        schema:
          type: number
        required: false
    requestBodyType: json
  - moduleName: Users / Settings / Get Language
    method: get
    path: /gmail/v1/users/{userId}/settings/language
    description: Gets language settings.
    externalDocs: "https://developers.google.com/gmail/api/reference/rest"
    params:
      - paramName: userId
        description: User's email address. The special value "me" can be used to
          indicate the authenticated user.
        paramKey: userId
        in: path
        schema:
          type: string
        required: true
  - moduleName: Users / Settings / Update Language
    method: put
    path: /gmail/v1/users/{userId}/settings/language
    description: Updates language settings. If successful, the return object
      contains the `displayLanguage` that was saved for the user, which may
      differ from the value passed into the request. This is because the
      requested `displayLanguage` may not be directly supported by Gmail but
      have a close variant that is, and so the variant may be chosen and saved
      instead.
    externalDocs: "https://developers.google.com/gmail/api/reference/rest"
    params:
      - paramName: userId
        description: User's email address. The special value "me" can be used to
          indicate the authenticated user.
        paramKey: userId
        in: path
        schema:
          type: string
        required: true
      - paramName: displayLanguage
        description: The language to display Gmail in, formatted as an RFC 3066 Language
          Tag (for example `en-GB`, `fr` or `ja` for British English, French, or
          Japanese respectively). The set of languages supported by Gmail
          evolves over time, so please refer to the "Language" dropdown in the
          Gmail settings for all available options, as described in the language
          settings help article. A table of sample values is also provided in
          the Managing Language Settings guide Not all Gmail clients can display
          the same set of languages. In the case that a user's display language
          is not available for use on a particular client, said client
          automatically chooses to display in the closest supported variant (or
          a reasonable default).
        paramKey: displayLanguage
        in: body
        schema:
          type: string
        required: false
    requestBodyType: json
  - moduleName: Users / Settings / Get POP
    method: get
    path: /gmail/v1/users/{userId}/settings/pop
    description: Gets POP settings.
    externalDocs: "https://developers.google.com/gmail/api/reference/rest"
    params:
      - paramName: userId
        description: User's email address. The special value "me" can be used to
          indicate the authenticated user.
        paramKey: userId
        in: path
        schema:
          type: string
        required: true
  - moduleName: Users / Settings / Update POP
    method: put
    path: /gmail/v1/users/{userId}/settings/pop
    description: Updates POP settings.
    externalDocs: "https://developers.google.com/gmail/api/reference/rest"
    params:
      - paramName: userId
        description: User's email address. The special value "me" can be used to
          indicate the authenticated user.
        paramKey: userId
        in: path
        schema:
          type: string
        required: true
      - paramName: accessWindow
        description: The range of messages which are accessible via POP.
        paramKey: accessWindow
        in: body
        schema:
          type: string
          enum:
            - accessWindowUnspecified
            - disabled
            - fromNowOn
            - allMail
        required: false
      - paramName: disposition
        description: The action that will be executed on a message after it has been
          fetched via POP.
        paramKey: disposition
        in: body
        schema:
          type: string
          enum:
            - dispositionUnspecified
            - leaveInInbox
            - archive
            - trash
            - markRead
        required: false
    requestBodyType: json
  - moduleName: Users / Settings / Send As / List
    method: get
    path: /gmail/v1/users/{userId}/settings/sendAs
    description: Lists the send-as aliases for the specified account. The result
      includes the primary send-as address associated with the account as well
      as any custom "from" aliases.
    externalDocs: "https://developers.google.com/gmail/api/reference/rest"
    params:
      - paramName: userId
        description: User's email address. The special value "me" can be used to
          indicate the authenticated user.
        paramKey: userId
        in: path
        schema:
          type: string
        required: true
  - moduleName: Users / Settings / Send As / Create
    method: post
    path: /gmail/v1/users/{userId}/settings/sendAs
    description: Creates a custom "from" send-as alias. If an SMTP MSA is specified,
      Gmail will attempt to connect to the SMTP service to validate the
      configuration before creating the alias. If ownership verification is
      required for the alias, a message will be sent to the email address and
      the resource's verification status will be set to `pending`; otherwise,
      the resource will be created with verification status set to `accepted`.
      If a signature is provided, Gmail will sanitize the HTML before saving it
      with the alias. This method is only available to service account clients
      that have been delegated domain-wide authority.
    externalDocs: "https://developers.google.com/gmail/api/reference/rest"
    params:
      - paramName: userId
        description: User's email address. The special value "me" can be used to
          indicate the authenticated user.
        paramKey: userId
        in: path
        schema:
          type: string
        required: true
      - paramName: displayName
        description: A name that appears in the "From:" header for mail sent using this
          alias. For custom "from" addresses, when this is empty, Gmail will
          populate the "From:" header with the name that is used for the primary
          address associated with the account. If the admin has disabled the
          ability for users to update their name format, requests to update this
          field for the primary login will silently fail.
        paramKey: displayName
        in: body
        schema:
          type: string
        required: false
      - paramName: isDefault
        description: Whether this address is selected as the default "From:" address in
          situations such as composing a new message or sending a vacation
          auto-reply. Every Gmail account has exactly one default send-as
          address, so the only legal value that clients may write to this field
          is `true`. Changing this from `false` to `true` for an address will
          result in this field becoming `false` for the other previous default
          address.
        paramKey: isDefault
        in: body
        schema:
          type: boolean
        required: false
      - paramName: isPrimary
        description: Whether this address is the primary address used to login to the
          account. Every Gmail account has exactly one primary address, and it
          cannot be deleted from the collection of send-as aliases. This field
          is read-only.
        paramKey: isPrimary
        in: body
        schema:
          type: boolean
        required: false
      - paramName: replyToAddress
        description: An optional email address that is included in a "Reply-To:" header
          for mail sent using this alias. If this is empty, Gmail will not
          generate a "Reply-To:" header.
        paramKey: replyToAddress
        in: body
        schema:
          type: string
        required: false
      - paramName: sendAsEmail
        description: The email address that appears in the "From:" header for mail sent
          using this alias. This is read-only for all operations except create.
        paramKey: sendAsEmail
        in: body
        schema:
          type: string
        required: false
      - paramName: signature
        description: An optional HTML signature that is included in messages composed
          with this alias in the Gmail web UI. This signature is added to new
          emails only.
        paramKey: signature
        in: body
        schema:
          type: string
        required: false
      - paramName: smtpMsa
        description: Configuration for communication with an SMTP service.
        paramKey: smtpMsa
        in: body
        schema:
          type: any
        required: false
      - paramName: treatAsAlias
        description: Whether Gmail should treat this address as an alias for the user's
          primary email address. This setting only applies to custom "from"
          aliases.
        paramKey: treatAsAlias
        in: body
        schema:
          type: boolean
        required: false
      - paramName: verificationStatus
        description: Indicates whether this address has been verified for use as a
          send-as alias. Read-only. This setting only applies to custom "from"
          aliases.
        paramKey: verificationStatus
        in: body
        schema:
          type: string
          enum:
            - verificationStatusUnspecified
            - accepted
            - pending
        required: false
    requestBodyType: json
  - moduleName: Users / Settings / Send As / Delete
    method: delete
    path: /gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}
    description: Deletes the specified send-as alias. Revokes any verification that
      may have been required for using it. This method is only available to
      service account clients that have been delegated domain-wide authority.
    externalDocs: "https://developers.google.com/gmail/api/reference/rest"
    params:
      - paramName: userId
        description: User's email address. The special value "me" can be used to
          indicate the authenticated user.
        paramKey: userId
        in: path
        schema:
          type: string
        required: true
      - paramName: sendAsEmail
        description: The send-as alias to be deleted.
        paramKey: sendAsEmail
        in: path
        schema:
          type: string
        required: true
  - moduleName: Users / Settings / Send As / Get
    method: get
    path: /gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}
    description: Gets the specified send-as alias. Fails with an HTTP 404 error if
      the specified address is not a member of the collection.
    externalDocs: "https://developers.google.com/gmail/api/reference/rest"
    params:
      - paramName: userId
        description: User's email address. The special value "me" can be used to
          indicate the authenticated user.
        paramKey: userId
        in: path
        schema:
          type: string
        required: true
      - paramName: sendAsEmail
        description: The send-as alias to be retrieved.
        paramKey: sendAsEmail
        in: path
        schema:
          type: string
        required: true
  - moduleName: Users / Settings / Send As / Patch
    method: patch
    path: /gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}
    description: Patch the specified send-as alias.
    externalDocs: "https://developers.google.com/gmail/api/reference/rest"
    params:
      - paramName: userId
        description: User's email address. The special value "me" can be used to
          indicate the authenticated user.
        paramKey: userId
        in: path
        schema:
          type: string
        required: true
      - paramName: sendAsEmail
        description: The send-as alias to be updated.
        paramKey: sendAsEmail
        in: path
        schema:
          type: string
        required: true
      - paramName: displayName
        description: A name that appears in the "From:" header for mail sent using this
          alias. For custom "from" addresses, when this is empty, Gmail will
          populate the "From:" header with the name that is used for the primary
          address associated with the account. If the admin has disabled the
          ability for users to update their name format, requests to update this
          field for the primary login will silently fail.
        paramKey: displayName
        in: body
        schema:
          type: string
        required: false
      - paramName: isDefault
        description: Whether this address is selected as the default "From:" address in
          situations such as composing a new message or sending a vacation
          auto-reply. Every Gmail account has exactly one default send-as
          address, so the only legal value that clients may write to this field
          is `true`. Changing this from `false` to `true` for an address will
          result in this field becoming `false` for the other previous default
          address.
        paramKey: isDefault
        in: body
        schema:
          type: boolean
        required: false
      - paramName: isPrimary
        description: Whether this address is the primary address used to login to the
          account. Every Gmail account has exactly one primary address, and it
          cannot be deleted from the collection of send-as aliases. This field
          is read-only.
        paramKey: isPrimary
        in: body
        schema:
          type: boolean
        required: false
      - paramName: replyToAddress
        description: An optional email address that is included in a "Reply-To:" header
          for mail sent using this alias. If this is empty, Gmail will not
          generate a "Reply-To:" header.
        paramKey: replyToAddress
        in: body
        schema:
          type: string
        required: false
      - paramName: sendAsEmail
        description: The email address that appears in the "From:" header for mail sent
          using this alias. This is read-only for all operations except create.
        paramKey: sendAsEmail
        in: body
        schema:
          type: string
        required: false
      - paramName: signature
        description: An optional HTML signature that is included in messages composed
          with this alias in the Gmail web UI. This signature is added to new
          emails only.
        paramKey: signature
        in: body
        schema:
          type: string
        required: false
      - paramName: smtpMsa
        description: Configuration for communication with an SMTP service.
        paramKey: smtpMsa
        in: body
        schema:
          type: any
        required: false
      - paramName: treatAsAlias
        description: Whether Gmail should treat this address as an alias for the user's
          primary email address. This setting only applies to custom "from"
          aliases.
        paramKey: treatAsAlias
        in: body
        schema:
          type: boolean
        required: false
      - paramName: verificationStatus
        description: Indicates whether this address has been verified for use as a
          send-as alias. Read-only. This setting only applies to custom "from"
          aliases.
        paramKey: verificationStatus
        in: body
        schema:
          type: string
          enum:
            - verificationStatusUnspecified
            - accepted
            - pending
        required: false
    requestBodyType: json
  - moduleName: Users / Settings / Send As / Update
    method: put
    path: /gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}
    description: Updates a send-as alias. If a signature is provided, Gmail will
      sanitize the HTML before saving it with the alias. Addresses other than
      the primary address for the account can only be updated by service account
      clients that have been delegated domain-wide authority.
    externalDocs: "https://developers.google.com/gmail/api/reference/rest"
    params:
      - paramName: userId
        description: User's email address. The special value "me" can be used to
          indicate the authenticated user.
        paramKey: userId
        in: path
        schema:
          type: string
        required: true
      - paramName: sendAsEmail
        description: The send-as alias to be updated.
        paramKey: sendAsEmail
        in: path
        schema:
          type: string
        required: true
      - paramName: displayName
        description: A name that appears in the "From:" header for mail sent using this
          alias. For custom "from" addresses, when this is empty, Gmail will
          populate the "From:" header with the name that is used for the primary
          address associated with the account. If the admin has disabled the
          ability for users to update their name format, requests to update this
          field for the primary login will silently fail.
        paramKey: displayName
        in: body
        schema:
          type: string
        required: false
      - paramName: isDefault
        description: Whether this address is selected as the default "From:" address in
          situations such as composing a new message or sending a vacation
          auto-reply. Every Gmail account has exactly one default send-as
          address, so the only legal value that clients may write to this field
          is `true`. Changing this from `false` to `true` for an address will
          result in this field becoming `false` for the other previous default
          address.
        paramKey: isDefault
        in: body
        schema:
          type: boolean
        required: false
      - paramName: isPrimary
        description: Whether this address is the primary address used to login to the
          account. Every Gmail account has exactly one primary address, and it
          cannot be deleted from the collection of send-as aliases. This field
          is read-only.
        paramKey: isPrimary
        in: body
        schema:
          type: boolean
        required: false
      - paramName: replyToAddress
        description: An optional email address that is included in a "Reply-To:" header
          for mail sent using this alias. If this is empty, Gmail will not
          generate a "Reply-To:" header.
        paramKey: replyToAddress
        in: body
        schema:
          type: string
        required: false
      - paramName: sendAsEmail
        description: The email address that appears in the "From:" header for mail sent
          using this alias. This is read-only for all operations except create.
        paramKey: sendAsEmail
        in: body
        schema:
          type: string
        required: false
      - paramName: signature
        description: An optional HTML signature that is included in messages composed
          with this alias in the Gmail web UI. This signature is added to new
          emails only.
        paramKey: signature
        in: body
        schema:
          type: string
        required: false
      - paramName: smtpMsa
        description: Configuration for communication with an SMTP service.
        paramKey: smtpMsa
        in: body
        schema:
          type: any
        required: false
      - paramName: treatAsAlias
        description: Whether Gmail should treat this address as an alias for the user's
          primary email address. This setting only applies to custom "from"
          aliases.
        paramKey: treatAsAlias
        in: body
        schema:
          type: boolean
        required: false
      - paramName: verificationStatus
        description: Indicates whether this address has been verified for use as a
          send-as alias. Read-only. This setting only applies to custom "from"
          aliases.
        paramKey: verificationStatus
        in: body
        schema:
          type: string
          enum:
            - verificationStatusUnspecified
            - accepted
            - pending
        required: false
    requestBodyType: json
  - moduleName: Users / Settings / Send As / SMIME Info / List
    method: get
    path: /gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo
    description: Lists S/MIME configs for the specified send-as alias.
    externalDocs: "https://developers.google.com/gmail/api/reference/rest"
    params:
      - paramName: userId
        description: The user's email address. The special value `me` can be used to
          indicate the authenticated user.
        paramKey: userId
        in: path
        schema:
          type: string
        required: true
      - paramName: sendAsEmail
        description: The email address that appears in the "From:" header for mail sent
          using this alias.
        paramKey: sendAsEmail
        in: path
        schema:
          type: string
        required: true
  - moduleName: Users / Settings / Send As / SMIME Info / Insert
    method: post
    path: /gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo
    description: Insert (upload) the given S/MIME config for the specified send-as
      alias. Note that pkcs12 format is required for the key.
    externalDocs: "https://developers.google.com/gmail/api/reference/rest"
    params:
      - paramName: userId
        description: The user's email address. The special value `me` can be used to
          indicate the authenticated user.
        paramKey: userId
        in: path
        schema:
          type: string
        required: true
      - paramName: sendAsEmail
        description: The email address that appears in the "From:" header for mail sent
          using this alias.
        paramKey: sendAsEmail
        in: path
        schema:
          type: string
        required: true
      - paramName: encryptedKeyPassword
        description: Encrypted key password, when key is encrypted.
        paramKey: encryptedKeyPassword
        in: body
        schema:
          type: string
        required: false
      - paramName: expiration
        description: When the certificate expires (in milliseconds since epoch).
        paramKey: expiration
        in: body
        schema:
          type: string
        required: false
      - paramName: id
        description: The immutable ID for the SmimeInfo.
        paramKey: id
        in: body
        schema:
          type: string
        required: false
      - paramName: isDefault
        description: Whether this SmimeInfo is the default one for this user's send-as
          address.
        paramKey: isDefault
        in: body
        schema:
          type: boolean
        required: false
      - paramName: issuerCn
        description: The S/MIME certificate issuer's common name.
        paramKey: issuerCn
        in: body
        schema:
          type: string
        required: false
      - paramName: pem
        description: PEM formatted X509 concatenated certificate string (standard base64
          encoding). Format used for returning key, which includes public key as
          well as certificate chain (not private key).
        paramKey: pem
        in: body
        schema:
          type: string
        required: false
      - paramName: pkcs12
        description: PKCS#12 format containing a single private/public key pair and
          certificate chain. This format is only accepted from client for
          creating a new SmimeInfo and is never returned, because the private
          key is not intended to be exported. PKCS#12 may be encrypted, in which
          case encryptedKeyPassword should be set appropriately.
        paramKey: pkcs12
        in: body
        schema:
          type: string
        required: false
    requestBodyType: json
  - moduleName: Users / Settings / Send As / SMIME Info / Delete
    method: delete
    path: /gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo/{id}
    description: Deletes the specified S/MIME config for the specified send-as alias.
    externalDocs: "https://developers.google.com/gmail/api/reference/rest"
    params:
      - paramName: userId
        description: The user's email address. The special value `me` can be used to
          indicate the authenticated user.
        paramKey: userId
        in: path
        schema:
          type: string
        required: true
      - paramName: sendAsEmail
        description: The email address that appears in the "From:" header for mail sent
          using this alias.
        paramKey: sendAsEmail
        in: path
        schema:
          type: string
        required: true
      - paramName: id
        description: The immutable ID for the SmimeInfo.
        paramKey: id
        in: path
        schema:
          type: string
        required: true
  - moduleName: Users / Settings / Send As / SMIME Info / Get
    method: get
    path: /gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo/{id}
    description: Gets the specified S/MIME config for the specified send-as alias.
    externalDocs: "https://developers.google.com/gmail/api/reference/rest"
    params:
      - paramName: userId
        description: The user's email address. The special value `me` can be used to
          indicate the authenticated user.
        paramKey: userId
        in: path
        schema:
          type: string
        required: true
      - paramName: sendAsEmail
        description: The email address that appears in the "From:" header for mail sent
          using this alias.
        paramKey: sendAsEmail
        in: path
        schema:
          type: string
        required: true
      - paramName: id
        description: The immutable ID for the SmimeInfo.
        paramKey: id
        in: path
        schema:
          type: string
        required: true
  - moduleName: Users / Settings / Send As / SMIME Info / Set Default
    method: post
    path: /gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo/{id}/setDefault
    description: Sets the default S/MIME config for the specified send-as alias.
    externalDocs: "https://developers.google.com/gmail/api/reference/rest"
    params:
      - paramName: userId
        description: The user's email address. The special value `me` can be used to
          indicate the authenticated user.
        paramKey: userId
        in: path
        schema:
          type: string
        required: true
      - paramName: sendAsEmail
        description: The email address that appears in the "From:" header for mail sent
          using this alias.
        paramKey: sendAsEmail
        in: path
        schema:
          type: string
        required: true
      - paramName: id
        description: The immutable ID for the SmimeInfo.
        paramKey: id
        in: path
        schema:
          type: string
        required: true
  - moduleName: Users / Settings / Send As / Verify
    method: post
    path: /gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/verify
    description: Sends a verification email to the specified send-as alias address.
      The verification status must be `pending`. This method is only available
      to service account clients that have been delegated domain-wide authority.
    externalDocs: "https://developers.google.com/gmail/api/reference/rest"
    params:
      - paramName: userId
        description: User's email address. The special value "me" can be used to
          indicate the authenticated user.
        paramKey: userId
        in: path
        schema:
          type: string
        required: true
      - paramName: sendAsEmail
        description: The send-as alias to be verified.
        paramKey: sendAsEmail
        in: path
        schema:
          type: string
        required: true
  - moduleName: Users / Settings / Get Vacation
    method: get
    path: /gmail/v1/users/{userId}/settings/vacation
    description: Gets vacation responder settings.
    externalDocs: "https://developers.google.com/gmail/api/reference/rest"
    params:
      - paramName: userId
        description: User's email address. The special value "me" can be used to
          indicate the authenticated user.
        paramKey: userId
        in: path
        schema:
          type: string
        required: true
  - moduleName: Users / Settings / Update Vacation
    method: put
    path: /gmail/v1/users/{userId}/settings/vacation
    description: Updates vacation responder settings.
    externalDocs: "https://developers.google.com/gmail/api/reference/rest"
    params:
      - paramName: userId
        description: User's email address. The special value "me" can be used to
          indicate the authenticated user.
        paramKey: userId
        in: path
        schema:
          type: string
        required: true
      - paramName: enableAutoReply
        description: Flag that controls whether Gmail automatically replies to messages.
        paramKey: enableAutoReply
        in: body
        schema:
          type: boolean
        required: false
      - paramName: endTime
        description: An optional end time for sending auto-replies (epoch ms). When this
          is specified, Gmail will automatically reply only to messages that it
          receives before the end time. If both `startTime` and `endTime` are
          specified, `startTime` must precede `endTime`.
        paramKey: endTime
        in: body
        schema:
          type: string
        required: false
      - paramName: responseBodyHtml
        description: Response body in HTML format. Gmail will sanitize the HTML before
          storing it. If both `response_body_plain_text` and
          `response_body_html` are specified, `response_body_html` will be used.
        paramKey: responseBodyHtml
        in: body
        schema:
          type: string
        required: false
      - paramName: responseBodyPlainText
        description: Response body in plain text format. If both
          `response_body_plain_text` and `response_body_html` are specified,
          `response_body_html` will be used.
        paramKey: responseBodyPlainText
        in: body
        schema:
          type: string
        required: false
      - paramName: responseSubject
        description: Optional text to prepend to the subject line in vacation responses.
          In order to enable auto-replies, either the response subject or the
          response body must be nonempty.
        paramKey: responseSubject
        in: body
        schema:
          type: string
        required: false
      - paramName: restrictToContacts
        description: Flag that determines whether responses are sent to recipients who
          are not in the user's list of contacts.
        paramKey: restrictToContacts
        in: body
        schema:
          type: boolean
        required: false
      - paramName: restrictToDomain
        description: Flag that determines whether responses are sent to recipients who
          are outside of the user's domain. This feature is only available for
          Google Workspace users.
        paramKey: restrictToDomain
        in: body
        schema:
          type: boolean
        required: false
      - paramName: startTime
        description: An optional start time for sending auto-replies (epoch ms). When
          this is specified, Gmail will automatically reply only to messages
          that it receives after the start time. If both `startTime` and
          `endTime` are specified, `startTime` must precede `endTime`.
        paramKey: startTime
        in: body
        schema:
          type: string
        required: false
    requestBodyType: json
  - moduleName: Users / Stop
    method: post
    path: /gmail/v1/users/{userId}/stop
    description: Stop receiving push notifications for the given user mailbox.
    externalDocs: "https://developers.google.com/gmail/api/reference/rest"
    params:
      - paramName: userId
        description: The user's email address. The special value `me` can be used to
          indicate the authenticated user.
        paramKey: userId
        in: path
        schema:
          type: string
        required: true
  - moduleName: Users / Threads / List
    method: get
    path: /gmail/v1/users/{userId}/threads
    description: Lists the threads in the user's mailbox.
    externalDocs: "https://developers.google.com/gmail/api/reference/rest"
    params:
      - paramName: userId
        description: The user's email address. The special value `me` can be used to
          indicate the authenticated user.
        paramKey: userId
        in: path
        schema:
          type: string
        required: true
      - paramName: includeSpamTrash
        description: Include threads from `SPAM` and `TRASH` in the results.
        paramKey: includeSpamTrash
        in: query
        schema:
          type: boolean
        required: false
      - paramName: labelIds
        description: Only return threads with labels that match all of the specified
          label IDs.
        paramKey: labelIds
        in: query
        schema:
          type: array
          items:
            type: any
        required: false
        style: form
        explode: true
      - paramName: maxResults
        description: Maximum number of threads to return. This field defaults to 100.
          The maximum allowed value for this field is 500.
        paramKey: maxResults
        in: query
        schema:
          type: number
        required: false
      - paramName: pageToken
        description: Page token to retrieve a specific page of results in the list.
        paramKey: pageToken
        in: query
        schema:
          type: string
        required: false
      - paramName: q
        description: 'Only return threads matching the specified query. Supports the
          same query format as the Gmail search box. For example,
          `"from:someuser@example.com rfc822msgid: is:unread"`. Parameter cannot
          be used when accessing the api using the gmail.metadata scope.'
        paramKey: q
        in: query
        schema:
          type: string
        required: false
  - moduleName: Users / Threads / Delete
    method: delete
    path: /gmail/v1/users/{userId}/threads/{id}
    description: Immediately and permanently deletes the specified thread. Any
      messages that belong to the thread are also deleted. This operation cannot
      be undone. Prefer `threads.trash` instead.
    externalDocs: "https://developers.google.com/gmail/api/reference/rest"
    params:
      - paramName: userId
        description: The user's email address. The special value `me` can be used to
          indicate the authenticated user.
        paramKey: userId
        in: path
        schema:
          type: string
        required: true
      - paramName: id
        description: ID of the Thread to delete.
        paramKey: id
        in: path
        schema:
          type: string
        required: true
  - moduleName: Users / Threads / Get
    method: get
    path: /gmail/v1/users/{userId}/threads/{id}
    description: Gets the specified thread.
    externalDocs: "https://developers.google.com/gmail/api/reference/rest"
    params:
      - paramName: userId
        description: The user's email address. The special value `me` can be used to
          indicate the authenticated user.
        paramKey: userId
        in: path
        schema:
          type: string
        required: true
      - paramName: id
        description: The ID of the thread to retrieve.
        paramKey: id
        in: path
        schema:
          type: string
        required: true
      - paramName: format
        description: The format to return the messages in.
        paramKey: format
        in: query
        schema:
          type: string
          enum:
            - full
            - metadata
            - minimal
        required: false
      - paramName: metadataHeaders
        description: When given and format is METADATA, only include headers specified.
        paramKey: metadataHeaders
        in: query
        schema:
          type: array
          items:
            type: any
        required: false
        style: form
        explode: true
  - moduleName: Users / Threads / Modify
    method: post
    path: /gmail/v1/users/{userId}/threads/{id}/modify
    description: Modifies the labels applied to the thread. This applies to all
      messages in the thread.
    externalDocs: "https://developers.google.com/gmail/api/reference/rest"
    params:
      - paramName: userId
        description: The user's email address. The special value `me` can be used to
          indicate the authenticated user.
        paramKey: userId
        in: path
        schema:
          type: string
        required: true
      - paramName: id
        description: The ID of the thread to modify.
        paramKey: id
        in: path
        schema:
          type: string
        required: true
      - paramName: addLabelIds
        description: A list of IDs of labels to add to this thread. You can add up to
          100 labels with each update.
        paramKey: addLabelIds
        in: body
        schema:
          type: array
          items:
            type: any
        required: false
      - paramName: removeLabelIds
        description: A list of IDs of labels to remove from this thread. You can remove
          up to 100 labels with each update.
        paramKey: removeLabelIds
        in: body
        schema:
          type: array
          items:
            type: any
        required: false
    requestBodyType: json
  - moduleName: Users / Threads / Trash
    method: post
    path: /gmail/v1/users/{userId}/threads/{id}/trash
    description: Moves the specified thread to the trash. Any messages that belong
      to the thread are also moved to the trash.
    externalDocs: "https://developers.google.com/gmail/api/reference/rest"
    params:
      - paramName: userId
        description: The user's email address. The special value `me` can be used to
          indicate the authenticated user.
        paramKey: userId
        in: path
        schema:
          type: string
        required: true
      - paramName: id
        description: The ID of the thread to Trash.
        paramKey: id
        in: path
        schema:
          type: string
        required: true
  - moduleName: Users / Threads / Untrash
    method: post
    path: /gmail/v1/users/{userId}/threads/{id}/untrash
    description: Removes the specified thread from the trash. Any messages that
      belong to the thread are also removed from the trash.
    externalDocs: "https://developers.google.com/gmail/api/reference/rest"
    params:
      - paramName: userId
        description: The user's email address. The special value `me` can be used to
          indicate the authenticated user.
        paramKey: userId
        in: path
        schema:
          type: string
        required: true
      - paramName: id
        description: The ID of the thread to remove from Trash.
        paramKey: id
        in: path
        schema:
          type: string
        required: true
  - moduleName: Users / Watch
    method: post
    path: /gmail/v1/users/{userId}/watch
    description: Set up or update a push notification watch on the given user mailbox.
    externalDocs: "https://developers.google.com/gmail/api/reference/rest"
    params:
      - paramName: userId
        description: The user's email address. The special value `me` can be used to
          indicate the authenticated user.
        paramKey: userId
        in: path
        schema:
          type: string
        required: true
      - paramName: labelFilterAction
        description: Filtering behavior of labelIds list specified.
        paramKey: labelFilterAction
        in: body
        schema:
          type: string
          enum:
            - include
            - exclude
        required: false
      - paramName: labelIds
        description: List of label_ids to restrict notifications about. By default, if
          unspecified, all changes are pushed out. If specified then dictates
          which labels are required for a push notification to be generated.
        paramKey: labelIds
        in: body
        schema:
          type: array
          items:
            type: any
        required: false
      - paramName: topicName
        description: A fully qualified Google Cloud Pub/Sub API topic name to publish
          the events to. This topic name **must** already exist in Cloud Pub/Sub
          and you **must** have already granted gmail "publish" permission on
          it. For example, "projects/my-project-identifier/topics/my-topic-name"
          (using the Cloud Pub/Sub "v1" topic naming format). Note that the
          "my-project-identifier" portion must exactly match your Google
          developer project id (the one executing this watch request).
        paramKey: topicName
        in: body
        schema:
          type: string
        required: false
    requestBodyType: json
