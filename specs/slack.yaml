id: slack
displayName: Slack
workspaceId:
  development: ""
  production: Y9Mmif5WBIbGp6FX
baseUrl: https://slack.com/api
description: One way to interact with the Slack platform is its HTTP RPC-based
  Web API, a collection of methods requiring OAuth 2.0-based user, bot, or
  workspace tokens blessed with related OAuth scopes.
modules:
  - moduleName: Admin Apps / Approve
    method: post
    path: /admin.apps.approve
    description: Approve an app for installation on a workspace.
    externalDocs: https://api.slack.com/methods/admin.apps.approve
    params:
      - paramName: appId
        description: The id of the app to approve.
        originalName: app_id
        in: body
        schema:
          type: string
        required: false
      - paramName: requestId
        description: The id of the request to approve.
        originalName: request_id
        in: body
        schema:
          type: string
        required: false
      - paramName: teamId
        description: ""
        originalName: team_id
        in: body
        schema:
          type: string
        required: false
    requestBodyType: form
  - moduleName: Admin Apps / List Approved
    method: get
    path: /admin.apps.approved.list
    description: List approved apps for an org or workspace.
    externalDocs: https://api.slack.com/methods/admin.apps.approved.list
    params:
      - paramName: limit
        description: The maximum number of items to return. Must be between 1 - 1000
          both inclusive.
        originalName: limit
        in: query
        schema:
          type: number
        required: false
      - paramName: cursor
        description: Set `cursor` to `next_cursor` returned by the previous call to list
          items in the next page
        originalName: cursor
        in: query
        schema:
          type: string
        required: false
      - paramName: teamId
        description: ""
        originalName: team_id
        in: query
        schema:
          type: string
        required: false
      - paramName: enterpriseId
        description: ""
        originalName: enterprise_id
        in: query
        schema:
          type: string
        required: false
  - moduleName: Admin Apps / List Requests
    method: get
    path: /admin.apps.requests.list
    description: List app requests for a team/workspace.
    externalDocs: https://api.slack.com/methods/admin.apps.requests.list
    params:
      - paramName: limit
        description: The maximum number of items to return. Must be between 1 - 1000
          both inclusive.
        originalName: limit
        in: query
        schema:
          type: number
        required: false
      - paramName: cursor
        description: Set `cursor` to `next_cursor` returned by the previous call to list
          items in the next page
        originalName: cursor
        in: query
        schema:
          type: string
        required: false
      - paramName: teamId
        description: ""
        originalName: team_id
        in: query
        schema:
          type: string
        required: false
  - moduleName: Admin Apps / Restrict
    method: post
    path: /admin.apps.restrict
    description: Restrict an app for installation on a workspace.
    externalDocs: https://api.slack.com/methods/admin.apps.restrict
    params:
      - paramName: appId
        description: The id of the app to restrict.
        originalName: app_id
        in: body
        schema:
          type: string
        required: false
      - paramName: requestId
        description: The id of the request to restrict.
        originalName: request_id
        in: body
        schema:
          type: string
        required: false
      - paramName: teamId
        description: ""
        originalName: team_id
        in: body
        schema:
          type: string
        required: false
    requestBodyType: form
  - moduleName: Admin Apps / List Restricted
    method: get
    path: /admin.apps.restricted.list
    description: List restricted apps for an org or workspace.
    externalDocs: https://api.slack.com/methods/admin.apps.restricted.list
    params:
      - paramName: limit
        description: The maximum number of items to return. Must be between 1 - 1000
          both inclusive.
        originalName: limit
        in: query
        schema:
          type: number
        required: false
      - paramName: cursor
        description: Set `cursor` to `next_cursor` returned by the previous call to list
          items in the next page
        originalName: cursor
        in: query
        schema:
          type: string
        required: false
      - paramName: teamId
        description: ""
        originalName: team_id
        in: query
        schema:
          type: string
        required: false
      - paramName: enterpriseId
        description: ""
        originalName: enterprise_id
        in: query
        schema:
          type: string
        required: false
  - moduleName: Admin Conversations / Archive
    method: post
    path: /admin.conversations.archive
    description: Archive a public or private channel.
    externalDocs: https://api.slack.com/methods/admin.conversations.archive
    params:
      - paramName: channelId
        description: The channel to archive.
        originalName: channel_id
        in: body
        schema:
          type: string
        required: true
    requestBodyType: form
  - moduleName: Admin Conversations / Convert To Private
    method: post
    path: /admin.conversations.convertToPrivate
    description: Convert a public channel to a private channel.
    externalDocs: https://api.slack.com/methods/admin.conversations.convertToPrivate
    params:
      - paramName: channelId
        description: The channel to convert to private.
        originalName: channel_id
        in: body
        schema:
          type: string
        required: true
    requestBodyType: form
  - moduleName: Admin Conversations / Create
    method: post
    path: /admin.conversations.create
    description: Create a public or private channel-based conversation.
    externalDocs: https://api.slack.com/methods/admin.conversations.create
    params:
      - paramName: description
        description: Description of the public or private channel to create.
        originalName: description
        in: body
        schema:
          type: string
        required: false
      - paramName: isPrivate
        description: When `true`, creates a private channel instead of a public channel
        originalName: is_private
        in: body
        schema:
          type: boolean
        required: true
      - paramName: name
        description: Name of the public or private channel to create.
        originalName: name
        in: body
        schema:
          type: string
        required: true
      - paramName: orgWide
        description: "When `true`, the channel will be available org-wide. Note: if the
          channel is not `org_wide=true`, you must specify a `team_id` for this
          channel"
        originalName: org_wide
        in: body
        schema:
          type: boolean
        required: false
      - paramName: teamId
        description: "The workspace to create the channel in. Note: this argument is
          required unless you set `org_wide=true`."
        originalName: team_id
        in: body
        schema:
          type: string
        required: false
    requestBodyType: form
  - moduleName: Admin Conversations / Delete
    method: post
    path: /admin.conversations.delete
    description: Delete a public or private channel.
    externalDocs: https://api.slack.com/methods/admin.conversations.delete
    params:
      - paramName: channelId
        description: The channel to delete.
        originalName: channel_id
        in: body
        schema:
          type: string
        required: true
    requestBodyType: form
  - moduleName: Admin Conversations / Disconnect Shared
    method: post
    path: /admin.conversations.disconnectShared
    description: Disconnect a connected channel from one or more workspaces.
    externalDocs: https://api.slack.com/methods/admin.conversations.disconnectShared
    params:
      - paramName: channelId
        description: The channel to be disconnected from some workspaces.
        originalName: channel_id
        in: body
        schema:
          type: string
        required: true
      - paramName: leavingTeamIds
        description: The team to be removed from the channel. Currently only a single
          team id can be specified.
        originalName: leaving_team_ids
        in: body
        schema:
          type: string
        required: false
    requestBodyType: form
  - moduleName: Admin Conversations / List Original Connected Channels
    method: get
    path: /admin.conversations.ekm.listOriginalConnectedChannelInfo
    description: List all disconnected channels—i.e., channels that were once
      connected to other workspaces and then disconnected—and the corresponding
      original channel IDs for key revocation with EKM.
    externalDocs: https://api.slack.com/methods/admin.conversations.ekm.listOriginalConnectedChannelInfo
    params:
      - paramName: channelIds
        description: A comma-separated list of channels to filter to.
        originalName: channel_ids
        in: query
        schema:
          type: string
        required: false
      - paramName: teamIds
        description: A comma-separated list of the workspaces to which the channels you
          would like returned belong.
        originalName: team_ids
        in: query
        schema:
          type: string
        required: false
      - paramName: limit
        description: The maximum number of items to return. Must be between 1 - 1000
          both inclusive.
        originalName: limit
        in: query
        schema:
          type: number
        required: false
      - paramName: cursor
        description: Set `cursor` to `next_cursor` returned by the previous call to list
          items in the next page.
        originalName: cursor
        in: query
        schema:
          type: string
        required: false
  - moduleName: Admin Conversations / Get Preferences
    method: get
    path: /admin.conversations.getConversationPrefs
    description: Get conversation preferences for a public or private channel.
    externalDocs: https://api.slack.com/methods/admin.conversations.getConversationPrefs
    params:
      - paramName: channelId
        description: The channel to get preferences for.
        originalName: channel_id
        in: query
        schema:
          type: string
        required: true
  - moduleName: Admin Conversations / Get Teams
    method: get
    path: /admin.conversations.getTeams
    description: Get all the workspaces a given public or private channel is
      connected to within this Enterprise org.
    externalDocs: https://api.slack.com/methods/admin.conversations.getTeams
    params:
      - paramName: channelId
        description: The channel to determine connected workspaces within the
          organization for.
        originalName: channel_id
        in: query
        schema:
          type: string
        required: true
      - paramName: cursor
        description: Set `cursor` to `next_cursor` returned by the previous call to list
          items in the next page
        originalName: cursor
        in: query
        schema:
          type: string
        required: false
      - paramName: limit
        description: The maximum number of items to return. Must be between 1 - 1000
          both inclusive.
        originalName: limit
        in: query
        schema:
          type: number
        required: false
  - moduleName: Admin Conversations / Invite
    method: post
    path: /admin.conversations.invite
    description: Invite a user to a public or private channel.
    externalDocs: https://api.slack.com/methods/admin.conversations.invite
    params:
      - paramName: channelId
        description: The channel that the users will be invited to.
        originalName: channel_id
        in: body
        schema:
          type: string
        required: true
      - paramName: userIds
        description: The users to invite.
        originalName: user_ids
        in: body
        schema:
          type: string
        required: true
    requestBodyType: form
  - moduleName: Admin Conversations / Rename
    method: post
    path: /admin.conversations.rename
    description: Rename a public or private channel.
    externalDocs: https://api.slack.com/methods/admin.conversations.rename
    params:
      - paramName: channelId
        description: The channel to rename.
        originalName: channel_id
        in: body
        schema:
          type: string
        required: true
      - paramName: name
        description: ""
        originalName: name
        in: body
        schema:
          type: string
        required: true
    requestBodyType: form
  - moduleName: Admin Conversations / Restrict Access / Add Group
    method: post
    path: /admin.conversations.restrictAccess.addGroup
    description: Add an allowlist of IDP groups for accessing a channel
    externalDocs: https://api.slack.com/methods/admin.conversations.restrictAccess.addGroup
    params:
      - paramName: channelId
        description: The channel to link this group to.
        originalName: channel_id
        in: body
        schema:
          type: string
        required: true
      - paramName: groupId
        description: The [IDP
          Group](https://slack.com/help/articles/115001435788-Connect-identity-provider-groups-to-your-Enterprise-Grid-org)
          ID to be an allowlist for the private channel.
        originalName: group_id
        in: body
        schema:
          type: string
        required: true
      - paramName: teamId
        description: The workspace where the channel exists. This argument is required
          for channels only tied to one workspace, and optional for channels
          that are shared across an organization.
        originalName: team_id
        in: body
        schema:
          type: string
        required: false
      - paramName: token
        description: "Authentication token. Requires scope: `admin.conversations:write`"
        originalName: token
        in: body
        schema:
          type: string
        required: true
    requestBodyType: form
  - moduleName: Admin Conversations / Restrict Access / List Groups
    method: get
    path: /admin.conversations.restrictAccess.listGroups
    description: List all IDP Groups linked to a channel
    externalDocs: https://api.slack.com/methods/admin.conversations.restrictAccess.listGroups
    params:
      - paramName: channelId
        description: ""
        originalName: channel_id
        in: query
        schema:
          type: string
        required: true
      - paramName: teamId
        description: The workspace where the channel exists. This argument is required
          for channels only tied to one workspace, and optional for channels
          that are shared across an organization.
        originalName: team_id
        in: query
        schema:
          type: string
        required: false
  - moduleName: Admin Conversations / Restrict Access / Remove Group
    method: post
    path: /admin.conversations.restrictAccess.removeGroup
    description: Remove a linked IDP group linked from a private channel
    externalDocs: https://api.slack.com/methods/admin.conversations.restrictAccess.removeGroup
    params:
      - paramName: channelId
        description: The channel to remove the linked group from.
        originalName: channel_id
        in: body
        schema:
          type: string
        required: true
      - paramName: groupId
        description: The [IDP
          Group](https://slack.com/help/articles/115001435788-Connect-identity-provider-groups-to-your-Enterprise-Grid-org)
          ID to remove from the private channel.
        originalName: group_id
        in: body
        schema:
          type: string
        required: true
      - paramName: teamId
        description: The workspace where the channel exists. This argument is required
          for channels only tied to one workspace, and optional for channels
          that are shared across an organization.
        originalName: team_id
        in: body
        schema:
          type: string
        required: true
      - paramName: token
        description: "Authentication token. Requires scope: `admin.conversations:write`"
        originalName: token
        in: body
        schema:
          type: string
        required: true
    requestBodyType: form
  - moduleName: Admin Conversations / Search
    method: get
    path: /admin.conversations.search
    description: Search for public or private channels in an Enterprise organization.
    externalDocs: https://api.slack.com/methods/admin.conversations.search
    params:
      - paramName: teamIds
        description: Comma separated string of team IDs, signifying the workspaces to
          search through.
        originalName: team_ids
        in: query
        schema:
          type: string
        required: false
      - paramName: query
        description: Name of the the channel to query by.
        originalName: query
        in: query
        schema:
          type: string
        required: false
      - paramName: limit
        description: Maximum number of items to be returned. Must be between 1 - 20 both
          inclusive. Default is 10.
        originalName: limit
        in: query
        schema:
          type: number
        required: false
      - paramName: cursor
        description: Set `cursor` to `next_cursor` returned by the previous call to list
          items in the next page.
        originalName: cursor
        in: query
        schema:
          type: string
        required: false
      - paramName: searchChannelTypes
        description: The type of channel to include or exclude in the search. For
          example `private` will search private channels, while
          `private_exclude` will exclude them. For a full list of types, check
          the [Types section](#types).
        originalName: search_channel_types
        in: query
        schema:
          type: string
        required: false
      - paramName: sort
        description: "Possible values are `relevant` (search ranking based on what we
          think is closest), `name` (alphabetical), `member_count` (number of
          users in the channel), and `created` (date channel was created). You
          can optionally pair this with the `sort_dir` arg to change how it is
          sorted "
        originalName: sort
        in: query
        schema:
          type: string
        required: false
      - paramName: sortDir
        description: Sort direction. Possible values are `asc` for ascending order like
          (1, 2, 3) or (a, b, c), and `desc` for descending order like (3, 2, 1)
          or (c, b, a)
        originalName: sort_dir
        in: query
        schema:
          type: string
        required: false
  - moduleName: Admin Conversations / Set Preferences
    method: post
    path: /admin.conversations.setConversationPrefs
    description: Set the posting permissions for a public or private channel.
    externalDocs: https://api.slack.com/methods/admin.conversations.setConversationPrefs
    params:
      - paramName: channelId
        description: The channel to set the prefs for
        originalName: channel_id
        in: body
        schema:
          type: string
        required: true
      - paramName: prefs
        description: The prefs for this channel in a stringified JSON format.
        originalName: prefs
        in: body
        schema:
          type: string
        required: true
    requestBodyType: form
  - moduleName: Admin Conversations / Set Teams
    method: post
    path: /admin.conversations.setTeams
    description: Set the workspaces in an Enterprise grid org that connect to a
      public or private channel.
    externalDocs: https://api.slack.com/methods/admin.conversations.setTeams
    params:
      - paramName: channelId
        description: The encoded `channel_id` to add or remove to workspaces.
        originalName: channel_id
        in: body
        schema:
          type: string
        required: true
      - paramName: orgChannel
        description: True if channel has to be converted to an org channel
        originalName: org_channel
        in: body
        schema:
          type: boolean
        required: false
      - paramName: targetTeamIds
        description: A comma-separated list of workspaces to which the channel should be
          shared. Not required if the channel is being shared org-wide.
        originalName: target_team_ids
        in: body
        schema:
          type: string
        required: false
      - paramName: teamId
        description: The workspace to which the channel belongs. Omit this argument if
          the channel is a cross-workspace shared channel.
        originalName: team_id
        in: body
        schema:
          type: string
        required: false
    requestBodyType: form
  - moduleName: Admin Conversations / Unarchive
    method: post
    path: /admin.conversations.unarchive
    description: Unarchive a public or private channel.
    externalDocs: https://api.slack.com/methods/admin.conversations.unarchive
    params:
      - paramName: channelId
        description: The channel to unarchive.
        originalName: channel_id
        in: body
        schema:
          type: string
        required: true
    requestBodyType: form
  - moduleName: Admin Emoji / Add
    method: post
    path: /admin.emoji.add
    description: Add an emoji.
    externalDocs: https://api.slack.com/methods/admin.emoji.add
    params:
      - paramName: name
        description: The name of the emoji to be removed. Colons (`:myemoji:`) around
          the value are not required, although they may be included.
        originalName: name
        in: body
        schema:
          type: string
        required: true
      - paramName: token
        description: "Authentication token. Requires scope: `admin.teams:write`"
        originalName: token
        in: body
        schema:
          type: string
        required: true
      - paramName: url
        description: The URL of a file to use as an image for the emoji. Square images
          under 128KB and with transparent backgrounds work best.
        originalName: url
        in: body
        schema:
          type: string
        required: true
    requestBodyType: form
  - moduleName: Admin Emoji / Add Alias
    method: post
    path: /admin.emoji.addAlias
    description: Add an emoji alias.
    externalDocs: https://api.slack.com/methods/admin.emoji.addAlias
    params:
      - paramName: aliasFor
        description: The alias of the emoji.
        originalName: alias_for
        in: body
        schema:
          type: string
        required: true
      - paramName: name
        description: The name of the emoji to be aliased. Colons (`:myemoji:`) around
          the value are not required, although they may be included.
        originalName: name
        in: body
        schema:
          type: string
        required: true
      - paramName: token
        description: "Authentication token. Requires scope: `admin.teams:write`"
        originalName: token
        in: body
        schema:
          type: string
        required: true
    requestBodyType: form
  - moduleName: Admin Emoji / List
    method: get
    path: /admin.emoji.list
    description: List emoji for an Enterprise Grid organization.
    externalDocs: https://api.slack.com/methods/admin.emoji.list
    params:
      - paramName: cursor
        description: Set `cursor` to `next_cursor` returned by the previous call to list
          items in the next page
        originalName: cursor
        in: query
        schema:
          type: string
        required: false
      - paramName: limit
        description: The maximum number of items to return. Must be between 1 - 1000
          both inclusive.
        originalName: limit
        in: query
        schema:
          type: number
        required: false
  - moduleName: Admin Emoji / Remove
    method: post
    path: /admin.emoji.remove
    description: Remove an emoji across an Enterprise Grid organization
    externalDocs: https://api.slack.com/methods/admin.emoji.remove
    params:
      - paramName: name
        description: The name of the emoji to be removed. Colons (`:myemoji:`) around
          the value are not required, although they may be included.
        originalName: name
        in: body
        schema:
          type: string
        required: true
      - paramName: token
        description: "Authentication token. Requires scope: `admin.teams:write`"
        originalName: token
        in: body
        schema:
          type: string
        required: true
    requestBodyType: form
  - moduleName: Admin Emoji / Rename
    method: post
    path: /admin.emoji.rename
    description: Rename an emoji.
    externalDocs: https://api.slack.com/methods/admin.emoji.rename
    params:
      - paramName: name
        description: The name of the emoji to be renamed. Colons (`:myemoji:`) around
          the value are not required, although they may be included.
        originalName: name
        in: body
        schema:
          type: string
        required: true
      - paramName: newName
        description: The new name of the emoji.
        originalName: new_name
        in: body
        schema:
          type: string
        required: true
      - paramName: token
        description: "Authentication token. Requires scope: `admin.teams:write`"
        originalName: token
        in: body
        schema:
          type: string
        required: true
    requestBodyType: form
  - moduleName: Admin Invite Requests / Approve
    method: post
    path: /admin.inviteRequests.approve
    description: Approve a workspace invite request.
    externalDocs: https://api.slack.com/methods/admin.inviteRequests.approve
    params:
      - paramName: inviteRequestId
        description: ID of the request to invite.
        originalName: invite_request_id
        in: body
        schema:
          type: string
        required: true
      - paramName: teamId
        description: ID for the workspace where the invite request was made.
        originalName: team_id
        in: body
        schema:
          type: string
        required: false
    requestBodyType: form
  - moduleName: Admin Invite Requests / List Approved
    method: get
    path: /admin.inviteRequests.approved.list
    description: List all approved workspace invite requests.
    externalDocs: https://api.slack.com/methods/admin.inviteRequests.approved.list
    params:
      - paramName: teamId
        description: ID for the workspace where the invite requests were made.
        originalName: team_id
        in: query
        schema:
          type: string
        required: false
      - paramName: cursor
        description: Value of the `next_cursor` field sent as part of the previous API
          response
        originalName: cursor
        in: query
        schema:
          type: string
        required: false
      - paramName: limit
        description: The number of results that will be returned by the API on each
          invocation. Must be between 1 - 1000, both inclusive
        originalName: limit
        in: query
        schema:
          type: number
        required: false
  - moduleName: Admin Invite Requests / List Denied
    method: get
    path: /admin.inviteRequests.denied.list
    description: List all denied workspace invite requests.
    externalDocs: https://api.slack.com/methods/admin.inviteRequests.denied.list
    params:
      - paramName: teamId
        description: ID for the workspace where the invite requests were made.
        originalName: team_id
        in: query
        schema:
          type: string
        required: false
      - paramName: cursor
        description: Value of the `next_cursor` field sent as part of the previous api
          response
        originalName: cursor
        in: query
        schema:
          type: string
        required: false
      - paramName: limit
        description: The number of results that will be returned by the API on each
          invocation. Must be between 1 - 1000 both inclusive
        originalName: limit
        in: query
        schema:
          type: number
        required: false
  - moduleName: Admin Invite Requests / Deny
    method: post
    path: /admin.inviteRequests.deny
    description: Deny a workspace invite request.
    externalDocs: https://api.slack.com/methods/admin.inviteRequests.deny
    params:
      - paramName: inviteRequestId
        description: ID of the request to invite.
        originalName: invite_request_id
        in: body
        schema:
          type: string
        required: true
      - paramName: teamId
        description: ID for the workspace where the invite request was made.
        originalName: team_id
        in: body
        schema:
          type: string
        required: false
    requestBodyType: form
  - moduleName: Admin Invite Requests / List
    method: get
    path: /admin.inviteRequests.list
    description: List all pending workspace invite requests.
    externalDocs: https://api.slack.com/methods/admin.inviteRequests.list
    params:
      - paramName: teamId
        description: ID for the workspace where the invite requests were made.
        originalName: team_id
        in: query
        schema:
          type: string
        required: false
      - paramName: cursor
        description: Value of the `next_cursor` field sent as part of the previous API
          response
        originalName: cursor
        in: query
        schema:
          type: string
        required: false
      - paramName: limit
        description: The number of results that will be returned by the API on each
          invocation. Must be between 1 - 1000, both inclusive
        originalName: limit
        in: query
        schema:
          type: number
        required: false
  - moduleName: Admin Teams / List Admins
    method: get
    path: /admin.teams.admins.list
    description: List all of the admins on a given workspace.
    externalDocs: https://api.slack.com/methods/admin.teams.admins.list
    params:
      - paramName: limit
        description: The maximum number of items to return.
        originalName: limit
        in: query
        schema:
          type: number
        required: false
      - paramName: cursor
        description: Set `cursor` to `next_cursor` returned by the previous call to list
          items in the next page.
        originalName: cursor
        in: query
        schema:
          type: string
        required: false
      - paramName: teamId
        description: ""
        originalName: team_id
        in: query
        schema:
          type: string
        required: true
  - moduleName: Admin Teams / Create
    method: post
    path: /admin.teams.create
    description: Create an Enterprise team.
    externalDocs: https://api.slack.com/methods/admin.teams.create
    params:
      - paramName: teamDescription
        description: Description for the team.
        originalName: team_description
        in: body
        schema:
          type: string
        required: false
      - paramName: teamDiscoverability
        description: Who can join the team. A team's discoverability can be `open`,
          `closed`, `invite_only`, or `unlisted`.
        originalName: team_discoverability
        in: body
        schema:
          type: string
        required: false
      - paramName: teamDomain
        description: Team domain (for example, slacksoftballteam).
        originalName: team_domain
        in: body
        schema:
          type: string
        required: true
      - paramName: teamName
        description: Team name (for example, Slack Softball Team).
        originalName: team_name
        in: body
        schema:
          type: string
        required: true
    requestBodyType: form
  - moduleName: Admin Teams / List
    method: get
    path: /admin.teams.list
    description: List all teams on an Enterprise organization
    externalDocs: https://api.slack.com/methods/admin.teams.list
    params:
      - paramName: limit
        description: The maximum number of items to return. Must be between 1 - 100 both
          inclusive.
        originalName: limit
        in: query
        schema:
          type: number
        required: false
      - paramName: cursor
        description: Set `cursor` to `next_cursor` returned by the previous call to list
          items in the next page.
        originalName: cursor
        in: query
        schema:
          type: string
        required: false
  - moduleName: Admin Teams / List Owners
    method: get
    path: /admin.teams.owners.list
    description: List all of the owners on a given workspace.
    externalDocs: https://api.slack.com/methods/admin.teams.owners.list
    params:
      - paramName: teamId
        description: ""
        originalName: team_id
        in: query
        schema:
          type: string
        required: true
      - paramName: limit
        description: The maximum number of items to return. Must be between 1 - 1000
          both inclusive.
        originalName: limit
        in: query
        schema:
          type: number
        required: false
      - paramName: cursor
        description: Set `cursor` to `next_cursor` returned by the previous call to list
          items in the next page.
        originalName: cursor
        in: query
        schema:
          type: string
        required: false
  - moduleName: Admin Teams / Settings
    method: get
    path: /admin.teams.settings.info
    description: Fetch information about settings in a workspace
    externalDocs: https://api.slack.com/methods/admin.teams.settings.info
    params:
      - paramName: teamId
        description: ""
        originalName: team_id
        in: query
        schema:
          type: string
        required: true
  - moduleName: Admin Teams / Set Default Channels
    method: post
    path: /admin.teams.settings.setDefaultChannels
    description: Set the default channels of a workspace.
    externalDocs: https://api.slack.com/methods/admin.teams.settings.setDefaultChannels
    params:
      - paramName: channelIds
        description: An array of channel IDs.
        originalName: channel_ids
        in: body
        schema:
          type: string
        required: true
      - paramName: teamId
        description: ID for the workspace to set the default channel for.
        originalName: team_id
        in: body
        schema:
          type: string
        required: true
      - paramName: token
        description: "Authentication token. Requires scope: `admin.teams:write`"
        originalName: token
        in: body
        schema:
          type: string
        required: true
    requestBodyType: form
  - moduleName: Admin Teams / Set Description
    method: post
    path: /admin.teams.settings.setDescription
    description: Set the description of a given workspace.
    externalDocs: https://api.slack.com/methods/admin.teams.settings.setDescription
    params:
      - paramName: description
        description: The new description for the workspace.
        originalName: description
        in: body
        schema:
          type: string
        required: true
      - paramName: teamId
        description: ID for the workspace to set the description for.
        originalName: team_id
        in: body
        schema:
          type: string
        required: true
    requestBodyType: form
  - moduleName: Admin Teams / Set Discoverability
    method: post
    path: /admin.teams.settings.setDiscoverability
    description: An API method that allows admins to set the discoverability of a
      given workspace
    externalDocs: https://api.slack.com/methods/admin.teams.settings.setDiscoverability
    params:
      - paramName: discoverability
        description: This workspace's discovery setting. It must be set to one of
          `open`, `invite_only`, `closed`, or `unlisted`.
        originalName: discoverability
        in: body
        schema:
          type: string
        required: true
      - paramName: teamId
        description: The ID of the workspace to set discoverability on.
        originalName: team_id
        in: body
        schema:
          type: string
        required: true
    requestBodyType: form
  - moduleName: Admin Teams / Set Icon
    method: post
    path: /admin.teams.settings.setIcon
    description: Sets the icon of a workspace.
    externalDocs: https://api.slack.com/methods/admin.teams.settings.setIcon
    params:
      - paramName: imageUrl
        description: Image URL for the icon
        originalName: image_url
        in: body
        schema:
          type: string
        required: true
      - paramName: teamId
        description: ID for the workspace to set the icon for.
        originalName: team_id
        in: body
        schema:
          type: string
        required: true
      - paramName: token
        description: "Authentication token. Requires scope: `admin.teams:write`"
        originalName: token
        in: body
        schema:
          type: string
        required: true
    requestBodyType: form
  - moduleName: Admin Teams / Set Name
    method: post
    path: /admin.teams.settings.setName
    description: Set the name of a given workspace.
    externalDocs: https://api.slack.com/methods/admin.teams.settings.setName
    params:
      - paramName: name
        description: The new name of the workspace.
        originalName: name
        in: body
        schema:
          type: string
        required: true
      - paramName: teamId
        description: ID for the workspace to set the name for.
        originalName: team_id
        in: body
        schema:
          type: string
        required: true
    requestBodyType: form
  - moduleName: Admin Usergroups / Add Channels
    method: post
    path: /admin.usergroups.addChannels
    description: Add one or more default channels to an IDP group.
    externalDocs: https://api.slack.com/methods/admin.usergroups.addChannels
    params:
      - paramName: channelIds
        description: Comma separated string of channel IDs.
        originalName: channel_ids
        in: body
        schema:
          type: string
        required: true
      - paramName: teamId
        description: The workspace to add default channels in.
        originalName: team_id
        in: body
        schema:
          type: string
        required: false
      - paramName: usergroupId
        description: ID of the IDP group to add default channels for.
        originalName: usergroup_id
        in: body
        schema:
          type: string
        required: true
    requestBodyType: form
  - moduleName: Admin Usergroups / Add Teams
    method: post
    path: /admin.usergroups.addTeams
    description: Associate one or more default workspaces with an organization-wide
      IDP group.
    externalDocs: https://api.slack.com/methods/admin.usergroups.addTeams
    params:
      - paramName: autoProvision
        description: When `true`, this method automatically creates new workspace
          accounts for the IDP group members.
        originalName: auto_provision
        in: body
        schema:
          type: boolean
        required: false
      - paramName: teamIds
        description: A comma separated list of encoded team (workspace) IDs. Each
          workspace *MUST* belong to the organization associated with the token.
        originalName: team_ids
        in: body
        schema:
          type: string
        required: true
      - paramName: usergroupId
        description: An encoded usergroup (IDP Group) ID.
        originalName: usergroup_id
        in: body
        schema:
          type: string
        required: true
    requestBodyType: form
  - moduleName: Admin Usergroups / List Channels
    method: get
    path: /admin.usergroups.listChannels
    description: List the channels linked to an org-level IDP group (user group).
    externalDocs: https://api.slack.com/methods/admin.usergroups.listChannels
    params:
      - paramName: usergroupId
        description: ID of the IDP group to list default channels for.
        originalName: usergroup_id
        in: query
        schema:
          type: string
        required: true
      - paramName: teamId
        description: ID of the the workspace.
        originalName: team_id
        in: query
        schema:
          type: string
        required: false
      - paramName: includeNumMembers
        description: Flag to include or exclude the count of members per channel.
        originalName: include_num_members
        in: query
        schema:
          type: boolean
        required: false
  - moduleName: Admin Usergroups / Remove Channels
    method: post
    path: /admin.usergroups.removeChannels
    description: Remove one or more default channels from an org-level IDP group
      (user group).
    externalDocs: https://api.slack.com/methods/admin.usergroups.removeChannels
    params:
      - paramName: channelIds
        description: Comma-separated string of channel IDs
        originalName: channel_ids
        in: body
        schema:
          type: string
        required: true
      - paramName: usergroupId
        description: ID of the IDP Group
        originalName: usergroup_id
        in: body
        schema:
          type: string
        required: true
    requestBodyType: form
  - moduleName: Admin Users / Assign
    method: post
    path: /admin.users.assign
    description: Add an Enterprise user to a workspace.
    externalDocs: https://api.slack.com/methods/admin.users.assign
    params:
      - paramName: channelIds
        description: Comma separated values of channel IDs to add user in the new workspace.
        originalName: channel_ids
        in: body
        schema:
          type: string
        required: false
      - paramName: isRestricted
        description: True if user should be added to the workspace as a guest.
        originalName: is_restricted
        in: body
        schema:
          type: boolean
        required: false
      - paramName: isUltraRestricted
        description: True if user should be added to the workspace as a single-channel
          guest.
        originalName: is_ultra_restricted
        in: body
        schema:
          type: boolean
        required: false
      - paramName: teamId
        description: The ID (`T1234`) of the workspace.
        originalName: team_id
        in: body
        schema:
          type: string
        required: true
      - paramName: userId
        description: The ID of the user to add to the workspace.
        originalName: user_id
        in: body
        schema:
          type: string
        required: true
    requestBodyType: form
  - moduleName: Admin Users / Invite
    method: post
    path: /admin.users.invite
    description: Invite a user to a workspace.
    externalDocs: https://api.slack.com/methods/admin.users.invite
    params:
      - paramName: channelIds
        description: A comma-separated list of `channel_id`s for this user to join. At
          least one channel is required.
        originalName: channel_ids
        in: body
        schema:
          type: string
        required: true
      - paramName: customMessage
        description: An optional message to send to the user in the invite email.
        originalName: custom_message
        in: body
        schema:
          type: string
        required: false
      - paramName: email
        description: The email address of the person to invite.
        originalName: email
        in: body
        schema:
          type: string
        required: true
      - paramName: guestExpirationTs
        description: Timestamp when guest account should be disabled. Only include this
          timestamp if you are inviting a guest user and you want their account
          to expire on a certain date.
        originalName: guest_expiration_ts
        in: body
        schema:
          type: string
        required: false
      - paramName: isRestricted
        description: "Is this user a multi-channel guest user? (default: false)"
        originalName: is_restricted
        in: body
        schema:
          type: boolean
        required: false
      - paramName: isUltraRestricted
        description: "Is this user a single channel guest user? (default: false)"
        originalName: is_ultra_restricted
        in: body
        schema:
          type: boolean
        required: false
      - paramName: realName
        description: Full name of the user.
        originalName: real_name
        in: body
        schema:
          type: string
        required: false
      - paramName: resend
        description: "Allow this invite to be resent in the future if a user has not
          signed up yet. (default: false)"
        originalName: resend
        in: body
        schema:
          type: boolean
        required: false
      - paramName: teamId
        description: The ID (`T1234`) of the workspace.
        originalName: team_id
        in: body
        schema:
          type: string
        required: true
    requestBodyType: form
  - moduleName: Admin Users / List
    method: get
    path: /admin.users.list
    description: List users on a workspace
    externalDocs: https://api.slack.com/methods/admin.users.list
    params:
      - paramName: teamId
        description: The ID (`T1234`) of the workspace.
        originalName: team_id
        in: query
        schema:
          type: string
        required: true
      - paramName: cursor
        description: Set `cursor` to `next_cursor` returned by the previous call to list
          items in the next page.
        originalName: cursor
        in: query
        schema:
          type: string
        required: false
      - paramName: limit
        description: Limit for how many users to be retrieved per page
        originalName: limit
        in: query
        schema:
          type: number
        required: false
  - moduleName: Admin Users / Remove
    method: post
    path: /admin.users.remove
    description: Remove a user from a workspace.
    externalDocs: https://api.slack.com/methods/admin.users.remove
    params:
      - paramName: teamId
        description: The ID (`T1234`) of the workspace.
        originalName: team_id
        in: body
        schema:
          type: string
        required: true
      - paramName: userId
        description: The ID of the user to remove.
        originalName: user_id
        in: body
        schema:
          type: string
        required: true
    requestBodyType: form
  - moduleName: Admin Users / Invalidate Session
    method: post
    path: /admin.users.session.invalidate
    description: Invalidate a single session for a user by session_id
    externalDocs: https://api.slack.com/methods/admin.users.session.invalidate
    params:
      - paramName: sessionId
        description: ""
        originalName: session_id
        in: body
        schema:
          type: number
        required: true
      - paramName: teamId
        description: ID of the team that the session belongs to
        originalName: team_id
        in: body
        schema:
          type: string
        required: true
    requestBodyType: form
  - moduleName: Admin Users / Reset Session
    method: post
    path: /admin.users.session.reset
    description: Wipes all valid sessions on all devices for a given user
    externalDocs: https://api.slack.com/methods/admin.users.session.reset
    params:
      - paramName: mobileOnly
        description: "Only expire mobile sessions (default: false)"
        originalName: mobile_only
        in: body
        schema:
          type: boolean
        required: false
      - paramName: userId
        description: The ID of the user to wipe sessions for
        originalName: user_id
        in: body
        schema:
          type: string
        required: true
      - paramName: webOnly
        description: "Only expire web sessions (default: false)"
        originalName: web_only
        in: body
        schema:
          type: boolean
        required: false
    requestBodyType: form
  - moduleName: Admin Users / Set Admin
    method: post
    path: /admin.users.setAdmin
    description: Set an existing guest, regular user, or owner to be an admin user.
    externalDocs: https://api.slack.com/methods/admin.users.setAdmin
    params:
      - paramName: teamId
        description: The ID (`T1234`) of the workspace.
        originalName: team_id
        in: body
        schema:
          type: string
        required: true
      - paramName: userId
        description: The ID of the user to designate as an admin.
        originalName: user_id
        in: body
        schema:
          type: string
        required: true
    requestBodyType: form
  - moduleName: Admin Users / Set Expiration
    method: post
    path: /admin.users.setExpiration
    description: Set an expiration for a guest user
    externalDocs: https://api.slack.com/methods/admin.users.setExpiration
    params:
      - paramName: expirationTs
        description: Timestamp when guest account should be disabled.
        originalName: expiration_ts
        in: body
        schema:
          type: number
        required: true
      - paramName: teamId
        description: The ID (`T1234`) of the workspace.
        originalName: team_id
        in: body
        schema:
          type: string
        required: true
      - paramName: userId
        description: The ID of the user to set an expiration for.
        originalName: user_id
        in: body
        schema:
          type: string
        required: true
    requestBodyType: form
  - moduleName: Admin Users / Set Owner
    method: post
    path: /admin.users.setOwner
    description: Set an existing guest, regular user, or admin user to be a workspace owner.
    externalDocs: https://api.slack.com/methods/admin.users.setOwner
    params:
      - paramName: teamId
        description: The ID (`T1234`) of the workspace.
        originalName: team_id
        in: body
        schema:
          type: string
        required: true
      - paramName: userId
        description: Id of the user to promote to owner.
        originalName: user_id
        in: body
        schema:
          type: string
        required: true
    requestBodyType: form
  - moduleName: Admin Users / Set Regular
    method: post
    path: /admin.users.setRegular
    description: Set an existing guest user, admin user, or owner to be a regular user.
    externalDocs: https://api.slack.com/methods/admin.users.setRegular
    params:
      - paramName: teamId
        description: The ID (`T1234`) of the workspace.
        originalName: team_id
        in: body
        schema:
          type: string
        required: true
      - paramName: userId
        description: The ID of the user to designate as a regular user.
        originalName: user_id
        in: body
        schema:
          type: string
        required: true
    requestBodyType: form
  - moduleName: Test
    method: get
    path: /api.test
    description: Checks API calling code.
    externalDocs: https://api.slack.com/methods/api.test
    params:
      - paramName: error
        description: Error response to return
        originalName: error
        in: query
        schema:
          type: string
        required: false
      - paramName: foo
        description: example property to return
        originalName: foo
        in: query
        schema:
          type: string
        required: false
  - moduleName: Apps / List Event Authorizations
    method: get
    path: /apps.event.authorizations.list
    description: Get a list of authorizations for the given event context. Each
      authorization represents an app installation that the event is visible to.
    externalDocs: https://api.slack.com/methods/apps.event.authorizations.list
    params:
      - paramName: eventContext
        description: ""
        originalName: event_context
        in: query
        schema:
          type: string
        required: true
      - paramName: cursor
        description: ""
        originalName: cursor
        in: query
        schema:
          type: string
        required: false
      - paramName: limit
        description: ""
        originalName: limit
        in: query
        schema:
          type: number
        required: false
  - moduleName: Apps / Permissions / Get
    method: get
    path: /apps.permissions.info
    description: Returns list of permissions this app has on a team.
    externalDocs: https://api.slack.com/methods/apps.permissions.info
    params: []
  - moduleName: Apps / Permissions / Request
    method: get
    path: /apps.permissions.request
    description: Allows an app to request additional scopes
    externalDocs: https://api.slack.com/methods/apps.permissions.request
    params:
      - paramName: scopes
        description: A comma separated list of scopes to request for
        originalName: scopes
        in: query
        schema:
          type: string
        required: true
      - paramName: triggerId
        description: Token used to trigger the permissions API
        originalName: trigger_id
        in: query
        schema:
          type: string
        required: true
  - moduleName: Apps / Permissions / List Resources
    method: get
    path: /apps.permissions.resources.list
    description: Returns list of resource grants this app has on a team.
    externalDocs: https://api.slack.com/methods/apps.permissions.resources.list
    params:
      - paramName: cursor
        description: Paginate through collections of data by setting the `cursor`
          parameter to a `next_cursor` attribute returned by a previous
          request's `response_metadata`. Default value fetches the first "page"
          of the collection. See [pagination](/docs/pagination) for more detail.
        originalName: cursor
        in: query
        schema:
          type: string
        required: false
      - paramName: limit
        description: The maximum number of items to return.
        originalName: limit
        in: query
        schema:
          type: number
        required: false
  - moduleName: Apps / Permissions / List Scopes
    method: get
    path: /apps.permissions.scopes.list
    description: Returns list of scopes this app has on a team.
    externalDocs: https://api.slack.com/methods/apps.permissions.scopes.list
    params: []
  - moduleName: Apps / Permissions / List Users
    method: get
    path: /apps.permissions.users.list
    description: Returns list of user grants and corresponding scopes this app has
      on a team.
    externalDocs: https://api.slack.com/methods/apps.permissions.users.list
    params:
      - paramName: cursor
        description: Paginate through collections of data by setting the `cursor`
          parameter to a `next_cursor` attribute returned by a previous
          request's `response_metadata`. Default value fetches the first "page"
          of the collection. See [pagination](/docs/pagination) for more detail.
        originalName: cursor
        in: query
        schema:
          type: string
        required: false
      - paramName: limit
        description: The maximum number of items to return.
        originalName: limit
        in: query
        schema:
          type: number
        required: false
  - moduleName: Apps / Permissions / Request
    method: get
    path: /apps.permissions.users.request
    description: Enables an app to trigger a permissions modal to grant an app
      access to a user access scope.
    externalDocs: https://api.slack.com/methods/apps.permissions.users.request
    params:
      - paramName: scopes
        description: A comma separated list of user scopes to request for
        originalName: scopes
        in: query
        schema:
          type: string
        required: true
      - paramName: triggerId
        description: Token used to trigger the request
        originalName: trigger_id
        in: query
        schema:
          type: string
        required: true
      - paramName: user
        description: The user this scope is being requested for
        originalName: user
        in: query
        schema:
          type: string
        required: true
  - moduleName: Apps / Uninstall
    method: get
    path: /apps.uninstall
    description: Uninstalls your app from a workspace.
    externalDocs: https://api.slack.com/methods/apps.uninstall
    params:
      - paramName: clientId
        description: Issued when you created your application.
        originalName: client_id
        in: query
        schema:
          type: string
        required: false
      - paramName: clientSecret
        description: Issued when you created your application.
        originalName: client_secret
        in: query
        schema:
          type: string
        required: false
  - moduleName: Auth / Revoke
    method: get
    path: /auth.revoke
    description: Revokes a token.
    externalDocs: https://api.slack.com/methods/auth.revoke
    params:
      - paramName: test
        description: Setting this parameter to `1` triggers a _testing mode_ where the
          specified token will not actually be revoked.
        originalName: test
        in: query
        schema:
          type: boolean
        required: false
  - moduleName: Auth / Test
    method: get
    path: /auth.test
    description: Checks authentication & identity.
    externalDocs: https://api.slack.com/methods/auth.test
    params: []
  - moduleName: Bots / Info
    method: get
    path: /bots.info
    description: Gets information about a bot user.
    externalDocs: https://api.slack.com/methods/bots.info
    params:
      - paramName: bot
        description: Bot user to get info on
        originalName: bot
        in: query
        schema:
          type: string
        required: false
  - moduleName: Calls / Add
    method: post
    path: /calls.add
    description: Registers a new Call.
    externalDocs: https://api.slack.com/methods/calls.add
    params:
      - paramName: createdBy
        description: The valid Slack user ID of the user who created this Call. When
          this method is called with a user token, the `created_by` field is
          optional and defaults to the authed user of the token. Otherwise, the
          field is required.
        originalName: created_by
        in: body
        schema:
          type: string
        required: false
      - paramName: dateStart
        description: Call start time in UTC UNIX timestamp format
        originalName: date_start
        in: body
        schema:
          type: number
        required: false
      - paramName: desktopAppJoinUrl
        description: When supplied, available Slack clients will attempt to directly
          launch the 3rd-party Call with this URL.
        originalName: desktop_app_join_url
        in: body
        schema:
          type: string
        required: false
      - paramName: externalDisplayId
        description: An optional, human-readable ID supplied by the 3rd-party Call
          provider. If supplied, this ID will be displayed in the Call object.
        originalName: external_display_id
        in: body
        schema:
          type: string
        required: false
      - paramName: externalUniqueId
        description: An ID supplied by the 3rd-party Call provider. It must be unique
          across all Calls from that service.
        originalName: external_unique_id
        in: body
        schema:
          type: string
        required: true
      - paramName: joinUrl
        description: The URL required for a client to join the Call.
        originalName: join_url
        in: body
        schema:
          type: string
        required: true
      - paramName: title
        description: The name of the Call.
        originalName: title
        in: body
        schema:
          type: string
        required: false
      - paramName: users
        description: The list of users to register as participants in the Call. [Read
          more on how to specify users here](/apis/calls#users).
        originalName: users
        in: body
        schema:
          type: string
        required: false
    requestBodyType: form
  - moduleName: Calls / End
    method: post
    path: /calls.end
    description: Ends a Call.
    externalDocs: https://api.slack.com/methods/calls.end
    params:
      - paramName: duration
        description: Call duration in seconds
        originalName: duration
        in: body
        schema:
          type: number
        required: false
      - paramName: id
        description: "`id` returned when registering the call using the
          [`calls.add`](/methods/calls.add) method."
        originalName: id
        in: body
        schema:
          type: string
        required: true
    requestBodyType: form
  - moduleName: Calls / Info
    method: get
    path: /calls.info
    description: Returns information about a Call.
    externalDocs: https://api.slack.com/methods/calls.info
    params:
      - paramName: id
        description: "`id` of the Call returned by the [`calls.add`](/methods/calls.add)
          method."
        originalName: id
        in: query
        schema:
          type: string
        required: true
  - moduleName: Calls / Add Participants
    method: post
    path: /calls.participants.add
    description: Registers new participants added to a Call.
    externalDocs: https://api.slack.com/methods/calls.participants.add
    params:
      - paramName: id
        description: "`id` returned by the [`calls.add`](/methods/calls.add) method."
        originalName: id
        in: body
        schema:
          type: string
        required: true
      - paramName: users
        description: The list of users to add as participants in the Call. [Read more on
          how to specify users here](/apis/calls#users).
        originalName: users
        in: body
        schema:
          type: string
        required: true
    requestBodyType: form
  - moduleName: Calls / Remove Participants
    method: post
    path: /calls.participants.remove
    description: Registers participants removed from a Call.
    externalDocs: https://api.slack.com/methods/calls.participants.remove
    params:
      - paramName: id
        description: "`id` returned by the [`calls.add`](/methods/calls.add) method."
        originalName: id
        in: body
        schema:
          type: string
        required: true
      - paramName: users
        description: The list of users to remove as participants in the Call. [Read more
          on how to specify users here](/apis/calls#users).
        originalName: users
        in: body
        schema:
          type: string
        required: true
    requestBodyType: form
  - moduleName: Calls / Update
    method: post
    path: /calls.update
    description: Updates information about a Call.
    externalDocs: https://api.slack.com/methods/calls.update
    params:
      - paramName: desktopAppJoinUrl
        description: When supplied, available Slack clients will attempt to directly
          launch the 3rd-party Call with this URL.
        originalName: desktop_app_join_url
        in: body
        schema:
          type: string
        required: false
      - paramName: id
        description: "`id` returned by the [`calls.add`](/methods/calls.add) method."
        originalName: id
        in: body
        schema:
          type: string
        required: true
      - paramName: joinUrl
        description: The URL required for a client to join the Call.
        originalName: join_url
        in: body
        schema:
          type: string
        required: false
      - paramName: title
        description: The name of the Call.
        originalName: title
        in: body
        schema:
          type: string
        required: false
    requestBodyType: form
  - moduleName: Chat / Delete
    method: post
    path: /chat.delete
    description: Deletes a message.
    externalDocs: https://api.slack.com/methods/chat.delete
    params:
      - paramName: asUser
        description: Pass true to delete the message as the authed user with
          `chat:write:user` scope. [Bot users](/bot-users) in this context are
          considered authed users. If unused or false, the message will be
          deleted with `chat:write:bot` scope.
        originalName: as_user
        in: body
        schema:
          type: boolean
        required: false
      - paramName: channel
        description: Channel containing the message to be deleted.
        originalName: channel
        in: body
        schema:
          type: string
        required: false
      - paramName: ts
        description: Timestamp of the message to be deleted.
        originalName: ts
        in: body
        schema:
          type: number
        required: false
    requestBodyType: form
  - moduleName: Chat / Delete Scheduled Message
    method: post
    path: /chat.deleteScheduledMessage
    description: Deletes a pending scheduled message from the queue.
    externalDocs: https://api.slack.com/methods/chat.deleteScheduledMessage
    params:
      - paramName: asUser
        description: Pass true to delete the message as the authed user with
          `chat:write:user` scope. [Bot users](/bot-users) in this context are
          considered authed users. If unused or false, the message will be
          deleted with `chat:write:bot` scope.
        originalName: as_user
        in: body
        schema:
          type: boolean
        required: false
      - paramName: channel
        description: The channel the scheduled_message is posting to
        originalName: channel
        in: body
        schema:
          type: string
        required: true
      - paramName: scheduledMessageId
        description: "`scheduled_message_id` returned from call to chat.scheduleMessage"
        originalName: scheduled_message_id
        in: body
        schema:
          type: string
        required: true
    requestBodyType: form
  - moduleName: Chat / Get Permalink
    method: get
    path: /chat.getPermalink
    description: Retrieve a permalink URL for a specific extant message
    externalDocs: https://api.slack.com/methods/chat.getPermalink
    params:
      - paramName: channel
        description: The ID of the conversation or channel containing the message
        originalName: channel
        in: query
        schema:
          type: string
        required: true
      - paramName: messageTs
        description: A message's `ts` value, uniquely identifying it within a channel
        originalName: message_ts
        in: query
        schema:
          type: string
        required: true
  - moduleName: Chat / MeMessage
    method: post
    path: /chat.meMessage
    description: Share a me message into a channel.
    externalDocs: https://api.slack.com/methods/chat.meMessage
    params:
      - paramName: channel
        description: Channel to send message to. Can be a public channel, private group
          or IM channel. Can be an encoded ID, or a name.
        originalName: channel
        in: body
        schema:
          type: string
        required: false
      - paramName: text
        description: Text of the message to send.
        originalName: text
        in: body
        schema:
          type: string
        required: false
    requestBodyType: form
  - moduleName: Chat / Post Ephemeral
    method: post
    path: /chat.postEphemeral
    description: Sends an ephemeral message to a user in a channel.
    externalDocs: https://api.slack.com/methods/chat.postEphemeral
    params:
      - paramName: asUser
        description: Pass true to post the message as the authed user. Defaults to true
          if the chat:write:bot scope is not included. Otherwise, defaults to
          false.
        originalName: as_user
        in: body
        schema:
          type: boolean
        required: false
      - paramName: attachments
        description: A JSON-based array of structured attachments, presented as a
          URL-encoded string.
        originalName: attachments
        in: body
        schema:
          type: string
        required: false
      - paramName: blocks
        description: A JSON-based array of structured blocks, presented as a URL-encoded
          string.
        originalName: blocks
        in: body
        schema:
          type: string
        required: false
      - paramName: channel
        description: Channel, private group, or IM channel to send message to. Can be an
          encoded ID, or a name.
        originalName: channel
        in: body
        schema:
          type: string
        required: true
      - paramName: iconEmoji
        description: Emoji to use as the icon for this message. Overrides `icon_url`.
          Must be used in conjunction with `as_user` set to `false`, otherwise
          ignored. See [authorship](#authorship) below.
        originalName: icon_emoji
        in: body
        schema:
          type: string
        required: false
      - paramName: iconUrl
        description: URL to an image to use as the icon for this message. Must be used
          in conjunction with `as_user` set to false, otherwise ignored. See
          [authorship](#authorship) below.
        originalName: icon_url
        in: body
        schema:
          type: string
        required: false
      - paramName: linkNames
        description: Find and link channel names and usernames.
        originalName: link_names
        in: body
        schema:
          type: boolean
        required: false
      - paramName: parse
        description: Change how messages are treated. Defaults to `none`. See
          [below](#formatting).
        originalName: parse
        in: body
        schema:
          type: string
        required: false
      - paramName: text
        description: How this field works and whether it is required depends on other
          fields you use in your API call. [See below](#text_usage) for more
          detail.
        originalName: text
        in: body
        schema:
          type: string
        required: false
      - paramName: threadTs
        description: Provide another message's `ts` value to post this message in a
          thread. Avoid using a reply's `ts` value; use its parent's value
          instead. Ephemeral messages in threads are only shown if there is
          already an active thread.
        originalName: thread_ts
        in: body
        schema:
          type: string
        required: false
      - paramName: user
        description: "`id` of the user who will receive the ephemeral message. The user
          should be in the channel specified by the `channel` argument."
        originalName: user
        in: body
        schema:
          type: string
        required: true
      - paramName: username
        description: Set your bot's user name. Must be used in conjunction with
          `as_user` set to false, otherwise ignored. See
          [authorship](#authorship) below.
        originalName: username
        in: body
        schema:
          type: string
        required: false
    requestBodyType: form
  - moduleName: Chat / Post Message
    method: post
    path: /chat.postMessage
    description: Sends a message to a channel.
    externalDocs: https://api.slack.com/methods/chat.postMessage
    params:
      - paramName: asUser
        description: Pass true to post the message as the authed user, instead of as a
          bot. Defaults to false. See [authorship](#authorship) below.
        originalName: as_user
        in: body
        schema:
          type: string
        required: false
      - paramName: attachments
        description: A JSON-based array of structured attachments, presented as a
          URL-encoded string.
        originalName: attachments
        in: body
        schema:
          type: string
        required: false
      - paramName: blocks
        description: A JSON-based array of structured blocks, presented as a URL-encoded
          string.
        originalName: blocks
        in: body
        schema:
          type: string
        required: false
      - paramName: channel
        description: Channel, private group, or IM channel to send message to. Can be an
          encoded ID, or a name. See [below](#channels) for more details.
        originalName: channel
        in: body
        schema:
          type: string
        required: true
      - paramName: iconEmoji
        description: Emoji to use as the icon for this message. Overrides `icon_url`.
          Must be used in conjunction with `as_user` set to `false`, otherwise
          ignored. See [authorship](#authorship) below.
        originalName: icon_emoji
        in: body
        schema:
          type: string
        required: false
      - paramName: iconUrl
        description: URL to an image to use as the icon for this message. Must be used
          in conjunction with `as_user` set to false, otherwise ignored. See
          [authorship](#authorship) below.
        originalName: icon_url
        in: body
        schema:
          type: string
        required: false
      - paramName: linkNames
        description: Find and link channel names and usernames.
        originalName: link_names
        in: body
        schema:
          type: boolean
        required: false
      - paramName: mrkdwn
        description: Disable Slack markup parsing by setting to `false`. Enabled by default.
        originalName: mrkdwn
        in: body
        schema:
          type: boolean
        required: false
      - paramName: parse
        description: Change how messages are treated. Defaults to `none`. See
          [below](#formatting).
        originalName: parse
        in: body
        schema:
          type: string
        required: false
      - paramName: replyBroadcast
        description: Used in conjunction with `thread_ts` and indicates whether reply
          should be made visible to everyone in the channel or conversation.
          Defaults to `false`.
        originalName: reply_broadcast
        in: body
        schema:
          type: boolean
        required: false
      - paramName: text
        description: How this field works and whether it is required depends on other
          fields you use in your API call. [See below](#text_usage) for more
          detail.
        originalName: text
        in: body
        schema:
          type: string
        required: false
      - paramName: threadTs
        description: Provide another message's `ts` value to make this message a reply.
          Avoid using a reply's `ts` value; use its parent instead.
        originalName: thread_ts
        in: body
        schema:
          type: string
        required: false
      - paramName: unfurlLinks
        description: Pass true to enable unfurling of primarily text-based content.
        originalName: unfurl_links
        in: body
        schema:
          type: boolean
        required: false
      - paramName: unfurlMedia
        description: Pass false to disable unfurling of media content.
        originalName: unfurl_media
        in: body
        schema:
          type: boolean
        required: false
      - paramName: username
        description: Set your bot's user name. Must be used in conjunction with
          `as_user` set to false, otherwise ignored. See
          [authorship](#authorship) below.
        originalName: username
        in: body
        schema:
          type: string
        required: false
    requestBodyType: form
  - moduleName: Chat / Schedule Message
    method: post
    path: /chat.scheduleMessage
    description: Schedules a message to be sent to a channel.
    externalDocs: https://api.slack.com/methods/chat.scheduleMessage
    params:
      - paramName: asUser
        description: Pass true to post the message as the authed user, instead of as a
          bot. Defaults to false. See
          [chat.postMessage](chat.postMessage#authorship).
        originalName: as_user
        in: body
        schema:
          type: boolean
        required: false
      - paramName: attachments
        description: A JSON-based array of structured attachments, presented as a
          URL-encoded string.
        originalName: attachments
        in: body
        schema:
          type: string
        required: false
      - paramName: blocks
        description: A JSON-based array of structured blocks, presented as a URL-encoded
          string.
        originalName: blocks
        in: body
        schema:
          type: string
        required: false
      - paramName: channel
        description: Channel, private group, or DM channel to send message to. Can be an
          encoded ID, or a name. See [below](#channels) for more details.
        originalName: channel
        in: body
        schema:
          type: string
        required: false
      - paramName: linkNames
        description: Find and link channel names and usernames.
        originalName: link_names
        in: body
        schema:
          type: boolean
        required: false
      - paramName: parse
        description: Change how messages are treated. Defaults to `none`. See
          [chat.postMessage](chat.postMessage#formatting).
        originalName: parse
        in: body
        schema:
          type: string
        required: false
      - paramName: postAt
        description: Unix EPOCH timestamp of time in future to send the message.
        originalName: post_at
        in: body
        schema:
          type: string
        required: false
      - paramName: replyBroadcast
        description: Used in conjunction with `thread_ts` and indicates whether reply
          should be made visible to everyone in the channel or conversation.
          Defaults to `false`.
        originalName: reply_broadcast
        in: body
        schema:
          type: boolean
        required: false
      - paramName: text
        description: How this field works and whether it is required depends on other
          fields you use in your API call. [See below](#text_usage) for more
          detail.
        originalName: text
        in: body
        schema:
          type: string
        required: false
      - paramName: threadTs
        description: Provide another message's `ts` value to make this message a reply.
          Avoid using a reply's `ts` value; use its parent instead.
        originalName: thread_ts
        in: body
        schema:
          type: number
        required: false
      - paramName: unfurlLinks
        description: Pass true to enable unfurling of primarily text-based content.
        originalName: unfurl_links
        in: body
        schema:
          type: boolean
        required: false
      - paramName: unfurlMedia
        description: Pass false to disable unfurling of media content.
        originalName: unfurl_media
        in: body
        schema:
          type: boolean
        required: false
    requestBodyType: form
  - moduleName: Chat / List Scheduled Messages
    method: get
    path: /chat.scheduledMessages.list
    description: Returns a list of scheduled messages.
    externalDocs: https://api.slack.com/methods/chat.scheduledMessages.list
    params:
      - paramName: channel
        description: The channel of the scheduled messages
        originalName: channel
        in: query
        schema:
          type: string
        required: false
      - paramName: latest
        description: A UNIX timestamp of the latest value in the time range
        originalName: latest
        in: query
        schema:
          type: number
        required: false
      - paramName: oldest
        description: A UNIX timestamp of the oldest value in the time range
        originalName: oldest
        in: query
        schema:
          type: number
        required: false
      - paramName: limit
        description: Maximum number of original entries to return.
        originalName: limit
        in: query
        schema:
          type: number
        required: false
      - paramName: cursor
        description: For pagination purposes, this is the `cursor` value returned from a
          previous call to `chat.scheduledmessages.list` indicating where you
          want to start this call from.
        originalName: cursor
        in: query
        schema:
          type: string
        required: false
  - moduleName: Chat / Unfurl
    method: post
    path: /chat.unfurl
    description: Provide custom unfurl behavior for user-posted URLs
    externalDocs: https://api.slack.com/methods/chat.unfurl
    params:
      - paramName: channel
        description: Channel ID of the message
        originalName: channel
        in: body
        schema:
          type: string
        required: true
      - paramName: ts
        description: Timestamp of the message to add unfurl behavior to.
        originalName: ts
        in: body
        schema:
          type: string
        required: true
      - paramName: unfurls
        description: URL-encoded JSON map with keys set to URLs featured in the the
          message, pointing to their unfurl blocks or message attachments.
        originalName: unfurls
        in: body
        schema:
          type: string
        required: false
      - paramName: userAuthMessage
        description: Provide a simply-formatted string to send as an ephemeral message
          to the user as invitation to authenticate further and enable full
          unfurling behavior
        originalName: user_auth_message
        in: body
        schema:
          type: string
        required: false
      - paramName: userAuthRequired
        description: Set to `true` or `1` to indicate the user must install your Slack
          app to trigger unfurls for this domain
        originalName: user_auth_required
        in: body
        schema:
          type: boolean
        required: false
      - paramName: userAuthUrl
        description: Send users to this custom URL where they will complete
          authentication in your app to fully trigger unfurling. Value should be
          properly URL-encoded.
        originalName: user_auth_url
        in: body
        schema:
          type: string
        required: false
    requestBodyType: form
  - moduleName: Chat / Update
    method: post
    path: /chat.update
    description: Updates a message.
    externalDocs: https://api.slack.com/methods/chat.update
    params:
      - paramName: asUser
        description: Pass true to update the message as the authed user. [Bot
          users](/bot-users) in this context are considered authed users.
        originalName: as_user
        in: body
        schema:
          type: string
        required: false
      - paramName: attachments
        description: A JSON-based array of structured attachments, presented as a
          URL-encoded string. This field is required when not presenting `text`.
          If you don't include this field, the message's previous `attachments`
          will be retained. To remove previous `attachments`, include an empty
          array for this field.
        originalName: attachments
        in: body
        schema:
          type: string
        required: false
      - paramName: blocks
        description: A JSON-based array of [structured blocks](/block-kit/building),
          presented as a URL-encoded string. If you don't include this field,
          the message's previous `blocks` will be retained. To remove previous
          `blocks`, include an empty array for this field.
        originalName: blocks
        in: body
        schema:
          type: string
        required: false
      - paramName: channel
        description: Channel containing the message to be updated.
        originalName: channel
        in: body
        schema:
          type: string
        required: true
      - paramName: linkNames
        description: Find and link channel names and usernames. Defaults to `none`. If
          you do not specify a value for this field, the original value set for
          the message will be overwritten with the default, `none`.
        originalName: link_names
        in: body
        schema:
          type: string
        required: false
      - paramName: parse
        description: Change how messages are treated. Defaults to `client`, unlike
          `chat.postMessage`. Accepts either `none` or `full`. If you do not
          specify a value for this field, the original value set for the message
          will be overwritten with the default, `client`.
        originalName: parse
        in: body
        schema:
          type: string
        required: false
      - paramName: text
        description: New text for the message, using the [default formatting
          rules](/reference/surfaces/formatting). It's not required when
          presenting `blocks` or `attachments`.
        originalName: text
        in: body
        schema:
          type: string
        required: false
      - paramName: ts
        description: Timestamp of the message to be updated.
        originalName: ts
        in: body
        schema:
          type: string
        required: true
    requestBodyType: form
  - moduleName: Conversations / Archive
    method: post
    path: /conversations.archive
    description: Archives a conversation.
    externalDocs: https://api.slack.com/methods/conversations.archive
    params:
      - paramName: channel
        description: ID of conversation to archive
        originalName: channel
        in: body
        schema:
          type: string
        required: false
    requestBodyType: form
  - moduleName: Conversations / Close
    method: post
    path: /conversations.close
    description: Closes a direct message or multi-person direct message.
    externalDocs: https://api.slack.com/methods/conversations.close
    params:
      - paramName: channel
        description: Conversation to close.
        originalName: channel
        in: body
        schema:
          type: string
        required: false
    requestBodyType: form
  - moduleName: Conversations / Create
    method: post
    path: /conversations.create
    description: Initiates a public or private channel-based conversation
    externalDocs: https://api.slack.com/methods/conversations.create
    params:
      - paramName: isPrivate
        description: Create a private channel instead of a public one
        originalName: is_private
        in: body
        schema:
          type: boolean
        required: false
      - paramName: name
        description: Name of the public or private channel to create
        originalName: name
        in: body
        schema:
          type: string
        required: false
    requestBodyType: form
  - moduleName: Conversations / Get History
    method: get
    path: /conversations.history
    description: Fetches a conversation's history of messages and events.
    externalDocs: https://api.slack.com/methods/conversations.history
    params:
      - paramName: channel
        description: Conversation ID to fetch history for.
        originalName: channel
        in: query
        schema:
          type: string
        required: false
      - paramName: latest
        description: End of time range of messages to include in results.
        originalName: latest
        in: query
        schema:
          type: number
        required: false
      - paramName: oldest
        description: Start of time range of messages to include in results.
        originalName: oldest
        in: query
        schema:
          type: number
        required: false
      - paramName: inclusive
        description: Include messages with latest or oldest timestamp in results only
          when either timestamp is specified.
        originalName: inclusive
        in: query
        schema:
          type: boolean
        required: false
      - paramName: limit
        description: The maximum number of items to return. Fewer than the requested
          number of items may be returned, even if the end of the users list
          hasn't been reached.
        originalName: limit
        in: query
        schema:
          type: number
        required: false
      - paramName: cursor
        description: Paginate through collections of data by setting the `cursor`
          parameter to a `next_cursor` attribute returned by a previous
          request's `response_metadata`. Default value fetches the first "page"
          of the collection. See [pagination](/docs/pagination) for more detail.
        originalName: cursor
        in: query
        schema:
          type: string
        required: false
  - moduleName: Conversations / Get Info
    method: get
    path: /conversations.info
    description: Retrieve information about a conversation.
    externalDocs: https://api.slack.com/methods/conversations.info
    params:
      - paramName: channel
        description: Conversation ID to learn more about
        originalName: channel
        in: query
        schema:
          type: string
        required: false
      - paramName: includeLocale
        description: Set this to `true` to receive the locale for this conversation.
          Defaults to `false`
        originalName: include_locale
        in: query
        schema:
          type: boolean
        required: false
      - paramName: includeNumMembers
        description: Set to `true` to include the member count for the specified
          conversation. Defaults to `false`
        originalName: include_num_members
        in: query
        schema:
          type: boolean
        required: false
  - moduleName: Conversations / Invite
    method: post
    path: /conversations.invite
    description: Invites users to a channel.
    externalDocs: https://api.slack.com/methods/conversations.invite
    params:
      - paramName: channel
        description: The ID of the public or private channel to invite user(s) to.
        originalName: channel
        in: body
        schema:
          type: string
        required: false
      - paramName: users
        description: A comma separated list of user IDs. Up to 1000 users may be listed.
        originalName: users
        in: body
        schema:
          type: string
        required: false
    requestBodyType: form
  - moduleName: Conversations / Join
    method: post
    path: /conversations.join
    description: Joins an existing conversation.
    externalDocs: https://api.slack.com/methods/conversations.join
    params:
      - paramName: channel
        description: ID of conversation to join
        originalName: channel
        in: body
        schema:
          type: string
        required: false
    requestBodyType: form
  - moduleName: Conversations / Kick
    method: post
    path: /conversations.kick
    description: Removes a user from a conversation.
    externalDocs: https://api.slack.com/methods/conversations.kick
    params:
      - paramName: channel
        description: ID of conversation to remove user from.
        originalName: channel
        in: body
        schema:
          type: string
        required: false
      - paramName: user
        description: User ID to be removed.
        originalName: user
        in: body
        schema:
          type: string
        required: false
    requestBodyType: form
  - moduleName: Conversations / Leave
    method: post
    path: /conversations.leave
    description: Leaves a conversation.
    externalDocs: https://api.slack.com/methods/conversations.leave
    params:
      - paramName: channel
        description: Conversation to leave
        originalName: channel
        in: body
        schema:
          type: string
        required: false
    requestBodyType: form
  - moduleName: Conversations / List
    method: get
    path: /conversations.list
    description: Lists all channels in a Slack team.
    externalDocs: https://api.slack.com/methods/conversations.list
    params:
      - paramName: excludeArchived
        description: Set to `true` to exclude archived channels from the list
        originalName: exclude_archived
        in: query
        schema:
          type: boolean
        required: false
      - paramName: types
        description: Mix and match channel types by providing a comma-separated list of
          any combination of `public_channel`, `private_channel`, `mpim`, `im`
        originalName: types
        in: query
        schema:
          type: string
        required: false
      - paramName: limit
        description: The maximum number of items to return. Fewer than the requested
          number of items may be returned, even if the end of the list hasn't
          been reached. Must be an integer no larger than 1000.
        originalName: limit
        in: query
        schema:
          type: number
        required: false
      - paramName: cursor
        description: Paginate through collections of data by setting the `cursor`
          parameter to a `next_cursor` attribute returned by a previous
          request's `response_metadata`. Default value fetches the first "page"
          of the collection. See [pagination](/docs/pagination) for more detail.
        originalName: cursor
        in: query
        schema:
          type: string
        required: false
  - moduleName: Conversations / Mark
    method: post
    path: /conversations.mark
    description: Sets the read cursor in a channel.
    externalDocs: https://api.slack.com/methods/conversations.mark
    params:
      - paramName: channel
        description: Channel or conversation to set the read cursor for.
        originalName: channel
        in: body
        schema:
          type: string
        required: false
      - paramName: ts
        description: Unique identifier of message you want marked as most recently seen
          in this conversation.
        originalName: ts
        in: body
        schema:
          type: number
        required: false
    requestBodyType: form
  - moduleName: Conversations / Get Members
    method: get
    path: /conversations.members
    description: Retrieve members of a conversation.
    externalDocs: https://api.slack.com/methods/conversations.members
    params:
      - paramName: channel
        description: ID of the conversation to retrieve members for
        originalName: channel
        in: query
        schema:
          type: string
        required: false
      - paramName: limit
        description: The maximum number of items to return. Fewer than the requested
          number of items may be returned, even if the end of the users list
          hasn't been reached.
        originalName: limit
        in: query
        schema:
          type: number
        required: false
      - paramName: cursor
        description: Paginate through collections of data by setting the `cursor`
          parameter to a `next_cursor` attribute returned by a previous
          request's `response_metadata`. Default value fetches the first "page"
          of the collection. See [pagination](/docs/pagination) for more detail.
        originalName: cursor
        in: query
        schema:
          type: string
        required: false
  - moduleName: Conversations / Open
    method: post
    path: /conversations.open
    description: Opens or resumes a direct message or multi-person direct message.
    externalDocs: https://api.slack.com/methods/conversations.open
    params:
      - paramName: channel
        description: Resume a conversation by supplying an `im` or `mpim`'s ID. Or
          provide the `users` field instead.
        originalName: channel
        in: body
        schema:
          type: string
        required: false
      - paramName: returnIm
        description: Boolean, indicates you want the full IM channel definition in the
          response.
        originalName: return_im
        in: body
        schema:
          type: boolean
        required: false
      - paramName: users
        description: Comma separated lists of users. If only one user is included, this
          creates a 1:1 DM.  The ordering of the users is preserved whenever a
          multi-person direct message is returned. Supply a `channel` when not
          supplying `users`.
        originalName: users
        in: body
        schema:
          type: string
        required: false
    requestBodyType: form
  - moduleName: Conversations / Rename
    method: post
    path: /conversations.rename
    description: Renames a conversation.
    externalDocs: https://api.slack.com/methods/conversations.rename
    params:
      - paramName: channel
        description: ID of conversation to rename
        originalName: channel
        in: body
        schema:
          type: string
        required: false
      - paramName: name
        description: New name for conversation.
        originalName: name
        in: body
        schema:
          type: string
        required: false
    requestBodyType: form
  - moduleName: Conversations / Get Replies
    method: get
    path: /conversations.replies
    description: Retrieve a thread of messages posted to a conversation
    externalDocs: https://api.slack.com/methods/conversations.replies
    params:
      - paramName: channel
        description: Conversation ID to fetch thread from.
        originalName: channel
        in: query
        schema:
          type: string
        required: false
      - paramName: ts
        description: Unique identifier of a thread's parent message. `ts` must be the
          timestamp of an existing message with 0 or more replies. If there are
          no replies then just the single message referenced by `ts` will return
          - it is just an ordinary, unthreaded message.
        originalName: ts
        in: query
        schema:
          type: number
        required: false
      - paramName: latest
        description: End of time range of messages to include in results.
        originalName: latest
        in: query
        schema:
          type: number
        required: false
      - paramName: oldest
        description: Start of time range of messages to include in results.
        originalName: oldest
        in: query
        schema:
          type: number
        required: false
      - paramName: inclusive
        description: Include messages with latest or oldest timestamp in results only
          when either timestamp is specified.
        originalName: inclusive
        in: query
        schema:
          type: boolean
        required: false
      - paramName: limit
        description: The maximum number of items to return. Fewer than the requested
          number of items may be returned, even if the end of the users list
          hasn't been reached.
        originalName: limit
        in: query
        schema:
          type: number
        required: false
      - paramName: cursor
        description: Paginate through collections of data by setting the `cursor`
          parameter to a `next_cursor` attribute returned by a previous
          request's `response_metadata`. Default value fetches the first "page"
          of the collection. See [pagination](/docs/pagination) for more detail.
        originalName: cursor
        in: query
        schema:
          type: string
        required: false
  - moduleName: Conversations / Set Purpose
    method: post
    path: /conversations.setPurpose
    description: Sets the purpose for a conversation.
    externalDocs: https://api.slack.com/methods/conversations.setPurpose
    params:
      - paramName: channel
        description: Conversation to set the purpose of
        originalName: channel
        in: body
        schema:
          type: string
        required: false
      - paramName: purpose
        description: A new, specialer purpose
        originalName: purpose
        in: body
        schema:
          type: string
        required: false
    requestBodyType: form
  - moduleName: Conversations / Set Topic
    method: post
    path: /conversations.setTopic
    description: Sets the topic for a conversation.
    externalDocs: https://api.slack.com/methods/conversations.setTopic
    params:
      - paramName: channel
        description: Conversation to set the topic of
        originalName: channel
        in: body
        schema:
          type: string
        required: false
      - paramName: topic
        description: The new topic string. Does not support formatting or linkification.
        originalName: topic
        in: body
        schema:
          type: string
        required: false
    requestBodyType: form
  - moduleName: Conversations / Unarchive
    method: post
    path: /conversations.unarchive
    description: Reverses conversation archival.
    externalDocs: https://api.slack.com/methods/conversations.unarchive
    params:
      - paramName: channel
        description: ID of conversation to unarchive
        originalName: channel
        in: body
        schema:
          type: string
        required: false
    requestBodyType: form
  - moduleName: Dialog / Open
    method: get
    path: /dialog.open
    description: Open a dialog with a user
    externalDocs: https://api.slack.com/methods/dialog.open
    params:
      - paramName: dialog
        description: The dialog definition. This must be a JSON-encoded string.
        originalName: dialog
        in: query
        schema:
          type: string
        required: true
      - paramName: triggerId
        description: Exchange a trigger to post to the user.
        originalName: trigger_id
        in: query
        schema:
          type: string
        required: true
  - moduleName: DND / End
    method: post
    path: /dnd.endDnd
    description: Ends the current user's Do Not Disturb session immediately.
    externalDocs: https://api.slack.com/methods/dnd.endDnd
    params: []
  - moduleName: DND / End Snooze
    method: post
    path: /dnd.endSnooze
    description: Ends the current user's snooze mode immediately.
    externalDocs: https://api.slack.com/methods/dnd.endSnooze
    params: []
  - moduleName: DND / Info
    method: get
    path: /dnd.info
    description: Retrieves a user's current Do Not Disturb status.
    externalDocs: https://api.slack.com/methods/dnd.info
    params:
      - paramName: user
        description: User to fetch status for (defaults to current user)
        originalName: user
        in: query
        schema:
          type: string
        required: false
  - moduleName: DND / Set Snooze
    method: post
    path: /dnd.setSnooze
    description: Turns on Do Not Disturb mode for the current user, or changes its duration.
    externalDocs: https://api.slack.com/methods/dnd.setSnooze
    params:
      - paramName: numMinutes
        description: Number of minutes, from now, to snooze until.
        originalName: num_minutes
        in: body
        schema:
          type: string
        required: true
      - paramName: token
        description: "Authentication token. Requires scope: `dnd:write`"
        originalName: token
        in: body
        schema:
          type: string
        required: true
    requestBodyType: form
  - moduleName: DND / Team Info
    method: get
    path: /dnd.teamInfo
    description: Retrieves the Do Not Disturb status for up to 50 users on a team.
    externalDocs: https://api.slack.com/methods/dnd.teamInfo
    params:
      - paramName: users
        description: Comma-separated list of users to fetch Do Not Disturb status for
        originalName: users
        in: query
        schema:
          type: string
        required: false
  - moduleName: Emoji / List
    method: get
    path: /emoji.list
    description: Lists custom emoji for a team.
    externalDocs: https://api.slack.com/methods/emoji.list
    params: []
  - moduleName: Files / Comments / Delete
    method: post
    path: /files.comments.delete
    description: Deletes an existing comment on a file.
    externalDocs: https://api.slack.com/methods/files.comments.delete
    params:
      - paramName: file
        description: File to delete a comment from.
        originalName: file
        in: body
        schema:
          type: string
        required: false
      - paramName: id
        description: The comment to delete.
        originalName: id
        in: body
        schema:
          type: string
        required: false
    requestBodyType: form
  - moduleName: Files / Delete
    method: post
    path: /files.delete
    description: Deletes a file.
    externalDocs: https://api.slack.com/methods/files.delete
    params:
      - paramName: file
        description: ID of file to delete.
        originalName: file
        in: body
        schema:
          type: string
        required: false
    requestBodyType: form
  - moduleName: Files / Get Info
    method: get
    path: /files.info
    description: Gets information about a file.
    externalDocs: https://api.slack.com/methods/files.info
    params:
      - paramName: file
        description: Specify a file by providing its ID.
        originalName: file
        in: query
        schema:
          type: string
        required: false
      - paramName: count
        description: ""
        originalName: count
        in: query
        schema:
          type: string
        required: false
      - paramName: page
        description: ""
        originalName: page
        in: query
        schema:
          type: string
        required: false
      - paramName: limit
        description: The maximum number of items to return. Fewer than the requested
          number of items may be returned, even if the end of the list hasn't
          been reached.
        originalName: limit
        in: query
        schema:
          type: number
        required: false
      - paramName: cursor
        description: "Parameter for pagination. File comments are paginated for a single
          file. Set `cursor` equal to the `next_cursor` attribute returned by
          the previous request's `response_metadata`. This parameter is
          optional, but pagination is mandatory: the default value simply
          fetches the first \"page\" of the collection of comments. See
          [pagination](/docs/pagination) for more details."
        originalName: cursor
        in: query
        schema:
          type: string
        required: false
  - moduleName: Files / List
    method: get
    path: /files.list
    description: List for a team, in a channel, or from a user with applied filters.
    externalDocs: https://api.slack.com/methods/files.list
    params:
      - paramName: user
        description: Filter files created by a single user.
        originalName: user
        in: query
        schema:
          type: string
        required: false
      - paramName: channel
        description: Filter files appearing in a specific channel, indicated by its ID.
        originalName: channel
        in: query
        schema:
          type: string
        required: false
      - paramName: tsFrom
        description: Filter files created after this timestamp (inclusive).
        originalName: ts_from
        in: query
        schema:
          type: number
        required: false
      - paramName: tsTo
        description: Filter files created before this timestamp (inclusive).
        originalName: ts_to
        in: query
        schema:
          type: number
        required: false
      - paramName: types
        description: Filter files by type ([see below](#file_types)). You can pass
          multiple values in the types argument, like
          `types=spaces,snippets`.The default value is `all`, which does not
          filter the list.
        originalName: types
        in: query
        schema:
          type: string
        required: false
      - paramName: count
        description: ""
        originalName: count
        in: query
        schema:
          type: string
        required: false
      - paramName: page
        description: ""
        originalName: page
        in: query
        schema:
          type: string
        required: false
      - paramName: showFilesHiddenByLimit
        description: Show truncated file info for files hidden due to being too old, and
          the team who owns the file being over the file limit.
        originalName: show_files_hidden_by_limit
        in: query
        schema:
          type: boolean
        required: false
  - moduleName: Files / Add Remote
    method: post
    path: /files.remote.add
    description: Adds a file from a remote service
    externalDocs: https://api.slack.com/methods/files.remote.add
    params:
      - paramName: externalId
        description: Creator defined GUID for the file.
        originalName: external_id
        in: body
        schema:
          type: string
        required: false
      - paramName: externalUrl
        description: URL of the remote file.
        originalName: external_url
        in: body
        schema:
          type: string
        required: false
      - paramName: filetype
        description: type of file
        originalName: filetype
        in: body
        schema:
          type: string
        required: false
      - paramName: indexableFileContents
        description: A text file (txt, pdf, doc, etc.) containing textual search terms
          that are used to improve discovery of the remote file.
        originalName: indexable_file_contents
        in: body
        schema:
          type: string
        required: false
      - paramName: previewImage
        description: Preview of the document via `multipart/form-data`.
        originalName: preview_image
        in: body
        schema:
          type: string
        required: false
      - paramName: title
        description: Title of the file being shared.
        originalName: title
        in: body
        schema:
          type: string
        required: false
      - paramName: token
        description: "Authentication token. Requires scope: `remote_files:write`"
        originalName: token
        in: body
        schema:
          type: string
        required: false
    requestBodyType: form
  - moduleName: Files / Get Remote Info
    method: get
    path: /files.remote.info
    description: Retrieve information about a remote file added to Slack
    externalDocs: https://api.slack.com/methods/files.remote.info
    params:
      - paramName: file
        description: Specify a file by providing its ID.
        originalName: file
        in: query
        schema:
          type: string
        required: false
      - paramName: externalId
        description: Creator defined GUID for the file.
        originalName: external_id
        in: query
        schema:
          type: string
        required: false
  - moduleName: Files / List Remote
    method: get
    path: /files.remote.list
    description: Retrieve information about a remote file added to Slack
    externalDocs: https://api.slack.com/methods/files.remote.list
    params:
      - paramName: channel
        description: Filter files appearing in a specific channel, indicated by its ID.
        originalName: channel
        in: query
        schema:
          type: string
        required: false
      - paramName: tsFrom
        description: Filter files created after this timestamp (inclusive).
        originalName: ts_from
        in: query
        schema:
          type: number
        required: false
      - paramName: tsTo
        description: Filter files created before this timestamp (inclusive).
        originalName: ts_to
        in: query
        schema:
          type: number
        required: false
      - paramName: limit
        description: The maximum number of items to return.
        originalName: limit
        in: query
        schema:
          type: number
        required: false
      - paramName: cursor
        description: Paginate through collections of data by setting the `cursor`
          parameter to a `next_cursor` attribute returned by a previous
          request's `response_metadata`. Default value fetches the first "page"
          of the collection. See [pagination](/docs/pagination) for more detail.
        originalName: cursor
        in: query
        schema:
          type: string
        required: false
  - moduleName: Files / Remove Remote
    method: post
    path: /files.remote.remove
    description: Remove a remote file.
    externalDocs: https://api.slack.com/methods/files.remote.remove
    params:
      - paramName: externalId
        description: Creator defined GUID for the file.
        originalName: external_id
        in: body
        schema:
          type: string
        required: false
      - paramName: file
        description: Specify a file by providing its ID.
        originalName: file
        in: body
        schema:
          type: string
        required: false
      - paramName: token
        description: "Authentication token. Requires scope: `remote_files:write`"
        originalName: token
        in: body
        schema:
          type: string
        required: false
    requestBodyType: form
  - moduleName: Files / Share Remote
    method: get
    path: /files.remote.share
    description: Share a remote file into a channel.
    externalDocs: https://api.slack.com/methods/files.remote.share
    params:
      - paramName: file
        description: Specify a file registered with Slack by providing its ID. Either
          this field or `external_id` or both are required.
        originalName: file
        in: query
        schema:
          type: string
        required: false
      - paramName: externalId
        description: The globally unique identifier (GUID) for the file, as set by the
          app registering the file with Slack.  Either this field or `file` or
          both are required.
        originalName: external_id
        in: query
        schema:
          type: string
        required: false
      - paramName: channels
        description: Comma-separated list of channel IDs where the file will be shared.
        originalName: channels
        in: query
        schema:
          type: string
        required: false
  - moduleName: Files / Update Remote
    method: post
    path: /files.remote.update
    description: Updates an existing remote file.
    externalDocs: https://api.slack.com/methods/files.remote.update
    params:
      - paramName: externalId
        description: Creator defined GUID for the file.
        originalName: external_id
        in: body
        schema:
          type: string
        required: false
      - paramName: externalUrl
        description: URL of the remote file.
        originalName: external_url
        in: body
        schema:
          type: string
        required: false
      - paramName: file
        description: Specify a file by providing its ID.
        originalName: file
        in: body
        schema:
          type: string
        required: false
      - paramName: filetype
        description: type of file
        originalName: filetype
        in: body
        schema:
          type: string
        required: false
      - paramName: indexableFileContents
        description: File containing contents that can be used to improve searchability
          for the remote file.
        originalName: indexable_file_contents
        in: body
        schema:
          type: string
        required: false
      - paramName: previewImage
        description: Preview of the document via `multipart/form-data`.
        originalName: preview_image
        in: body
        schema:
          type: string
        required: false
      - paramName: title
        description: Title of the file being shared.
        originalName: title
        in: body
        schema:
          type: string
        required: false
      - paramName: token
        description: "Authentication token. Requires scope: `remote_files:write`"
        originalName: token
        in: body
        schema:
          type: string
        required: false
    requestBodyType: form
  - moduleName: Files / Revoke Public URL
    method: post
    path: /files.revokePublicURL
    description: Revokes public/external sharing access for a file
    externalDocs: https://api.slack.com/methods/files.revokePublicURL
    params:
      - paramName: file
        description: File to revoke
        originalName: file
        in: body
        schema:
          type: string
        required: false
    requestBodyType: form
  - moduleName: Files / Create Public URL
    method: post
    path: /files.sharedPublicURL
    description: Enables a file for public/external sharing.
    externalDocs: https://api.slack.com/methods/files.sharedPublicURL
    params:
      - paramName: file
        description: File to share
        originalName: file
        in: body
        schema:
          type: string
        required: false
    requestBodyType: form
  - moduleName: Files / Upload
    method: post
    path: /files.upload
    description: Uploads or creates a file.
    externalDocs: https://api.slack.com/methods/files.upload
    params:
      - paramName: channels
        description: Comma-separated list of channel names or IDs where the file will be
          shared.
        originalName: channels
        in: body
        schema:
          type: string
        required: false
      - paramName: content
        description: File contents via a POST variable. If omitting this parameter, you
          must provide a `file`.
        originalName: content
        in: body
        schema:
          type: string
        required: false
      - paramName: file
        description: File contents via `multipart/form-data`. If omitting this
          parameter, you must submit `content`.
        originalName: file
        in: body
        schema:
          type: string
        required: false
      - paramName: filename
        description: Filename of file.
        originalName: filename
        in: body
        schema:
          type: string
        required: false
      - paramName: filetype
        description: A [file type](/types/file#file_types) identifier.
        originalName: filetype
        in: body
        schema:
          type: string
        required: false
      - paramName: initialComment
        description: The message text introducing the file in specified `channels`.
        originalName: initial_comment
        in: body
        schema:
          type: string
        required: false
      - paramName: threadTs
        description: Provide another message's `ts` value to upload this file as a
          reply. Never use a reply's `ts` value; use its parent instead.
        originalName: thread_ts
        in: body
        schema:
          type: number
        required: false
      - paramName: title
        description: Title of file.
        originalName: title
        in: body
        schema:
          type: string
        required: false
      - paramName: token
        description: "Authentication token. Requires scope: `files:write:user`"
        originalName: token
        in: body
        schema:
          type: string
        required: false
    requestBodyType: form
  - moduleName: Migration / Exchange
    method: get
    path: /migration.exchange
    description: For Enterprise Grid workspaces, map local user IDs to global user IDs
    externalDocs: https://api.slack.com/methods/migration.exchange
    params:
      - paramName: users
        description: A comma-separated list of user ids, up to 400 per request
        originalName: users
        in: query
        schema:
          type: string
        required: true
      - paramName: teamId
        description: Specify team_id starts with `T` in case of Org Token
        originalName: team_id
        in: query
        schema:
          type: string
        required: false
      - paramName: toOld
        description: Specify `true` to convert `W` global user IDs to workspace-specific
          `U` IDs. Defaults to `false`.
        originalName: to_old
        in: query
        schema:
          type: boolean
        required: false
  - moduleName: Pins / Add
    method: post
    path: /pins.add
    description: Pins an item to a channel.
    externalDocs: https://api.slack.com/methods/pins.add
    params:
      - paramName: channel
        description: Channel to pin the item in.
        originalName: channel
        in: body
        schema:
          type: string
        required: true
      - paramName: timestamp
        description: Timestamp of the message to pin.
        originalName: timestamp
        in: body
        schema:
          type: string
        required: false
    requestBodyType: form
  - moduleName: Pins / List
    method: get
    path: /pins.list
    description: Lists items pinned to a channel.
    externalDocs: https://api.slack.com/methods/pins.list
    params:
      - paramName: channel
        description: Channel to get pinned items for.
        originalName: channel
        in: query
        schema:
          type: string
        required: true
  - moduleName: Pins / Remove
    method: post
    path: /pins.remove
    description: Un-pins an item from a channel.
    externalDocs: https://api.slack.com/methods/pins.remove
    params:
      - paramName: channel
        description: Channel where the item is pinned to.
        originalName: channel
        in: body
        schema:
          type: string
        required: true
      - paramName: timestamp
        description: Timestamp of the message to un-pin.
        originalName: timestamp
        in: body
        schema:
          type: string
        required: false
    requestBodyType: form
  - moduleName: Reactions / Add
    method: post
    path: /reactions.add
    description: Adds a reaction to an item.
    externalDocs: https://api.slack.com/methods/reactions.add
    params:
      - paramName: channel
        description: Channel where the message to add reaction to was posted.
        originalName: channel
        in: body
        schema:
          type: string
        required: true
      - paramName: name
        description: Reaction (emoji) name.
        originalName: name
        in: body
        schema:
          type: string
        required: true
      - paramName: timestamp
        description: Timestamp of the message to add reaction to.
        originalName: timestamp
        in: body
        schema:
          type: string
        required: true
    requestBodyType: form
  - moduleName: Reactions / Get
    method: get
    path: /reactions.get
    description: Gets reactions for an item.
    externalDocs: https://api.slack.com/methods/reactions.get
    params:
      - paramName: channel
        description: Channel where the message to get reactions for was posted.
        originalName: channel
        in: query
        schema:
          type: string
        required: false
      - paramName: file
        description: File to get reactions for.
        originalName: file
        in: query
        schema:
          type: string
        required: false
      - paramName: fileComment
        description: File comment to get reactions for.
        originalName: file_comment
        in: query
        schema:
          type: string
        required: false
      - paramName: full
        description: If true always return the complete reaction list.
        originalName: full
        in: query
        schema:
          type: boolean
        required: false
      - paramName: timestamp
        description: Timestamp of the message to get reactions for.
        originalName: timestamp
        in: query
        schema:
          type: string
        required: false
  - moduleName: Reactions / List
    method: get
    path: /reactions.list
    description: Lists reactions made by a user.
    externalDocs: https://api.slack.com/methods/reactions.list
    params:
      - paramName: user
        description: Show reactions made by this user. Defaults to the authed user.
        originalName: user
        in: query
        schema:
          type: string
        required: false
      - paramName: full
        description: If true always return the complete reaction list.
        originalName: full
        in: query
        schema:
          type: boolean
        required: false
      - paramName: count
        description: ""
        originalName: count
        in: query
        schema:
          type: number
        required: false
      - paramName: page
        description: ""
        originalName: page
        in: query
        schema:
          type: number
        required: false
      - paramName: cursor
        description: "Parameter for pagination. Set `cursor` equal to the `next_cursor`
          attribute returned by the previous request's `response_metadata`. This
          parameter is optional, but pagination is mandatory: the default value
          simply fetches the first \"page\" of the collection. See
          [pagination](/docs/pagination) for more details."
        originalName: cursor
        in: query
        schema:
          type: string
        required: false
      - paramName: limit
        description: The maximum number of items to return. Fewer than the requested
          number of items may be returned, even if the end of the list hasn't
          been reached.
        originalName: limit
        in: query
        schema:
          type: number
        required: false
  - moduleName: Reactions / Remove
    method: post
    path: /reactions.remove
    description: Removes a reaction from an item.
    externalDocs: https://api.slack.com/methods/reactions.remove
    params:
      - paramName: channel
        description: Channel where the message to remove reaction from was posted.
        originalName: channel
        in: body
        schema:
          type: string
        required: false
      - paramName: file
        description: File to remove reaction from.
        originalName: file
        in: body
        schema:
          type: string
        required: false
      - paramName: fileComment
        description: File comment to remove reaction from.
        originalName: file_comment
        in: body
        schema:
          type: string
        required: false
      - paramName: name
        description: Reaction (emoji) name.
        originalName: name
        in: body
        schema:
          type: string
        required: true
      - paramName: timestamp
        description: Timestamp of the message to remove reaction from.
        originalName: timestamp
        in: body
        schema:
          type: string
        required: false
    requestBodyType: form
  - moduleName: Reminders / Add
    method: post
    path: /reminders.add
    description: Creates a reminder.
    externalDocs: https://api.slack.com/methods/reminders.add
    params:
      - paramName: text
        description: The content of the reminder
        originalName: text
        in: body
        schema:
          type: string
        required: true
      - paramName: time
        description: 'When this reminder should happen: the Unix timestamp (up to five
          years from now), the number of seconds until the reminder (if within
          24 hours), or a natural language description (Ex. "in 15 minutes," or
          "every Thursday")'
        originalName: time
        in: body
        schema:
          type: string
        required: true
      - paramName: user
        description: The user who will receive the reminder. If no user is specified,
          the reminder will go to user who created it.
        originalName: user
        in: body
        schema:
          type: string
        required: false
    requestBodyType: form
  - moduleName: Reminders / Complete
    method: post
    path: /reminders.complete
    description: Marks a reminder as complete.
    externalDocs: https://api.slack.com/methods/reminders.complete
    params:
      - paramName: reminder
        description: The ID of the reminder to be marked as complete
        originalName: reminder
        in: body
        schema:
          type: string
        required: false
    requestBodyType: form
  - moduleName: Reminders / Delete
    method: post
    path: /reminders.delete
    description: Deletes a reminder.
    externalDocs: https://api.slack.com/methods/reminders.delete
    params:
      - paramName: reminder
        description: The ID of the reminder
        originalName: reminder
        in: body
        schema:
          type: string
        required: false
    requestBodyType: form
  - moduleName: Reminders / Info
    method: get
    path: /reminders.info
    description: Gets information about a reminder.
    externalDocs: https://api.slack.com/methods/reminders.info
    params:
      - paramName: reminder
        description: The ID of the reminder
        originalName: reminder
        in: query
        schema:
          type: string
        required: false
  - moduleName: Reminders / List
    method: get
    path: /reminders.list
    description: Lists all reminders created by or for a given user.
    externalDocs: https://api.slack.com/methods/reminders.list
    params: []
  - moduleName: Search / Messages
    method: get
    path: /search.messages
    description: Searches for messages matching a query.
    externalDocs: https://api.slack.com/methods/search.messages
    params:
      - paramName: count
        description: Pass the number of results you want per "page". Maximum of `100`.
        originalName: count
        in: query
        schema:
          type: number
        required: false
      - paramName: highlight
        description: Pass a value of `true` to enable query highlight markers (see below).
        originalName: highlight
        in: query
        schema:
          type: boolean
        required: false
      - paramName: page
        description: ""
        originalName: page
        in: query
        schema:
          type: number
        required: false
      - paramName: query
        description: Search query.
        originalName: query
        in: query
        schema:
          type: string
        required: true
      - paramName: sort
        description: Return matches sorted by either `score` or `timestamp`.
        originalName: sort
        in: query
        schema:
          type: string
        required: false
      - paramName: sortDir
        description: Change sort direction to ascending (`asc`) or descending (`desc`).
        originalName: sort_dir
        in: query
        schema:
          type: string
        required: false
  - moduleName: Stars / Add
    method: post
    path: /stars.add
    description: Adds a star to an item.
    externalDocs: https://api.slack.com/methods/stars.add
    params:
      - paramName: channel
        description: Channel to add star to, or channel where the message to add star to
          was posted (used with `timestamp`).
        originalName: channel
        in: body
        schema:
          type: string
        required: false
      - paramName: file
        description: File to add star to.
        originalName: file
        in: body
        schema:
          type: string
        required: false
      - paramName: fileComment
        description: File comment to add star to.
        originalName: file_comment
        in: body
        schema:
          type: string
        required: false
      - paramName: timestamp
        description: Timestamp of the message to add star to.
        originalName: timestamp
        in: body
        schema:
          type: string
        required: false
    requestBodyType: form
  - moduleName: Stars / List
    method: get
    path: /stars.list
    description: Lists stars for a user.
    externalDocs: https://api.slack.com/methods/stars.list
    params:
      - paramName: count
        description: ""
        originalName: count
        in: query
        schema:
          type: string
        required: false
      - paramName: page
        description: ""
        originalName: page
        in: query
        schema:
          type: string
        required: false
      - paramName: cursor
        description: "Parameter for pagination. Set `cursor` equal to the `next_cursor`
          attribute returned by the previous request's `response_metadata`. This
          parameter is optional, but pagination is mandatory: the default value
          simply fetches the first \"page\" of the collection. See
          [pagination](/docs/pagination) for more details."
        originalName: cursor
        in: query
        schema:
          type: string
        required: false
      - paramName: limit
        description: The maximum number of items to return. Fewer than the requested
          number of items may be returned, even if the end of the list hasn't
          been reached.
        originalName: limit
        in: query
        schema:
          type: number
        required: false
  - moduleName: Stars / Remove
    method: post
    path: /stars.remove
    description: Removes a star from an item.
    externalDocs: https://api.slack.com/methods/stars.remove
    params:
      - paramName: channel
        description: Channel to remove star from, or channel where the message to remove
          star from was posted (used with `timestamp`).
        originalName: channel
        in: body
        schema:
          type: string
        required: false
      - paramName: file
        description: File to remove star from.
        originalName: file
        in: body
        schema:
          type: string
        required: false
      - paramName: fileComment
        description: File comment to remove star from.
        originalName: file_comment
        in: body
        schema:
          type: string
        required: false
      - paramName: timestamp
        description: Timestamp of the message to remove star from.
        originalName: timestamp
        in: body
        schema:
          type: string
        required: false
    requestBodyType: form
  - moduleName: Team / Access Logs
    method: get
    path: /team.accessLogs
    description: Gets the access logs for the current team.
    externalDocs: https://api.slack.com/methods/team.accessLogs
    params:
      - paramName: before
        description: End of time range of logs to include in results (inclusive).
        originalName: before
        in: query
        schema:
          type: string
        required: false
      - paramName: count
        description: ""
        originalName: count
        in: query
        schema:
          type: string
        required: false
      - paramName: page
        description: ""
        originalName: page
        in: query
        schema:
          type: string
        required: false
  - moduleName: Team / Get Billable Info
    method: get
    path: /team.billableInfo
    description: Gets billable users information for the current team.
    externalDocs: https://api.slack.com/methods/team.billableInfo
    params:
      - paramName: user
        description: A user to retrieve the billable information for. Defaults to all users.
        originalName: user
        in: query
        schema:
          type: string
        required: false
  - moduleName: Team / Get Info
    method: get
    path: /team.info
    description: Gets information about the current team.
    externalDocs: https://api.slack.com/methods/team.info
    params:
      - paramName: team
        description: Team to get info on, if omitted, will return information about the
          current team. Will only return team that the authenticated token is
          allowed to see through external shared channels
        originalName: team
        in: query
        schema:
          type: string
        required: false
  - moduleName: Team / Get Integration Logs
    method: get
    path: /team.integrationLogs
    description: Gets the integration logs for the current team.
    externalDocs: https://api.slack.com/methods/team.integrationLogs
    params:
      - paramName: appId
        description: Filter logs to this Slack app. Defaults to all logs.
        originalName: app_id
        in: query
        schema:
          type: string
        required: false
      - paramName: changeType
        description: Filter logs with this change type. Defaults to all logs.
        originalName: change_type
        in: query
        schema:
          type: string
        required: false
      - paramName: count
        description: ""
        originalName: count
        in: query
        schema:
          type: string
        required: false
      - paramName: page
        description: ""
        originalName: page
        in: query
        schema:
          type: string
        required: false
      - paramName: serviceId
        description: Filter logs to this service. Defaults to all logs.
        originalName: service_id
        in: query
        schema:
          type: string
        required: false
      - paramName: user
        description: Filter logs generated by this user’s actions. Defaults to all logs.
        originalName: user
        in: query
        schema:
          type: string
        required: false
  - moduleName: Team / Get Profile
    method: get
    path: /team.profile.get
    description: Retrieve a team's profile.
    externalDocs: https://api.slack.com/methods/team.profile.get
    params:
      - paramName: visibility
        description: Filter by visibility.
        originalName: visibility
        in: query
        schema:
          type: string
        required: false
  - moduleName: Usergroups / Create
    method: post
    path: /usergroups.create
    description: Create a User Group
    externalDocs: https://api.slack.com/methods/usergroups.create
    params:
      - paramName: channels
        description: A comma separated string of encoded channel IDs for which the User
          Group uses as a default.
        originalName: channels
        in: body
        schema:
          type: string
        required: false
      - paramName: description
        description: A short description of the User Group.
        originalName: description
        in: body
        schema:
          type: string
        required: false
      - paramName: handle
        description: A mention handle. Must be unique among channels, users and User Groups.
        originalName: handle
        in: body
        schema:
          type: string
        required: false
      - paramName: includeCount
        description: Include the number of users in each User Group.
        originalName: include_count
        in: body
        schema:
          type: boolean
        required: false
      - paramName: name
        description: A name for the User Group. Must be unique among User Groups.
        originalName: name
        in: body
        schema:
          type: string
        required: true
    requestBodyType: form
  - moduleName: Usergroups / Disable
    method: post
    path: /usergroups.disable
    description: Disable an existing User Group
    externalDocs: https://api.slack.com/methods/usergroups.disable
    params:
      - paramName: includeCount
        description: Include the number of users in the User Group.
        originalName: include_count
        in: body
        schema:
          type: boolean
        required: false
      - paramName: usergroup
        description: The encoded ID of the User Group to disable.
        originalName: usergroup
        in: body
        schema:
          type: string
        required: true
    requestBodyType: form
  - moduleName: Usergroups / Enable
    method: post
    path: /usergroups.enable
    description: Enable a User Group
    externalDocs: https://api.slack.com/methods/usergroups.enable
    params:
      - paramName: includeCount
        description: Include the number of users in the User Group.
        originalName: include_count
        in: body
        schema:
          type: boolean
        required: false
      - paramName: usergroup
        description: The encoded ID of the User Group to enable.
        originalName: usergroup
        in: body
        schema:
          type: string
        required: true
    requestBodyType: form
  - moduleName: Usergroups / List
    method: get
    path: /usergroups.list
    description: List all User Groups for a team
    externalDocs: https://api.slack.com/methods/usergroups.list
    params:
      - paramName: includeUsers
        description: Include the list of users for each User Group.
        originalName: include_users
        in: query
        schema:
          type: boolean
        required: false
      - paramName: includeCount
        description: Include the number of users in each User Group.
        originalName: include_count
        in: query
        schema:
          type: boolean
        required: false
      - paramName: includeDisabled
        description: Include disabled User Groups.
        originalName: include_disabled
        in: query
        schema:
          type: boolean
        required: false
  - moduleName: Usergroups / Update
    method: post
    path: /usergroups.update
    description: Update an existing User Group
    externalDocs: https://api.slack.com/methods/usergroups.update
    params:
      - paramName: channels
        description: A comma separated string of encoded channel IDs for which the User
          Group uses as a default.
        originalName: channels
        in: body
        schema:
          type: string
        required: false
      - paramName: description
        description: A short description of the User Group.
        originalName: description
        in: body
        schema:
          type: string
        required: false
      - paramName: handle
        description: A mention handle. Must be unique among channels, users and User Groups.
        originalName: handle
        in: body
        schema:
          type: string
        required: false
      - paramName: includeCount
        description: Include the number of users in the User Group.
        originalName: include_count
        in: body
        schema:
          type: boolean
        required: false
      - paramName: name
        description: A name for the User Group. Must be unique among User Groups.
        originalName: name
        in: body
        schema:
          type: string
        required: false
      - paramName: usergroup
        description: The encoded ID of the User Group to update.
        originalName: usergroup
        in: body
        schema:
          type: string
        required: true
    requestBodyType: form
  - moduleName: Usergroups / List Users
    method: get
    path: /usergroups.users.list
    description: List all users in a User Group
    externalDocs: https://api.slack.com/methods/usergroups.users.list
    params:
      - paramName: includeDisabled
        description: Allow results that involve disabled User Groups.
        originalName: include_disabled
        in: query
        schema:
          type: boolean
        required: false
      - paramName: usergroup
        description: The encoded ID of the User Group to update.
        originalName: usergroup
        in: query
        schema:
          type: string
        required: true
  - moduleName: Usergroups / Update Users
    method: post
    path: /usergroups.users.update
    description: Update the list of users for a User Group
    externalDocs: https://api.slack.com/methods/usergroups.users.update
    params:
      - paramName: includeCount
        description: Include the number of users in the User Group.
        originalName: include_count
        in: body
        schema:
          type: boolean
        required: false
      - paramName: usergroup
        description: The encoded ID of the User Group to update.
        originalName: usergroup
        in: body
        schema:
          type: string
        required: true
      - paramName: users
        description: A comma separated string of encoded user IDs that represent the
          entire list of users for the User Group.
        originalName: users
        in: body
        schema:
          type: string
        required: true
    requestBodyType: form
  - moduleName: Users / Get Conversations
    method: get
    path: /users.conversations
    description: List conversations the calling user may access.
    externalDocs: https://api.slack.com/methods/users.conversations
    params:
      - paramName: user
        description: Browse conversations by a specific user ID's membership. Non-public
          channels are restricted to those where the calling user shares
          membership.
        originalName: user
        in: query
        schema:
          type: string
        required: false
      - paramName: types
        description: Mix and match channel types by providing a comma-separated list of
          any combination of `public_channel`, `private_channel`, `mpim`, `im`
        originalName: types
        in: query
        schema:
          type: string
        required: false
      - paramName: excludeArchived
        description: Set to `true` to exclude archived channels from the list
        originalName: exclude_archived
        in: query
        schema:
          type: boolean
        required: false
      - paramName: limit
        description: The maximum number of items to return. Fewer than the requested
          number of items may be returned, even if the end of the list hasn't
          been reached. Must be an integer no larger than 1000.
        originalName: limit
        in: query
        schema:
          type: number
        required: false
      - paramName: cursor
        description: Paginate through collections of data by setting the `cursor`
          parameter to a `next_cursor` attribute returned by a previous
          request's `response_metadata`. Default value fetches the first "page"
          of the collection. See [pagination](/docs/pagination) for more detail.
        originalName: cursor
        in: query
        schema:
          type: string
        required: false
  - moduleName: Users / Delete Photo
    method: post
    path: /users.deletePhoto
    description: Delete the user profile photo
    externalDocs: https://api.slack.com/methods/users.deletePhoto
    params:
      - paramName: token
        description: "Authentication token. Requires scope: `users.profile:write`"
        originalName: token
        in: body
        schema:
          type: string
        required: true
    requestBodyType: form
  - moduleName: Users / Get Presence
    method: get
    path: /users.getPresence
    description: Gets user presence information.
    externalDocs: https://api.slack.com/methods/users.getPresence
    params:
      - paramName: user
        description: User to get presence info on. Defaults to the authed user.
        originalName: user
        in: query
        schema:
          type: string
        required: false
  - moduleName: Users / Get Identity
    method: get
    path: /users.identity
    description: Get a user's identity.
    externalDocs: https://api.slack.com/methods/users.identity
    params: []
  - moduleName: Users / Info
    method: get
    path: /users.info
    description: Gets information about a user.
    externalDocs: https://api.slack.com/methods/users.info
    params:
      - paramName: includeLocale
        description: Set this to `true` to receive the locale for this user. Defaults to
          `false`
        originalName: include_locale
        in: query
        schema:
          type: boolean
        required: false
      - paramName: user
        description: User to get info on
        originalName: user
        in: query
        schema:
          type: string
        required: false
  - moduleName: Users / List
    method: get
    path: /users.list
    description: Lists all users in a Slack team.
    externalDocs: https://api.slack.com/methods/users.list
    params:
      - paramName: limit
        description: The maximum number of items to return. Fewer than the requested
          number of items may be returned, even if the end of the users list
          hasn't been reached. Providing no `limit` value will result in Slack
          attempting to deliver you the entire result set. If the collection is
          too large you may experience `limit_required` or HTTP 500 errors.
        originalName: limit
        in: query
        schema:
          type: number
        required: false
      - paramName: cursor
        description: Paginate through collections of data by setting the `cursor`
          parameter to a `next_cursor` attribute returned by a previous
          request's `response_metadata`. Default value fetches the first "page"
          of the collection. See [pagination](/docs/pagination) for more detail.
        originalName: cursor
        in: query
        schema:
          type: string
        required: false
      - paramName: includeLocale
        description: Set this to `true` to receive the locale for users. Defaults to `false`
        originalName: include_locale
        in: query
        schema:
          type: boolean
        required: false
  - moduleName: Users / Lookup By Email
    method: get
    path: /users.lookupByEmail
    description: Find a user with an email address.
    externalDocs: https://api.slack.com/methods/users.lookupByEmail
    params:
      - paramName: email
        description: An email address belonging to a user in the workspace
        originalName: email
        in: query
        schema:
          type: string
        required: true
  - moduleName: Users / Get Profile
    method: get
    path: /users.profile.get
    description: Retrieves a user's profile information.
    externalDocs: https://api.slack.com/methods/users.profile.get
    params:
      - paramName: includeLabels
        description: Include labels for each ID in custom profile fields
        originalName: include_labels
        in: query
        schema:
          type: boolean
        required: false
      - paramName: user
        description: User to retrieve profile info for
        originalName: user
        in: query
        schema:
          type: string
        required: false
  - moduleName: Users / Set Profile
    method: post
    path: /users.profile.set
    description: Set the profile information for a user.
    externalDocs: https://api.slack.com/methods/users.profile.set
    params:
      - paramName: name
        description: Name of a single key to set. Usable only if `profile` is not passed.
        originalName: name
        in: body
        schema:
          type: string
        required: false
      - paramName: profile
        description: Collection of key:value pairs presented as a URL-encoded JSON hash.
          At most 50 fields may be set. Each field name is limited to 255
          characters.
        originalName: profile
        in: body
        schema:
          type: string
        required: false
      - paramName: user
        description: ID of user to change. This argument may only be specified by team
          admins on paid teams.
        originalName: user
        in: body
        schema:
          type: string
        required: false
      - paramName: value
        description: Value to set a single key to. Usable only if `profile` is not passed.
        originalName: value
        in: body
        schema:
          type: string
        required: false
    requestBodyType: form
  - moduleName: Users / Set Active
    method: post
    path: /users.setActive
    description: Marked a user as active. Deprecated and non-functional.
    externalDocs: https://api.slack.com/methods/users.setActive
    params: []
  - moduleName: Users / Set Photo
    method: post
    path: /users.setPhoto
    description: Set the user profile photo
    externalDocs: https://api.slack.com/methods/users.setPhoto
    params:
      - paramName: cropW
        description: Width/height of crop box (always square)
        originalName: crop_w
        in: body
        schema:
          type: string
        required: false
      - paramName: cropX
        description: X coordinate of top-left corner of crop box
        originalName: crop_x
        in: body
        schema:
          type: string
        required: false
      - paramName: cropY
        description: Y coordinate of top-left corner of crop box
        originalName: crop_y
        in: body
        schema:
          type: string
        required: false
      - paramName: image
        description: File contents via `multipart/form-data`.
        originalName: image
        in: body
        schema:
          type: string
        required: false
      - paramName: token
        description: "Authentication token. Requires scope: `users.profile:write`"
        originalName: token
        in: body
        schema:
          type: string
        required: true
    requestBodyType: form
  - moduleName: Users / Set Presence
    method: post
    path: /users.setPresence
    description: Manually sets user presence.
    externalDocs: https://api.slack.com/methods/users.setPresence
    params:
      - paramName: presence
        description: Either `auto` or `away`
        originalName: presence
        in: body
        schema:
          type: string
        required: true
    requestBodyType: form
  - moduleName: Views / Open
    method: get
    path: /views.open
    description: Open a view for a user.
    externalDocs: https://api.slack.com/methods/views.open
    params:
      - paramName: triggerId
        description: Exchange a trigger to post to the user.
        originalName: trigger_id
        in: query
        schema:
          type: string
        required: true
      - paramName: view
        description: A [view payload](/reference/surfaces/views). This must be a
          JSON-encoded string.
        originalName: view
        in: query
        schema:
          type: string
        required: true
  - moduleName: Views / Publish
    method: get
    path: /views.publish
    description: Publish a static view for a User.
    externalDocs: https://api.slack.com/methods/views.publish
    params:
      - paramName: userId
        description: "`id` of the user you want publish a view to."
        originalName: user_id
        in: query
        schema:
          type: string
        required: true
      - paramName: view
        description: A [view payload](/reference/surfaces/views). This must be a
          JSON-encoded string.
        originalName: view
        in: query
        schema:
          type: string
        required: true
      - paramName: hash
        description: A string that represents view state to protect against possible
          race conditions.
        originalName: hash
        in: query
        schema:
          type: string
        required: false
  - moduleName: Views / Push
    method: get
    path: /views.push
    description: Push a view onto the stack of a root view.
    externalDocs: https://api.slack.com/methods/views.push
    params:
      - paramName: triggerId
        description: Exchange a trigger to post to the user.
        originalName: trigger_id
        in: query
        schema:
          type: string
        required: true
      - paramName: view
        description: A [view payload](/reference/surfaces/views). This must be a
          JSON-encoded string.
        originalName: view
        in: query
        schema:
          type: string
        required: true
  - moduleName: Views / Update
    method: get
    path: /views.update
    description: Update an existing view.
    externalDocs: https://api.slack.com/methods/views.update
    params:
      - paramName: viewId
        description: A unique identifier of the view to be updated. Either `view_id` or
          `external_id` is required.
        originalName: view_id
        in: query
        schema:
          type: string
        required: false
      - paramName: externalId
        description: A unique identifier of the view set by the developer. Must be
          unique for all views on a team. Max length of 255 characters. Either
          `view_id` or `external_id` is required.
        originalName: external_id
        in: query
        schema:
          type: string
        required: false
      - paramName: view
        description: A [view object](/reference/surfaces/views). This must be a
          JSON-encoded string.
        originalName: view
        in: query
        schema:
          type: string
        required: false
      - paramName: hash
        description: A string that represents view state to protect against possible
          race conditions.
        originalName: hash
        in: query
        schema:
          type: string
        required: false
  - moduleName: Workflows / Step Completed
    method: get
    path: /workflows.stepCompleted
    description: Indicate that an app's step in a workflow completed execution.
    externalDocs: https://api.slack.com/methods/workflows.stepCompleted
    params:
      - paramName: workflowStepExecuteId
        description: Context identifier that maps to the correct workflow step execution.
        originalName: workflow_step_execute_id
        in: query
        schema:
          type: string
        required: true
      - paramName: outputs
        description: Key-value object of outputs from your step. Keys of this object
          reflect the configured `key` properties of your
          [`outputs`](/reference/workflows/workflow_step#output) array from your
          `workflow_step` object.
        originalName: outputs
        in: query
        schema:
          type: string
        required: false
  - moduleName: Workflows / Step Failed
    method: get
    path: /workflows.stepFailed
    description: Indicate that an app's step in a workflow failed to execute.
    externalDocs: https://api.slack.com/methods/workflows.stepFailed
    params:
      - paramName: workflowStepExecuteId
        description: Context identifier that maps to the correct workflow step execution.
        originalName: workflow_step_execute_id
        in: query
        schema:
          type: string
        required: true
      - paramName: error
        description: A JSON-based object with a `message` property that should contain a
          human readable error message.
        originalName: error
        in: query
        schema:
          type: string
        required: true
  - moduleName: Workflows / Update Step
    method: get
    path: /workflows.updateStep
    description: Update the configuration for a workflow extension step.
    externalDocs: https://api.slack.com/methods/workflows.updateStep
    params:
      - paramName: workflowStepEditId
        description: A context identifier provided with `view_submission` payloads used
          to call back to `workflows.updateStep`.
        originalName: workflow_step_edit_id
        in: query
        schema:
          type: string
        required: true
      - paramName: inputs
        description: "A JSON key-value map of inputs required from a user during
          configuration. This is the data your app expects to receive when the
          workflow step starts. **Please note**: the embedded variable format is
          set and replaced by the workflow system. You cannot create custom
          variables that will be replaced at runtime. [Read more about variables
          in workflow steps here](/workflows/steps#variables)."
        originalName: inputs
        in: query
        schema:
          type: string
        required: false
      - paramName: outputs
        description: An JSON array of output objects used during step execution. This is
          the data your app agrees to provide when your workflow step was
          executed.
        originalName: outputs
        in: query
        schema:
          type: string
        required: false
      - paramName: stepName
        description: An optional field that can be used to override the step name that
          is shown in the Workflow Builder.
        originalName: step_name
        in: query
        schema:
          type: string
        required: false
      - paramName: stepImageUrl
        description: An optional field that can be used to override app image that is
          shown in the Workflow Builder.
        originalName: step_image_url
        in: query
        schema:
          type: string
        required: false
