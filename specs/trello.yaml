id: trello
displayName: Trello
baseUrl: https://api.trello.com/1
description: "The Trello API allows you to control every aspect of your Trello account, including organizations, boards, cards, members and much more."
commonParams:
  - paramName: apiKey
    description: Trello Api Key - created in the Trello console.
    paramKey: key
    in: query
    schema:
      type: string
    required: true
  - paramName: accessToken
    description: Trello Access Token - created in the Trello console.
    paramKey: token
    in: query
    schema:
      type: string
    required: true
modules:
  - moduleName: Actions / Get By ID
    method: get
    path: /actions/{id}
    description: Get an Action
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: get-actions-id
    params:
      - paramName: id
        description: The ID of the Action
        paramKey: id
        in: path
        schema:
          type: string
        required: true
      - paramName: display
        description: ""
        paramKey: display
        in: query
        schema:
          type: boolean
          default: true
        required: false
      - paramName: entities
        description: ""
        paramKey: entities
        in: query
        schema:
          type: boolean
          default: false
        required: false
      - paramName: fields
        description: "`all` or a comma-separated list of action
          [fields](/cloud/trello/guides/rest-api/object-definitions/#action-obj\
          ect)"
        paramKey: fields
        in: query
        schema:
          type: string
          default: all
        required: false
      - paramName: member
        description: ""
        paramKey: member
        in: query
        schema:
          type: boolean
          default: true
        required: false
      - paramName: memberFields
        description: "`all` or a comma-separated list of member
          [fields](/cloud/trello/guides/rest-api/object-definitions/)"
        paramKey: member_fields
        in: query
        schema:
          type: string
          default: avatarHash,fullName,initials,username
        required: false
      - paramName: memberCreator
        description: Whether to include the member object for the creator of the action
        paramKey: memberCreator
        in: query
        schema:
          type: boolean
          default: true
        required: false
      - paramName: memberCreatorFields
        description: "`all` or a comma-separated list of member
          [fields](/cloud/trello/guides/rest-api/object-definitions/)"
        paramKey: memberCreator_fields
        in: query
        schema:
          type: string
          default: avatarHash,fullName,initials,username
        required: false
  - moduleName: Actions / Update By ID
    method: put
    path: /actions/{id}
    description: Update a specific Action. Only comment actions can be updated. Used
      to edit the content of a comment.
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: put-actions-id
    params:
      - paramName: id
        description: The ID of the Action
        paramKey: id
        in: path
        schema:
          type: string
        required: true
      - paramName: text
        description: The new text for the comment
        paramKey: text
        in: query
        schema:
          type: string
        required: true
  - moduleName: Actions / Delete By ID
    method: delete
    path: /actions/{id}
    description: Delete a specific action. Only comment actions can be deleted.
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: delete-actions-id
    params:
      - paramName: id
        description: The ID of the Action
        paramKey: id
        in: path
        schema:
          type: string
        required: true
  - moduleName: Actions / Get Field By ID
    method: get
    path: /actions/{id}/{field}
    description: Get a specific property of an action
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: get-actions-id-field
    params:
      - paramName: id
        description: The ID of the Action
        paramKey: id
        in: path
        schema:
          type: string
        required: true
      - paramName: field
        description: An action field
        paramKey: field
        in: path
        schema:
          type: string
          enum:
            - id
            - idMemberCreator
            - data
            - type
            - date
            - limits
            - display
            - memberCreator
        required: true
  - moduleName: Actions / Board / Get By ID
    method: get
    path: /actions/{id}/board
    description: Get the Board for an Action
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: get-actions-id-board
    params:
      - paramName: id
        description: The ID of the action
        paramKey: id
        in: path
        schema:
          type: string
        required: true
      - paramName: fields
        description: "`all` or a comma-separated list of board fields"
        paramKey: fields
        in: query
        schema:
          type: string
          enum:
            - id
            - name
            - desc
            - descData
            - closed
            - idMemberCreator
            - idOrganization
            - pinned
            - url
            - shortUrl
            - prefs
            - labelNames
            - starred
            - limits
            - memberships
            - enterpriseOwned
        required: false
  - moduleName: Actions / Card / Get By ID
    method: get
    path: /actions/{id}/card
    description: Get the card for an action
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: get-actions-id-card
    params:
      - paramName: id
        description: The ID of the action
        paramKey: id
        in: path
        schema:
          type: string
        required: true
      - paramName: fields
        description: "`all` or a comma-separated list of card fields"
        paramKey: fields
        in: query
        schema:
          type: string
          enum:
            - id
            - address
            - badges
            - checkItemStates
            - closed
            - coordinates
            - creationMethod
            - dueComplete
            - dateLastActivity
            - desc
            - descData
            - due
            - dueReminder
            - idBoard
            - idChecklists
            - idLabels
            - idList
            - idMembers
            - idMembersVoted
            - idShort
            - idAttachmentCover
            - labels
            - limits
            - locationName
            - manualCoverAttachment
            - name
            - pos
            - shortLink
            - shortUrl
            - subscribed
            - url
            - cover
            - isTemplate
        required: false
  - moduleName: Actions / List / Get By ID
    method: get
    path: /actions/{id}/list
    description: Get the List for an Action
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: get-actions-id-list
    params:
      - paramName: id
        description: The ID of the action
        paramKey: id
        in: path
        schema:
          type: string
        required: true
      - paramName: fields
        description: "`all` or a comma-separated list of list fields"
        paramKey: fields
        in: query
        schema:
          type: string
          enum:
            - id
        required: false
  - moduleName: Actions / Member / Get By ID
    method: get
    path: /actions/{id}/member
    description: Gets the member of an action (not the creator)
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: get-actions-id-member
    params:
      - paramName: id
        description: The ID of the Action
        paramKey: id
        in: path
        schema:
          type: string
        required: true
      - paramName: fields
        description: "`all` or a comma-separated list of member fields"
        paramKey: fields
        in: query
        schema:
          type: string
          enum:
            - id
        required: false
  - moduleName: Actions / Member Creator / Get By ID
    method: get
    path: /actions/{id}/memberCreator
    description: Get the Member who created the Action
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: get-actions-id-membercreator
    params:
      - paramName: id
        description: The ID of the Action
        paramKey: id
        in: path
        schema:
          type: string
        required: true
      - paramName: fields
        description: "`all` or a comma-separated list of member fields"
        paramKey: fields
        in: query
        schema:
          type: string
          enum:
            - id
        required: false
  - moduleName: Actions / Organization / Get By ID
    method: get
    path: /actions/{id}/organization
    description: Get the Organization of an Action
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: get-actions-id-organization
    params:
      - paramName: id
        description: The ID of the action
        paramKey: id
        in: path
        schema:
          type: string
        required: true
      - paramName: fields
        description: "`all` or a comma-separated list of organization fields"
        paramKey: fields
        in: query
        schema:
          type: string
          enum:
            - id
            - name
        required: false
  - moduleName: Actions / Text / Update By ID
    method: put
    path: /actions/{id}/text
    description: Update a comment action
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: put-actions-id-text
    params:
      - paramName: id
        description: The ID of the action to update
        paramKey: id
        in: path
        schema:
          type: string
        required: true
      - paramName: value
        description: The new text for the comment
        paramKey: value
        in: query
        schema:
          type: string
        required: true
  - moduleName: Actions / Reactions / List
    method: get
    path: /actions/{idAction}/reactions
    description: List reactions for an action
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: get-actions-idaction-reactions
    params:
      - paramName: idAction
        description: The ID of the action
        paramKey: idAction
        in: path
        schema:
          type: string
        required: true
      - paramName: member
        description: Whether to load the member as a nested resource. See [Members
          Nested
          Resource](/cloud/trello/guides/rest-api/nested-resources/#members-nested-resource)
        paramKey: member
        in: query
        schema:
          type: boolean
          default: true
        required: false
      - paramName: emoji
        description: Whether to load the emoji as a nested resource.
        paramKey: emoji
        in: query
        schema:
          type: boolean
          default: true
        required: false
  - moduleName: Actions / Reactions / Create
    method: post
    path: /actions/{idAction}/reactions
    description: Adds a new reaction to an action
    externalDocs: https://developer.atlassian.com/cloud/trello/rest""
    operationId: post-actions-idaction-reactions
    params:
      - paramName: idAction
        description: The ID of the action
        paramKey: idAction
        in: path
        schema:
          type: string
        required: true
      - paramName: shortName
        description: The primary `shortName` of the emoji to add. See [/emoji](#emoji)
        paramKey: shortName
        in: body
        schema:
          type: string
        required: false
      - paramName: skinVariation
        description: The `skinVariation` of the emoji to add. See [/emoji](#emoji)
        paramKey: skinVariation
        in: body
        schema:
          type: string
        required: false
      - paramName: native
        description: The emoji to add as a native unicode emoji. See [/emoji](#emoji)
        paramKey: native
        in: body
        schema:
          type: string
        required: false
      - paramName: unified
        description: The `unified` value of the emoji to add. See [/emoji](#emoji)
        paramKey: unified
        in: body
        schema:
          type: string
        required: false
    requestBodyType: json
  - moduleName: Actions / Reactions / Get By ID
    method: get
    path: /actions/{idAction}/reactions/{id}
    description: Get information for a reaction
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: get-actions-idaction-reactions-id
    params:
      - paramName: idAction
        description: The ID of the Action
        paramKey: idAction
        in: path
        schema:
          type: string
        required: true
      - paramName: id
        description: The ID of the reaction
        paramKey: id
        in: path
        schema:
          type: string
        required: true
      - paramName: member
        description: Whether to load the member as a nested resource. See [Members
          Nested
          Resource](/cloud/trello/guides/rest-api/nested-resources/#members-nested-resource)
        paramKey: member
        in: query
        schema:
          type: boolean
          default: true
        required: false
      - paramName: emoji
        description: Whether to load the emoji as a nested resource.
        paramKey: emoji
        in: query
        schema:
          type: boolean
          default: true
        required: false
  - moduleName: Actions / Reactions / Delete By ID
    method: delete
    path: /actions/{idAction}/reactions/{id}
    description: Deletes a reaction
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: delete-actions-idaction-reactions-id
    params:
      - paramName: idAction
        description: The ID of the Action
        paramKey: idAction
        in: path
        schema:
          type: string
        required: true
      - paramName: id
        description: The ID of the reaction
        paramKey: id
        in: path
        schema:
          type: string
        required: true
  - moduleName: Actions / Reactions Summary / Get
    method: get
    path: /actions/{idAction}/reactionsSummary
    description: List a summary of all reactions for an action
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: get-actions-idaction-reactionsummary
    params:
      - paramName: idAction
        description: The ID of the action
        paramKey: idAction
        in: path
        schema:
          type: string
        required: true
  - moduleName: Applications / Compliance / Get By Key
    method: get
    path: /applications/{key}/compliance
    description: ""
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: applications-key-compliance
    params:
      - paramName: key
        description: ""
        paramKey: key
        in: path
        schema:
          type: string
        required: true
  - moduleName: Batch / Get
    method: get
    path: /batch
    description: Make up to 10 GET requests in a single, batched API call.
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: get-batch
    params:
      - paramName: urls
        description: A list of API routes. Maximum of 10 routes allowed. The routes
          should begin with a forward slash and should not include the API
          version number - e.g. "urls=/members/trello,/cards/[cardId]"
        paramKey: urls
        in: query
        schema:
          type: string
        required: true
  - moduleName: Boards / Memberships / Get By ID
    method: get
    path: /boards/{id}/memberships
    description: Get information about the memberships users have to the board.
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: get-boards-id-memberships
    params:
      - paramName: id
        description: The ID of the board
        paramKey: id
        in: path
        schema:
          type: string
        required: true
      - paramName: filter
        description: One of `admins`, `all`, `none`, `normal`
        paramKey: filter
        in: query
        schema:
          type: string
          default: all
          enum:
            - admins
            - all
            - none
            - normal
        required: false
      - paramName: activity
        description: Works for premium organizations only.
        paramKey: activity
        in: query
        schema:
          type: boolean
          default: false
        required: false
      - paramName: orgMemberType
        description: Shows the type of member to the org the user is. For instance, an
          org admin will have a `orgMemberType` of `admin`.
        paramKey: orgMemberType
        in: query
        schema:
          type: boolean
          default: false
        required: false
      - paramName: member
        description: Determines whether to include a [nested member
          object](/cloud/trello/guides/rest-api/nested-resources/).
        paramKey: member
        in: query
        schema:
          type: boolean
          default: false
        required: false
      - paramName: memberFields
        description: "Fields to show if `member=true`. Valid values: [nested member
          resource fields](/cloud/trello/guides/rest-api/nested-resources/)."
        paramKey: member_fields
        in: query
        schema:
          type: string
          enum:
            - id
        required: false
        style: form
        explode: false
  - moduleName: Boards / Get By ID
    method: get
    path: /boards/{id}
    description: Request a single board.
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: get-boards-id
    params:
      - paramName: id
        description: ""
        paramKey: id
        in: path
        schema:
          type: string
        required: true
      - paramName: actions
        description: This is a nested resource. Read more about actions as nested
          resources [here](/cloud/trello/guides/rest-api/nested-resources/).
        paramKey: actions
        in: query
        schema:
          type: string
          default: all
        required: false
      - paramName: boardStars
        description: "Valid values are one of: `mine` or `none`."
        paramKey: boardStars
        in: query
        schema:
          type: string
          default: none
        required: false
      - paramName: cards
        description: This is a nested resource. Read more about cards as nested
          resources [here](/cloud/trello/guides/rest-api/nested-resources/).
        paramKey: cards
        in: query
        schema:
          type: string
          default: none
        required: false
      - paramName: cardPluginData
        description: Use with the `cards` param to include card pluginData with the response
        paramKey: card_pluginData
        in: query
        schema:
          type: boolean
          default: false
        required: false
      - paramName: checklists
        description: This is a nested resource. Read more about checklists as nested
          resources [here](/cloud/trello/guides/rest-api/nested-resources/).
        paramKey: checklists
        in: query
        schema:
          type: string
          default: none
        required: false
      - paramName: customFields
        description: This is a nested resource. Read more about custom fields as nested
          resources [here](#custom-fields-nested-resource).
        paramKey: customFields
        in: query
        schema:
          type: boolean
          default: false
        required: false
      - paramName: fields
        description: "The fields of the board to be included in the response. Valid
          values: all or a comma-separated list of: closed, dateLastActivity,
          dateLastView, desc, descData, idMemberCreator, idOrganization,
          invitations, invited, labelNames, memberships, name, pinned, powerUps,
          prefs, shortLink, shortUrl, starred, subscribed, url"
        paramKey: fields
        in: query
        schema:
          type: string
          default: name,desc,descData,closed,idOrganization,pinned,url,shortUrl,prefs,labelNames
        required: false
      - paramName: labels
        description: This is a nested resource. Read more about labels as nested
          resources [here](/cloud/trello/guides/rest-api/nested-resources/).
        paramKey: labels
        in: query
        schema:
          type: string
        required: false
      - paramName: lists
        description: This is a nested resource. Read more about lists as nested
          resources [here](/cloud/trello/guides/rest-api/nested-resources/).
        paramKey: lists
        in: query
        schema:
          type: string
          default: open
        required: false
      - paramName: members
        description: This is a nested resource. Read more about members as nested
          resources [here](/cloud/trello/guides/rest-api/nested-resources/).
        paramKey: members
        in: query
        schema:
          type: string
          default: none
        required: false
      - paramName: memberships
        description: This is a nested resource. Read more about memberships as nested
          resources [here](/cloud/trello/guides/rest-api/nested-resources/).
        paramKey: memberships
        in: query
        schema:
          type: string
          default: none
        required: false
      - paramName: pluginData
        description: "Determines whether the pluginData for this board should be
          returned. Valid values: true or false."
        paramKey: pluginData
        in: query
        schema:
          type: boolean
          default: false
        required: false
      - paramName: organization
        description: This is a nested resource. Read more about organizations as nested
          resources [here](/cloud/trello/guides/rest-api/nested-resources/).
        paramKey: organization
        in: query
        schema:
          type: boolean
          default: false
        required: false
      - paramName: organizationPluginData
        description: Use with the `organization` param to include organization
          pluginData with the response
        paramKey: organization_pluginData
        in: query
        schema:
          type: boolean
          default: false
        required: false
      - paramName: myPrefs
        description: ""
        paramKey: myPrefs
        in: query
        schema:
          type: boolean
          default: false
        required: false
      - paramName: tags
        description: Also known as collections, tags, refer to the collection(s) that a
          Board belongs to.
        paramKey: tags
        in: query
        schema:
          type: boolean
          default: false
        required: false
  - moduleName: Boards / Update By ID
    method: put
    path: /boards/{id}
    description: Update an existing board by id
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: put-boards-id
    params:
      - paramName: id
        description: ""
        paramKey: id
        in: path
        schema:
          type: string
        required: true
      - paramName: name
        description: The new name for the board. 1 to 16384 characters long.
        paramKey: name
        in: query
        schema:
          type: string
        required: false
      - paramName: desc
        description: A new description for the board, 0 to 16384 characters long
        paramKey: desc
        in: query
        schema:
          type: string
        required: false
      - paramName: closed
        description: Whether the board is closed
        paramKey: closed
        in: query
        schema:
          type: boolean
        required: false
      - paramName: subscribed
        description: Whether the acting user is subscribed to the board
        paramKey: subscribed
        in: query
        schema:
          type: string
        required: false
        style: form
        explode: false
      - paramName: idOrganization
        description: The id of the Workspace the board should be moved to
        paramKey: idOrganization
        in: query
        schema:
          type: string
        required: false
      - paramName: prefs/permissionLevel
        description: "One of: org, private, public"
        paramKey: prefs/permissionLevel
        in: query
        schema:
          type: string
        required: false
      - paramName: prefs/selfJoin
        description: Whether Workspace members can join the board themselves
        paramKey: prefs/selfJoin
        in: query
        schema:
          type: boolean
        required: false
      - paramName: prefs/cardCovers
        description: Whether card covers should be displayed on this board
        paramKey: prefs/cardCovers
        in: query
        schema:
          type: boolean
        required: false
      - paramName: prefs/hideVotes
        description: Determines whether the Voting Power-Up should hide who voted on
          cards or not.
        paramKey: prefs/hideVotes
        in: query
        schema:
          type: boolean
        required: false
      - paramName: prefs/invitations
        description: "Who can invite people to this board. One of: admins, members"
        paramKey: prefs/invitations
        in: query
        schema:
          type: string
        required: false
      - paramName: prefs/voting
        description: Who can vote on this board. One of disabled, members, observers,
          org, public
        paramKey: prefs/voting
        in: query
        schema:
          type: string
        required: false
      - paramName: prefs/comments
        description: "Who can comment on cards on this board. One of: disabled, members,
          observers, org, public"
        paramKey: prefs/comments
        in: query
        schema:
          type: string
        required: false
      - paramName: prefs/background
        description: "The id of a custom background or one of: blue, orange, green, red,
          purple, pink, lime, sky, grey"
        paramKey: prefs/background
        in: query
        schema:
          type: string
        required: false
      - paramName: prefs/cardAging
        description: "One of: pirate, regular"
        paramKey: prefs/cardAging
        in: query
        schema:
          type: string
        required: false
      - paramName: prefs/calendarFeedEnabled
        description: Determines whether the calendar feed is enabled or not.
        paramKey: prefs/calendarFeedEnabled
        in: query
        schema:
          type: boolean
        required: false
      - paramName: labelNames/green
        description: Name for the green label. 1 to 16384 characters long
        paramKey: labelNames/green
        in: query
        schema:
          type: string
        required: false
      - paramName: labelNames/yellow
        description: Name for the yellow label. 1 to 16384 characters long
        paramKey: labelNames/yellow
        in: query
        schema:
          type: string
        required: false
      - paramName: labelNames/orange
        description: Name for the orange label. 1 to 16384 characters long
        paramKey: labelNames/orange
        in: query
        schema:
          type: string
        required: false
      - paramName: labelNames/red
        description: Name for the red label. 1 to 16384 characters long
        paramKey: labelNames/red
        in: query
        schema:
          type: string
        required: false
      - paramName: labelNames/purple
        description: Name for the purple label. 1 to 16384 characters long
        paramKey: labelNames/purple
        in: query
        schema:
          type: string
        required: false
      - paramName: labelNames/blue
        description: Name for the blue label. 1 to 16384 characters long
        paramKey: labelNames/blue
        in: query
        schema:
          type: string
        required: false
  - moduleName: Boards / Delete By ID
    method: delete
    path: /boards/{id}
    description: Delete a board.
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: delete-boards-id
    params:
      - paramName: id
        description: ""
        paramKey: id
        in: path
        schema:
          type: string
        required: true
      - paramName: id
        description: The id of the board to delete
        paramKey: id
        in: path
        schema:
          type: string
        required: true
  - moduleName: Boards / Get Field By ID
    method: get
    path: /boards/{id}/{field}
    description: Get a single, specific field on a board
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: get-boards-id-field
    params:
      - paramName: id
        description: The ID of the board.
        paramKey: id
        in: path
        schema:
          type: string
        required: true
      - paramName: field
        description: "The field you'd like to receive. Valid values: closed,
          dateLastActivity, dateLastView, desc, descData, idMemberCreator,
          idOrganization, invitations, invited, labelNames, memberships, name,
          pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed,
          url."
        paramKey: field
        in: path
        schema:
          type: string
        required: true
  - moduleName: Boards / Actions / List By ID
    method: get
    path: /boards/{boardId}/actions
    description: Get all of the actions of a Board. See [Nested
      Resources](/cloud/trello/guides/rest-api/nested-resources/) for more
      information.
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: get-boards-id-actions
    params:
      - paramName: boardId
        description: ""
        paramKey: boardId
        in: path
        schema:
          type: string
        required: true
      - paramName: fields
        description: The fields to be returned for the Actions. [See Action fields
          here](/cloud/trello/guides/rest-api/object-definitions/#action-object).
        paramKey: fields
        in: query
        schema:
          type: any
        required: false
      - paramName: filter
        description: A comma-separated list of [action
          types](/cloud/trello/guides/rest-api/action-types/).
        paramKey: filter
        in: query
        schema:
          type: string
        required: false
      - paramName: format
        description: The format of the returned Actions. Either list or count.
        paramKey: format
        in: query
        schema:
          type: string
          default: list
        required: false
      - paramName: idModels
        description: A comma-separated list of idModels. Only actions related to these
          models will be returned.
        paramKey: idModels
        in: query
        schema:
          type: string
        required: false
      - paramName: limit
        description: The limit of the number of responses, between 0 and 1000.
        paramKey: limit
        in: query
        schema:
          type: number
          default: 50
        required: false
      - paramName: member
        description: Whether to return the member object for each action.
        paramKey: member
        in: query
        schema:
          type: boolean
          default: true
        required: false
      - paramName: memberFields
        description: The fields of the
          [member](/cloud/trello/guides/rest-api/object-definitions/#member-object)
          to return.
        paramKey: member_fields
        in: query
        schema:
          type: string
          default: activityBlocked,avatarHash,avatarUrl,fullName,idMemberReferrer,initials,nonPublic,nonPublicAvailable,username
        required: false
      - paramName: memberCreator
        description: Whether to return the memberCreator object for each action.
        paramKey: memberCreator
        in: query
        schema:
          type: boolean
          default: true
        required: false
      - paramName: memberCreatorFields
        description: The fields of the
          [member](/cloud/trello/guides/rest-api/object-definitions/#member-object)
          creator to return
        paramKey: memberCreator_fields
        in: query
        schema:
          type: string
          default: activityBlocked,avatarHash,avatarUrl,fullName,idMemberReferrer,initials,nonPublic,nonPublicAvailable,username
        required: false
      - paramName: page
        description: The page of results for actions.
        paramKey: page
        in: query
        schema:
          type: number
          default: 0
        required: false
      - paramName: reactions
        description: Whether to show reactions on comments or not.
        paramKey: reactions
        in: query
        schema:
          type: boolean
        required: false
      - paramName: before
        description: An Action ID
        paramKey: before
        in: query
        schema:
          type: string
        required: false
      - paramName: since
        description: An Action ID
        paramKey: since
        in: query
        schema:
          type: string
        required: false
  - moduleName: Boards / Cards / Get By ID
    method: get
    path: /boards/{id}/cards/{idCard}
    description: Get a single Card on a Board.
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: get-boards-id-cards-idcard
    params:
      - paramName: id
        description: The ID of the board
        paramKey: id
        in: path
        schema:
          type: string
        required: true
      - paramName: idCard
        description: The id the card to retrieve.
        paramKey: idCard
        in: path
        schema:
          type: string
        required: true
      - paramName: fields
        description: The fields to be returned for the Actions. [See Action fields
          here](/cloud/trello/guides/rest-api/object-definitions/#action-object).
        paramKey: fields
        in: query
        schema:
          type: any
        required: false
      - paramName: filter
        description: A comma-separated list of [action
          types](/cloud/trello/guides/rest-api/action-types/).
        paramKey: filter
        in: query
        schema:
          type: string
        required: false
      - paramName: format
        description: The format of the returned Actions. Either list or count.
        paramKey: format
        in: query
        schema:
          type: string
          default: list
        required: false
      - paramName: idModels
        description: A comma-separated list of idModels. Only actions related to these
          models will be returned.
        paramKey: idModels
        in: query
        schema:
          type: string
        required: false
      - paramName: limit
        description: The limit of the number of responses, between 0 and 1000.
        paramKey: limit
        in: query
        schema:
          type: number
          default: 50
        required: false
      - paramName: member
        description: Whether to return the member object for each action.
        paramKey: member
        in: query
        schema:
          type: boolean
          default: true
        required: false
      - paramName: memberFields
        description: The fields of the
          [member](/cloud/trello/guides/rest-api/object-definitions/#member-object)
          to return.
        paramKey: member_fields
        in: query
        schema:
          type: string
          default: activityBlocked,avatarHash,avatarUrl,fullName,idMemberReferrer,initials,nonPublic,nonPublicAvailable,username
        required: false
      - paramName: memberCreator
        description: Whether to return the memberCreator object for each action.
        paramKey: memberCreator
        in: query
        schema:
          type: boolean
          default: true
        required: false
      - paramName: memberCreatorFields
        description: The fields of the
          [member](/cloud/trello/guides/rest-api/object-definitions/#member-object)
          creator to return
        paramKey: memberCreator_fields
        in: query
        schema:
          type: string
          default: activityBlocked,avatarHash,avatarUrl,fullName,idMemberReferrer,initials,nonPublic,nonPublicAvailable,username
        required: false
      - paramName: page
        description: The page of results for actions.
        paramKey: page
        in: query
        schema:
          type: number
          default: 0
        required: false
      - paramName: reactions
        description: Whether to show reactions on comments or not.
        paramKey: reactions
        in: query
        schema:
          type: boolean
        required: false
      - paramName: before
        description: An Action ID
        paramKey: before
        in: query
        schema:
          type: string
        required: false
      - paramName: since
        description: An Action ID
        paramKey: since
        in: query
        schema:
          type: string
        required: false
  - moduleName: Boards / Board Stars / List By ID
    method: get
    path: /boards/{boardId}/boardStars
    description: ""
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: get-boards-id-boardstars
    params:
      - paramName: boardId
        description: ""
        paramKey: boardId
        in: path
        schema:
          type: string
        required: true
      - paramName: filter
        description: "Valid values: mine, none"
        paramKey: filter
        in: query
        schema:
          type: string
          default: mine
        required: false
  - moduleName: Boards / Checklists / Get By ID
    method: get
    path: /boards/{id}/checklists
    description: Get all of the checklists on a Board.
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: boards-id-checklists
    params:
      - paramName: id
        description: The ID of the board
        paramKey: id
        in: path
        schema:
          type: string
        required: true
  - moduleName: Boards / Cards / List By ID
    method: get
    path: /boards/{id}/cards
    description: Get all of the open Cards on a Board. See [Nested
      Resources](/cloud/trello/guides/rest-api/nested-resources/) for more
      information.
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: get-boards-id-cards
    params:
      - paramName: id
        description: ""
        paramKey: id
        in: path
        schema:
          type: string
        required: true
  - moduleName: Boards / Cards / List By Filter
    method: get
    path: /boards/{id}/cards/{filter}
    description: Get the Cards on a Board that match a given filter. See [Nested
      Resources](/cloud/trello/guides/rest-api/nested-resources/) for more
      information.
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: get-boards-id-cards-filter
    params:
      - paramName: id
        description: ID of the Board
        paramKey: id
        in: path
        schema:
          type: string
        required: true
      - paramName: filter
        description: "Valid Values: all, closed, none, open, visible."
        paramKey: filter
        in: path
        schema:
          type: string
          enum:
            - all
            - closed
            - none
            - open
            - visible
        required: true
  - moduleName: Boards / Custom Fields / Get By ID
    method: get
    path: /boards/{id}/customFields
    description: Get the Custom Field Definitions that exist on a board.
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: get-boards-id-customfields
    params:
      - paramName: id
        description: The ID of the board
        paramKey: id
        in: path
        schema:
          type: string
        required: true
  - moduleName: Boards / Labels / Get By ID
    method: get
    path: /boards/{id}/labels
    description: Get all of the Labels on a Board.
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: get-boards-id-labels
    params:
      - paramName: id
        description: The ID of the Board.
        paramKey: id
        in: path
        schema:
          type: string
        required: true
      - paramName: fields
        description: The fields to be returned for the Labels.
        paramKey: fields
        in: query
        schema:
          type: any
        required: false
      - paramName: limit
        description: The number of Labels to be returned.
        paramKey: limit
        in: query
        schema:
          type: number
          minimum: 0
          maximum: 1000
          default: 50
        required: false
  - moduleName: Boards / Labels / Create
    method: post
    path: /boards/{id}/labels
    description: Create a new Label on a Board.
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: post-boards-id-labels
    params:
      - paramName: id
        description: The id of the board to update
        paramKey: id
        in: path
        schema:
          type: string
        required: true
      - paramName: name
        description: The name of the label to be created. 1 to 16384 characters long.
        paramKey: name
        in: query
        schema:
          type: string
        required: true
      - paramName: color
        description: Sets the color of the new label. Valid values are a label color or
          `null`.
        paramKey: color
        in: query
        schema:
          type: string
        required: true
  - moduleName: Boards / Lists / Get By ID
    method: get
    path: /boards/{id}/lists
    description: Get the Lists on a Board
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: get-boards-id-lists
    params:
      - paramName: id
        description: The ID of the board
        paramKey: id
        in: path
        schema:
          type: string
        required: true
      - paramName: cards
        description: Filter to apply to Cards.
        paramKey: cards
        in: query
        schema:
          type: string
          enum:
            - all
            - closed
            - none
            - open
        required: false
      - paramName: cardFields
        description: "`all` or a comma-separated list of card
          [fields](/cloud/trello/guides/rest-api/object-definitions/#card-objec\
          t)"
        paramKey: card_fields
        in: query
        schema:
          type: string
          default: all
        required: false
      - paramName: filter
        description: Filter to apply to Lists
        paramKey: filter
        in: query
        schema:
          type: string
          enum:
            - all
            - closed
            - none
            - open
        required: false
      - paramName: fields
        description: "`all` or a comma-separated list of list
          [fields](/cloud/trello/guides/rest-api/object-definitions/)"
        paramKey: fields
        in: query
        schema:
          type: string
          default: all
        required: false
  - moduleName: Boards / Lists / Create
    method: post
    path: /boards/{id}/lists
    description: Create a new List on a Board.
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: post-boards-id-lists
    params:
      - paramName: id
        description: The ID of the board
        paramKey: id
        in: path
        schema:
          type: string
        required: true
      - paramName: name
        description: The name of the list to be created. 1 to 16384 characters long.
        paramKey: name
        in: query
        schema:
          type: string
        required: true
      - paramName: pos
        description: "Determines the position of the list. Valid values: `top`,
          `bottom`, or a positive number."
        paramKey: pos
        in: query
        schema:
          type: string
          default: top
        required: false
  - moduleName: Boards / Lists / Get By Filter
    method: get
    path: /boards/{id}/lists/{filter}
    description: ""
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: get-boards-id-lists-filter
    params:
      - paramName: id
        description: The ID of the board
        paramKey: id
        in: path
        schema:
          type: string
        required: true
      - paramName: filter
        description: One of `all`, `closed`, `none`, `open`
        paramKey: filter
        in: path
        schema:
          type: string
          enum:
            - all
            - closed
            - none
            - open
        required: true
  - moduleName: Boards / Members / Get By ID
    method: get
    path: /boards/{id}/members
    description: Get the Members for a board
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: get-boards-id-members
    params:
      - paramName: id
        description: The ID of the board
        paramKey: id
        in: path
        schema:
          type: string
        required: true
  - moduleName: Boards / Members / Update
    method: put
    path: /boards/{id}/members
    description: Invite a Member to a Board via their email address.
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: put-boards-id-members
    params:
      - paramName: id
        description: The ID of the board
        paramKey: id
        in: path
        schema:
          type: string
        required: true
      - paramName: email
        description: The email address of a user to add as a member of the board.
        paramKey: email
        in: query
        schema:
          type: string
        required: true
      - paramName: type
        description: "Valid values: admin, normal, observer. Determines what type of
          member the user being added should be of the board."
        paramKey: type
        in: query
        schema:
          type: string
          default: normal
          enum:
            - admin
            - normal
            - observer
        required: false
      - paramName: fullName
        description: The full name of the user to as a member of the board. Must have a
          length of at least 1 and cannot begin nor end with a space.
        paramKey: fullName
        in: body
        schema:
          type: string
        required: false
    requestBodyType: json
  - moduleName: Boards / Members / Update By ID
    method: put
    path: /boards/{id}/members/{idMember}
    description: Add a member to the board.
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: put-boards-id-members-idmember
    params:
      - paramName: id
        description: The id of the board to update
        paramKey: id
        in: path
        schema:
          type: string
        required: true
      - paramName: idMember
        description: The id of the member to add to the board.
        paramKey: idMember
        in: path
        schema:
          type: string
        required: true
      - paramName: type
        description: "One of: admin, normal, observer. Determines the type of member
          this user will be on the board."
        paramKey: type
        in: query
        schema:
          type: string
          enum:
            - admin
            - normal
            - observer
        required: true
      - paramName: allowBillableGuest
        description: Optional param that allows organization admins to add multi-board
          guests onto a board.
        paramKey: allowBillableGuest
        in: query
        schema:
          type: boolean
          default: false
        required: false
  - moduleName: Boards / Members / Delete By ID
    method: delete
    path: /boards/{id}/members/{idMember}
    description: ""
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: boardsidmembersidmember
    params:
      - paramName: id
        description: The id of the board to update
        paramKey: id
        in: path
        schema:
          type: string
        required: true
      - paramName: idMember
        description: The id of the member to add to the board.
        paramKey: idMember
        in: path
        schema:
          type: string
        required: true
  - moduleName: Boards / Memberships / Update By ID
    method: put
    path: /boards/{id}/memberships/{idMembership}
    description: Update an existing board by id
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: put-boards-id-memberships-idmembership
    params:
      - paramName: id
        description: The id of the board to update
        paramKey: id
        in: path
        schema:
          type: string
        required: true
      - paramName: idMembership
        description: The id of a membership that should be added to this board.
        paramKey: idMembership
        in: path
        schema:
          type: string
        required: true
      - paramName: type
        description: "One of: admin, normal, observer. Determines the type of member
          that this membership will be to this board."
        paramKey: type
        in: query
        schema:
          type: string
          enum:
            - admin
            - normal
            - observer
        required: true
      - paramName: memberFields
        description: "Valid values: all, avatarHash, bio, bioData, confirmed, fullName,
          idPremOrgsAdmin, initials, memberType, products, status, url,
          username"
        paramKey: member_fields
        in: query
        schema:
          type: string
          default: fullName, username
          enum:
            - all
            - avatarHash
            - bio
            - bioData
            - confirmed
            - fullName
            - idPremOrgsAdmin
            - initials
            - memberType
            - products
            - status
            - url
            - username
        required: false
        style: form
        explode: false
  - moduleName: Boards / My Prefs / Update Email Position
    method: put
    path: /boards/{id}/myPrefs/emailPosition
    description: Update emailPosition Pref on a Board
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: put-boards-id-myprefs-emailposition
    params:
      - paramName: id
        description: The id of the board to update
        paramKey: id
        in: path
        schema:
          type: string
        required: true
      - paramName: value
        description: "Valid values: bottom, top. Determines the position of the email
          address."
        paramKey: value
        in: query
        schema:
          type: string
          enum:
            - bottom
            - top
        required: true
  - moduleName: Boards / My Prefs / Update Email List
    method: put
    path: /boards/{id}/myPrefs/idEmailList
    description: Change the default list that email-to-board cards are created in.
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: put-boards-id-myprefs-idemaillist
    params:
      - paramName: id
        description: The id of the board to update
        paramKey: id
        in: path
        schema:
          type: string
        required: true
      - paramName: value
        description: The id of an email list.
        paramKey: value
        in: query
        schema:
          type: string
        required: true
  - moduleName: Boards / My Prefs / Show List Guide
    method: put
    path: /boards/{id}/myPrefs/showListGuide
    description: Update showListGuide Pref on a Board
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: put-boards-id-myPrefs-showlistguide
    params:
      - paramName: id
        description: The id of the board to update
        paramKey: id
        in: path
        schema:
          type: string
        required: true
      - paramName: value
        description: Determines whether to show the list guide.
        paramKey: value
        in: query
        schema:
          type: boolean
        required: true
  - moduleName: Boards / My Prefs / Show Sidebar
    method: put
    path: /boards/{id}/myPrefs/showSidebar
    description: Update showSidebar Pref on a Board
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: put-boards-id-myPrefs-showsidebar
    params:
      - paramName: id
        description: The id of the board to update
        paramKey: id
        in: path
        schema:
          type: string
        required: true
      - paramName: value
        description: Determines whether to show the side bar.
        paramKey: value
        in: query
        schema:
          type: boolean
        required: true
  - moduleName: Boards / My Prefs / Show Sidebar Activity
    method: put
    path: /boards/{id}/myPrefs/showSidebarActivity
    description: Update showSidebarActivity Pref on a Board
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: put-boards-id-myPrefs-showsidebaractivity
    params:
      - paramName: id
        description: The id of the board to update
        paramKey: id
        in: path
        schema:
          type: string
        required: true
      - paramName: value
        description: Determines whether to show sidebar activity.
        paramKey: value
        in: query
        schema:
          type: boolean
        required: true
  - moduleName: Boards / My Prefs / Show Sidebar Board Actions
    method: put
    path: /boards/{id}/myPrefs/showSidebarBoardActions
    description: Update showSidebarBoardActions Pref on a Board
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: put-boards-id-myPrefs-showsidebarboardactions
    params:
      - paramName: id
        description: The id of the board to update
        paramKey: id
        in: path
        schema:
          type: string
        required: true
      - paramName: value
        description: Determines whether to show the sidebar board actions.
        paramKey: value
        in: query
        schema:
          type: boolean
        required: true
  - moduleName: Boards / My Prefs / Show Sidebar Members
    method: put
    path: /boards/{id}/myPrefs/showSidebarMembers
    description: Update showSidebarMembers Pref on a Board
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: put-boards-id-myPrefs-showsidebarmembers
    params:
      - paramName: id
        description: The id of the board to update
        paramKey: id
        in: path
        schema:
          type: string
        required: true
      - paramName: value
        description: Determines whether to show members of the board in the sidebar.
        paramKey: value
        in: query
        schema:
          type: boolean
        required: true
  - moduleName: Boards / Create
    method: post
    path: /boards/
    description: Create a new board.
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: post-boards
    params:
      - paramName: name
        description: The new name for the board. 1 to 16384 characters long.
        paramKey: name
        in: query
        schema:
          type: string
        required: true
      - paramName: defaultLabels
        description: Determines whether to use the default set of labels.
        paramKey: defaultLabels
        in: query
        schema:
          type: boolean
          default: true
        required: false
      - paramName: defaultLists
        description: Determines whether to add the default set of lists to a board (To
          Do, Doing, Done). It is ignored if `idBoardSource` is provided.
        paramKey: defaultLists
        in: query
        schema:
          type: boolean
          default: true
        required: false
      - paramName: desc
        description: A new description for the board, 0 to 16384 characters long
        paramKey: desc
        in: query
        schema:
          type: string
        required: false
      - paramName: idOrganization
        description: The id or name of the Workspace the board should belong to.
        paramKey: idOrganization
        in: query
        schema:
          type: string
        required: false
      - paramName: idBoardSource
        description: The id of a board to copy into the new board.
        paramKey: idBoardSource
        in: query
        schema:
          type: string
        required: false
      - paramName: keepFromSource
        description: To keep cards from the original board pass in the value `cards`
        paramKey: keepFromSource
        in: query
        schema:
          type: string
          default: none
          enum:
            - cards
            - none
        required: false
      - paramName: powerUps
        description: "The Power-Ups that should be enabled on the new board. One of:
          `all`, `calendar`, `cardAging`, `recap`, `voting`."
        paramKey: powerUps
        in: query
        schema:
          type: string
          enum:
            - all
            - calendar
            - cardAging
            - recap
            - voting
        required: false
      - paramName: prefsPermissionLevel
        description: "The permissions level of the board. One of: `org`, `private`,
          `public`."
        paramKey: prefs_permissionLevel
        in: query
        schema:
          type: string
          default: private
          enum:
            - org
            - private
            - public
        required: false
      - paramName: prefsVoting
        description: Who can vote on this board. One of `disabled`, `members`,
          `observers`, `org`, `public`.
        paramKey: prefs_voting
        in: query
        schema:
          type: string
          default: disabled
          enum:
            - disabled
            - members
            - observers
            - org
            - public
        required: false
      - paramName: prefsComments
        description: "Who can comment on cards on this board. One of: `disabled`,
          `members`, `observers`, `org`, `public`."
        paramKey: prefs_comments
        in: query
        schema:
          type: string
          default: members
          enum:
            - disabled
            - members
            - observers
            - org
            - public
        required: false
      - paramName: prefsInvitations
        description: "Determines what types of members can invite users to join. One of:
          `admins`, `members`."
        paramKey: prefs_invitations
        in: query
        schema:
          type: string
          default: members
          enum:
            - members
            - admins
        required: false
      - paramName: prefsSelfJoin
        description: Determines whether users can join the boards themselves or whether
          they have to be invited.
        paramKey: prefs_selfJoin
        in: query
        schema:
          type: boolean
          default: true
        required: false
      - paramName: prefsCardCovers
        description: Determines whether card covers are enabled.
        paramKey: prefs_cardCovers
        in: query
        schema:
          type: boolean
          default: true
        required: false
      - paramName: prefsBackground
        description: "The id of a custom background or one of: `blue`, `orange`,
          `green`, `red`, `purple`, `pink`, `lime`, `sky`, `grey`."
        paramKey: prefs_background
        in: query
        schema:
          type: string
          default: blue
          enum:
            - blue
            - orange
            - green
            - red
            - purple
            - pink
            - lime
            - sky
            - grey
        required: false
      - paramName: prefsCardAging
        description: "Determines the type of card aging that should take place on the
          board if card aging is enabled. One of: `pirate`, `regular`."
        paramKey: prefs_cardAging
        in: query
        schema:
          type: string
          default: regular
          enum:
            - pirate
            - regular
        required: false
  - moduleName: Boards / Calendar Key / Generate
    method: post
    path: /boards/{id}/calendarKey/generate
    description: Create a new calendarKey.
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: post-boards-id-calendarkey-generate
    params:
      - paramName: id
        description: The id of the board to update
        paramKey: id
        in: path
        schema:
          type: string
        required: true
  - moduleName: Boards / Email Key / Generate
    method: post
    path: /boards/{id}/emailKey/generate
    description: ""
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: post-boards-id-emailkey-generate
    params:
      - paramName: id
        description: The id of the board to update
        paramKey: id
        in: path
        schema:
          type: string
        required: true
  - moduleName: Boards / ID Tags / Create
    method: post
    path: /boards/{id}/idTags
    description: Create a Tag for a Board
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: post-boards-id-idtags
    params:
      - paramName: id
        description: The id of the board to update
        paramKey: id
        in: path
        schema:
          type: string
        required: true
      - paramName: value
        description: The id of a tag from the organization to which this board belongs.
        paramKey: value
        in: query
        schema:
          type: string
        required: true
  - moduleName: Boards / Marked As Viewed
    method: post
    path: /boards/{id}/markedAsViewed
    description: ""
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: post-boards-id-markedasviewed
    params:
      - paramName: id
        description: The id of the board to update
        paramKey: id
        in: path
        schema:
          type: string
        required: true
  - moduleName: Boards / Board Plugins / Get
    method: get
    path: /boards/{id}/boardPlugins
    description: Get the enabled Power-Ups on a board
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: get-boards-id-boardplugins
    params:
      - paramName: id
        description: The ID of the Board
        paramKey: id
        in: path
        schema:
          type: string
        required: true
  - moduleName: Boards / Plugins / Get
    method: get
    path: /boards/{id}/plugins
    description: List the Power-Ups on a board
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: get-board-id-plugins
    params:
      - paramName: id
        description: The ID of the board
        paramKey: id
        in: path
        schema:
          type: string
        required: true
      - paramName: filter
        description: "One of: `enabled` or `available`"
        paramKey: filter
        in: query
        schema:
          type: string
          default: enabled
          enum:
            - enabled
            - available
        required: false
  - moduleName: Cards / Create
    method: post
    path: /cards
    description: Create a new card. Query parameters may also be replaced with a
      JSON request body instead.
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: post-cards
    params:
      - paramName: name
        description: The name for the card
        paramKey: name
        in: query
        schema:
          type: string
        required: false
      - paramName: desc
        description: The description for the card
        paramKey: desc
        in: query
        schema:
          type: string
        required: false
      - paramName: pos
        description: The position of the new card. `top`, `bottom`, or a positive float
        paramKey: pos
        in: query
        schema:
          type: any
        required: false
      - paramName: due
        description: A due date for the card
        paramKey: due
        in: query
        schema:
          type: string
        required: false
      - paramName: start
        description: The start date of a card, or `null`
        paramKey: start
        in: query
        schema:
          type: string
        required: false
      - paramName: dueComplete
        description: ""
        paramKey: dueComplete
        in: query
        schema:
          type: boolean
        required: false
      - paramName: idList
        description: The ID of the list the card should be created in
        paramKey: idList
        in: query
        schema:
          type: string
        required: true
      - paramName: idMembers
        description: Comma-separated list of member IDs to add to the card
        paramKey: idMembers
        in: body
        schema:
          type: array
          items:
            type: any
        required: false
      - paramName: idLabels
        description: Comma-separated list of label IDs to add to the card
        paramKey: idLabels
        in: query
        schema:
          type: body
          items:
            type: any
        required: false
      - paramName: urlSource
        description: A URL starting with `http://` or `https://`
        paramKey: urlSource
        in: query
        schema:
          type: string
        required: false
      - paramName: fileSource
        description: ""
        paramKey: fileSource
        in: query
        schema:
          type: string
        required: false
      - paramName: mimeType
        description: The mimeType of the attachment. Max length 256
        paramKey: mimeType
        in: query
        schema:
          type: string
        required: false
      - paramName: idCardSource
        description: The ID of a card to copy into the new card
        paramKey: idCardSource
        in: query
        schema:
          type: string
        required: false
      - paramName: keepFromSource
        description: "If using `idCardSource` you can specify which properties to copy
          over. `all` or comma-separated list of:
          `attachments,checklists,customFields,comments,due,start,labels,member\
          s,start,stickers`"
        paramKey: keepFromSource
        in: query
        schema:
          type: string
          default: all
          enum:
            - all
            - attachments
            - checklists
            - comments
            - customFields
            - due
            - start
            - labels
            - members
            - start
            - stickers
        required: false
        style: form
        explode: false
      - paramName: address
        description: For use with/by the Map View
        paramKey: address
        in: query
        schema:
          type: string
        required: false
      - paramName: locationName
        description: For use with/by the Map View
        paramKey: locationName
        in: query
        schema:
          type: string
        required: false
      - paramName: coordinates
        description: For use with/by the Map View. Should take the form latitude,longitude
        paramKey: coordinates
        in: query
        schema:
          type: string
        required: false
  - moduleName: Cards / Get By ID
    method: get
    path: /cards/{id}
    description: Get a card by its ID
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: get-cards-id
    params:
      - paramName: id
        description: The ID of the Card
        paramKey: id
        in: path
        schema:
          type: string
        required: true
      - paramName: fields
        description: "`all` or a comma-separated list of
          [fields](/cloud/trello/guides/rest-api/object-definitions/).
          **Defaults**: `badges, checkItemStates, closed, dateLastActivity,
          desc, descData, due, start, idBoard, idChecklists, idLabels, idList,
          idMembers, idShort, idAttachmentCover, manualCoverAttachment, labels,
          name, pos, shortUrl, url`"
        paramKey: fields
        in: query
        schema:
          type: string
        required: false
      - paramName: actions
        description: See the [Actions Nested
          Resource](/cloud/trello/guides/rest-api/nested-resources/#actions-nested-resource)
        paramKey: actions
        in: query
        schema:
          type: string
        required: false
      - paramName: attachments
        description: "`true`, `false`, or `cover`"
        paramKey: attachments
        in: query
        schema:
          type: string
          default: false
        required: false
      - paramName: attachmentFields
        description: "`all` or a comma-separated list of attachment
          [fields](/cloud/trello/guides/rest-api/object-definitions/)"
        paramKey: attachment_fields
        in: query
        schema:
          type: string
          default: all
        required: false
      - paramName: members
        description: Whether to return member objects for members on the card
        paramKey: members
        in: query
        schema:
          type: boolean
          default: false
        required: false
      - paramName: memberFields
        description: "`all` or a comma-separated list of member
          [fields](/cloud/trello/guides/rest-api/object-definitions/).
          **Defaults**: `avatarHash, fullName, initials, username`"
        paramKey: member_fields
        in: query
        schema:
          type: string
        required: false
      - paramName: membersVoted
        description: Whether to return member objects for members who voted on the card
        paramKey: membersVoted
        in: query
        schema:
          type: boolean
          default: false
        required: false
      - paramName: memberVotedFields
        description: "`all` or a comma-separated list of member
          [fields](/cloud/trello/guides/rest-api/object-definitions/).
          **Defaults**: `avatarHash, fullName, initials, username`"
        paramKey: memberVoted_fields
        in: query
        schema:
          type: string
        required: false
      - paramName: checkItemStates
        description: ""
        paramKey: checkItemStates
        in: query
        schema:
          type: boolean
          default: false
        required: false
      - paramName: checklists
        description: Whether to return the checklists on the card. `all` or `none`
        paramKey: checklists
        in: query
        schema:
          type: string
          default: none
        required: false
      - paramName: checklistFields
        description: "`all` or a comma-separated list of `idBoard,idCard,name,pos`"
        paramKey: checklist_fields
        in: query
        schema:
          type: string
          default: all
        required: false
      - paramName: board
        description: Whether to return the board object the card is on
        paramKey: board
        in: query
        schema:
          type: boolean
          default: false
        required: false
      - paramName: boardFields
        description: "`all` or a comma-separated list of board
          [fields](/cloud/trello/guides/rest-api/object-definitions/#board-obje\
          ct). **Defaults**: `name, desc, descData, closed, idOrganization,
          pinned, url, prefs`"
        paramKey: board_fields
        in: query
        schema:
          type: string
        required: false
      - paramName: list
        description: See the [Lists Nested
          Resource](/cloud/trello/guides/rest-api/nested-resources/)
        paramKey: list
        in: query
        schema:
          type: boolean
          default: false
        required: false
      - paramName: pluginData
        description: Whether to include pluginData on the card with the response
        paramKey: pluginData
        in: query
        schema:
          type: boolean
          default: false
        required: false
      - paramName: stickers
        description: Whether to include sticker models with the response
        paramKey: stickers
        in: query
        schema:
          type: boolean
          default: false
        required: false
      - paramName: stickerFields
        description: "`all` or a comma-separated list of sticker
          [fields](/cloud/trello/guides/rest-api/object-definitions/)"
        paramKey: sticker_fields
        in: query
        schema:
          type: string
          default: all
        required: false
      - paramName: customFieldItems
        description: Whether to include the customFieldItems
        paramKey: customFieldItems
        in: query
        schema:
          type: boolean
          default: false
        required: false
  - moduleName: Cards / Update By ID
    method: put
    path: /cards/{id}
    description: Update a card. Query parameters may also be replaced with a JSON
      request body instead.
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: put-cards-id
    params:
      - paramName: id
        description: The ID of the Card
        paramKey: id
        in: path
        schema:
          type: string
        required: true
      - paramName: name
        description: The new name for the card
        paramKey: name
        in: query
        schema:
          type: string
        required: false
      - paramName: desc
        description: The new description for the card
        paramKey: desc
        in: query
        schema:
          type: string
        required: false
      - paramName: closed
        description: "Whether the card should be archived (closed: true)"
        paramKey: closed
        in: query
        schema:
          type: boolean
        required: false
      - paramName: idMembers
        description: Comma-separated list of member IDs
        paramKey: idMembers
        in: query
        schema:
          type: string
        required: false
        style: form
        explode: false
      - paramName: idAttachmentCover
        description: The ID of the image attachment the card should use as its cover, or
          null for none
        paramKey: idAttachmentCover
        in: query
        schema:
          type: string
        required: false
      - paramName: idList
        description: The ID of the list the card should be in
        paramKey: idList
        in: query
        schema:
          type: string
        required: false
      - paramName: idLabels
        description: Comma-separated list of label IDs
        paramKey: idLabels
        in: query
        schema:
          type: string
        required: false
        style: form
        explode: false
      - paramName: idBoard
        description: The ID of the board the card should be on
        paramKey: idBoard
        in: query
        schema:
          type: string
        required: false
      - paramName: pos
        description: The position of the card in its list. `top`, `bottom`, or a
          positive float
        paramKey: pos
        in: query
        schema:
          type: any
        required: false
      - paramName: due
        description: When the card is due, or `null`
        paramKey: due
        in: query
        schema:
          type: string
        required: false
      - paramName: start
        description: The start date of a card, or `null`
        paramKey: start
        in: query
        schema:
          type: string
        required: false
      - paramName: dueComplete
        description: Whether the due date should be marked complete
        paramKey: dueComplete
        in: query
        schema:
          type: boolean
        required: false
      - paramName: subscribed
        description: Whether the member is should be subscribed to the card
        paramKey: subscribed
        in: query
        schema:
          type: boolean
        required: false
      - paramName: address
        description: For use with/by the Map View
        paramKey: address
        in: query
        schema:
          type: string
        required: false
      - paramName: locationName
        description: For use with/by the Map View
        paramKey: locationName
        in: query
        schema:
          type: string
        required: false
      - paramName: coordinates
        description: For use with/by the Map View. Should be latitude,longitude
        paramKey: coordinates
        in: query
        schema:
          type: string
        required: false
      - paramName: cover
        description: >-
          Updates the card's cover
           | Option | Values | About |
           |--------|--------|-------|
           | color | `pink`, `yellow`, `lime`, `blue`, `black`, `orange`, `red`, `purple`, `sky`, `green` | Makes the cover a solid color . |
           | brightness | `dark`, `light` | Determines whether the text on the cover should be dark or light.
           | url | An unsplash URL: https://images.unsplash.com | Used if making an image the cover. Only Unsplash URLs work.
           | idAttachment | ID of an attachment on the card | Used if setting an attached image as the cover. |
           | size | `normal`, `full` | Determines whether to show the card name on the cover, or below it. |
           
           `brightness` can be sent alongside any of the other parameters, but all of the other parameters are mutually exclusive; you can not have the cover be a `color` and an `idAttachment` at the same time. 
           
           On the brightness options, setting it to light will make the text on the card cover dark:
           ![](/cloud/trello/images/rest/cards/cover-brightness-dark.png)
           
           And vice versa, setting it to dark will make the text on the card cover light: 
           ![](/cloud/trello/images/rest/cards/cover-brightness-light.png) 
        paramKey: cover
        in: query
        schema:
          type: any
        required: false
  - moduleName: Cards / Delete By ID
    method: delete
    path: /cards/{id}
    description: Delete a Card
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: delete-cards-id
    params:
      - paramName: id
        description: The ID of the Card
        paramKey: id
        in: path
        schema:
          type: string
        required: true
  - moduleName: Cards / Get Field By ID
    method: get
    path: /cards/{id}/{field}
    description: Get a specific property of a card
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: get-cards-id-field
    params:
      - paramName: id
        description: The ID of the Card
        paramKey: id
        in: path
        schema:
          type: string
        required: true
      - paramName: field
        description: The desired field.
        paramKey: field
        in: path
        schema:
          type: string
          enum:
            - id
            - address
            - badges
            - checkItemStates
            - closed
            - coordinates
            - creationMethod
            - dueComplete
            - dateLastActivity
            - desc
            - descData
            - due
            - dueReminder
            - idBoard
            - idChecklists
            - idLabels
            - idList
            - idMembers
            - idMembersVoted
            - idShort
            - idAttachmentCover
            - labels
            - limits
            - locationName
            - manualCoverAttachment
            - name
            - pos
            - shortLink
            - shortUrl
            - subscribed
            - url
            - cover
            - isTemplate
        required: true
  - moduleName: Cards / Actions / List By ID
    method: get
    path: /cards/{id}/actions
    description: List the Actions on a Card. See [Nested
      Resources](/cloud/trello/guides/rest-api/nested-resources/) for more
      information.
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: get-cards-id-actions
    params:
      - paramName: id
        description: The ID of the Card
        paramKey: id
        in: path
        schema:
          type: string
        required: true
      - paramName: filter
        description: A comma-separated list of [action
          types](https://developer.atlassian.com/cloud/trello/guides/rest-api/action-types/).
        paramKey: filter
        in: query
        schema:
          type: string
          default: commentCard, updateCard:idList
        required: false
      - paramName: page
        description: The page of results for actions. Each page of results has 50 actions.
        paramKey: page
        in: query
        schema:
          type: number
          maximum: 19
          default: 0
        required: false
  - moduleName: Cards / Attachments / List By ID
    method: get
    path: /cards/{id}/attachments
    description: List the attachments on a card
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: get-cards-id-attachments
    params:
      - paramName: id
        description: The ID of the Card
        paramKey: id
        in: path
        schema:
          type: string
        required: true
      - paramName: fields
        description: "`all` or a comma-separated list of attachment
          [fields](/cloud/trello/guides/rest-api/object-definitions/)"
        paramKey: fields
        in: query
        schema:
          type: string
          default: all
        required: false
      - paramName: filter
        description: Use `cover` to restrict to just the cover attachment
        paramKey: filter
        in: query
        schema:
          type: string
          default: "false"
        required: false
  - moduleName: Cards / Attachments / Create
    method: post
    path: /cards/{id}/attachments
    description: Create an Attachment to a Card. See
      https://glitch.com/~trello-attachments-api for code examples. You may need
      to remix the project in order to view it.
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: post-cards-id-attachments
    params:
      - paramName: id
        description: The ID of the Card
        paramKey: id
        in: path
        schema:
          type: string
        required: true
      - paramName: name
        description: The name of the attachment. Max length 256.
        paramKey: name
        in: query
        schema:
          type: string
        required: false
      - paramName: file
        description: The file to attach, as multipart/form-data
        paramKey: file
        in: query
        schema:
          type: string
        required: false
      - paramName: mimeType
        description: The mimeType of the attachment. Max length 256
        paramKey: mimeType
        in: query
        schema:
          type: string
        required: false
      - paramName: url
        description: A URL to attach. Must start with `http://` or `https://`
        paramKey: url
        in: query
        schema:
          type: string
        required: false
      - paramName: setCover
        description: Determines whether to use the new attachment as a cover for the Card.
        paramKey: setCover
        in: query
        schema:
          type: boolean
          default: false
        required: false
  - moduleName: Cards / Attachments / Get By ID
    method: get
    path: /cards/{id}/attachments/{idAttachment}
    description: Get a specific Attachment on a Card.
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: get-cards-id-attachments-idattachment
    params:
      - paramName: id
        description: The ID of the Card
        paramKey: id
        in: path
        schema:
          type: string
        required: true
      - paramName: idAttachment
        description: The ID of the Attachment
        paramKey: idAttachment
        in: path
        schema:
          type: string
        required: true
      - paramName: fields
        description: The Attachment fields to be included in the response.
        paramKey: fields
        in: query
        schema:
          type: array
          items:
            type: any
        required: false
        style: form
        explode: false
  - moduleName: Cards / Attachments / Delete By ID
    method: delete
    path: /cards/{id}/attachments/{idAttachment}
    description: Delete an Attachment
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: deleted-cards-id-attachments-idattachment
    params:
      - paramName: id
        description: The ID of the Card
        paramKey: id
        in: path
        schema:
          type: string
        required: true
      - paramName: idAttachment
        description: The ID of the Attachment
        paramKey: idAttachment
        in: path
        schema:
          type: string
        required: true
      - paramName: id
        description: The ID of the Card
        paramKey: id
        in: path
        schema:
          type: string
        required: true
      - paramName: idAttachment
        description: The ID of the attachment to delete
        paramKey: idAttachment
        in: path
        schema:
          type: string
        required: true
  - moduleName: Cards / Board / Get By ID
    method: get
    path: /cards/{id}/board
    description: Get the board a card is on
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: get-cards-id-board
    params:
      - paramName: id
        description: The ID of the Card
        paramKey: id
        in: path
        schema:
          type: string
        required: true
      - paramName: fields
        description: "`all` or a comma-separated list of board
          [fields](/cloud/trello/guides/rest-api/object-definitions/#board-obje\
          ct)"
        paramKey: fields
        in: query
        schema:
          type: string
          default: all
        required: false
  - moduleName: Cards / Check Item States / Get By ID
    method: get
    path: /cards/{id}/checkItemStates
    description: Get the completed checklist items on a card
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: get-cards-id-checkitemstates
    params:
      - paramName: id
        description: The ID of the Card
        paramKey: id
        in: path
        schema:
          type: string
        required: true
      - paramName: fields
        description: "`all` or a comma-separated list of: `idCheckItem`, `state`"
        paramKey: fields
        in: query
        schema:
          type: string
          default: all
        required: false
  - moduleName: Cards / Checklists / List By ID
    method: get
    path: /cards/{id}/checklists
    description: Get the checklists on a card
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: get-cards-id-checklists
    params:
      - paramName: id
        description: The ID of the Card
        paramKey: id
        in: path
        schema:
          type: string
        required: true
      - paramName: checkItems
        description: "`all` or `none`"
        paramKey: checkItems
        in: query
        schema:
          type: string
          default: all
          enum:
            - all
            - none
        required: false
      - paramName: checkItemFields
        description: "`all` or a comma-separated list of:
          `name,nameData,pos,state,type,due,dueReminder,idMember`"
        paramKey: checkItem_fields
        in: query
        schema:
          type: string
          default: name,nameData,pos,state,due,dueReminder,idMember
          enum:
            - name
            - nameData
            - pos
            - state
            - type
            - due
            - dueReminder
            - idMember
        required: false
        style: form
        explode: false
      - paramName: filter
        description: "`all` or `none`"
        paramKey: filter
        in: query
        schema:
          type: string
          default: all
          enum:
            - all
            - none
        required: false
      - paramName: fields
        description: "`all` or a comma-separated list of: `idBoard,idCard,name,pos`"
        paramKey: fields
        in: query
        schema:
          type: string
          default: all
          enum:
            - all
            - name
            - nameData
            - pos
            - state
            - type
        required: false
        style: form
        explode: false
  - moduleName: Cards / Checklists / Create
    method: post
    path: /cards/{id}/checklists
    description: Create a new checklist on a card
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: post-cards-id-checklists
    params:
      - paramName: id
        description: The ID of the Card
        paramKey: id
        in: path
        schema:
          type: string
        required: true
      - paramName: name
        description: The name of the checklist
        paramKey: name
        in: query
        schema:
          type: string
        required: false
      - paramName: idChecklistSource
        description: The ID of a source checklist to copy into the new one
        paramKey: idChecklistSource
        in: query
        schema:
          type: string
        required: false
      - paramName: pos
        description: "The position of the checklist on the card. One of: `top`,
          `bottom`, or a positive number."
        paramKey: pos
        in: query
        schema:
          type: string
        required: false
  - moduleName: Cards / Check Item / Get By ID
    method: get
    path: /cards/{id}/checkItem/{idCheckItem}
    description: Get a specific checkItem on a card
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: get-cards-id-checkitem-idcheckitem
    params:
      - paramName: id
        description: The ID of the Card
        paramKey: id
        in: path
        schema:
          type: string
        required: true
      - paramName: idCheckItem
        description: The ID of the checkitem
        paramKey: idCheckItem
        in: path
        schema:
          type: string
        required: true
      - paramName: fields
        description: "`all` or a comma-separated list of
          `name,nameData,pos,state,type,due,dueReminder,idMember`"
        paramKey: fields
        in: query
        schema:
          type: string
          default: name,nameData,pos,state,due,dueReminder,idMember
        required: false
  - moduleName: Cards / Check Item / Update By ID
    method: put
    path: /cards/{id}/checkItem/{idCheckItem}
    description: Update an item in a checklist on a card.
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: put-cards-id-checkitem-idcheckitem
    params:
      - paramName: id
        description: The ID of the Card
        paramKey: id
        in: path
        schema:
          type: string
        required: true
      - paramName: idCheckItem
        description: The ID of the checkitem
        paramKey: idCheckItem
        in: path
        schema:
          type: string
        required: true
      - paramName: name
        description: The new name for the checklist item
        paramKey: name
        in: query
        schema:
          type: string
        required: false
      - paramName: state
        description: "One of: `complete`, `incomplete`"
        paramKey: state
        in: query
        schema:
          type: string
          enum:
            - complete
            - incomplete
        required: false
      - paramName: idChecklist
        description: The ID of the checklist this item is in
        paramKey: idChecklist
        in: query
        schema:
          type: string
        required: false
      - paramName: pos
        description: "`top`, `bottom`, or a positive float"
        paramKey: pos
        in: query
        schema:
          type: any
        required: false
      - paramName: due
        description: A due date for the checkitem
        paramKey: due
        in: query
        schema:
          type: string
        required: false
      - paramName: dueReminder
        description: A dueReminder for the due date on the checkitem
        paramKey: dueReminder
        in: query
        schema:
          type: number
        required: false
      - paramName: idMember
        description: The ID of the member to remove from the card
        paramKey: idMember
        in: query
        schema:
          type: string
        required: false
  - moduleName: Cards / Check Item / Delete By ID
    method: delete
    path: /cards/{id}/checkItem/{idCheckItem}
    description: Delete a checklist item
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: delete-cards-id-checkitem-idcheckitem
    params:
      - paramName: id
        description: The ID of the Card
        paramKey: id
        in: path
        schema:
          type: string
        required: true
      - paramName: idCheckItem
        description: The ID of the checkitem
        paramKey: idCheckItem
        in: path
        schema:
          type: string
        required: true
  - moduleName: Cards / List / Get By ID
    method: get
    path: /cards/{id}/list
    description: Get the list a card is in
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: get-cards-id-list
    params:
      - paramName: id
        description: The ID of the Card
        paramKey: id
        in: path
        schema:
          type: string
        required: true
      - paramName: fields
        description: "`all` or a comma-separated list of list
          [fields](/cloud/trello/guides/rest-api/object-definitions/)"
        paramKey: fields
        in: query
        schema:
          type: string
          default: all
        required: false
  - moduleName: Cards / Members / List By ID
    method: get
    path: /cards/{id}/members
    description: Get the members on a card
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: get-cards-id-members
    params:
      - paramName: id
        description: The ID of the Card
        paramKey: id
        in: path
        schema:
          type: string
        required: true
      - paramName: fields
        description: "`all` or a comma-separated list of member
          [fields](/cloud/trello/guides/rest-api/object-definitions/)"
        paramKey: fields
        in: query
        schema:
          type: string
          default: avatarHash,fullName,initials,username
        required: false
  - moduleName: Cards / Members Voted / List By ID
    method: get
    path: /cards/{id}/membersVoted
    description: Get the members who have voted on a card
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: get-cards-id-membersvoted
    params:
      - paramName: id
        description: The ID of the Card
        paramKey: id
        in: path
        schema:
          type: string
        required: true
      - paramName: fields
        description: "`all` or a comma-separated list of member
          [fields](/cloud/trello/guides/rest-api/object-definitions/)"
        paramKey: fields
        in: query
        schema:
          type: string
          default: avatarHash,fullName,initials,username
        required: false
  - moduleName: Cards / Members Voted / Add
    method: post
    path: /cards/{id}/membersVoted
    description: Vote on the card for a given member.
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: cardsidmembersvoted-1
    params:
      - paramName: id
        description: The ID of the Card
        paramKey: id
        in: path
        schema:
          type: string
        required: true
      - paramName: value
        description: The ID of the member to vote 'yes' on the card
        paramKey: value
        in: query
        schema:
          type: string
        required: true
  - moduleName: Cards / Plugin Data / Get By ID
    method: get
    path: /cards/{id}/pluginData
    description: Get any shared pluginData on a card.
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: get-cards-id-plugindata
    params:
      - paramName: id
        description: The ID of the Card
        paramKey: id
        in: path
        schema:
          type: string
        required: true
  - moduleName: Cards / Stickers / List By ID
    method: get
    path: /cards/{id}/stickers
    description: Get the stickers on a card
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: get-cards-id-stickers
    params:
      - paramName: id
        description: The ID of the Card
        paramKey: id
        in: path
        schema:
          type: string
        required: true
      - paramName: id
        description: The ID of the Card
        paramKey: id
        in: path
        schema:
          type: string
        required: true
      - paramName: fields
        description: "`all` or a comma-separated list of sticker
          [fields](/cloud/trello/guides/rest-api/object-definitions/)"
        paramKey: fields
        in: query
        schema:
          type: string
          default: all
        required: false
  - moduleName: Cards / Stickers / Create
    method: post
    path: /cards/{id}/stickers
    description: Add a sticker to a card
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: post-cards-id-stickers
    params:
      - paramName: id
        description: The ID of the Card
        paramKey: id
        in: path
        schema:
          type: string
        required: true
      - paramName: image
        description: For custom stickers, the id of the sticker. For default stickers,
          the string identifier (like 'taco-cool', see below)
        paramKey: image
        in: query
        schema:
          type: string
        required: true
      - paramName: top
        description: The top position of the sticker, from -60 to 100
        paramKey: top
        in: query
        schema:
          type: number
          minimum: -60
          maximum: 100
        required: true
      - paramName: left
        description: The left position of the sticker, from -60 to 100
        paramKey: left
        in: query
        schema:
          type: number
          minimum: -60
          maximum: 100
        required: true
      - paramName: zIndex
        description: The z-index of the sticker
        paramKey: zIndex
        in: query
        schema:
          type: number
        required: true
      - paramName: rotate
        description: The rotation of the sticker
        paramKey: rotate
        in: query
        schema:
          type: number
          minimum: 0
          maximum: 360
          default: 0
        required: false
  - moduleName: Cards / Stickers / Get By ID
    method: get
    path: /cards/{id}/stickers/{idSticker}
    description: Get a specific sticker on a card
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: get-cards-id-stickers-idsticker
    params:
      - paramName: id
        description: The ID of the Card
        paramKey: id
        in: path
        schema:
          type: string
        required: true
      - paramName: idSticker
        description: The ID of the sticker
        paramKey: idSticker
        in: path
        schema:
          type: string
        required: true
      - paramName: fields
        description: "`all` or a comma-separated list of sticker
          [fields](/cloud/trello/guides/rest-api/object-definitions/)"
        paramKey: fields
        in: query
        schema:
          type: string
          default: all
        required: false
  - moduleName: Cards / Stickers / Delete By ID
    method: delete
    path: /cards/{id}/stickers/{idSticker}
    description: Remove a sticker from the card
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: delete-cards-id-stickers-idsticker
    params:
      - paramName: id
        description: The ID of the Card
        paramKey: id
        in: path
        schema:
          type: string
        required: true
      - paramName: idSticker
        description: The ID of the sticker
        paramKey: idSticker
        in: path
        schema:
          type: string
        required: true
  - moduleName: Cards / Stickers / Update By ID
    method: put
    path: /cards/{id}/stickers/{idSticker}
    description: Update a sticker on a card
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: put-cards-id-stickers-idsticker
    params:
      - paramName: id
        description: The ID of the Card
        paramKey: id
        in: path
        schema:
          type: string
        required: true
      - paramName: idSticker
        description: The ID of the sticker
        paramKey: idSticker
        in: path
        schema:
          type: string
        required: true
      - paramName: top
        description: The top position of the sticker, from -60 to 100
        paramKey: top
        in: query
        schema:
          type: number
          minimum: -60
          maximum: 100
        required: true
      - paramName: left
        description: The left position of the sticker, from -60 to 100
        paramKey: left
        in: query
        schema:
          type: number
          minimum: -60
          maximum: 100
        required: true
      - paramName: zIndex
        description: The z-index of the sticker
        paramKey: zIndex
        in: query
        schema:
          type: number
        required: true
      - paramName: rotate
        description: The rotation of the sticker
        paramKey: rotate
        in: query
        schema:
          type: number
          minimum: 0
          maximum: 360
          default: 0
        required: false
  - moduleName: Cards / Actions / Comments / Update By ID
    method: put
    path: /cards/{id}/actions/{idAction}/comments
    description: Update an existing comment
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: put-cards-id-actions-idaction-comments
    params:
      - paramName: id
        description: The ID of the Card
        paramKey: id
        in: path
        schema:
          type: string
        required: true
      - paramName: idAction
        description: The ID of the comment action to update
        paramKey: idAction
        in: path
        schema:
          type: string
        required: true
      - paramName: text
        description: The new text for the comment
        paramKey: text
        in: query
        schema:
          type: string
        required: true
  - moduleName: Cards / Actions / Comments / Delete
    method: delete
    path: /cards/{id}/actions/{idAction}/comments
    description: Delete a comment
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: delete-cards-id-actions-id-comments
    params:
      - paramName: id
        description: The ID of the Card
        paramKey: id
        in: path
        schema:
          type: string
        required: true
      - paramName: idAction
        description: The ID of the comment action to update
        paramKey: idAction
        in: path
        schema:
          type: string
        required: true
  - moduleName: Cards / Custom Field / Update By ID
    method: put
    path: /cards/{idCard}/customField/{idCustomField}/item
    description: Setting, updating, and removing the value for a Custom Field on a
      card. For more details on updating custom fields check out the [Getting
      Started With Custom
      Fields](/cloud/trello/guides/rest-api/getting-started-with-custom-fields/)
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: put-cards-idcard-customfield-idcustomfield-item
    params:
      - paramName: idCard
        description: ID of the card that the Custom Field value should be set/updated for
        paramKey: idCard
        in: path
        schema:
          type: string
        required: true
      - paramName: idCustomField
        description: ID of the Custom Field on the card.
        paramKey: idCustomField
        in: path
        schema:
          type: string
        required: true
      - paramName: idValue
        description: ID of the Custom Field value on the card.
        paramKey: idValue
        in: query
        schema:
          type: string
        required: true
      - paramName: value
        paramKey: value
        description: "Object containing option values e.g { text: 'option1' }"
        in: body
        schema:
          type: any
        required: true
    requestBodyType: json
  - moduleName: Cards / Custom Fields / Update
    method: put
    path: /cards/{idCard}/customFields
    description: Setting, updating, and removing the values for multiple Custom
      Fields on a card. For more details on updating custom fields check out the
      [Getting Started With Custom
      Fields](/cloud/trello/guides/rest-api/getting-started-with-custom-fields/)
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: put-cards-idcard-customfields
    params:
      - paramName: customFieldItems
        description: An array of objects containing the custom field ID, key and value,
          and ID of list type option.
        paramKey: customFieldItems
        in: body
        schema:
          type: array
          items:
            type: any
        required: false
    requestBodyType: json
  - moduleName: Cards / Custom Field Items / List
    method: get
    path: /cards/{id}/customFieldItems
    description: Get the custom field items for a card.
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: get-cards-id-customfielditems
    params:
      - paramName: id
        description: The ID of the Card
        paramKey: id
        in: path
        schema:
          type: string
        required: true
  - moduleName: Cards / Actions / Create Comment
    method: post
    path: /cards/{id}/actions/comments
    description: Add a new comment to a card
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: post-cards-id-actions-comments
    params:
      - paramName: id
        description: The ID of the Card
        paramKey: id
        in: path
        schema:
          type: string
        required: true
      - paramName: text
        description: The comment
        paramKey: text
        in: query
        schema:
          type: string
        required: true
  - moduleName: Cards / ID Labels / Add
    method: post
    path: /cards/{id}/idLabels
    description: Add a label to a card
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: post-cards-id-idlabels
    params:
      - paramName: id
        description: The ID of the Card
        paramKey: id
        in: path
        schema:
          type: string
        required: true
      - paramName: value
        description: The ID of the label to add
        paramKey: value
        in: query
        schema:
          type: string
        required: false
  - moduleName: Cards / ID Members / Add
    method: post
    path: /cards/{id}/idMembers
    description: Add a member to a card
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: post-cards-id-idmembers
    params:
      - paramName: id
        description: The ID of the Card
        paramKey: id
        in: path
        schema:
          type: string
        required: true
      - paramName: value
        description: The ID of the Member to add to the card
        paramKey: value
        in: query
        schema:
          type: string
        required: false
  - moduleName: Cards / Labels / Add
    method: post
    path: /cards/{id}/labels
    description: Create a new label for the board and add it to the given card.
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: post-cards-id-labels
    params:
      - paramName: id
        description: The ID of the Card
        paramKey: id
        in: path
        schema:
          type: string
        required: true
      - paramName: color
        description: A valid label color or `null`. See
          [labels](/cloud/trello/guides/rest-api/object-definitions/)
        paramKey: color
        in: query
        schema:
          type: string
        required: true
      - paramName: name
        description: A name for the label
        paramKey: name
        in: query
        schema:
          type: string
        required: false
  - moduleName: Cards / Mark Associated Notifications Read
    method: post
    path: /cards/{id}/markAssociatedNotificationsRead
    description: Mark notifications about this card as read
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: post-cards-id-markassociatednotificationsread
    params:
      - paramName: id
        description: The ID of the Card
        paramKey: id
        in: path
        schema:
          type: string
        required: true
  - moduleName: Cards / ID Labels / Delete By ID
    method: delete
    path: /cards/{id}/idLabels/{idLabel}
    description: Remove a label from a card
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: delete-cards-id-idlabels-idlabel
    params:
      - paramName: id
        description: The ID of the Card
        paramKey: id
        in: path
        schema:
          type: string
        required: true
      - paramName: idLabel
        description: The ID of the label to remove
        paramKey: idLabel
        in: path
        schema:
          type: string
        required: true
  - moduleName: Cards / ID Members / Delete By ID
    method: delete
    path: /cards/{id}/idMembers/{idMember}
    description: Remove a member from a card
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: delete-id-idmembers-idmember
    params:
      - paramName: id
        description: The ID of the Card
        paramKey: id
        in: path
        schema:
          type: string
        required: true
      - paramName: idMember
        description: The ID of the member to remove from the card
        paramKey: idMember
        in: path
        schema:
          type: string
        required: true
  - moduleName: Cards / Members Voted / Delete By ID
    method: delete
    path: /cards/{id}/membersVoted/{idMember}
    description: Remove a member's vote from a card
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: delete-cards-id-membersvoted-idmember
    params:
      - paramName: id
        description: The ID of the Card
        paramKey: id
        in: path
        schema:
          type: string
        required: true
      - paramName: idMember
        description: The ID of the member whose vote to remove
        paramKey: idMember
        in: path
        schema:
          type: string
        required: true
  - moduleName: Cards / Checklist / Check Item / Update
    method: put
    path: /cards/{idCard}/checklist/{idChecklist}/checkItem/{idCheckItem}
    description: Update an item in a checklist on a card.
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: put-cards-idcard-checklist-idchecklist-checkitem-idcheckitem
    params:
      - paramName: idCard
        description: The ID of the Card
        paramKey: idCard
        in: path
        schema:
          type: string
        required: true
      - paramName: idCheckItem
        description: The ID of the checklist item to update
        paramKey: idCheckItem
        in: path
        schema:
          type: string
        required: true
      - paramName: pos
        description: "`top`, `bottom`, or a positive float"
        paramKey: pos
        in: query
        schema:
          type: any
        required: false
      - paramName: idChecklist
        description: The ID of the item to update.
        paramKey: idChecklist
        in: path
        schema:
          type: string
        required: true
  - moduleName: Cards / Checklists / Delete By ID
    method: delete
    path: /cards/{id}/checklists/{idChecklist}
    description: Delete a checklist from a card
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: delete-cards-id-checklists-idchecklist
    params:
      - paramName: id
        description: The ID of the Card
        paramKey: id
        in: path
        schema:
          type: string
        required: true
      - paramName: idChecklist
        description: The ID of the checklist to delete
        paramKey: idChecklist
        in: path
        schema:
          type: string
        required: true
  - moduleName: Checklists / Create
    method: post
    path: /checklists
    description: ""
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: post-checklists
    params:
      - paramName: idCard
        description: The ID of the Card that the checklist should be added to.
        paramKey: idCard
        in: query
        schema:
          type: string
        required: true
      - paramName: name
        description: The name of the checklist. Should be a string of length 1 to 16384.
        paramKey: name
        in: query
        schema:
          type: string
        required: false
      - paramName: pos
        description: "The position of the checklist on the card. One of: `top`,
          `bottom`, or a positive number."
        paramKey: pos
        in: query
        schema:
          type: any
        required: false
      - paramName: idChecklistSource
        description: The ID of a checklist to copy into the new checklist.
        paramKey: idChecklistSource
        in: query
        schema:
          type: string
        required: false
  - moduleName: Checklists / Get By ID
    method: get
    path: /checklists/{id}
    description: ""
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: get-checklists-id
    params:
      - paramName: id
        description: ID of a checklist.
        paramKey: id
        in: path
        schema:
          type: string
        required: true
      - paramName: cards
        description: "Valid values: `all`, `closed`, `none`, `open`, `visible`. Cards is
          a nested resource. The additional query params available are
          documented at [Cards Nested
          Resource](/cloud/trello/guides/rest-api/nested-resources/#cards-neste\
          d-resource)."
        paramKey: cards
        in: query
        schema:
          type: string
          default: none
          enum:
            - all
            - closed
            - none
            - open
            - visible
        required: false
      - paramName: checkItems
        description: "The check items on the list to return. One of: `all`, `none`."
        paramKey: checkItems
        in: query
        schema:
          type: string
          default: all
          enum:
            - all
            - none
        required: false
      - paramName: checkItemFields
        description: "The fields on the checkItem to return if checkItems are being
          returned. `all` or a comma-separated list of: `name`, `nameData`,
          `pos`, `state`, `type`, `due`, `dueReminder`, `idMember`"
        paramKey: checkItem_fields
        in: query
        schema:
          type: string
          default: name, nameData, pos, state, due, dueReminder, idMember
          enum:
            - all
            - name
            - nameData
            - pos
            - state
            - type
            - due
            - dueReminder
            - idMember
        required: false
      - paramName: fields
        description: "`all` or a comma-separated list of checklist
          [fields](/cloud/trello/guides/rest-api/object-definitions/)"
        paramKey: fields
        in: query
        schema:
          type: string
          default: all
        required: false
  - moduleName: Checklists / Update By ID
    method: put
    path: /checklists/{id}
    description: Update an existing checklist.
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: put-checlists-id
    params:
      - paramName: id
        description: ID of a checklist.
        paramKey: id
        in: path
        schema:
          type: string
        required: true
      - paramName: name
        description: Name of the new checklist being created. Should be length of 1 to
          16384.
        paramKey: name
        in: query
        schema:
          type: string
        required: false
      - paramName: pos
        description: "Determines the position of the checklist on the card. One of:
          `top`, `bottom`, or a positive number."
        paramKey: pos
        in: query
        schema:
          type: any
        required: false
  - moduleName: Checklists / Delete By ID
    method: delete
    path: /checklists/{id}
    description: Delete a checklist
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: delete-checklists-id
    params:
      - paramName: id
        description: ID of a checklist.
        paramKey: id
        in: path
        schema:
          type: string
        required: true
  - moduleName: Checklists / Get Field By ID
    method: get
    path: /checklists/{id}/{field}
    description: ""
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: get-checklists-id-field
    params:
      - paramName: id
        description: ID of a checklist.
        paramKey: id
        in: path
        schema:
          type: string
        required: true
      - paramName: field
        description: Field to update.
        paramKey: field
        in: path
        schema:
          type: string
          enum:
            - name
            - pos
        required: true
  - moduleName: Checklists / Update Field By ID
    method: put
    path: /checklists/{id}/{field}
    description: ""
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: put-checklists-id-field
    params:
      - paramName: id
        description: ID of a checklist.
        paramKey: id
        in: path
        schema:
          type: string
        required: true
      - paramName: field
        description: Field to update.
        paramKey: field
        in: path
        schema:
          type: string
          enum:
            - name
            - pos
        required: true
      - paramName: value
        description: The value to change the checklist name to. Should be a string of
          length 1 to 16384.
        paramKey: value
        in: query
        schema:
          type: string
        required: true
  - moduleName: Checklists / Board / Get By ID
    method: get
    path: /checklists/{id}/board
    description: ""
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: get-checklists-id-board
    params:
      - paramName: id
        description: ID of a checklist.
        paramKey: id
        in: path
        schema:
          type: string
        required: true
      - paramName: fields
        description: "`all` or a comma-separated list of board
          [fields](/cloud/trello/guides/rest-api/object-definitions/)"
        paramKey: fields
        in: query
        schema:
          type: string
          default: all
          enum:
            - all
            - name
        required: false
  - moduleName: Checklists / Cards / List By ID
    method: get
    path: /checklists/{id}/cards
    description: ""
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: get-checklists-id-cards
    params:
      - paramName: id
        description: ID of a checklist.
        paramKey: id
        in: path
        schema:
          type: string
        required: true
  - moduleName: Checklists / Check Items / List By ID
    method: get
    path: /checklists/{id}/checkItems
    description: ""
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: get-checklists-id-checkitems
    params:
      - paramName: id
        description: ID of a checklist.
        paramKey: id
        in: path
        schema:
          type: string
        required: true
      - paramName: filter
        description: "One of: `all`, `none`."
        paramKey: filter
        in: query
        schema:
          type: string
          default: all
          enum:
            - all
            - none
        required: false
      - paramName: fields
        description: "One of: `all`, `name`, `nameData`, `pos`, `state`,`type`, `due`,
          `dueReminder`, `idMember`."
        paramKey: fields
        in: query
        schema:
          type: string
          default: name, nameData, pos, state, due, dueReminder, idMember
          enum:
            - all
            - name
            - nameData
            - pos
            - state
            - type
            - due
            - dueReminder
            - idMember
        required: false
        style: form
        explode: false
  - moduleName: Checklists / Check Items / Create
    method: post
    path: /checklists/{id}/checkItems
    description: ""
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: post-checklists-id-checkitems
    params:
      - paramName: id
        description: ID of a checklist.
        paramKey: id
        in: path
        schema:
          type: string
        required: true
      - paramName: name
        description: The name of the new check item on the checklist. Should be a string
          of length 1 to 16384.
        paramKey: name
        in: query
        schema:
          type: string
        required: true
      - paramName: pos
        description: "The position of the check item in the checklist. One of: `top`,
          `bottom`, or a positive number."
        paramKey: pos
        in: query
        schema:
          type: any
        required: false
      - paramName: checked
        description: Determines whether the check item is already checked when created.
        paramKey: checked
        in: query
        schema:
          type: boolean
          default: false
        required: false
      - paramName: due
        description: A due date for the checkitem
        paramKey: due
        in: query
        schema:
          type: string
        required: false
      - paramName: dueReminder
        description: A dueReminder for the due date on the checkitem
        paramKey: dueReminder
        in: query
        schema:
          type: number
        required: false
      - paramName: idMember
        description: An ID of a member resource.
        paramKey: idMember
        in: query
        schema:
          type: string
        required: false
  - moduleName: Checklists / Check Item / Get By ID
    method: get
    path: /checklists/{id}/checkItems/{idCheckItem}
    description: ""
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: get-checklists-id-checkitems-idcheckitem
    params:
      - paramName: id
        description: ID of a checklist.
        paramKey: id
        in: path
        schema:
          type: string
        required: true
      - paramName: idCheckItem
        description: ID of the check item to retrieve.
        paramKey: idCheckItem
        in: path
        schema:
          type: string
        required: true
      - paramName: fields
        description: "One of: `all`, `name`, `nameData`, `pos`, `state`, `type`, `due`,
          `dueReminder`, `idMember`,."
        paramKey: fields
        in: query
        schema:
          type: string
          default: name, nameData, pos, state, due, dueReminder, idMember
          enum:
            - all
            - name
            - nameData
            - pos
            - state
            - type
            - due
            - dueReminder
            - idMember
        required: false
        style: form
        explode: false
  - moduleName: Checklists / Check Item / Delete By ID
    method: delete
    path: /checklists/{id}/checkItems/{idCheckItem}
    description: Remove an item from a checklist
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: delete-checklists-id-checkitems-idcheckitem
    params:
      - paramName: id
        description: ID of a checklist.
        paramKey: id
        in: path
        schema:
          type: string
        required: true
      - paramName: idCheckItem
        description: ID of the check item to retrieve.
        paramKey: idCheckItem
        in: path
        schema:
          type: string
        required: true
  - moduleName: Custom Fields / Create
    method: post
    path: /customFields
    description: Create a new Custom Field on a board.
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: post-customfields
    params:
      - paramName: idModel
        description: ""
        paramKey: idModel
        in: body
        schema:
          type: string
        required: true
      - paramName: modelType
        description: The type of model that the Custom Field is being defined on. This
          should always be `board`.
        paramKey: modelType
        in: body
        schema:
          type: string
          enum:
            - board
        required: true
      - paramName: name
        description: The name of the Custom Field
        paramKey: name
        in: body
        schema:
          type: string
        required: true
      - paramName: type
        description: The type of Custom Field to create.
        paramKey: type
        in: body
        schema:
          type: string
          enum:
            - checkbox
            - list
            - number
            - text
            - date
        required: true
      - paramName: options
        description: "If the type is `checkbox` "
        paramKey: options
        in: body
        schema:
          type: string
        required: false
      - paramName: pos
        description: ""
        paramKey: pos
        in: body
        schema:
          type: any
        required: true
      - paramName: displayCardFront
        description: Whether this Custom Field should be shown on the front of Cards
        paramKey: display_cardFront
        in: body
        schema:
          type: boolean
          default: true
        required: false
    requestBodyType: json
  - moduleName: Custom Fields / Get By ID
    method: get
    path: /customFields/{id}
    description: ""
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: get-customfields-id
    params:
      - paramName: id
        description: ID of the Custom Field.
        paramKey: id
        in: path
        schema:
          type: string
        required: true
  - moduleName: Custom Fields / Update By ID
    method: put
    path: /customFields/{id}
    description: Update a Custom Field definition.
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: put-customfields-id
    params:
      - paramName: id
        description: ID of the Custom Field.
        paramKey: id
        in: path
        schema:
          type: string
        required: true
      - paramName: name
        description: The name of the Custom Field
        paramKey: name
        in: body
        schema:
          type: string
        required: false
      - paramName: pos
        description: ""
        paramKey: pos
        in: body
        schema:
          type: any
        required: false
      - paramName: display/cardFront
        description: Whether to display this custom field on the front of cards
        paramKey: display/cardFront
        in: body
        schema:
          type: boolean
        required: false
    requestBodyType: json
  - moduleName: Custom Fields / Delete By ID
    method: delete
    path: /customFields/{id}
    description: Delete a Custom Field from a board.
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: delete-customfields-id
    params:
      - paramName: id
        description: ID of the Custom Field.
        paramKey: id
        in: path
        schema:
          type: string
        required: true
  - moduleName: Custom Fields / Options / Create
    method: post
    path: /customFields/{id}/options
    description: Add an option to a dropdown Custom Field
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: get-customfields-id-options
    params:
      - paramName: id
        description: ID of the customfield.
        paramKey: id
        in: path
        schema:
          type: string
        required: true
      - paramName: value
        description: "Object containing option values e.g { text: 'option1' }"
        paramKey: "value"
        in: body
        schema:
          type: any
        required: true
    requestBodyType: json
  - moduleName: Custom Fields / Options / List
    method: get
    path: /customFields/{id}/options
    description: Get the options of a drop down Custom Field
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: post-customfields-id-options
    params:
      - paramName: id
        description: ID of the customfield.
        paramKey: id
        in: path
        schema:
          type: string
        required: true
  - moduleName: Custom Fields / Options / Get By ID
    method: get
    path: /customFields/{id}/options/{idCustomFieldOption}
    description: Retrieve a specific, existing Option on a given dropdown-type Custom Field
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: get-customfields-options-idcustomfieldoption
    params:
      - paramName: id
        description: ID of the customfielditem.
        paramKey: id
        in: path
        schema:
          type: string
        required: true
      - paramName: idCustomFieldOption
        description: ID of the customfieldoption to retrieve.
        paramKey: idCustomFieldOption
        in: path
        schema:
          type: string
        required: true
  - moduleName: Custom Fields / Options / Delete By ID
    method: delete
    path: /customFields/{id}/options/{idCustomFieldOption}
    description: Delete an option from a Custom Field dropdown.
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: delete-customfields-options-idcustomfieldoption
    params:
      - paramName: id
        description: ID of the customfielditem.
        paramKey: id
        in: path
        schema:
          type: string
        required: true
      - paramName: idCustomFieldOption
        description: ID of the customfieldoption to retrieve.
        paramKey: idCustomFieldOption
        in: path
        schema:
          type: string
        required: true
  - moduleName: Emoji / Get
    method: get
    path: /emoji
    description: List available Emoji
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: emoji
    params:
      - paramName: locale
        description: The locale to return emoji descriptions and names in. Defaults to
          the logged in member's locale.
        paramKey: locale
        in: query
        schema:
          type: string
        required: false
      - paramName: spritesheets
        description: "`true` to return spritesheet URLs in the response"
        paramKey: spritesheets
        in: query
        schema:
          type: boolean
          default: false
        required: false
  - moduleName: Enterprises / Get By ID
    method: get
    path: /enterprises/{id}
    description: Get an enterprise by its ID.
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: get-enterprises-id
    params:
      - paramName: id
        description: ID of the enterprise to retrieve.
        paramKey: id
        in: path
        schema:
          type: string
        required: true
      - paramName: fields
        description: "Comma-separated list of: `id`, `name`, `displayName`, `prefs`,
          `ssoActivationFailed`, `idAdmins`, `idMembers` (Note that the members
          array returned will be paginated if `members` is 'normal' or 'admins'.
          Pagination can be controlled with member_startIndex, etc, but the API
          response will not contain the total available result count or
          pagination status data. Read the SCIM documentation [here]() for more
          information on filtering), `idOrganizations`, `products`, `userTypes`,
          `idMembers`, `idOrganizations`"
        paramKey: fields
        in: query
        schema:
          type: string
          default: all
        required: false
      - paramName: members
        description: "One of: `none`, `normal`, `admins`, `owners`, `all`"
        paramKey: members
        in: query
        schema:
          type: string
          default: none
        required: false
      - paramName: memberFields
        description: "One of: `avatarHash`, `fullName`, `initials`, `username`"
        paramKey: member_fields
        in: query
        schema:
          type: string
          default: avatarHash, fullName, initials, username
        required: false
      - paramName: memberFilter
        description: Pass a [SCIM-style query](/cloud/trello/scim/) to filter members.
          This takes precedence over the all/normal/admins value of members. If
          any of the member_* args are set, the member array will be paginated.
        paramKey: member_filter
        in: query
        schema:
          type: string
          default: none
        required: false
      - paramName: memberSort
        description: This parameter expects a [SCIM-style](/cloud/trello/scim/) sorting
          value prefixed by a `-` to sort descending. If no `-` is prefixed, it
          will be sorted ascending. Note that the members array returned will be
          paginated if `members` is 'normal' or 'admins'. Pagination can be
          controlled with member_startIndex, etc, but the API response will not
          contain the total available result count or pagination status data.
        paramKey: member_sort
        in: query
        schema:
          type: string
        required: false
      - paramName: memberSortBy
        description: "Deprecated: Please use member_sort. This parameter expects a
          [SCIM-style sorting value](/cloud/trello/scim/). Note that the members
          array returned will be paginated if `members` is `normal` or `admins`.
          Pagination can be controlled with `member_startIndex`, etc, and the
          API response's header will contain the total count and pagination
          state."
        paramKey: member_sortBy
        in: query
        schema:
          type: string
          default: none
        required: false
      - paramName: memberSortOrder
        description: "Deprecated: Please use member_sort. One of: `ascending`,
          `descending`, `asc`, `desc`"
        paramKey: member_sortOrder
        in: query
        schema:
          type: string
          default: id
        required: false
      - paramName: memberStartIndex
        description: Any integer between 0 and 100.
        paramKey: member_startIndex
        in: query
        schema:
          type: number
          default: "1"
        required: false
      - paramName: memberCount
        description: 0 to 100
        paramKey: member_count
        in: query
        schema:
          type: number
          default: "10"
        required: false
      - paramName: organizations
        description: "One of: `none`, `members`, `public`, `all`"
        paramKey: organizations
        in: query
        schema:
          type: string
          default: none
        required: false
      - paramName: organizationFields
        description: Any valid value that the [nested organization field resource]()
          accepts.
        paramKey: organization_fields
        in: query
        schema:
          type: string
          default: none
        required: false
      - paramName: organizationPaidAccounts
        description: Whether or not to include paid account information in the returned
          workspace objects
        paramKey: organization_paid_accounts
        in: query
        schema:
          type: boolean
          default: false
        required: false
      - paramName: organizationMemberships
        description: "Comma-seperated list of: `me`, `normal`, `admin`, `active`,
          `deactivated`"
        paramKey: organization_memberships
        in: query
        schema:
          type: string
          default: none
        required: false
  - moduleName: Enterprises / Audit Log / Get
    method: get
    path: /enterprises/{id}/auditlog
    description: >-
      Returns an array of Actions related to the Enterprise object. Used for
      populating data sent to Google Sheets from an Enterprise's audit log page:
      https://trello.com/e/{enterprise_name}/admin/auditlog. An Enterprise admin
      token is required for this route. 

       NOTE: For enterprises that have opted in to user management via AdminHub, the auditlog will will contain actions taken in AdminHub, but may not contain the source for those actions.
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: get-enterprises-id-auditlog
    params:
      - paramName: id
        description: ID of the enterprise to retrieve.
        paramKey: id
        in: path
        schema:
          type: string
        required: true
  - moduleName: Enterprises / Admins / List
    method: get
    path: /enterprises/{id}/admins
    description: Get an enterprise's admin members.
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: get-enterprises-id-admins
    params:
      - paramName: id
        description: ID of the enterprise to retrieve.
        paramKey: id
        in: path
        schema:
          type: string
        required: true
      - paramName: fields
        description: Any valid value that the [nested member field resource]() accepts.
        paramKey: fields
        in: query
        schema:
          type: string
          default: fullName, userName
        required: false
  - moduleName: Enterprises / Signup URL / Get
    method: get
    path: /enterprises/{id}/signupUrl
    description: Get the signup URL for an enterprise.
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: get-enterprises-id-signupurl
    params:
      - paramName: id
        description: ID of the enterprise to retrieve.
        paramKey: id
        in: path
        schema:
          type: string
        required: true
      - paramName: authenticate
        description: ""
        paramKey: authenticate
        in: query
        schema:
          type: boolean
          default: false
        required: false
      - paramName: confirmationAccepted
        description: ""
        paramKey: confirmationAccepted
        in: query
        schema:
          type: boolean
          default: false
        required: false
      - paramName: returnUrl
        description: Any valid URL.
        paramKey: returnUrl
        in: query
        schema:
          type: string
          default: null
        required: false
      - paramName: tosAccepted
        description: Designates whether the user has seen/consented to the Trello ToS
          prior to being redirected to the enterprise signup page/their IdP.
        paramKey: tosAccepted
        in: query
        schema:
          type: boolean
          default: false
        required: false
  - moduleName: Enterprises / Members / Query
    method: get
    path: /enterprises/{id}/members/query
    description: Get an enterprise's users. You can choose to retrieve licensed
      members, board guests, etc.
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: get-users-id
    params:
      - paramName: id
        description: ID of the enterprise to retrieve.
        paramKey: id
        in: path
        schema:
          type: string
        required: true
      - paramName: licensed
        description: When true, returns members who possess a license for the
          corresponding Trello Enterprise; when false, returns members who do
          not. If unspecified, both licensed and unlicensed members will be
          returned.
        paramKey: licensed
        in: query
        schema:
          type: boolean
          default: false
        required: false
      - paramName: deactivated
        description: When true, returns members who have been deactivated for the
          corresponding Trello Enterprise; when false, returns members who have
          not. If unspecified, both active and deactivated members will be
          returned.
        paramKey: deactivated
        in: query
        schema:
          type: boolean
          default: false
        required: false
      - paramName: collaborator
        description: When true, returns members who are guests on one or more boards in
          the corresponding Trello Enterprise (but do not possess a license);
          when false, returns members who are not. If unspecified, both guests
          and non-guests will be returned.
        paramKey: collaborator
        in: query
        schema:
          type: boolean
          default: false
        required: false
      - paramName: managed
        description: When true, returns members who are managed by the corresponding
          Trello Enterprise; when false, returns members who are not. If
          unspecified, both managed and unmanaged members will be returned.
        paramKey: managed
        in: query
        schema:
          type: boolean
          default: none
        required: false
      - paramName: admin
        description: When true, returns members who are administrators of the
          corresponding Trello Enterprise; when false, returns members who are
          not. If unspecified, both admin and non-admin members will be
          returned.
        paramKey: admin
        in: query
        schema:
          type: boolean
          default: false
        required: false
      - paramName: activeSince
        description: Returns only Trello users active since this date (inclusive).
        paramKey: activeSince
        in: query
        schema:
          type: string
          default: none
        required: false
      - paramName: inactiveSince
        description: Returns only Trello users active since this date (inclusive).
        paramKey: inactiveSince
        in: query
        schema:
          type: string
          default: none
        required: false
      - paramName: search
        description: Returns members with email address or full name that start with the
          search value.
        paramKey: search
        in: query
        schema:
          type: string
          default: none
        required: false
      - paramName: startIndex
        description: Cursor to return next set of results
        paramKey: startIndex
        in: query
        schema:
          type: string
          default: none
        required: false
  - moduleName: Enterprises / Members / List
    method: get
    path: /enterprises/{id}/members
    description: Get the members of an enterprise.
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: get-enterprises-id-members
    params:
      - paramName: id
        description: ID of the Enterprise to retrieve.
        paramKey: id
        in: path
        schema:
          type: string
        required: true
      - paramName: fields
        description: A comma-seperated list of valid [member
          fields](/cloud/trello/guides/rest-api/object-definitions/#member-object).
        paramKey: fields
        in: query
        schema:
          type: string
          default: avatarHash, fullName, initials, username
        required: false
      - paramName: filter
        description: Pass a [SCIM-style query](/cloud/trello/scim/) to filter members.
          This takes precedence over the all/normal/admins value of members. If
          any of the below member_* args are set, the member array will be
          paginated.
        paramKey: filter
        in: query
        schema:
          type: string
        required: false
      - paramName: sort
        description: This parameter expects a [SCIM-style](/cloud/trello/scim/) sorting
          value prefixed by a `-` to sort descending. If no `-` is prefixed, it
          will be sorted ascending. Note that the members array returned will be
          paginated if `members` is 'normal' or 'admins'. Pagination can be
          controlled with member_startIndex, etc, but the API response will not
          contain the total available result count or pagination status data.
        paramKey: sort
        in: query
        schema:
          type: string
        required: false
      - paramName: sortBy
        description: "Deprecated: Please use `sort` instead. This parameter expects a
          [SCIM-style](/cloud/trello/scim/) sorting value. Note that the members
          array returned will be paginated if `members` is 'normal' or 'admins'.
          Pagination can be controlled with member_startIndex, etc, but the API
          response will not contain the total available result count or
          pagination status data."
        paramKey: sortBy
        in: query
        schema:
          type: string
        required: false
      - paramName: sortOrder
        description: "Deprecated: Please use `sort` instead. One of: `ascending`,
          `descending`, `asc`, `desc`."
        paramKey: sortOrder
        in: query
        schema:
          type: string
          default: null
          enum:
            - ascending
            - descending
            - asc
            - desc
            - null
        required: false
      - paramName: startIndex
        description: Any integer between 0 and 9999.
        paramKey: startIndex
        in: query
        schema:
          type: number
          minimum: 0
          maximum: 9999
        required: false
      - paramName: count
        description: "[SCIM-style filter](/cloud/trello/scim/)."
        paramKey: count
        in: query
        schema:
          type: string
          default: none
        required: false
      - paramName: organizationFields
        description: Any valid value that the [nested organization field
          resource](/cloud/trello/guides/rest-api/nested-resources/) accepts.
        paramKey: organization_fields
        in: query
        schema:
          type: string
          default: displayName
        required: false
      - paramName: boardFields
        description: Any valid value that the [nested board
          resource](/cloud/trello/guides/rest-api/nested-resources/) accepts.
        paramKey: board_fields
        in: query
        schema:
          type: string
          default: name
        required: false
  - moduleName: Enterprises / Members / Get By ID
    method: get
    path: /enterprises/{id}/members/{idMember}
    description: Get a specific member of an enterprise by ID.
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: get-enterprises-id-members-idmember
    params:
      - paramName: id
        description: ID of the enterprise to retrieve.
        paramKey: id
        in: path
        schema:
          type: string
        required: true
      - paramName: idMember
        description: An ID of a member resource.
        paramKey: idMember
        in: path
        schema:
          type: string
        required: true
      - paramName: fields
        description: A comma separated list of any valid values that the [nested member
          field resource]() accepts.
        paramKey: fields
        in: query
        schema:
          type: string
          default: avatarHash, fullName, initials, username
        required: false
      - paramName: organizationFields
        description: Any valid value that the [nested organization field
          resource](/cloud/trello/guides/rest-api/nested-resources/) accepts.
        paramKey: organization_fields
        in: query
        schema:
          type: string
          default: displayName
        required: false
      - paramName: boardFields
        description: Any valid value that the [nested board
          resource](/cloud/trello/guides/rest-api/nested-resources/) accepts.
        paramKey: board_fields
        in: query
        schema:
          type: string
          default: name
        required: false
  - moduleName: Enterprises / Transferrable / Organization
    method: get
    path: /enterprises/{id}/transferrable/organization/{idOrganization}
    description: Get whether an organization can be transferred to an enterprise.
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: get-enterprises-id-transferrable-organization-idOrganization
    params:
      - paramName: id
        description: ID of the Enterprise to retrieve.
        paramKey: id
        in: path
        schema:
          type: string
        required: true
      - paramName: idOrganization
        description: An ID of an Organization resource.
        paramKey: idOrganization
        in: path
        schema:
          type: string
        required: true
  - moduleName: Enterprises / Transferrable / Bulk
    method: get
    path: /enterprises/{id}/transferrable/bulk/{idOrganizations}
    description: Get a list of organizations that can be transferred to an
      enterprise when given a bulk list of organizations.
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: get-enterprises-id-transferrable-bulk-idOrganizations
    params:
      - paramName: id
        description: ID of the Enterprise to retrieve.
        paramKey: id
        in: path
        schema:
          type: string
        required: true
      - paramName: idOrganizations
        description: An array of IDs of an Organization resource.
        paramKey: idOrganizations
        in: path
        schema:
          type: array
          items:
            type: any
        required: true
  - moduleName: Enterprises / Enterprise Join Request / Bulk
    method: put
    path: /enterprises/${id}/enterpriseJoinRequest/bulk
    description: Decline enterpriseJoinRequests from one organization or bulk amount
      of organizations
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: put-enterprises-id-enterpriseJoinRequest-bulk
    params:
      - paramName: id
        description: ID of the Enterprise to retrieve.
        paramKey: id
        in: path
        schema:
          type: string
        required: true
      - paramName: idOrganizations
        description: An array of IDs of an Organization resource.
        paramKey: idOrganizations
        in: query
        schema:
          type: array
          items:
            type: any
        required: true
  - moduleName: Enterprises / Claimable Organizations
    method: get
    path: /enterprises/{id}/claimableOrganizations
    description: Get the Workspaces that are claimable by the enterprise by ID. Can
      optionally query for workspaces based on activeness/ inactiveness.
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: get-enterprises-id-claimableOrganizations
    params:
      - paramName: id
        description: ID of the enterprise to retrieve
        paramKey: id
        in: path
        schema:
          type: string
        required: true
      - paramName: limit
        description: Limits the number of workspaces to be sorted
        paramKey: limit
        in: query
        schema:
          type: number
        required: false
      - paramName: cursor
        description: Specifies the sort order to return matching documents
        paramKey: cursor
        in: query
        schema:
          type: string
        required: false
      - paramName: name
        description: Name of the enterprise to retrieve workspaces for
        paramKey: name
        in: query
        schema:
          type: string
        required: false
      - paramName: activeSince
        description: Date in YYYY-MM-DD format indicating the date to search up to for
          activeness of workspace
        paramKey: activeSince
        in: query
        schema:
          type: string
        required: false
      - paramName: inactiveSince
        description: Date in YYYY-MM-DD format indicating the date to search up to for
          inactiveness of workspace
        paramKey: inactiveSince
        in: query
        schema:
          type: string
        required: false
  - moduleName: Enterprises / Pending Organizations
    method: get
    path: /enterprises/{id}/pendingOrganizations
    description: Get the Workspaces that are pending for the enterprise by ID.
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: get-enterprises-id-pendingOrganizations
    params:
      - paramName: id
        description: ID of the enterprise to retrieve
        paramKey: id
        in: path
        schema:
          type: string
        required: true
      - paramName: activeSince
        description: Date in YYYY-MM-DD format indicating the date to search up to for
          activeness of workspace
        paramKey: activeSince
        in: query
        schema:
          type: string
        required: false
      - paramName: inactiveSince
        description: Date in YYYY-MM-DD format indicating the date to search up to for
          inactiveness of workspace
        paramKey: inactiveSince
        in: query
        schema:
          type: string
        required: false
  - moduleName: Enterprises / Tokens / Create
    method: post
    path: /enterprises/{id}/tokens
    description: Create an auth Token for an Enterprise.
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: post-enterprises-id-tokens
    params:
      - paramName: id
        description: ID of the enterprise to retrieve.
        paramKey: id
        in: path
        schema:
          type: string
        required: true
      - paramName: expiration
        description: "One of: `1hour`, `1day`, `30days`, `never`"
        paramKey: expiration
        in: query
        schema:
          type: string
          default: none
        required: false
  - moduleName: Enterprises / Organizations / Update
    method: put
    path: /enterprises/{id}/organizations
    description: >-
      Transfer an organization to an enterprise.

       NOTE: For enterprises that have opted in to user management via AdminHub, this endpoint will result in the organization being added to the enterprise asynchronously. A 200 response only indicates receipt of the request, it does not indicate successful addition to the enterprise.
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: put-enterprises-id-organizations
    params:
      - paramName: id
        description: ID of the Enterprise to retrieve.
        paramKey: id
        in: path
        schema:
          type: string
        required: true
      - paramName: idOrganization
        description: ID of Organization to be transferred to Enterprise.
        paramKey: idOrganization
        in: query
        schema:
          type: string
        required: true
  - moduleName: Enterprises / Members / Update Licensed
    method: put
    path: /enterprises/{id}/members/{idMember}/licensed
    description: >-
      This endpoint is used to update whether the provided Member should use one
      of the Enterprise's available licenses or not. Revoking a license will
      deactivate a Member of an Enterprise. 

       NOTE: Revoking of licenses is not possible for enterprises that have opted in to user management via AdminHub.
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: put-enterprises-id-members-idmember-licensed
    params:
      - paramName: id
        description: ID of the Enterprise.
        paramKey: id
        in: path
        schema:
          type: string
        required: true
      - paramName: idMember
        description: The ID of the Member
        paramKey: idMember
        in: path
        schema:
          type: string
        required: true
      - paramName: value
        description: Boolean value to determine whether the user should be given an
          Enterprise license (true) or not (false).
        paramKey: value
        in: query
        schema:
          type: boolean
        required: true
  - moduleName: Enterprises / Members / Deactivate
    method: put
    path: /enterprises/{id}/members/{idMember}/deactivated
    description: >-
      Deactivate a Member of an Enterprise.

       NOTE: Deactivation is not possible for enterprises that have opted in to user management via AdminHub.
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: enterprises-id-members-idMember-deactivated
    params:
      - paramName: id
        description: ID of the enterprise to retrieve.
        paramKey: id
        in: path
        schema:
          type: string
        required: true
      - paramName: idMember
        description: ID of the Member to deactive.
        paramKey: idMember
        in: path
        schema:
          type: string
        required: true
      - paramName: value
        description: Determines whether the user is deactivated or not.
        paramKey: value
        in: query
        schema:
          type: boolean
        required: true
      - paramName: fields
        description: A comma separated list of any valid values that the [nested member
          field resource]() accepts.
        paramKey: fields
        in: query
        schema:
          type: string
          enum:
            - id
        required: false
        style: form
        explode: false
      - paramName: organizationFields
        description: Any valid value that the [nested organization
          resource](/cloud/trello/guides/rest-api/nested-resources/) accepts.
        paramKey: organization_fields
        in: query
        schema:
          type: string
          enum:
            - id
            - name
        required: false
        style: form
        explode: false
      - paramName: boardFields
        description: Any valid value that the [nested board
          resource](/cloud/trello/guides/rest-api/nested-resources/) accepts.
        paramKey: board_fields
        in: query
        schema:
          type: string
          enum:
            - id
            - name
            - desc
            - descData
            - closed
            - idMemberCreator
            - idOrganization
            - pinned
            - url
            - shortUrl
            - prefs
            - labelNames
            - starred
            - limits
            - memberships
            - enterpriseOwned
        required: false
  - moduleName: Enterprises / Admins / Update By ID
    method: put
    path: /enterprises/{id}/admins/{idMember}
    description: >-
      Make Member an admin of Enterprise.

       NOTE: This endpoint is not available to enterprises that have opted in to user management via AdminHub.
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: put-enterprises-id-admins-idmember
    params:
      - paramName: id
        description: ID of the enterprise to retrieve.
        paramKey: id
        in: path
        schema:
          type: string
        required: true
      - paramName: idMember
        description: ID of member to be made an admin of enterprise.
        paramKey: idMember
        in: path
        schema:
          type: string
        required: true
  - moduleName: Enterprises / Admins / Delete By ID
    method: delete
    path: /enterprises/{id}/admins/{idMember}
    description: >-
      Remove a member as admin from an enterprise.

       NOTE: This endpoint is not available to enterprises that have opted in to user management via AdminHub.
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: enterprises-id-organizations-idmember
    params:
      - paramName: id
        description: ID of the Enterprise to retrieve.
        paramKey: id
        in: path
        schema:
          type: string
        required: true
      - paramName: idMember
        description: ID of the member to be removed as an admin from enterprise.
        paramKey: idMember
        in: path
        schema:
          type: string
        required: true
  - moduleName: Enterprises / Organizations / Delete By ID
    method: delete
    path: /enterprises/{id}/organizations/{idOrg}
    description: Remove an organization from an enterprise.
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: delete-enterprises-id-organizations-idorg
    params:
      - paramName: id
        description: ID of the enterprise to retrieve.
        paramKey: id
        in: path
        schema:
          type: string
        required: true
      - paramName: idOrg
        description: ID of the organization to be removed from the enterprise.
        paramKey: idOrg
        in: path
        schema:
          type: string
        required: true
  - moduleName: Enterprises / Organizations / Bulk Get
    method: get
    path: /enterprises/{id}/organizations/bulk/{idOrganizations}
    description: >-
      Accept an array of organizations to an enterprise.

       NOTE: For enterprises that have opted in to user management via AdminHub, this endpoint will result in organizations being added to the enterprise asynchronously. A 200 response only indicates receipt of the request, it does not indicate successful addition to the enterprise.
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: get-enterprises-id-organizations-bulk-idOrganizations
    params:
      - paramName: id
        description: ID of the enterprise to retrieve.
        paramKey: id
        in: path
        schema:
          type: string
        required: true
      - paramName: idOrganizations
        description: An array of IDs of the organizations to be removed from the enterprise.
        paramKey: idOrganizations
        in: path
        schema:
          type: array
          items:
            type: any
        required: true
  - moduleName: Labels / Get By ID
    method: get
    path: /labels/{id}
    description: Get information about a single Label.
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: get-labels-id
    params:
      - paramName: id
        description: The ID of the Label
        paramKey: id
        in: path
        schema:
          type: string
        required: true
      - paramName: fields
        description: all or a comma-separated list of
          [fields](/cloud/trello/guides/rest-api/object-definitions/)
        paramKey: fields
        in: query
        schema:
          type: string
          default: all
        required: false
  - moduleName: Labels / Update By ID
    method: put
    path: /labels/{id}
    description: Update a label by ID.
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: put-labels-id
    params:
      - paramName: id
        description: The ID of the Label
        paramKey: id
        in: path
        schema:
          type: string
        required: true
      - paramName: name
        description: The new name for the label
        paramKey: name
        in: query
        schema:
          type: string
        required: false
      - paramName: color
        description: "The new color for the label. See:
          [fields](/cloud/trello/guides/rest-api/object-definitions/) for color
          options"
        paramKey: color
        in: query
        schema:
          type: string
          enum:
            - yellow
            - purple
            - blue
            - red
            - green
            - orange
            - black
            - sky
            - pink
            - lime
        required: false
  - moduleName: Labels / Delete By ID
    method: delete
    path: /labels/{id}
    description: Delete a label by ID.
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: delete-labels-id
    params:
      - paramName: id
        description: The ID of the Label
        paramKey: id
        in: path
        schema:
          type: string
        required: true
  - moduleName: Labels / Update Field By ID
    method: put
    path: /labels/{id}/{field}
    description: Update a field on a label.
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: put-labels-id-field
    params:
      - paramName: id
        description: The id of the label
        paramKey: id
        in: path
        schema:
          type: string
        required: true
      - paramName: field
        description: The field on the Label to update.
        paramKey: field
        in: path
        schema:
          type: string
          enum:
            - color
            - name
        required: true
      - paramName: value
        description: The new value for the field.
        paramKey: value
        in: query
        schema:
          type: string
        required: true
  - moduleName: Labels / Create
    method: post
    path: /labels
    description: Create a new Label on a Board.
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: post-labels
    params:
      - paramName: name
        description: Name for the label
        paramKey: name
        in: query
        schema:
          type: string
        required: true
      - paramName: color
        description: The color for the label.
        paramKey: color
        in: query
        schema:
          type: string
          enum:
            - yellow
            - purple
            - blue
            - red
            - green
            - orange
            - black
            - sky
            - pink
            - lime
        required: true
      - paramName: idBoard
        description: The ID of the Board to create the Label on.
        paramKey: idBoard
        in: query
        schema:
          type: string
        required: true
  - moduleName: Lists / Get By ID
    method: get
    path: /lists/{id}
    description: Get information about a List
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: get-lists-id
    params:
      - paramName: id
        description: The ID of the list
        paramKey: id
        in: path
        schema:
          type: string
        required: true
      - paramName: fields
        description: "`all` or a comma separated list of List field names."
        paramKey: fields
        in: query
        schema:
          type: string
          default: name,closed,idBoard,pos
        required: false
        style: form
        explode: false
  - moduleName: Lists / Update By ID
    method: put
    path: /lists/{id}
    description: Update the properties of a List
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: put-lists-id
    params:
      - paramName: id
        description: The ID of the list
        paramKey: id
        in: path
        schema:
          type: string
        required: true
      - paramName: name
        description: New name for the list
        paramKey: name
        in: query
        schema:
          type: string
        required: false
      - paramName: closed
        description: Whether the list should be closed (archived)
        paramKey: closed
        in: query
        schema:
          type: boolean
        required: false
      - paramName: idBoard
        description: ID of a board the list should be moved to
        paramKey: idBoard
        in: query
        schema:
          type: string
        required: false
        style: form
        explode: false
      - paramName: pos
        description: "New position for the list: `top`, `bottom`, or a positive floating
          point number"
        paramKey: pos
        in: query
        schema:
          type: any
        required: false
      - paramName: subscribed
        description: Whether the active member is subscribed to this list
        paramKey: subscribed
        in: query
        schema:
          type: boolean
        required: false
  - moduleName: Lists / Create
    method: post
    path: /lists
    description: Create a new List on a Board
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: post-lists
    params:
      - paramName: name
        description: Name for the list
        paramKey: name
        in: query
        schema:
          type: string
        required: true
      - paramName: idBoard
        description: The long ID of the board the list should be created on
        paramKey: idBoard
        in: query
        schema:
          type: string
        required: true
      - paramName: idListSource
        description: ID of the List to copy into the new List
        paramKey: idListSource
        in: query
        schema:
          type: string
        required: false
      - paramName: pos
        description: Position of the list. `top`, `bottom`, or a positive floating point
          number
        paramKey: pos
        in: query
        schema:
          type: any
        required: false
  - moduleName: Lists / Archive All Cards
    method: post
    path: /lists/{id}/archiveAllCards
    description: Archive all cards in a list
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: post-lists-id-archiveallcards
    params:
      - paramName: id
        description: The ID of the list
        paramKey: id
        in: path
        schema:
          type: string
        required: true
  - moduleName: Lists / Move All Cards
    method: post
    path: /lists/{id}/moveAllCards
    description: Move all Cards in a List
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: post-lists-id-moveallcards
    params:
      - paramName: id
        description: The ID of the list
        paramKey: id
        in: path
        schema:
          type: string
        required: true
      - paramName: idBoard
        description: The ID of the board the cards should be moved to
        paramKey: idBoard
        in: query
        schema:
          type: string
        required: true
      - paramName: idList
        description: The ID of the list that the cards should be moved to
        paramKey: idList
        in: query
        schema:
          type: string
        required: true
  - moduleName: Lists / Closed / Update
    method: put
    path: /lists/{id}/closed
    description: Archive or unarchive a list
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: put-lists-id-closed
    params:
      - paramName: id
        description: The ID of the list
        paramKey: id
        in: path
        schema:
          type: string
        required: true
      - paramName: value
        description: Set to true to close (archive) the list
        paramKey: value
        in: query
        schema:
          type: string
        required: false
  - moduleName: Lists / ID Board / Update
    method: put
    path: /lists/{id}/idBoard
    description: Move a List to a different Board
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: put-id-idboard
    params:
      - paramName: id
        description: The ID of the list
        paramKey: id
        in: path
        schema:
          type: string
        required: true
      - paramName: value
        description: The ID of the board to move the list to
        paramKey: value
        in: query
        schema:
          type: string
        required: true
  - moduleName: Lists / Update Field
    method: put
    path: /lists/{id}/{field}
    description: Rename a list
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: put-lists-id-field
    params:
      - paramName: id
        description: The ID of the list
        paramKey: id
        in: path
        schema:
          type: string
        required: true
      - paramName: field
        description: The field on the List to be updated
        paramKey: field
        in: path
        schema:
          type: string
          enum:
            - name
            - pos
            - subscribed
        required: true
      - paramName: value
        description: The new value for the field
        paramKey: value
        in: query
        schema:
          type: any
        required: false
  - moduleName: Lists / Actions / List By ID
    method: get
    path: /lists/{id}/actions
    description: Get the Actions on a List
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: get-lists-id-actions
    params:
      - paramName: id
        description: The ID of the list
        paramKey: id
        in: path
        schema:
          type: string
        required: true
      - paramName: filter
        description: A comma-separated list of [action
          types](https://developer.atlassian.com/cloud/trello/guides/rest-api/action-types/).
        paramKey: filter
        in: query
        schema:
          type: string
        required: false
  - moduleName: Lists / Board / Get By ID
    method: get
    path: /lists/{id}/board
    description: Get the board a list is on
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: get-lists-id-board
    params:
      - paramName: id
        description: The ID of the list
        paramKey: id
        in: path
        schema:
          type: string
        required: true
      - paramName: fields
        description: "`all` or a comma-separated list of board
          [fields](/cloud/trello/guides/rest-api/object-definitions/#board-obje\
          ct)"
        paramKey: fields
        in: query
        schema:
          type: string
          default: all
        required: false
  - moduleName: Lists / Cards / List By ID
    method: get
    path: /lists/{id}/cards
    description: List the cards in a list
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: get-lists-id-cards
    params:
      - paramName: id
        description: The ID of the list
        paramKey: id
        in: path
        schema:
          type: string
        required: true
  - moduleName: Members / Get
    method: get
    path: /members/{id}
    description: Get a member
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: get-members=id
    params:
      - paramName: id
        description: The ID or username of the member
        paramKey: id
        in: path
        schema:
          type: any
        required: true
      - paramName: actions
        description: See the [Actions Nested
          Resource](/cloud/trello/guides/rest-api/nested-resources/#actions-nested-resource)
        paramKey: actions
        in: query
        schema:
          type: string
        required: false
      - paramName: boards
        description: See the [Boards Nested
          Resource](/cloud/trello/guides/rest-api/nested-resources/#boards-nested-resource)
        paramKey: boards
        in: query
        schema:
          type: string
        required: false
      - paramName: boardBackgrounds
        description: "One of: `all`, `custom`, `default`, `none`, `premium`"
        paramKey: boardBackgrounds
        in: query
        schema:
          type: string
          default: none
          enum:
            - all
            - custom
            - default
            - none
            - premium
        required: false
      - paramName: boardsInvited
        description: "`all` or a comma-separated list of: closed, members, open,
          organization, pinned, public, starred, unpinned"
        paramKey: boardsInvited
        in: query
        schema:
          type: string
          enum:
            - closed
            - members
            - open
            - organization
            - pinned
            - public
            - starred
            - unpinned
        required: false
      - paramName: boardsInvitedFields
        description: "`all` or a comma-separated list of board
          [fields](/cloud/trello/guides/rest-api/object-definitions/)"
        paramKey: boardsInvited_fields
        in: query
        schema:
          type: string
          enum:
            - id
            - name
            - desc
            - descData
            - closed
            - idMemberCreator
            - idOrganization
            - pinned
            - url
            - shortUrl
            - prefs
            - labelNames
            - starred
            - limits
            - memberships
            - enterpriseOwned
        required: false
        style: form
        explode: false
      - paramName: boardStars
        description: Whether to return the boardStars or not
        paramKey: boardStars
        in: query
        schema:
          type: boolean
          default: false
        required: false
      - paramName: cards
        description: See the [Cards Nested
          Resource](/cloud/trello/guides/rest-api/nested-resources/#cards-nested-resource)
          for additional options
        paramKey: cards
        in: query
        schema:
          type: string
          default: none
        required: false
      - paramName: customBoardBackgrounds
        description: "`all` or `none`"
        paramKey: customBoardBackgrounds
        in: query
        schema:
          type: string
          default: none
          enum:
            - all
            - none
        required: false
      - paramName: customEmoji
        description: "`all` or `none`"
        paramKey: customEmoji
        in: query
        schema:
          type: string
          default: none
          enum:
            - all
            - none
        required: false
      - paramName: customStickers
        description: "`all` or `none`"
        paramKey: customStickers
        in: query
        schema:
          type: string
          default: none
          enum:
            - all
            - none
        required: false
      - paramName: fields
        description: "`all` or a comma-separated list of member
          [fields](/cloud/trello/guides/rest-api/object-definitions/)"
        paramKey: fields
        in: query
        schema:
          type: string
          enum:
            - id
        required: false
      - paramName: notifications
        description: See the [Notifications Nested
          Resource](/cloud/trello/guides/rest-api/nested-resources/#notifications-nested-resource)
        paramKey: notifications
        in: query
        schema:
          type: string
        required: false
      - paramName: organizations
        description: "One of: `all`, `members`, `none`, `public`"
        paramKey: organizations
        in: query
        schema:
          type: string
          default: none
          enum:
            - all
            - members
            - none
            - public
        required: false
      - paramName: organizationFields
        description: "`all` or a comma-separated list of organization
          [fields](/cloud/trello/guides/rest-api/object-definitions/)"
        paramKey: organization_fields
        in: query
        schema:
          type: string
          enum:
            - id
            - name
        required: false
      - paramName: organizationPaidAccount
        description: Whether or not to include paid account information in the returned
          workspace object
        paramKey: organization_paid_account
        in: query
        schema:
          type: boolean
          default: false
        required: false
      - paramName: organizationsInvited
        description: "One of: `all`, `members`, `none`, `public`"
        paramKey: organizationsInvited
        in: query
        schema:
          type: string
          default: none
          enum:
            - all
            - members
            - none
            - public
        required: false
      - paramName: organizationsInvitedFields
        description: "`all` or a comma-separated list of organization
          [fields](/cloud/trello/guides/rest-api/object-definitions/)"
        paramKey: organizationsInvited_fields
        in: query
        schema:
          type: string
          enum:
            - id
            - name
        required: false
      - paramName: paidAccount
        description: Whether or not to include paid account information in the returned
          member object
        paramKey: paid_account
        in: query
        schema:
          type: boolean
          default: false
        required: false
      - paramName: savedSearches
        description: ""
        paramKey: savedSearches
        in: query
        schema:
          type: boolean
          default: false
        required: false
      - paramName: tokens
        description: "`all` or `none`"
        paramKey: tokens
        in: query
        schema:
          type: string
          default: none
          enum:
            - all
            - none
        required: false
  - moduleName: Members / Update
    method: put
    path: /members/{id}
    description: Update a Member
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: put-members-id
    params:
      - paramName: id
        description: The ID or username of the member
        paramKey: id
        in: path
        schema:
          type: string
        required: true
      - paramName: fullName
        description: New name for the member. Cannot begin or end with a space.
        paramKey: fullName
        in: query
        schema:
          type: string
        required: false
      - paramName: initials
        description: New initials for the member. 1-4 characters long.
        paramKey: initials
        in: query
        schema:
          type: string
        required: false
      - paramName: username
        description: New username for the member. At least 3 characters long, only
          lowercase letters, underscores, and numbers. Must be unique.
        paramKey: username
        in: query
        schema:
          type: string
        required: false
      - paramName: bio
        description: ""
        paramKey: bio
        in: query
        schema:
          type: string
        required: false
      - paramName: avatarSource
        description: "One of: `gravatar`, `none`, `upload`"
        paramKey: avatarSource
        in: query
        schema:
          type: string
          enum:
            - gravatar
            - none
            - upload
        required: false
      - paramName: prefs/colorBlind
        description: ""
        paramKey: prefs/colorBlind
        in: query
        schema:
          type: boolean
        required: false
      - paramName: prefs/locale
        description: ""
        paramKey: prefs/locale
        in: query
        schema:
          type: string
        required: false
      - paramName: prefs/minutesBetweenSummaries
        description: "`-1` for disabled, `1`, or `60`"
        paramKey: prefs/minutesBetweenSummaries
        in: query
        schema:
          type: number
        required: false
  - moduleName: Members / Field / Get
    method: get
    path: /members/{id}/{field}
    description: Get a particular property of a member
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: get-members-id-field
    params:
      - paramName: id
        description: The ID or username of the member
        paramKey: id
        in: path
        schema:
          type: string
        required: true
      - paramName: field
        description: One of the member
          [fields](/cloud/trello/guides/rest-api/object-definitions/)
        paramKey: field
        in: path
        schema:
          type: string
          enum:
            - id
        required: true
  - moduleName: Members / Actions / List
    method: get
    path: /members/{id}/actions
    description: List the actions for a member
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: get-members-id-actions
    params:
      - paramName: id
        description: The ID or username of the member
        paramKey: id
        in: path
        schema:
          type: string
        required: true
      - paramName: filter
        description: A comma-separated list of [action
          types](https://developer.atlassian.com/cloud/trello/guides/rest-api/action-types/).
        paramKey: filter
        in: query
        schema:
          type: string
        required: false
  - moduleName: Members / Board Backgrounds / List
    method: get
    path: /members/{id}/boardBackgrounds
    description: Get a member's custom board backgrounds
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: get-members-id-boardbackgrounds
    params:
      - paramName: id
        description: The ID or username of the member
        paramKey: id
        in: path
        schema:
          type: string
        required: true
      - paramName: filter
        description: "One of: `all`, `custom`, `default`, `none`, `premium`"
        paramKey: filter
        in: query
        schema:
          type: string
          default: all
          enum:
            - all
            - custom
            - default
            - none
            - premium
        required: false

  - moduleName: Members / Board Backgrounds / Get Background
    method: get
    path: /members/{id}/boardBackgrounds/{idBackground}
    description: Get a member's board background
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: get-members-id-boardbackgrounds-idbackground
    params:
      - paramName: id
        description: The ID or username of the member
        paramKey: id
        in: path
        schema:
          type: string
        required: true
      - paramName: idBackground
        description: The ID of the board background
        paramKey: idBackground
        in: path
        schema:
          type: string
        required: true
      - paramName: fields
        description: "`all` or a comma-separated list of: `brightness`, `fullSizeUrl`,
          `scaled`, `tile`"
        paramKey: fields
        in: query
        schema:
          type: string
          default: all
          enum:
            - all
            - brightness
            - fullSizeUrl
            - scaled
            - tile
        required: false
  - moduleName: Members / Board Backgrounds / Update Background
    method: put
    path: /members/{id}/boardBackgrounds/{idBackground}
    description: Update a board background
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: put-members-id-boardbackgrounds-idbackground
    params:
      - paramName: id
        description: The ID or username of the member
        paramKey: id
        in: path
        schema:
          type: string
        required: true
      - paramName: idBackground
        description: The ID of the board background
        paramKey: idBackground
        in: path
        schema:
          type: string
        required: true
      - paramName: brightness
        description: "One of: `dark`, `light`, `unknown`"
        paramKey: brightness
        in: query
        schema:
          type: string
          enum:
            - dark
            - light
            - unknown
        required: false
      - paramName: tile
        description: Whether the background should be tiled
        paramKey: tile
        in: query
        schema:
          type: boolean
        required: false
  - moduleName: Members / Board Backgrounds / Delete Background
    method: delete
    path: /members/{id}/boardBackgrounds/{idBackground}
    description: Delete a board background
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: delete-members-id-boardbackgrounds-idbackground
    params:
      - paramName: id
        description: The ID or username of the member
        paramKey: id
        in: path
        schema:
          type: string
        required: true
      - paramName: idBackground
        description: The ID of the board background
        paramKey: idBackground
        in: path
        schema:
          type: string
        required: true
  - moduleName: Members / Board Stars / List
    method: get
    path: /members/{id}/boardStars
    description: List a member's board stars
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: get-members-id-boardstars
    params:
      - paramName: id
        description: The ID or username of the member
        paramKey: id
        in: path
        schema:
          type: string
        required: true
  - moduleName: Members / Board Stars / Create
    method: post
    path: /members/{id}/boardStars
    description: Star a new board on behalf of a Member
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: post-members-id-boardstars
    params:
      - paramName: id
        description: The ID or username of the member
        paramKey: id
        in: path
        schema:
          type: any
        required: true
      - paramName: idBoard
        description: The ID of the board to star
        paramKey: idBoard
        in: query
        schema:
          type: string
        required: true
      - paramName: pos
        description: The position of the newly starred board. `top`, `bottom`, or a
          positive float.
        paramKey: pos
        in: query
        schema:
          type: any
        required: true
  - moduleName: Members / Board Stars / Get Star
    method: get
    path: /members/{id}/boardStars/{idStar}
    description: Get a specific boardStar
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: get-members-id-boardstars-idstar
    params:
      - paramName: id
        description: The ID or username of the member
        paramKey: id
        in: path
        schema:
          type: string
        required: true
      - paramName: idStar
        description: The ID of the board star
        paramKey: idStar
        in: path
        schema:
          type: string
        required: true
  - moduleName: Members / Board Stars / Update Star
    method: put
    path: /members/{id}/boardStars/{idStar}
    description: Update the position of a starred board
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: put-members-id-boardstars-idstar
    params:
      - paramName: id
        description: The ID or username of the member
        paramKey: id
        in: path
        schema:
          type: string
        required: true
      - paramName: idStar
        description: The ID of the board star
        paramKey: idStar
        in: path
        schema:
          type: string
        required: true
      - paramName: pos
        description: New position for the starred board. `top`, `bottom`, or a positive
          float.
        paramKey: pos
        in: query
        schema:
          type: any
        required: false
  - moduleName: Members / Board Stars / Delete Star
    method: delete
    path: /members/{id}/boardStars/{idStar}
    description: Unstar a board
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: delete-members-id-boardstars-idstar
    params:
      - paramName: id
        description: The ID or username of the member
        paramKey: id
        in: path
        schema:
          type: string
        required: true
      - paramName: idStar
        description: The ID of the board star
        paramKey: idStar
        in: path
        schema:
          type: string
        required: true
  - moduleName: Members / Boards / List
    method: get
    path: /members/{id}/boards
    description: Lists the boards that the user is a member of.
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: get-members-id-boards
    params:
      - paramName: id
        description: The ID or username of the member
        paramKey: id
        in: path
        schema:
          type: string
        required: true
      - paramName: filter
        description: "`all` or a comma-separated list of: `closed`, `members`, `open`,
          `organization`, `public`, `starred`"
        paramKey: filter
        in: query
        schema:
          type: string
          default: all
          enum:
            - all
            - closed
            - members
            - open
            - organization
            - public
            - starred
        required: false
      - paramName: fields
        description: "`all` or a comma-separated list of board
          [fields](/cloud/trello/guides/rest-api/object-definitions/)"
        paramKey: fields
        in: query
        schema:
          type: string
          enum:
            - id
            - name
            - desc
            - descData
            - closed
            - idMemberCreator
            - idOrganization
            - pinned
            - url
            - shortUrl
            - prefs
            - labelNames
            - starred
            - limits
            - memberships
            - enterpriseOwned
        required: false
      - paramName: lists
        description: "Which lists to include with the boards. One of: `all`, `closed`,
          `none`, `open`"
        paramKey: lists
        in: query
        schema:
          type: string
          default: none
          enum:
            - all
            - closed
            - none
            - open
        required: false
      - paramName: organization
        description: Whether to include the Organization object with the Boards
        paramKey: organization
        in: query
        schema:
          type: boolean
          default: false
        required: false
      - paramName: organizationFields
        description: "`all` or a comma-separated list of organization
          [fields](/cloud/trello/guides/rest-api/object-definitions/)"
        paramKey: organization_fields
        in: query
        schema:
          type: string
          enum:
            - id
            - name
        required: false
        style: form
        explode: false
  - moduleName: Members / Boards Invited / List
    method: get
    path: /members/{id}/boardsInvited
    description: Get the boards the member has been invited to
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: get-members-id-boardsinvited
    params:
      - paramName: id
        description: The ID or username of the member
        paramKey: id
        in: path
        schema:
          type: string
        required: true
      - paramName: fields
        description: "`all` or a comma-separated list of board
          [fields](/cloud/trello/guides/rest-api/object-definitions/)"
        paramKey: fields
        in: query
        schema:
          type: string
          enum:
            - id
            - name
            - desc
            - descData
            - closed
            - idMemberCreator
            - idOrganization
            - pinned
            - url
            - shortUrl
            - prefs
            - labelNames
            - starred
            - limits
            - memberships
            - enterpriseOwned
        required: false
  - moduleName: Members / Cards / List
    method: get
    path: /members/{id}/cards
    description: Gets the cards a member is on
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: get-members-id-cards
    params:
      - paramName: id
        description: The ID or username of the member
        paramKey: id
        in: path
        schema:
          type: string
        required: true
      - paramName: filter
        description: "One of: `all`, `closed`, `none`, `open`, `visible`"
        paramKey: filter
        in: query
        schema:
          type: string
          default: visible
          enum:
            - all
            - closed
            - none
            - open
            - visible
        required: false
  - moduleName: Members / Custom Board Backgrounds / List
    method: get
    path: /members/{id}/customBoardBackgrounds
    description: Get a member's custom board backgrounds
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: get-members-id-customboardbackgrounds
    params:
      - paramName: id
        description: The ID or username of the member
        paramKey: id
        in: path
        schema:
          type: string
        required: true

  - moduleName: Members / Custom Board Backgrounds / Get Background
    method: get
    path: /members/{id}/customBoardBackgrounds/{idBackground}
    description: Get a specific custom board background
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: get-members-id-customboardbackgrounds-idbackground
    params:
      - paramName: id
        description: The ID or username of the member
        paramKey: id
        in: path
        schema:
          type: any
        required: true
      - paramName: idBackground
        description: The ID of the custom background
        paramKey: idBackground
        in: path
        schema:
          type: string
        required: true
  - moduleName: Members / Custom Board Backgrounds / Update Background
    method: put
    path: /members/{id}/customBoardBackgrounds/{idBackground}
    description: Update a specific custom board background
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: put-members-id-customboardbackgrounds-idbackground
    params:
      - paramName: id
        description: The ID or username of the member
        paramKey: id
        in: path
        schema:
          type: any
        required: true
      - paramName: idBackground
        description: The ID of the custom background
        paramKey: idBackground
        in: path
        schema:
          type: string
        required: true
      - paramName: brightness
        description: "One of: `dark`, `light`, `unknown`"
        paramKey: brightness
        in: query
        schema:
          type: string
          enum:
            - dark
            - light
            - unknown
        required: false
      - paramName: tile
        description: Whether to tile the background
        paramKey: tile
        in: query
        schema:
          type: boolean
        required: false
  - moduleName: Members / Custom Board Backgrounds / Delete Background
    method: delete
    path: /members/{id}/customBoardBackgrounds/{idBackground}
    description: Delete a specific custom board background
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: delete-members-id-customboardbackgrounds-idbackground
    params:
      - paramName: id
        description: The ID or username of the member
        paramKey: id
        in: path
        schema:
          type: any
        required: true
      - paramName: idBackground
        description: The ID of the custom background
        paramKey: idBackground
        in: path
        schema:
          type: string
        required: true
  - moduleName: Members / Custom Emoji / List
    method: get
    path: /members/{id}/customEmoji
    description: Get a Member's uploaded custom Emojis
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: get-members-id-customemoji
    params:
      - paramName: id
        description: The ID or username of the member
        paramKey: id
        in: path
        schema:
          type: string
        required: true

  - moduleName: Members / Custom Emoji / Get Emoji
    method: get
    path: /members/{id}/customEmoji/{idEmoji}
    description: Get a Member's custom Emoji
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: membersidcustomemojiidemoji
    params:
      - paramName: id
        description: The ID or username of the member
        paramKey: id
        in: path
        schema:
          type: string
        required: true
      - paramName: idEmoji
        description: The ID of the custom emoji
        paramKey: idEmoji
        in: path
        schema:
          type: string
        required: true
      - paramName: fields
        description: "`all` or a comma-separated list of `name`, `url`"
        paramKey: fields
        in: query
        schema:
          type: string
          default: all
          enum:
            - name
            - url
            - all
        required: false
        style: form
        explode: false
  - moduleName: Members / Custom Stickers / List
    method: get
    path: /members/{id}/customStickers
    description: Get a Member's uploaded stickers
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: get-members-id-customstickers
    params:
      - paramName: id
        description: The ID or username of the member
        paramKey: id
        in: path
        schema:
          type: string
        required: true

  - moduleName: Members / Custom Stickers / Get Sticker
    method: get
    path: /members/{id}/customStickers/{idSticker}
    description: Get a Member's custom Sticker
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: get-members-id-customstickers-idsticker
    params:
      - paramName: id
        description: The ID or username of the member
        paramKey: id
        in: path
        schema:
          type: string
        required: true
      - paramName: idSticker
        description: The ID of the uploaded sticker
        paramKey: idSticker
        in: path
        schema:
          type: string
        required: true
      - paramName: fields
        description: "`all` or a comma-separated list of `scaled`, `url`"
        paramKey: fields
        in: query
        schema:
          type: string
          default: all
          enum:
            - scaled
            - url
            - all
        required: false
        style: form
        explode: false
  - moduleName: Members / Custom Stickers / Delete Sticker
    method: delete
    path: /members/{id}/customStickers/{idSticker}
    description: Delete a Member's custom Sticker
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: delete-members-id-customstickers-idsticker
    params:
      - paramName: id
        description: The ID or username of the member
        paramKey: id
        in: path
        schema:
          type: string
        required: true
      - paramName: idSticker
        description: The ID of the uploaded sticker
        paramKey: idSticker
        in: path
        schema:
          type: string
        required: true
  - moduleName: Members / Notifications / List
    method: get
    path: /members/{id}/notifications
    description: Get a member's notifications
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: get-members-id-notifications
    params:
      - paramName: id
        description: The ID or username of the member
        paramKey: id
        in: path
        schema:
          type: string
        required: true
      - paramName: entities
        description: ""
        paramKey: entities
        in: query
        schema:
          type: boolean
          default: false
        required: false
      - paramName: display
        description: ""
        paramKey: display
        in: query
        schema:
          type: boolean
          default: false
        required: false
      - paramName: filter
        description: ""
        paramKey: filter
        in: query
        schema:
          type: string
          default: all
        required: false
      - paramName: readFilter
        description: "One of: `all`, `read`, `unread`"
        paramKey: read_filter
        in: query
        schema:
          type: string
          default: all
        required: false
      - paramName: fields
        description: "`all` or a comma-separated list of notification
          [fields](/cloud/trello/guides/rest-api/object-definitions/)"
        paramKey: fields
        in: query
        schema:
          type: string
          default: all
        required: false
      - paramName: limit
        description: Max 1000
        paramKey: limit
        in: query
        schema:
          type: number
          default: "50"
        required: false
      - paramName: page
        description: Max 100
        paramKey: page
        in: query
        schema:
          type: number
          default: "0"
        required: false
      - paramName: before
        description: A notification ID
        paramKey: before
        in: query
        schema:
          type: string
        required: false
      - paramName: since
        description: A notification ID
        paramKey: since
        in: query
        schema:
          type: string
        required: false
      - paramName: memberCreator
        description: ""
        paramKey: memberCreator
        in: query
        schema:
          type: boolean
          default: true
        required: false
      - paramName: memberCreatorFields
        description: "`all` or a comma-separated list of member
          [fields](/cloud/trello/guides/rest-api/object-definitions/)"
        paramKey: memberCreator_fields
        in: query
        schema:
          type: string
          default: avatarHash,fullName,initials,username
        required: false
  - moduleName: Members / Organizations / List
    method: get
    path: /members/{id}/organizations
    description: Get a member's Workspaces
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: get-members-id-organizations
    params:
      - paramName: id
        description: The ID or username of the member
        paramKey: id
        in: path
        schema:
          type: string
        required: true
      - paramName: filter
        description: "One of: `all`, `members`, `none`, `public` (Note: `members`
          filters to only private Workspaces)"
        paramKey: filter
        in: query
        schema:
          type: string
          default: all
          enum:
            - all
            - members
            - none
            - public
        required: false
      - paramName: fields
        description: "`all` or a comma-separated list of organization
          [fields](/cloud/trello/guides/rest-api/object-definitions/)"
        paramKey: fields
        in: query
        schema:
          type: string
          enum:
            - id
            - name
        required: false
        style: form
        explode: false
      - paramName: paidAccount
        description: Whether or not to include paid account information in the returned
          workspace object
        paramKey: paid_account
        in: query
        schema:
          type: boolean
          default: false
        required: false
  - moduleName: Members / Organizations Invited / List
    method: get
    path: /members/{id}/organizationsInvited
    description: Get a member's Workspaces they have been invited to
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: get-members-id-organizationsinvited
    params:
      - paramName: id
        description: The ID or username of the member
        paramKey: id
        in: path
        schema:
          type: string
        required: true
      - paramName: fields
        description: "`all` or a comma-separated list of organization
          [fields](/cloud/trello/guides/rest-api/object-definitions/)"
        paramKey: fields
        in: query
        schema:
          type: string
          enum:
            - id
            - name
        required: false
  - moduleName: Members / Saved Searches / List
    method: get
    path: /members/{id}/savedSearches
    description: List the saved searches of a Member
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: get-members-id-savedsearches
    params:
      - paramName: id
        description: The ID or username of the member
        paramKey: id
        in: path
        schema:
          type: string
        required: true
  - moduleName: Members / Saved Searches / Create
    method: post
    path: /members/{id}/savedSearches
    description: Create a saved search
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: post-members-id-savedsearches
    params:
      - paramName: id
        description: The ID or username of the member
        paramKey: id
        in: path
        schema:
          type: string
        required: true
      - paramName: name
        description: The name for the saved search
        paramKey: name
        in: query
        schema:
          type: string
        required: true
      - paramName: query
        description: The search query
        paramKey: query
        in: query
        schema:
          type: string
        required: true
      - paramName: pos
        description: The position of the saved search. `top`, `bottom`, or a positive float.
        paramKey: pos
        in: query
        schema:
          type: any
        required: true
  - moduleName: Members / Saved Searches / Get Search
    method: get
    path: /members/{id}/savedSearches/{idSearch}
    description: Get a saved search
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: get-members-id-savedsearches-idsearch
    params:
      - paramName: id
        description: The ID or username of the member
        paramKey: id
        in: path
        schema:
          type: string
        required: true
      - paramName: idSearch
        description: The ID of the saved search to delete
        paramKey: idSearch
        in: path
        schema:
          type: string
        required: true
  - moduleName: Members / Saved Searches / Update Search
    method: put
    path: /members/{id}/savedSearches/{idSearch}
    description: Update a saved search
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: put-members-id-savedsearches-idsearch
    params:
      - paramName: id
        description: The ID or username of the member
        paramKey: id
        in: path
        schema:
          type: string
        required: true
      - paramName: idSearch
        description: The ID of the saved search to delete
        paramKey: idSearch
        in: path
        schema:
          type: string
        required: true
      - paramName: name
        description: The new name for the saved search
        paramKey: name
        in: query
        schema:
          type: string
        required: false
      - paramName: query
        description: The new search query
        paramKey: query
        in: query
        schema:
          type: string
        required: false
      - paramName: pos
        description: New position for saves search. `top`, `bottom`, or a positive float.
        paramKey: pos
        in: query
        schema:
          type: string
        required: false
  - moduleName: Members / Saved Searches / Delete Search
    method: delete
    path: /members/{id}/savedSearches/{idSearch}
    description: Delete a saved search
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: delete-members-id-savedsearches-idsearch
    params:
      - paramName: id
        description: The ID or username of the member
        paramKey: id
        in: path
        schema:
          type: string
        required: true
      - paramName: idSearch
        description: The ID of the saved search to delete
        paramKey: idSearch
        in: path
        schema:
          type: string
        required: true
  - moduleName: Members / Tokens / List
    method: get
    path: /members/{id}/tokens
    description: List a members app tokens
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: get-members-id-tokens
    params:
      - paramName: id
        description: The ID or username of the member
        paramKey: id
        in: path
        schema:
          type: string
        required: true
      - paramName: webhooks
        description: Whether to include webhooks
        paramKey: webhooks
        in: query
        schema:
          type: boolean
          default: false
        required: false

  - moduleName: Members / One Time Messages Dismissed / Create
    method: post
    path: /members/{id}/oneTimeMessagesDismissed
    description: Dismiss a message
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: post-members-id-onetimemessagesdismissed
    params:
      - paramName: id
        description: The ID or username of the member
        paramKey: id
        in: path
        schema:
          type: string
        required: true
      - paramName: value
        description: The message to dismiss
        paramKey: value
        in: query
        schema:
          type: string
        required: true
  - moduleName: Members / Notifications Channel Settings / List
    method: get
    path: /members/{id}/notificationsChannelSettings
    description: Get a member's notification channel settings
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: get-members-id-notificationChannelSettings
    params:
      - paramName: id
        description: The ID or username of the member
        paramKey: id
        in: path
        schema:
          type: any
        required: true
  - moduleName: Members / Notifications Channel Settings / Update
    method: put
    path: /members/{id}/notificationsChannelSettings
    description: Update blocked notification keys of Member on a specific channel
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: put-members-id-notificationChannelSettings-channel-blockedKeys
    params:
      - paramName: id
        description: The ID or username of the member
        paramKey: id
        in: path
        schema:
          type: any
        required: true
      - paramName: channel
        description: ""
        paramKey: channel
        in: body
        schema:
          type: string
          enum:
            - email
        required: true
      - paramName: blockedKeys
        description: Blocked key or array of blocked keys.
        paramKey: blockedKeys
        in: body
        schema:
          type: any
        required: true
    requestBodyType: json
  - moduleName: Members / Notifications Channel Settings / Get Channel
    method: get
    path: /members/{id}/notificationsChannelSettings/{channel}
    description: Get blocked notification keys of Member on a specific channel
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: get-members-id-notificationChannelSettings-channel
    params:
      - paramName: id
        description: The ID or username of the member
        paramKey: id
        in: path
        schema:
          type: any
        required: true
      - paramName: channel
        description: Channel to block notifications on
        paramKey: channel
        in: path
        schema:
          type: string
          enum:
            - email
        required: true
  - moduleName: Members / Notifications Channel Settings / Update Channel
    method: put
    path: /members/{id}/notificationsChannelSettings/{channel}
    description: Update blocked notification keys of Member on a specific channel
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: put-members-id-notificationChannelSettings-channel-blockedKeys
    params:
      - paramName: id
        description: The ID or username of the member
        paramKey: id
        in: path
        schema:
          type: any
        required: true
      - paramName: channel
        description: Channel to block notifications on
        paramKey: channel
        in: path
        schema:
          type: string
          enum:
            - email
        required: true
      - paramName: blockedKeys
        description: Singular key or array of notification keys
        paramKey: blockedKeys
        in: body
        schema:
          type: any
        required: true
    requestBodyType: json
  - moduleName: Members / Notifications Channel Settings / Update Blocked Keys
    method: put
    path: /members/{id}/notificationsChannelSettings/{channel}/{blockedKeys}
    description: Update blocked notification keys of Member on a specific channel
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: put-members-id-notificationChannelSettings-channel-blockedKeys
    params:
      - paramName: id
        description: The ID or username of the member
        paramKey: id
        in: path
        schema:
          type: any
        required: true
      - paramName: channel
        description: Channel to block notifications on
        paramKey: channel
        in: path
        schema:
          type: string
          enum:
            - email
        required: true
      - paramName: blockedKeys
        description: Singular key or comma-separated list of notification keys
        paramKey: blockedKeys
        in: path
        schema:
          type: string
          enum:
            - notification_comment_card
            - notification_added_a_due_date
            - notification_changed_due_date
            - notification_card_due_soon
            - notification_removed_from_card
            - notification_added_attachment_to_card
            - notification_created_card
            - notification_moved_card
            - notification_archived_card
            - notification_unarchived_card
        required: true
  - moduleName: Notifications / Get
    method: get
    path: /notifications/{id}
    description: ""
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: get-notifications-id
    params:
      - paramName: id
        description: The ID of the notification
        paramKey: id
        in: path
        schema:
          type: string
        required: true
      - paramName: board
        description: Whether to include the board object
        paramKey: board
        in: query
        schema:
          type: boolean
          default: false
        required: false
      - paramName: boardFields
        description: "`all` or a comma-separated list of board
          [fields](/cloud/trello/guides/rest-api/object-definitions/)"
        paramKey: board_fields
        in: query
        schema:
          type: string
          enum:
            - id
            - name
            - desc
            - descData
            - closed
            - idMemberCreator
            - idOrganization
            - pinned
            - url
            - shortUrl
            - prefs
            - labelNames
            - starred
            - limits
            - memberships
            - enterpriseOwned
        required: false
        style: form
        explode: false
      - paramName: card
        description: Whether to include the card object
        paramKey: card
        in: query
        schema:
          type: boolean
          default: false
        required: false
      - paramName: cardFields
        description: "`all` or a comma-separated list of card
          [fields](/cloud/trello/guides/rest-api/object-definitions/)"
        paramKey: card_fields
        in: query
        schema:
          type: string
          enum:
            - id
            - address
            - badges
            - checkItemStates
            - closed
            - coordinates
            - creationMethod
            - dueComplete
            - dateLastActivity
            - desc
            - descData
            - due
            - dueReminder
            - idBoard
            - idChecklists
            - idLabels
            - idList
            - idMembers
            - idMembersVoted
            - idShort
            - idAttachmentCover
            - labels
            - limits
            - locationName
            - manualCoverAttachment
            - name
            - pos
            - shortLink
            - shortUrl
            - subscribed
            - url
            - cover
            - isTemplate
        required: false
        style: form
        explode: false
      - paramName: display
        description: Whether to include the display object with the results
        paramKey: display
        in: query
        schema:
          type: boolean
          default: false
        required: false
      - paramName: entities
        description: Whether to include the entities object with the results
        paramKey: entities
        in: query
        schema:
          type: boolean
          default: false
        required: false
      - paramName: fields
        description: "`all` or a comma-separated list of notification
          [fields](/cloud/trello/guides/rest-api/object-definitions/)"
        paramKey: fields
        in: query
        schema:
          type: string
          enum:
            - id
            - unread
            - type
            - date
            - dateRead
            - data
            - card
            - board
            - idMemberCreator
            - idAction
            - reactions
        required: false
        style: form
        explode: false
      - paramName: list
        description: Whether to include the list object
        paramKey: list
        in: query
        schema:
          type: boolean
          default: false
        required: false
      - paramName: member
        description: Whether to include the member object
        paramKey: member
        in: query
        schema:
          type: boolean
          default: true
        required: false
      - paramName: memberFields
        description: "`all` or a comma-separated list of member
          [fields](/cloud/trello/guides/rest-api/object-definitions/)"
        paramKey: member_fields
        in: query
        schema:
          type: string
          enum:
            - id
        required: false
        style: form
        explode: false
      - paramName: memberCreator
        description: Whether to include the member object of the creator
        paramKey: memberCreator
        in: query
        schema:
          type: boolean
          default: true
        required: false
      - paramName: memberCreatorFields
        description: "`all` or a comma-separated list of member
          [fields](/cloud/trello/guides/rest-api/object-definitions/)"
        paramKey: memberCreator_fields
        in: query
        schema:
          type: string
          enum:
            - id
        required: false
      - paramName: organization
        description: Whether to include the organization object
        paramKey: organization
        in: query
        schema:
          type: boolean
          default: false
        required: false
      - paramName: organizationFields
        description: "`all` or a comma-separated list of organization
          [fields](/cloud/trello/guides/rest-api/object-definitions/)"
        paramKey: organization_fields
        in: query
        schema:
          type: string
          enum:
            - id
            - name
        required: false
  - moduleName: Notifications / Update
    method: put
    path: /notifications/{id}
    description: Update the read status of a notification
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: put-notifications-id
    params:
      - paramName: id
        description: The ID of the notification
        paramKey: id
        in: path
        schema:
          type: string
        required: true
      - paramName: unread
        description: Whether the notification should be marked as read or not
        paramKey: unread
        in: query
        schema:
          type: boolean
        required: false
  - moduleName: Notifications / Field / Get
    method: get
    path: /notifications/{id}/{field}
    description: Get a specific property of a notification
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: get-notifications-id-field
    params:
      - paramName: id
        description: The ID of the notification
        paramKey: id
        in: path
        schema:
          type: string
        required: true
      - paramName: field
        description: A notification
          [field](/cloud/trello/guides/rest-api/object-definitions/)
        paramKey: field
        in: path
        schema:
          type: string
          enum:
            - id
            - unread
            - type
            - date
            - dateRead
            - data
            - card
            - board
            - idMemberCreator
            - idAction
            - reactions
        required: true
  - moduleName: Notifications / Mark All Read
    method: post
    path: /notifications/all/read
    description: Mark all notifications as read
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: post-notifications-all-read
    params:
      - paramName: read
        description: Boolean to specify whether to mark as read or unread (defaults to
          `true`, marking as read)
        paramKey: read
        in: query
        schema:
          type: boolean
          default: true
        required: false
      - paramName: ids
        description: A comma-seperated list of IDs. Allows specifying an array of
          notification IDs to change the read state for. This will become useful
          as we add grouping of notifications to the UI, with a single button to
          mark all notifications in the group as read/unread.
        paramKey: ids
        in: query
        schema:
          type: array
          items:
            type: any
        required: false
        style: form
        explode: false
  - moduleName: Notifications / Mark Unread
    method: put
    path: /notifications/{id}/unread
    description: Update Notification's read status
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: put-notifications-id-unread
    params:
      - paramName: id
        description: The ID of the notification
        paramKey: id
        in: path
        schema:
          type: string
        required: true
      - paramName: value
        description: ""
        paramKey: value
        in: query
        schema:
          type: string
        required: false
  - moduleName: Notifications / Board / Get
    method: get
    path: /notifications/{id}/board
    description: Get the board a notification is associated with
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: get-notifications-id-board
    params:
      - paramName: id
        description: The ID of the notification
        paramKey: id
        in: path
        schema:
          type: string
        required: true
      - paramName: fields
        description: "`all` or a comma-separated list of
          board[fields](/cloud/trello/guides/rest-api/object-definitions/)"
        paramKey: fields
        in: query
        schema:
          type: string
          enum:
            - id
            - name
            - desc
            - descData
            - closed
            - idMemberCreator
            - idOrganization
            - pinned
            - url
            - shortUrl
            - prefs
            - labelNames
            - starred
            - limits
            - memberships
            - enterpriseOwned
        required: false
        style: form
        explode: false
  - moduleName: Notifications / Card / Get
    method: get
    path: /notifications/{id}/card
    description: Get the card a notification is associated with
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: get-notifications-id-card
    params:
      - paramName: id
        description: The ID of the notification
        paramKey: id
        in: path
        schema:
          type: string
        required: true
      - paramName: fields
        description: "`all` or a comma-separated list of card
          [fields](/cloud/trello/guides/rest-api/object-definitions/)"
        paramKey: fields
        in: query
        schema:
          type: string
          enum:
            - id
            - address
            - badges
            - checkItemStates
            - closed
            - coordinates
            - creationMethod
            - dueComplete
            - dateLastActivity
            - desc
            - descData
            - due
            - dueReminder
            - idBoard
            - idChecklists
            - idLabels
            - idList
            - idMembers
            - idMembersVoted
            - idShort
            - idAttachmentCover
            - labels
            - limits
            - locationName
            - manualCoverAttachment
            - name
            - pos
            - shortLink
            - shortUrl
            - subscribed
            - url
            - cover
            - isTemplate
        required: false
        style: form
        explode: false
  - moduleName: Notifications / List / Get
    method: get
    path: /notifications/{id}/list
    description: Get the list a notification is associated with
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: get-notifications-id-list
    params:
      - paramName: id
        description: The ID of the notification
        paramKey: id
        in: path
        schema:
          type: string
        required: true
      - paramName: fields
        description: "`all` or a comma-separated list of list
          [fields](/cloud/trello/guides/rest-api/object-definitions/)"
        paramKey: fields
        in: query
        schema:
          type: string
          enum:
            - id
        required: false
  - moduleName: Notifications / Member / Get
    method: get
    path: /notifications/{id}/member
    description: Get the member (not the creator) a notification is about
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: notificationsidmember
    params:
      - paramName: id
        description: The ID of the notification
        paramKey: id
        in: path
        schema:
          type: string
        required: true
      - paramName: fields
        description: "`all` or a comma-separated list of member
          [fields](/cloud/trello/guides/rest-api/object-definitions/)"
        paramKey: fields
        in: query
        schema:
          type: string
          enum:
            - id
        required: false
  - moduleName: Notifications / Member Creator / Get
    method: get
    path: /notifications/{id}/memberCreator
    description: Get the member who created the notification
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: get-notifications-id-membercreator
    params:
      - paramName: id
        description: The ID of the notification
        paramKey: id
        in: path
        schema:
          type: string
        required: true
      - paramName: fields
        description: "`all` or a comma-separated list of member
          [fields](/cloud/trello/guides/rest-api/object-definitions/)"
        paramKey: fields
        in: query
        schema:
          type: string
          enum:
            - id
        required: false
        style: form
        explode: false
  - moduleName: Notifications / Organization / Get
    method: get
    path: /notifications/{id}/organization
    description: Get the organization a notification is associated with
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: get-notifications-id-organization
    params:
      - paramName: id
        description: The ID of the notification
        paramKey: id
        in: path
        schema:
          type: string
        required: true
      - paramName: fields
        description: "`all` or a comma-separated list of organization
          [fields](/cloud/trello/guides/rest-api/object-definitions/)"
        paramKey: fields
        in: query
        schema:
          type: string
          enum:
            - id
            - name
        required: false
        style: form
        explode: false
  - moduleName: Organizations / Create
    method: post
    path: /organizations
    description: Create a new Workspace
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: post-organizations
    params:
      - paramName: displayName
        description: The name to display for the Organization
        paramKey: displayName
        in: query
        schema:
          type: string
        required: true
      - paramName: desc
        description: The description for the organizations
        paramKey: desc
        in: query
        schema:
          type: string
        required: false
      - paramName: name
        description: A string with a length of at least 3. Only lowercase letters,
          underscores, and numbers are allowed. If the name contains invalid
          characters, they will be removed. If the name conflicts with an
          existing name, a new name will be substituted.
        paramKey: name
        in: query
        schema:
          type: string
        required: false
      - paramName: website
        description: A URL starting with `http://` or `https://`
        paramKey: website
        in: query
        schema:
          type: string
        required: false
  - moduleName: Organizations / Get
    method: get
    path: /organizations/{id}
    description: ""
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: get-organizations-id
    params:
      - paramName: id
        description: The ID or name of the Organization
        paramKey: id
        in: path
        schema:
          type: string
        required: true
  - moduleName: Organizations / Update
    method: put
    path: /organizations/{id}
    description: Update an organization
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: put-organizations-id
    params:
      - paramName: id
        description: The ID or name of the Organization
        paramKey: id
        in: path
        schema:
          type: string
        required: true
      - paramName: name
        description: A new name for the organization. At least 3 lowercase letters,
          underscores, and numbers. Must be unique
        paramKey: name
        in: query
        schema:
          type: string
        required: false
      - paramName: displayName
        description: A new displayName for the organization. Must be at least 1
          character long and not begin or end with a space.
        paramKey: displayName
        in: query
        schema:
          type: string
        required: false
      - paramName: desc
        description: A new description for the organization
        paramKey: desc
        in: query
        schema:
          type: string
        required: false
      - paramName: website
        description: A URL starting with `http://`, `https://`, or `null`
        paramKey: website
        in: query
        schema:
          type: string
        required: false
      - paramName: prefs/associatedDomain
        description: The Google Apps domain to link this org to.
        paramKey: prefs/associatedDomain
        in: query
        schema:
          type: string
        required: false
      - paramName: prefs/externalMembersDisabled
        description: Whether non-workspace members can be added to boards inside the
          Workspace
        paramKey: prefs/externalMembersDisabled
        in: query
        schema:
          type: boolean
        required: false
      - paramName: prefs/googleAppsVersion
        description: "`1` or `2`"
        paramKey: prefs/googleAppsVersion
        in: query
        schema:
          type: number
        required: false
      - paramName: prefs/boardVisibilityRestrict/org
        description: Who on the Workspace can make Workspace visible boards. One of
          `admin`, `none`, `org`
        paramKey: prefs/boardVisibilityRestrict/org
        in: query
        schema:
          type: string
        required: false
      - paramName: prefs/boardVisibilityRestrict/private
        description: "Who can make private boards. One of: `admin`, `none`, `org`"
        paramKey: prefs/boardVisibilityRestrict/private
        in: query
        schema:
          type: string
        required: false
      - paramName: prefs/boardVisibilityRestrict/public
        description: "Who on the Workspace can make public boards. One of: `admin`,
          `none`, `org`"
        paramKey: prefs/boardVisibilityRestrict/public
        in: query
        schema:
          type: string
        required: false
      - paramName: prefs/orgInviteRestrict
        description: An email address with optional wildcard characters. (E.g.
          `subdomain.*.trello.com`)
        paramKey: prefs/orgInviteRestrict
        in: query
        schema:
          type: string
        required: false
      - paramName: prefs/permissionLevel
        description: "Whether the Workspace page is publicly visible. One of: `private`,
          `public`"
        paramKey: prefs/permissionLevel
        in: query
        schema:
          type: string
        required: false
  - moduleName: Organizations / Delete
    method: delete
    path: /organizations/{id}
    description: Delete an Organization
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: delete-organizations-id
    params:
      - paramName: id
        description: The ID or name of the Organization
        paramKey: id
        in: path
        schema:
          type: string
        required: true
  - moduleName: Organizations / Field / Get
    method: get
    path: /organizations/{id}/{field}
    description: ""
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: get-organizations-id-field
    params:
      - paramName: id
        description: The ID or name of the organization
        paramKey: id
        in: path
        schema:
          type: string
        required: true
      - paramName: field
        description: An organization
          [field](/cloud/trello/guides/rest-api/object-definitions/)
        paramKey: field
        in: path
        schema:
          type: string
          enum:
            - id
            - name
        required: true
  - moduleName: Organizations / Actions / List
    method: get
    path: /organizations/{id}/actions
    description: List the actions on a Workspace
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: get-organizations-id-actions
    params:
      - paramName: id
        description: The ID or name of the organization
        paramKey: id
        in: path
        schema:
          type: string
        required: true
  - moduleName: Organizations / Boards / List
    method: get
    path: /organizations/{id}/boards
    description: List the boards in a Workspace
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: get-organizations-id-boards
    params:
      - paramName: id
        description: The ID or name of the organization
        paramKey: id
        in: path
        schema:
          type: string
        required: true
      - paramName: filter
        description: "`all` or a comma-separated list of: `open`, `closed`, `members`,
          `organization`, `public`"
        paramKey: filter
        in: query
        schema:
          type: string
          default: all
          enum:
            - all
            - open
            - closed
            - members
            - organization
            - public
        required: false
      - paramName: fields
        description: "`all` or a comma-separated list of board
          [fields](/cloud/trello/guides/rest-api/object-definitions/)"
        paramKey: fields
        in: query
        schema:
          type: string
          enum:
            - id
            - name
            - desc
            - descData
            - closed
            - idMemberCreator
            - idOrganization
            - pinned
            - url
            - shortUrl
            - prefs
            - labelNames
            - starred
            - limits
            - memberships
            - enterpriseOwned
        required: false
  - moduleName: Organizations / Exports / Create
    method: post
    path: /organizations/{id}/exports
    description: Kick off CSV export for an organization
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: post-organizations-id-exports
    params:
      - paramName: id
        description: The ID or name of the Workspace
        paramKey: id
        in: path
        schema:
          type: string
        required: true
      - paramName: attachments
        description: Whether the CSV should include attachments or not.
        paramKey: attachments
        in: query
        schema:
          type: boolean
          default: true
        required: false
  - moduleName: Organizations / Exports / Get
    method: get
    path: /organizations/{id}/exports
    description: Retrieve the exports that exist for the given organization
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: get-organizations-id-exports
    params:
      - paramName: id
        description: The ID or name of the Workspace
        paramKey: id
        in: path
        schema:
          type: string
        required: true
  - moduleName: Organizations / Members / List
    method: get
    path: /organizations/{id}/members
    description: List the members in a Workspace
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: get-organizations-id-members
    params:
      - paramName: id
        description: The ID or name of the Organization
        paramKey: id
        in: path
        schema:
          type: string
        required: true
  - moduleName: Organizations / Members / Update
    method: put
    path: /organizations/{id}/members
    description: ""
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: put-organizations-id-members
    params:
      - paramName: id
        description: The ID or name of the organization
        paramKey: id
        in: path
        schema:
          type: string
        required: true
      - paramName: email
        description: An email address
        paramKey: email
        in: query
        schema:
          type: string
        required: true
      - paramName: fullName
        description: Name for the member, at least 1 character not beginning or ending
          with a space
        paramKey: fullName
        in: query
        schema:
          type: string
        required: true
      - paramName: type
        description: "One of: `admin`, `normal`"
        paramKey: type
        in: query
        schema:
          type: string
          default: normal
          enum:
            - admin
            - normal
        required: false
  - moduleName: Organizations / Memberships / List
    method: get
    path: /organizations/{id}/memberships
    description: List the memberships of a Workspace
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: get-organizations-id-memberships
    params:
      - paramName: id
        description: The ID or name of the organization
        paramKey: id
        in: path
        schema:
          type: string
        required: true
      - paramName: filter
        description: "`all` or a comma-separated list of: `active`, `admin`,
          `deactivated`, `me`, `normal`"
        paramKey: filter
        in: query
        schema:
          type: string
          default: all
          enum:
            - all
            - active
            - admin
            - deactivated
            - me
            - normal
        required: false
        style: form
        explode: false
      - paramName: member
        description: Whether to include the Member objects with the Memberships
        paramKey: member
        in: query
        schema:
          type: boolean
          default: false
        required: false
  - moduleName: Organizations / Membership / Get
    method: get
    path: /organizations/{id}/memberships/{idMembership}
    description: Get a single Membership for an Organization
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: get-organizations-id-memberships-idmembership
    params:
      - paramName: id
        description: The ID or name of the organization
        paramKey: id
        in: path
        schema:
          type: string
        required: true
      - paramName: idMembership
        description: The ID of the membership to load
        paramKey: idMembership
        in: path
        schema:
          type: string
        required: true
      - paramName: member
        description: Whether to include the Member object in the response
        paramKey: member
        in: query
        schema:
          type: boolean
          default: false
        required: false
  - moduleName: Organizations / Plugin Data / List
    method: get
    path: /organizations/{id}/pluginData
    description: Get organization scoped pluginData on this Workspace
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: get-organizations-id-plugindata
    params:
      - paramName: id
        description: The ID or name of the organization
        paramKey: id
        in: path
        schema:
          type: string
        required: true
  - moduleName: Organizations / Tags / List
    method: get
    path: /organizations/{id}/tags
    description: List the organization's collections
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: get-organizations-id-tags
    params:
      - paramName: id
        description: The ID or name of the Organization
        paramKey: id
        in: path
        schema:
          type: any
        required: true
  - moduleName: Organizations / Tags / Create
    method: post
    path: /organizations/{id}/tags
    description: Create a Tag in an Organization
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: post-organizations-id-tags
    params:
      - paramName: id
        description: The ID or name of the Organization
        paramKey: id
        in: path
        schema:
          type: any
        required: true
  - moduleName: Organizations / Members / Update Member
    method: put
    path: /organizations/{id}/members/{idMember}
    description: Add a member to a Workspace or update their member type.
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: put-organizations-id-members-idmember
    params:
      - paramName: id
        description: The ID or name of the organization
        paramKey: id
        in: path
        schema:
          type: string
        required: true
      - paramName: idMember
        description: The ID or username of the member to update
        paramKey: idMember
        in: path
        schema:
          type: string
        required: true
      - paramName: type
        description: "One of: `admin`, `normal`"
        paramKey: type
        in: query
        schema:
          type: string
          enum:
            - admin
            - normal
        required: true
  - moduleName: Organizations / Members / Delete Member
    method: delete
    path: /organizations/{id}/members/{idMember}
    description: Remove a member from a Workspace
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: delete-organizations-id-members
    params:
      - paramName: id
        description: The ID or name of the organization
        paramKey: id
        in: path
        schema:
          type: string
        required: true
      - paramName: idMember
        description: The ID of the Member to remove from the Workspace
        paramKey: idMember
        in: path
        schema:
          type: string
        required: true
  - moduleName: Organizations / Members / Deactivate Member
    method: put
    path: /organizations/{id}/members/{idMember}/deactivated
    description: Deactivate or reactivate a member of a Workspace
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: put-organizations-id-members-idmember-deactivated
    params:
      - paramName: id
        description: The ID or name of the organization
        paramKey: id
        in: path
        schema:
          type: string
        required: true
      - paramName: idMember
        description: The ID or username of the member to update
        paramKey: idMember
        in: path
        schema:
          type: any
        required: true
      - paramName: value
        description: ""
        paramKey: value
        in: query
        schema:
          type: boolean
        required: true
  - moduleName: Organizations / Logo / Delete
    method: delete
    path: /organizations/{id}/logo
    description: Delete a the logo from a Workspace
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: delete-organizations-id-logo
    params:
      - paramName: id
        description: The ID or name of the organization
        paramKey: id
        in: path
        schema:
          type: string
        required: true
  - moduleName: Organizations / Members / Delete All
    method: delete
    path: /organizations/{id}/members/{idMember}/all
    description: Remove a member from a Workspace and from all Workspace boards
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: organizations-id-members-idmember-all
    params:
      - paramName: id
        description: The ID or name of the organization
        paramKey: id
        in: path
        schema:
          type: string
        required: true
      - paramName: idMember
        description: The ID of the member to remove from the Workspace
        paramKey: idMember
        in: path
        schema:
          type: string
        required: true
  - moduleName: Organizations / Prefs / Delete Associated Domain
    method: delete
    path: /organizations/{id}/prefs/associatedDomain
    description: Remove the associated Google Apps domain from a Workspace
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: delete-organizations-id-prefs-associateddomain
    params:
      - paramName: id
        description: The ID or name of the organization
        paramKey: id
        in: path
        schema:
          type: string
        required: true
  - moduleName: Organizations / Prefs / Delete Org Invite Restrict
    method: delete
    path: /organizations/{id}/prefs/orgInviteRestrict
    description: Remove the email domain restriction on who can be invited to the Workspace
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: delete-organizations-id-prefs-orginviterestrict
    params:
      - paramName: id
        description: The ID or name of the organization
        paramKey: id
        in: path
        schema:
          type: string
        required: true
      - paramName: value
        description: Restriction source address
        paramKey: value
        in: body
        schema:
          type: string
        required: true
    requestBodyType: json
  - moduleName: Organizations / Tags / Delete Tag
    method: delete
    path: /organizations/{id}/tags/{idTag}
    description: Delete an organization's tag
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: delete-organizations-id-tags-idtag
    params:
      - paramName: id
        description: The ID or name of the organization
        paramKey: id
        in: path
        schema:
          type: string
        required: true
      - paramName: idTag
        description: The ID of the tag to delete
        paramKey: idTag
        in: path
        schema:
          type: string
        required: true
  - moduleName: Organizations / New Billable Guests / Get Board
    method: get
    path: /organizations/{id}/newBillableGuests/{idBoard}
    description: Used to check whether the given board has new billable guests on it.
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: get-organizations-id-newbillableguests-idboard
    params:
      - paramName: id
        description: The ID or name of the organization
        paramKey: id
        in: path
        schema:
          type: string
        required: true
      - paramName: idBoard
        description: The ID of the board to check for new billable guests.
        paramKey: idBoard
        in: path
        schema:
          type: string
        required: true
  - moduleName: Plugins / Get
    method: get
    path: /plugins/{id}/
    description: Get plugins
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: get-plugins-id
    params:
      - paramName: id
        description: The ID or name of the organization
        paramKey: id
        in: path
        schema:
          type: string
        required: true
  - moduleName: Plugins / Update
    method: put
    path: /plugins/{id}/
    description: Update a Plugin
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: put-plugins-id
    params:
      - paramName: id
        description: The ID or name of the organization
        paramKey: id
        in: path
        schema:
          type: string
        required: true
  - moduleName: Plugins / Listing / Create
    method: post
    path: /plugins/{idPlugin}/listing
    description: Create a new listing for a given locale for your Power-Up
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: post-plugins-idplugin-listing
    params:
      - paramName: idPlugin
        description: The ID of the Power-Up for which you are creating a new listing.
        paramKey: idPlugin
        in: path
        schema:
          type: string
        required: true
      - paramName: description
        description: The description to show for the given locale
        paramKey: description
        in: body
        schema:
          type: string
        required: false
      - paramName: locale
        description: The locale that this listing should be displayed for.
        paramKey: locale
        in: body
        schema:
          type: string
        required: false
      - paramName: overview
        description: The overview to show for the given locale.
        paramKey: overview
        in: body
        schema:
          type: string
        required: false
      - paramName: name
        description: The name to use for the given locale.
        paramKey: name
        in: body
        schema:
          type: string
        required: false
    requestBodyType: json
  - moduleName: Plugins / Compliance / Get Member Privacy
    method: get
    path: /plugins/{id}/compliance/memberPrivacy
    description: ""
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: get-plugins-id-compliance-memberprivacy
    params:
      - paramName: id
        description: The ID of the Power-Up
        paramKey: id
        in: path
        schema:
          type: string
        required: true
  - moduleName: Plugins / Listings / Update
    method: put
    path: /plugins/{idPlugin}/listings/{idListing}
    description: Update an existing listing for your Power-Up
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: put-plugins-idplugin-listings-idlisting
    params:
      - paramName: idPlugin
        description: The ID of the Power-Up whose listing is being updated.
        paramKey: idPlugin
        in: path
        schema:
          type: string
        required: true
      - paramName: idListing
        description: The ID of the existing listing for the Power-Up that is being updated.
        paramKey: idListing
        in: path
        schema:
          type: string
        required: true
      - paramName: description
        description: The description to show for the given locale
        paramKey: description
        in: body
        schema:
          type: string
        required: false
      - paramName: locale
        description: The locale that this listing should be displayed for.
        paramKey: locale
        in: body
        schema:
          type: string
        required: false
      - paramName: overview
        description: The overview to show for the given locale.
        paramKey: overview
        in: body
        schema:
          type: string
        required: false
      - paramName: name
        description: The name to use for the given locale.
        paramKey: name
        in: body
        schema:
          type: string
        required: false
    requestBodyType: json
  - moduleName: Search / Perform
    method: get
    path: /search
    description: Find what you're looking for in Trello
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: get-search
    params:
      - paramName: query
        description: The search query with a length of 1 to 16384 characters
        paramKey: query
        in: query
        schema:
          type: string
        required: true
      - paramName: idBoards
        description: "`mine` or a comma-separated list of Board IDs"
        paramKey: idBoards
        in: query
        schema:
          type: any
        required: false
        style: form
        explode: false
      - paramName: idOrganizations
        description: A comma-separated list of Organization IDs
        paramKey: idOrganizations
        in: query
        schema:
          type: string
        required: false
        style: form
        explode: false
      - paramName: idCards
        description: A comma-separated list of Card IDs
        paramKey: idCards
        in: query
        schema:
          type: string
        required: false
        style: form
        explode: false
      - paramName: modelTypes
        description: "What type or types of Trello objects you want to search. all or a
          comma-separated list of: `actions`, `boards`, `cards`, `members`,
          `organizations`"
        paramKey: modelTypes
        in: query
        schema:
          type: string
          default: all
        required: false
      - paramName: boardFields
        description: "all or a comma-separated list of: `closed`, `dateLastActivity`,
          `dateLastView`, `desc`, `descData`, `idOrganization`, `invitations`,
          `invited`, `labelNames`, `memberships`, `name`, `pinned`, `powerUps`,
          `prefs`, `shortLink`, `shortUrl`, `starred`, `subscribed`, `url`"
        paramKey: board_fields
        in: query
        schema:
          type: string
          default: name,idOrganization
        required: false
        style: form
        explode: false
      - paramName: boardsLimit
        description: "The maximum number of boards returned. Maximum: 1000"
        paramKey: boards_limit
        in: query
        schema:
          type: number
          maximum: 1000
          default: 10
        required: false
      - paramName: boardOrganization
        description: Whether to include the parent organization with board results
        paramKey: board_organization
        in: query
        schema:
          type: boolean
          default: false
        required: false
      - paramName: cardFields
        description: "all or a comma-separated list of: `badges`, `checkItemStates`,
          `closed`, `dateLastActivity`, `desc`, `descData`, `due`,
          `idAttachmentCover`, `idBoard`, `idChecklists`, `idLabels`, `idList`,
          `idMembers`, `idMembersVoted`, `idShort`, `labels`,
          `manualCoverAttachment`, `name`, `pos`, `shortLink`, `shortUrl`,
          `subscribed`, `url`"
        paramKey: card_fields
        in: query
        schema:
          type: string
          default: all
        required: false
        style: form
        explode: false
      - paramName: cardsLimit
        description: "The maximum number of cards to return. Maximum: 1000"
        paramKey: cards_limit
        in: query
        schema:
          type: number
          maximum: 1000
          default: 10
        required: false
        style: form
        explode: false
      - paramName: cardsPage
        description: "The page of results for cards. Maximum: 100"
        paramKey: cards_page
        in: query
        schema:
          type: number
          maximum: 100
          default: 0
        required: false
      - paramName: cardBoard
        description: Whether to include the parent board with card results
        paramKey: card_board
        in: query
        schema:
          type: boolean
          default: false
        required: false
      - paramName: cardList
        description: Whether to include the parent list with card results
        paramKey: card_list
        in: query
        schema:
          type: boolean
          default: false
        required: false
      - paramName: cardMembers
        description: Whether to include member objects with card results
        paramKey: card_members
        in: query
        schema:
          type: boolean
          default: false
        required: false
      - paramName: cardStickers
        description: Whether to include sticker objects with card results
        paramKey: card_stickers
        in: query
        schema:
          type: boolean
          default: false
        required: false
      - paramName: cardAttachments
        description: Whether to include attachment objects with card results. A boolean
          value (true or false) or cover for only card cover attachments.
        paramKey: card_attachments
        in: query
        schema:
          type: string
          default: "false"
        required: false
      - paramName: organizationFields
        description: all or a comma-separated list of billableMemberCount, desc,
          descData, displayName, idBoards, invitations, invited, logoHash,
          memberships, name, powerUps, prefs, premiumFeatures, products, url,
          website
        paramKey: organization_fields
        in: query
        schema:
          type: string
          default: name,displayName
        required: false
      - paramName: organizationsLimit
        description: The maximum number of Workspaces to return. Maximum 1000
        paramKey: organizations_limit
        in: query
        schema:
          type: number
          default: "10"
        required: false
      - paramName: memberFields
        description: "all or a comma-separated list of: avatarHash, bio, bioData,
          confirmed, fullName, idPremOrgsAdmin, initials, memberType, products,
          status, url, username"
        paramKey: member_fields
        in: query
        schema:
          type: string
          default: avatarHash,fullName,initials,username,confirmed
        required: false
      - paramName: membersLimit
        description: The maximum number of members to return. Maximum 1000
        paramKey: members_limit
        in: query
        schema:
          type: number
          default: "10"
        required: false
      - paramName: partial
        description: By default, Trello searches for each word in your query against
          exactly matching words within Member content. Specifying partial to be
          true means that we will look for content that starts with any of the
          words in your query.  If you are looking for a Card titled "My
          Development Status Report", by default you would need to search for
          "Development". If you have partial enabled, you will be able to search
          for "dev" but not "velopment".
        paramKey: partial
        in: query
        schema:
          type: boolean
          default: false
        required: false
  - moduleName: Search / Members / Perform
    method: get
    path: /search/members/
    description: Search for Trello members.
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: get-search-members
    params:
      - paramName: query
        description: Search query 1 to 16384 characters long
        paramKey: query
        in: query
        schema:
          type: string
        required: true
      - paramName: limit
        description: The maximum number of results to return. Maximum of 20.
        paramKey: limit
        in: query
        schema:
          type: number
          maximum: 20
          default: 8
        required: false
      - paramName: idBoard
        description: ""
        paramKey: idBoard
        in: query
        schema:
          type: string
        required: false
      - paramName: idOrganization
        description: ""
        paramKey: idOrganization
        in: query
        schema:
          type: string
        required: false
      - paramName: onlyOrgMembers
        description: ""
        paramKey: onlyOrgMembers
        in: query
        schema:
          type: boolean
          default: false
        required: false
  - moduleName: Tokens / Get
    method: get
    path: /tokens/{token}
    description: Retrieve information about a token.
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: get-tokens-token
    params:
      - paramName: token
        description: ""
        paramKey: token
        in: path
        schema:
          type: string
        required: true
      - paramName: fields
        description: "`all` or a comma-separated list of `dateCreated`, `dateExpires`,
          `idMember`, `identifier`, `permissions`"
        paramKey: fields
        in: query
        schema:
          type: string
          enum:
            - identifier
            - idMember
            - dateCreated
            - dateExpires
            - permissions
        required: false
      - paramName: webhooks
        description: Determines whether to include webhooks.
        paramKey: webhooks
        in: query
        schema:
          type: boolean
          default: false
        required: false
  - moduleName: Tokens / Member / Get
    method: get
    path: /tokens/{token}/member
    description: Retrieve information about a token's owner by token.
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: get-tokens-token-member
    params:
      - paramName: token
        description: ""
        paramKey: token
        in: path
        schema:
          type: string
        required: true
      - paramName: fields
        description: "`all` or a comma-separated list of valid fields for [Member
          Object](/cloud/trello/guides/rest-api/object-definitions/)."
        paramKey: fields
        in: query
        schema:
          type: string
          enum:
            - id
        required: false
  - moduleName: Tokens / Webhooks / List
    method: get
    path: /tokens/{token}/webhooks
    description: Retrieve all webhooks created with a Token.
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: get-tokens-token-webhooks
    params:
      - paramName: token
        description: ""
        paramKey: token
        in: path
        schema:
          type: string
        required: true
  - moduleName: Tokens / Webhooks / Create
    method: post
    path: /tokens/{token}/webhooks
    description: Create a new webhook for a Token.
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: post-tokens-token-webhooks
    params:
      - paramName: token
        description: ""
        paramKey: token
        in: path
        schema:
          type: string
        required: true
      - paramName: description
        description: A description to be displayed when retrieving information about the
          webhook.
        paramKey: description
        in: query
        schema:
          type: string
        required: false
      - paramName: callbackUrl
        description: The URL that the webhook should POST information to.
        paramKey: callbackURL
        in: query
        schema:
          type: string
        required: true
      - paramName: idModel
        description: ID of the object to create a webhook on.
        paramKey: idModel
        in: query
        schema:
          type: string
        required: true
  - moduleName: Tokens / Webhooks / Get
    method: get
    path: /tokens/{token}/webhooks/{idWebhook}
    description: Retrieve a webhook created with a Token.
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: get-tokens-token-webhooks-idwebhook
    params:
      - paramName: token
        description: ""
        paramKey: token
        in: path
        schema:
          type: string
        required: true
      - paramName: idWebhook
        description: ID of the [Webhooks](ref:webhooks) to retrieve.
        paramKey: idWebhook
        in: path
        schema:
          type: string
        required: true
  - moduleName: Tokens / Webhooks / Delete
    method: delete
    path: /tokens/{token}/webhooks/{idWebhook}
    description: Delete a webhook created with given token.
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: delete-tokens-token-webhooks-idwebhook
    params:
      - paramName: token
        description: ""
        paramKey: token
        in: path
        schema:
          type: string
        required: true
      - paramName: idWebhook
        description: ID of the [Webhooks](ref:webhooks) to retrieve.
        paramKey: idWebhook
        in: path
        schema:
          type: string
        required: true
  - moduleName: Tokens / Webhooks / Update
    method: put
    path: /tokens/{token}/webhooks/{idWebhook}
    description: Update a Webhook created by Token
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: tokenstokenwebhooks-1
    params:
      - paramName: token
        description: ""
        paramKey: token
        in: path
        schema:
          type: string
        required: true
      - paramName: idWebhook
        description: ID of the [Webhooks](ref:webhooks) to retrieve.
        paramKey: idWebhook
        in: path
        schema:
          type: string
        required: true
      - paramName: description
        description: A description to be displayed when retrieving information about the
          webhook.
        paramKey: description
        in: query
        schema:
          type: string
        required: false
      - paramName: callbackUrl
        description: The URL that the webhook should `POST` information to.
        paramKey: callbackURL
        in: query
        schema:
          type: string
        required: false
      - paramName: idModel
        description: ID of the object that the webhook is on.
        paramKey: idModel
        in: query
        schema:
          type: string
        required: false
  - moduleName: Tokens / Delete
    method: delete
    path: /tokens/{token}/
    description: Delete a token.
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: delete-token
    params:
      - paramName: token
        description: ""
        paramKey: token
        in: path
        schema:
          type: string
        required: true
  - moduleName: Webhooks / Create
    method: post
    path: /webhooks/
    description: Create a new webhook.
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: post-webhooks
    params:
      - paramName: description
        description: A string with a length from `0` to `16384`.
        paramKey: description
        in: query
        schema:
          type: string
        required: false
      - paramName: callbackUrl
        description: A valid URL that is reachable with a `HEAD` and `POST` request.
        paramKey: callbackURL
        in: query
        schema:
          type: string
        required: true
      - paramName: idModel
        description: ID of the model to be monitored
        paramKey: idModel
        in: query
        schema:
          type: string
        required: true
      - paramName: active
        description: Determines whether the webhook is active and sending `POST` requests.
        paramKey: active
        in: query
        schema:
          type: boolean
        required: false
  - moduleName: Webhooks / Get
    method: get
    path: /webhooks/{id}
    description: Get a webhook by ID. You must use the token query parameter and
      pass in the token the webhook was created under, or else you will
      encounter a 'webhook does not belong to token' error.
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: get-webhooks-id
    params:
      - paramName: id
        description: ID of the webhook to retrieve.
        paramKey: id
        in: path
        schema:
          type: string
        required: true
  - moduleName: Webhooks / Update
    method: put
    path: /webhooks/{id}
    description: Update a webhook by ID.
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: put-webhooks-id
    params:
      - paramName: id
        description: ID of the webhook to retrieve.
        paramKey: id
        in: path
        schema:
          type: string
        required: true
      - paramName: description
        description: A string with a length from `0` to `16384`.
        paramKey: description
        in: query
        schema:
          type: string
        required: false
      - paramName: callbackUrl
        description: A valid URL that is reachable with a `HEAD` and `POST` request.
        paramKey: callbackURL
        in: query
        schema:
          type: string
        required: false
      - paramName: idModel
        description: ID of the model to be monitored
        paramKey: idModel
        in: query
        schema:
          type: string
        required: false
      - paramName: active
        description: Determines whether the webhook is active and sending `POST` requests.
        paramKey: active
        in: query
        schema:
          type: boolean
        required: false
  - moduleName: Webhooks / Delete
    method: delete
    path: /webhooks/{id}
    description: Delete a webhook by ID.
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: delete-webhooks-id
    params:
      - paramName: id
        description: ID of the webhook to retrieve.
        paramKey: id
        in: path
        schema:
          type: string
        required: true
  - moduleName: Webhooks / Field / Get
    method: get
    path: /webhooks/{id}/{field}
    description: Get a field on a Webhook
    externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
    operationId: webhooksidfield
    params:
      - paramName: id
        description: ID of the webhook.
        paramKey: id
        in: path
        schema:
          type: string
        required: true
      - paramName: field
        description: "Field to retrieve. One of: `active`, `callbackURL`, `description`,
          `idModel`"
        paramKey: field
        in: path
        schema:
          type: string
          enum:
            - active
            - callbackURL
            - description
            - idModel
            - consecutiveFailures
            - firstConsecutiveFailDate
        required: true

# --- Omitted due to lack of 'file' support ---

  # - moduleName: Members / Board Backgrounds / Create
  #   method: post
  #   path: /members/{id}/boardBackgrounds
  #   description: Upload a new boardBackground
  #   externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
  #   params:
  #     - paramName: id
  #       description: The ID or username of the member
  #       paramKey: id
  #       in: path
  #       schema:
  #         type: string
  #       required: true
  #     - paramName: file
  #       description: ""
  #       paramKey: file
  #       in: query
  #       schema:
  #         type: string
  #       required: true
  # - moduleName: Members / Custom Board Backgrounds / Create
  #   method: post
  #   path: /members/{id}/customBoardBackgrounds
  #   description: Upload a new custom board background
  #   externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
  #   params:
  #     - paramName: id
  #       description: The ID or username of the member
  #       paramKey: id
  #       in: path
  #       schema:
  #         type: string
  #       required: true
  #     - paramName: file
  #       description: ""
  #       paramKey: file
  #       in: query
  #       schema:
  #         type: string
  #       required: true
  # - moduleName: Members / Custom Emoji / Create
  #   method: post
  #   path: /members/{id}/customEmoji
  #   description: Create a new custom Emoji
  #   externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
  #   params:
  #     - paramName: id
  #       description: The ID or username of the member
  #       paramKey: id
  #       in: path
  #       schema:
  #         type: string
  #       required: true
  #     - paramName: file
  #       description: ""
  #       paramKey: file
  #       in: query
  #       schema:
  #         type: string
  #       required: true
  #     - paramName: name
  #       description: Name for the emoji. 2 - 64 characters
  #       paramKey: name
  #       in: query
  #       schema:
  #         type: string
  #       required: true
  # - moduleName: Members / Custom Stickers / Create
  #   method: post
  #   path: /members/{id}/customStickers
  #   description: Upload a new custom sticker
  #   externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
  #   params:
  #     - paramName: id
  #       description: The ID or username of the member
  #       paramKey: id
  #       in: path
  #       schema:
  #         type: string
  #       required: true
  #     - paramName: file
  #       description: ""
  #       paramKey: file
  #       in: query
  #       schema:
  #         type: string
  #       required: true
  # - moduleName: Members / Avatar / Create
  #   method: post
  #   path: /members/{id}/avatar
  #   description: Create a new avatar for a member
  #   externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
  #   params:
  #     - paramName: id
  #       description: The ID or username of the member
  #       paramKey: id
  #       in: path
  #       schema:
  #         type: string
  #       required: true
  #     - paramName: file
  #       description: ""
  #       paramKey: file
  #       in: query
  #       schema:
  #         type: string
  #       required: true
  # - moduleName: Organizations / Logo / Create
  #   method: post
  #   path: /organizations/{id}/logo
  #   description: Set the logo image for a Workspace
  #   externalDocs: "https://developer.atlassian.com/cloud/trello/rest"
  #   params:
  #     - paramName: id
  #       description: The ID or name of the Workspace
  #       paramKey: id
  #       in: path
  #       schema:
  #         type: string
  #       required: true
  #     - paramName: file
  #       description: Image file for the logo
  #       paramKey: file
  #       in: query
  #       schema:
  #         type: string
  #       required: false
